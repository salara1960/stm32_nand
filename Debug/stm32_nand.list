
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002adc  0800d4e4  0800d4e4  0001d4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffc0  0800ffc0  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffc0  0800ffc0  0001ffc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffc8  0800ffc8  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffc8  0800ffc8  0001ffc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffcc  0800ffcc  0001ffcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800ffd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020120  2**0
                  CONTENTS
 10 .bss          00006900  20000120  20000120  00020120  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20006a20  20006a20  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ef3  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004262  00000000  00000000  00044043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  000482a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc6  00000000  00000000  00049df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002068a  00000000  00000000  0004fbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f78  00000000  00000000  00070248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001541c0  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001a28  00000000  00000000  00154210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007ce0  00000000  00000000  00155c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4cc 	.word	0x0800d4cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800d4cc 	.word	0x0800d4cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 ff57 	bl	8004b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f881 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e3 	bl	8000e40 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 ff83 	bl	8004b98 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xdc>)
 8000c98:	f004 fe22 	bl	80058e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0xe0>)
 8000ca4:	f004 fe1c 	bl	80058e0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 ff75 	bl	8004b98 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xdc>)
 8000cb4:	f004 fe14 	bl	80058e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xe0>)
 8000cc0:	f004 fe0e 	bl	80058e0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fe1d 	bl	8007914 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0xe8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0xec>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 fa95 	bl	8008212 <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000ce8:	f003 f988 	bl	8003ffc <ST7789_Reset>
  ST7789_Init(back_color);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0xf0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f99d 	bl	8004030 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf6:	f008 fbfd 	bl	80094f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <main+0xf4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 fcf1 	bl	80096e6 <osSemaphoreNew>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <main+0xf8>)
 8000d08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xfc>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f008 fd72 	bl	80097f8 <osMessageQueueNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <main+0x100>)
 8000d18:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x108>)
 8000d20:	f008 fc34 	bl	800958c <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <main+0x10c>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2a:	f008 fc09 	bl	8009540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 ff32 	bl	8004b98 <HAL_Delay>
 8000d34:	e7fb      	b.n	8000d2e <main+0xd2>
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	20000070 	.word	0x20000070
 8000d44:	20000074 	.word	0x20000074
 8000d48:	20001360 	.word	0x20001360
 8000d4c:	20001366 	.word	0x20001366
 8000d50:	0800fda0 	.word	0x0800fda0
 8000d54:	20000348 	.word	0x20000348
 8000d58:	0800fd88 	.word	0x0800fd88
 8000d5c:	20000344 	.word	0x20000344
 8000d60:	0800fd64 	.word	0x0800fd64
 8000d64:	08002cd9 	.word	0x08002cd9
 8000d68:	20000340 	.word	0x20000340

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b fdac 	bl	800c8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 ffa4 	bl	8005d40 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f002 ff65 	bl	8003ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fa05 	bl	8006230 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f002 ff4e 	bl	8003ccc <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_RTC_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e6c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e86:	f005 fd07 	bl	8006898 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e90:	f002 ff1c 	bl	8003ccc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000e98:	2334      	movs	r3, #52	; 0x34
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000eb0:	f005 fd68 	bl	8006984 <HAL_RTC_SetTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f002 ff07 	bl	8003ccc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000ed6:	f005 fe4d 	bl	8006b74 <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f002 fef4 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f92d 	bl	8002148 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000013c 	.word	0x2000013c
 8000efc:	40002800 	.word	0x40002800
 8000f00:	20000064 	.word	0x20000064

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f005 ff9d 	bl	8006e94 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f002 feb4 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000015c 	.word	0x2000015c
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f006 fc5d 	bl	8007874 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f002 fe84 	bl	8003ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 fe17 	bl	8007c04 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f002 fe76 	bl	8003ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f007 f833 	bl	8008058 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f002 fe68 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000214 	.word	0x20000214

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f007 f89a 	bl	8008178 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f002 fe3f 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000025c 	.word	0x2000025c
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 fe56 	bl	8004d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f003 fe6f 	bl	8004d88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f003 fe4e 	bl	8004d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f003 fe67 	bl	8004d88 <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 fba8 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 fba2 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 fb9d 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f004 f9f3 	bl	80055a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f004 f9e4 	bl	80055a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f004 f9d6 	bl	80055a8 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b58      	ldr	r3, [pc, #352]	; (800137c <MX_FSMC_Init+0x168>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b51      	ldr	r3, [pc, #324]	; (8001380 <MX_FSMC_Init+0x16c>)
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <MX_FSMC_Init+0x170>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_FSMC_Init+0x16c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <MX_FSMC_Init+0x16c>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <MX_FSMC_Init+0x16c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_FSMC_Init+0x16c>)
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <MX_FSMC_Init+0x16c>)
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012ba:	23fc      	movs	r3, #252	; 0xfc
 80012bc:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012c8:	f004 fb3d 	bl	8005946 <HAL_NAND_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012d2:	f002 fcfb 	bl	8003ccc <Error_Handler>

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
  if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

  if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <MX_FSMC_Init+0x174>)
 80012d8:	4829      	ldr	r0, [pc, #164]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012da:	f000 f861 	bl	80013a0 <NAND_Read_ID>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d147      	bne.n	8001374 <MX_FSMC_Init+0x160>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012e4:	4826      	ldr	r0, [pc, #152]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012e6:	f004 fcf7 	bl	8005cd8 <HAL_NAND_GetState>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_FSMC_Init+0x178>)
 80012f0:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <MX_FSMC_Init+0x17c>)
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012f6:	4615      	mov	r5, r2
 80012f8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001304:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_FSMC_Init+0x17c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d028      	beq.n	8001362 <MX_FSMC_Init+0x14e>
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_FSMC_Init+0x17c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001318:	d823      	bhi.n	8001362 <MX_FSMC_Init+0x14e>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_FSMC_Init+0x17c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	2001      	movs	r0, #1
 8001322:	f00b f9e3 	bl	800c6ec <calloc>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_FSMC_Init+0x180>)
 800132c:	601a      	str	r2, [r3, #0]
		  wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_FSMC_Init+0x17c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	2001      	movs	r0, #1
 8001336:	f00b f9d9 	bl	800c6ec <calloc>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_FSMC_Init+0x184>)
 8001340:	601a      	str	r2, [r3, #0]

		  if (!rdBuf || !wrBuf) devError |= devMEM;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_FSMC_Init+0x180>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <MX_FSMC_Init+0x13e>
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_FSMC_Init+0x184>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <MX_FSMC_Init+0x15e>
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_FSMC_Init+0x188>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_FSMC_Init+0x188>)
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e007      	b.n	8001372 <MX_FSMC_Init+0x15e>
	  } else {
		  devError |= devNAND;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_FSMC_Init+0x188>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_FSMC_Init+0x188>)
 800136e:	701a      	strb	r2, [r3, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 8001370:	e000      	b.n	8001374 <MX_FSMC_Init+0x160>
		  if (!rdBuf || !wrBuf) devError |= devMEM;
 8001372:	bf00      	nop
}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	2000137c 	.word	0x2000137c
 8001380:	20000300 	.word	0x20000300
 8001384:	a0000060 	.word	0xa0000060
 8001388:	20001380 	.word	0x20001380
 800138c:	20000085 	.word	0x20000085
 8001390:	20001388 	.word	0x20001388
 8001394:	200013a0 	.word	0x200013a0
 8001398:	200013a4 	.word	0x200013a4
 800139c:	2000034c 	.word	0x2000034c

080013a0 <NAND_Read_ID>:
/* USER CODE BEGIN 4 */

//-----------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d101      	bne.n	80013ba <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	e059      	b.n	800146e <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d152      	bne.n	800146c <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <NAND_Read_ID+0x34>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e04c      	b.n	800146e <NAND_Read_ID+0xce>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <NAND_Read_ID+0xdc>)
 80013e6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013ea:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <NAND_Read_ID+0xdc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	2290      	movs	r2, #144	; 0x90
 80013f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013f8:	f3bf 8f4f 	dsb	sy
}
 80013fc:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <NAND_Read_ID+0xdc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800140a:	f3bf 8f4f 	dsb	sy
}
 800140e:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d123      	bne.n	8001460 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <NAND_Read_ID+0xdc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <NAND_Read_ID+0xdc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3310      	adds	r3, #16
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b2da      	uxtb	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	b2da      	uxtb	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	0e1b      	lsrs	r3, r3, #24
 800144a:	b2da      	uxtb	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20001368 	.word	0x20001368

08001480 <NAND_Read_Page_8bit>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Read_Page_8bit(NAND_HandleTypeDef *hnand,
									   NAND_AddressTypeDef *pAddress,
									   uint8_t *pBuffer,
                                       uint32_t NumPageToRead)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b090      	sub	sp, #64	; 0x40
 8001484:	af04      	add	r7, sp, #16
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
uint32_t numpagesread = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToRead;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	627b      	str	r3, [r7, #36]	; 0x24

	// Check the NAND controller state
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d101      	bne.n	80014aa <NAND_Read_Page_8bit+0x2a>
		return HAL_BUSY;
 80014a6:	2302      	movs	r3, #2
 80014a8:	e0ed      	b.n	8001686 <NAND_Read_Page_8bit+0x206>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	f040 80e6 	bne.w	8001684 <NAND_Read_Page_8bit+0x204>
		__HAL_LOCK(hnand);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <NAND_Read_Page_8bit+0x46>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e0df      	b.n	8001686 <NAND_Read_Page_8bit+0x206>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 80014d6:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <NAND_Read_Page_8bit+0x210>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	889b      	ldrh	r3, [r3, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	4618      	mov	r0, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	fb00 f303 	mul.w	r3, r0, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	440b      	add	r3, r1
 8001502:	623b      	str	r3, [r7, #32]

	    if (dbg > logOn)
 8001504:	4b63      	ldr	r3, [pc, #396]	; (8001694 <NAND_Read_Page_8bit+0x214>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	f240 80a4 	bls.w	8001656 <NAND_Read_Page_8bit+0x1d6>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    		  __func__,
				  nandaddress,
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001512:	461a      	mov	r2, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001518:	4619      	mov	r1, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800151e:	4618      	mov	r0, r3
 8001520:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <NAND_Read_Page_8bit+0x218>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	9303      	str	r3, [sp, #12]
 8001526:	9002      	str	r0, [sp, #8]
 8001528:	9101      	str	r1, [sp, #4]
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <NAND_Read_Page_8bit+0x21c>)
 8001530:	495b      	ldr	r1, [pc, #364]	; (80016a0 <NAND_Read_Page_8bit+0x220>)
 8001532:	2001      	movs	r0, #1
 8001534:	f000 ff02 	bl	800233c <Report>

	    // Page(s) read loop
	    while (nbpages && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)))) {
 8001538:	e08d      	b.n	8001656 <NAND_Read_Page_8bit+0x1d6>
	    	// Send read page command sequence
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001544:	f3bf 8f4f 	dsb	sy
}
 8001548:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001554:	f3bf 8f4f 	dsb	sy
}
 8001558:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.PageSize) > 512U) {
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001562:	d907      	bls.n	8001574 <NAND_Read_Page_8bit+0xf4>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800156e:	f3bf 8f4f 	dsb	sy
}
 8001572:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	0a1a      	lsrs	r2, r3, #8
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015aa:	d309      	bcc.n	80015c0 <NAND_Read_Page_8bit+0x140>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	0c1a      	lsrs	r2, r3, #16
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ba:	f3bf 8f4f 	dsb	sy
}
 80015be:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ca:	f3bf 8f4f 	dsb	sy
}
 80015ce:	bf00      	nop
	    	__DSB();


	    	if (hnand->Config.ExtraCommandEnable == ENABLE) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d123      	bne.n	8001622 <NAND_Read_Page_8bit+0x1a2>
	    		uint32_t tickstart = HAL_GetTick();
 80015da:	f003 fad1 	bl	8004b80 <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80015e0:	e011      	b.n	8001606 <NAND_Read_Page_8bit+0x186>
	    			if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 80015e2:	f003 facd 	bl	8004b80 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d909      	bls.n	8001606 <NAND_Read_Page_8bit+0x186>
	    				hnand->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2203      	movs	r2, #3
 80015f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    				__HAL_UNLOCK(hnand);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]
	    				return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e03f      	b.n	8001686 <NAND_Read_Page_8bit+0x206>
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f004 fb74 	bl	8005cf4 <HAL_NAND_Read_Status>
 800160c:	4603      	mov	r3, r0
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d1e7      	bne.n	80015e2 <NAND_Read_Page_8bit+0x162>
	    			}
	    		}

	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800161c:	f3bf 8f4f 	dsb	sy
}
 8001620:	bf00      	nop
	    		__DSB();
	    	}

	    	// Get Data into Buffer
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e008      	b.n	800163a <NAND_Read_Page_8bit+0x1ba>
	    		*buff++ = *(uint8_t *)deviceaddress;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	1c59      	adds	r1, r3, #1
 800162e:	6279      	str	r1, [r7, #36]	; 0x24
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	701a      	strb	r2, [r3, #0]
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3f1      	bcc.n	8001628 <NAND_Read_Page_8bit+0x1a8>
	    	}

	    	numpagesread++;// Increment read pages number
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	3301      	adds	r3, #1
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to read
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	3b01      	subs	r3, #1
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	3301      	adds	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)))) {
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <NAND_Read_Page_8bit+0x1f0>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	429a      	cmp	r2, r3
 800166c:	f4ff af65 	bcc.w	800153a <NAND_Read_Page_8bit+0xba>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <NAND_Read_Page_8bit+0x206>
	    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20001368 	.word	0x20001368
 8001694:	20000068 	.word	0x20000068
 8001698:	20000004 	.word	0x20000004
 800169c:	0800fdb0 	.word	0x0800fdb0
 80016a0:	0800d62c 	.word	0x0800d62c

080016a4 <NAND_Write_Page_8bit>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Write_Page_8bit(NAND_HandleTypeDef *hnand,
									    NAND_AddressTypeDef *pAddress,
									    uint8_t *pBuffer,
                                        uint32_t NumPageToWrite)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b090      	sub	sp, #64	; 0x40
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
uint32_t numpageswritten = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToWrite;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the NAND controller state */
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d101      	bne.n	80016ce <NAND_Write_Page_8bit+0x2a>
		return HAL_BUSY;
 80016ca:	2302      	movs	r3, #2
 80016cc:	e0eb      	b.n	80018a6 <NAND_Write_Page_8bit+0x202>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	f040 80e4 	bne.w	80018a4 <NAND_Write_Page_8bit+0x200>

	    __HAL_LOCK(hnand);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <NAND_Write_Page_8bit+0x46>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e0dd      	b.n	80018a6 <NAND_Write_Page_8bit+0x202>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2202      	movs	r2, #2
 80016f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 80016fa:	4b6d      	ldr	r3, [pc, #436]	; (80018b0 <NAND_Write_Page_8bit+0x20c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	889b      	ldrh	r3, [r3, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	885b      	ldrh	r3, [r3, #2]
 8001710:	4618      	mov	r0, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001716:	fb00 f303 	mul.w	r3, r0, r3
 800171a:	4413      	add	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	440b      	add	r3, r1
 8001726:	623b      	str	r3, [r7, #32]

	    if (dbg > logOn)
 8001728:	4b62      	ldr	r3, [pc, #392]	; (80018b4 <NAND_Write_Page_8bit+0x210>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	f240 80a2 	bls.w	8001876 <NAND_Write_Page_8bit+0x1d2>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    	      __func__,
	    		  nandaddress,
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001736:	461a      	mov	r2, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800173c:	4619      	mov	r1, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001742:	4618      	mov	r0, r3
 8001744:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <NAND_Write_Page_8bit+0x214>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	9303      	str	r3, [sp, #12]
 800174a:	9002      	str	r0, [sp, #8]
 800174c:	9101      	str	r1, [sp, #4]
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	4a5a      	ldr	r2, [pc, #360]	; (80018bc <NAND_Write_Page_8bit+0x218>)
 8001754:	495a      	ldr	r1, [pc, #360]	; (80018c0 <NAND_Write_Page_8bit+0x21c>)
 8001756:	2001      	movs	r0, #1
 8001758:	f000 fdf0 	bl	800233c <Report>

	    /* Page(s) write loop */
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 800175c:	e08b      	b.n	8001876 <NAND_Write_Page_8bit+0x1d2>
	    	/* Send write page command sequence */
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001768:	f3bf 8f4f 	dsb	sy
}
 800176c:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001778:	f3bf 8f4f 	dsb	sy
}
 800177c:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001788:	f3bf 8f4f 	dsb	sy
}
 800178c:	bf00      	nop
	    	__DSB();
	    	if (hnand->Config.PageSize > 512U) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001796:	d907      	bls.n	80017a8 <NAND_Write_Page_8bit+0x104>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017a2:	f3bf 8f4f 	dsb	sy
}
 80017a6:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ae:	6a3a      	ldr	r2, [r7, #32]
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017b4:	f3bf 8f4f 	dsb	sy
}
 80017b8:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	0a1a      	lsrs	r2, r3, #8
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017c8:	f3bf 8f4f 	dsb	sy
}
 80017cc:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017de:	d309      	bcc.n	80017f4 <NAND_Write_Page_8bit+0x150>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	0c1a      	lsrs	r2, r3, #16
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ee:	f3bf 8f4f 	dsb	sy
}
 80017f2:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	// Write data to memory
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e00b      	b.n	8001812 <NAND_Write_Page_8bit+0x16e>
	    		*(__IO uint8_t *)deviceaddress = *buff++;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	627a      	str	r2, [r7, #36]	; 0x24
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001806:	f3bf 8f4f 	dsb	sy
}
 800180a:	bf00      	nop
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	3301      	adds	r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3ee      	bcc.n	80017fa <NAND_Write_Page_8bit+0x156>
	    		__DSB();
	    	}

	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	2210      	movs	r2, #16
 8001824:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
	    	__DSB();

	    	uint32_t tickstart = HAL_GetTick();
 800182c:	f003 f9a8 	bl	8004b80 <HAL_GetTick>
 8001830:	6178      	str	r0, [r7, #20]
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001832:	e011      	b.n	8001858 <NAND_Write_Page_8bit+0x1b4>
	    		if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001834:	f003 f9a4 	bl	8004b80 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001842:	d909      	bls.n	8001858 <NAND_Write_Page_8bit+0x1b4>
	    			hnand->State = HAL_NAND_STATE_ERROR;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2203      	movs	r2, #3
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    			__HAL_UNLOCK(hnand);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]
	    			return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e026      	b.n	80018a6 <NAND_Write_Page_8bit+0x202>
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f004 fa4b 	bl	8005cf4 <HAL_NAND_Read_Status>
 800185e:	4603      	mov	r3, r0
 8001860:	2b40      	cmp	r3, #64	; 0x40
 8001862:	d1e7      	bne.n	8001834 <NAND_Write_Page_8bit+0x190>
	    		}
	    	}

	    	numpageswritten++;// Increment written pages number
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	3301      	adds	r3, #1
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to write
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	3b01      	subs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	3301      	adds	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <NAND_Write_Page_8bit+0x1ec>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	429a      	cmp	r2, r3
 800188c:	f4ff af67 	bcc.w	800175e <NAND_Write_Page_8bit+0xba>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <NAND_Write_Page_8bit+0x202>
	    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3730      	adds	r7, #48	; 0x30
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001368 	.word	0x20001368
 80018b4:	20000068 	.word	0x20000068
 80018b8:	20000004 	.word	0x20000004
 80018bc:	0800fdc4 	.word	0x0800fdc4
 80018c0:	0800d62c 	.word	0x0800d62c

080018c4 <pageIsEmpty>:
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	6078      	str	r0, [r7, #4]
bool ret = false;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 80018d2:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <pageIsEmpty+0x268>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d109      	bne.n	80018f4 <pageIsEmpty+0x30>

		devError |= devNAND;
 80018e0:	4b93      	ldr	r3, [pc, #588]	; (8001b30 <pageIsEmpty+0x26c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f043 0320 	orr.w	r3, r3, #32
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b91      	ldr	r3, [pc, #580]	; (8001b30 <pageIsEmpty+0x26c>)
 80018ec:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_BUSY;
 80018ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f2:	e117      	b.n	8001b24 <pageIsEmpty+0x260>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 80018f4:	4b8d      	ldr	r3, [pc, #564]	; (8001b2c <pageIsEmpty+0x268>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	f040 8107 	bne.w	8001b12 <pageIsEmpty+0x24e>

		__HAL_LOCK(nandPort);
 8001904:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <pageIsEmpty+0x268>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <pageIsEmpty+0x50>
 8001910:	2301      	movs	r3, #1
 8001912:	e107      	b.n	8001b24 <pageIsEmpty+0x260>
 8001914:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <pageIsEmpty+0x268>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 800191e:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <pageIsEmpty+0x268>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <pageIsEmpty+0x270>)
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <pageIsEmpty+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fbb2 f2f3 	udiv	r2, r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	fbb3 f1f2 	udiv	r1, r3, r2
 800193a:	fb01 f202 	mul.w	r2, r1, r2
 800193e:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001940:	b29b      	uxth	r3, r3
 8001942:	81bb      	strh	r3, [r7, #12]
 8001944:	2301      	movs	r3, #1
 8001946:	81fb      	strh	r3, [r7, #14]
			.Plane = 1,
			.Block = nand_PageToBlock(page)
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 f861 	bl	8002a10 <nand_PageToBlock>
 800194e:	4603      	mov	r3, r0
		NAND_AddressTypeDef pAddress = {
 8001950:	b29b      	uxth	r3, r3
 8001952:	823b      	strh	r3, [r7, #16]
		};

		uint32_t deviceaddress = devAdr;
 8001954:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <pageIsEmpty+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61fb      	str	r3, [r7, #28]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 800195a:	89bb      	ldrh	r3, [r7, #12]
 800195c:	4619      	mov	r1, r3
 800195e:	8a3b      	ldrh	r3, [r7, #16]
 8001960:	461a      	mov	r2, r3
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	4618      	mov	r0, r3
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <pageIsEmpty+0x268>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	fb00 f303 	mul.w	r3, r0, r3
 8001970:	4413      	add	r3, r2
 8001972:	4a6e      	ldr	r2, [pc, #440]	; (8001b2c <pageIsEmpty+0x268>)
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	440b      	add	r3, r1
 800197e:	61bb      	str	r3, [r7, #24]

		if (dbg > logOn)
 8001980:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <pageIsEmpty+0x278>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d911      	bls.n	80019ac <pageIsEmpty+0xe8>
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
				  __func__,
				  nandaddress,
				  pAddress.Page, pAddress.Plane, pAddress.Block, eol);
 8001988:	89bb      	ldrh	r3, [r7, #12]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800198a:	461a      	mov	r2, r3
				  pAddress.Page, pAddress.Plane, pAddress.Block, eol);
 800198c:	89fb      	ldrh	r3, [r7, #14]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800198e:	4619      	mov	r1, r3
				  pAddress.Page, pAddress.Plane, pAddress.Block, eol);
 8001990:	8a3b      	ldrh	r3, [r7, #16]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001992:	4618      	mov	r0, r3
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <pageIsEmpty+0x27c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	9303      	str	r3, [sp, #12]
 800199a:	9002      	str	r0, [sp, #8]
 800199c:	9101      	str	r1, [sp, #4]
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	4a68      	ldr	r2, [pc, #416]	; (8001b44 <pageIsEmpty+0x280>)
 80019a4:	4968      	ldr	r1, [pc, #416]	; (8001b48 <pageIsEmpty+0x284>)
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fcc8 	bl	800233c <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 80019ac:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <pageIsEmpty+0x268>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <pageIsEmpty+0x268>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	429a      	cmp	r2, r3
 80019c0:	f080 809a 	bcs.w	8001af8 <pageIsEmpty+0x234>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ce:	f3bf 8f4f 	dsb	sy
}
 80019d2:	bf00      	nop
			__DSB();

			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019de:	f3bf 8f4f 	dsb	sy
}
 80019e2:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 80019e4:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <pageIsEmpty+0x268>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ee:	d907      	bls.n	8001a00 <pageIsEmpty+0x13c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019fa:	f3bf 8f4f 	dsb	sy
}
 80019fe:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a0c:	f3bf 8f4f 	dsb	sy
}
 8001a10:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	0a1a      	lsrs	r2, r3, #8
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a20:	f3bf 8f4f 	dsb	sy
}
 8001a24:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <pageIsEmpty+0x268>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <pageIsEmpty+0x268>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d309      	bcc.n	8001a50 <pageIsEmpty+0x18c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	0c1a      	lsrs	r2, r3, #16
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4a:	f3bf 8f4f 	dsb	sy
}
 8001a4e:	bf00      	nop
				__DSB();
			}

			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	2230      	movs	r2, #48	; 0x30
 8001a58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a5a:	f3bf 8f4f 	dsb	sy
}
 8001a5e:	bf00      	nop
			__DSB();

			if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <pageIsEmpty+0x268>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d12f      	bne.n	8001acc <pageIsEmpty+0x208>
				uint32_t tickstart = HAL_GetTick();
 8001a6c:	f003 f888 	bl	8004b80 <HAL_GetTick>
 8001a70:	6178      	str	r0, [r7, #20]
				while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {// Read status until NAND is ready
 8001a72:	e01b      	b.n	8001aac <pageIsEmpty+0x1e8>
					if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001a74:	f003 f884 	bl	8004b80 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a82:	d913      	bls.n	8001aac <pageIsEmpty+0x1e8>
						nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <pageIsEmpty+0x268>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						__HAL_UNLOCK(nandPort);
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <pageIsEmpty+0x268>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2020 	strb.w	r2, [r3, #32]
						devError |= devNAND;//return HAL_TIMEOUT;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <pageIsEmpty+0x26c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <pageIsEmpty+0x26c>)
 8001aa4:	701a      	strb	r2, [r3, #0]
						return ret;
 8001aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aaa:	e03b      	b.n	8001b24 <pageIsEmpty+0x260>
				while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {// Read status until NAND is ready
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <pageIsEmpty+0x268>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 f91f 	bl	8005cf4 <HAL_NAND_Read_Status>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d1db      	bne.n	8001a74 <pageIsEmpty+0x1b0>
					}
				}
				// Go back to read mode
				*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac6:	f3bf 8f4f 	dsb	sy
}
 8001aca:	bf00      	nop
				__DSB();
			}

			ret = true;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	e009      	b.n	8001aec <pageIsEmpty+0x228>
				if (*(uint8_t *)deviceaddress != 0xff) {
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	d002      	beq.n	8001ae6 <pageIsEmpty+0x222>
					ret = false;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <pageIsEmpty+0x268>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	6a3a      	ldr	r2, [r7, #32]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3ef      	bcc.n	8001ad8 <pageIsEmpty+0x214>
				}
			}

		}

		nandPort->State = HAL_NAND_STATE_READY;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <pageIsEmpty+0x268>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <pageIsEmpty+0x268>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]
	} else {
		devError |= devNAND;
		return ret;
	}

	return ret;
 8001b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b10:	e008      	b.n	8001b24 <pageIsEmpty+0x260>
		devError |= devNAND;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <pageIsEmpty+0x26c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <pageIsEmpty+0x26c>)
 8001b1e:	701a      	strb	r2, [r3, #0]
		return ret;
 8001b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000078 	.word	0x20000078
 8001b30:	2000034c 	.word	0x2000034c
 8001b34:	20001388 	.word	0x20001388
 8001b38:	20001368 	.word	0x20001368
 8001b3c:	20000068 	.word	0x20000068
 8001b40:	20000004 	.word	0x20000004
 8001b44:	0800fddc 	.word	0x0800fddc
 8001b48:	0800d62c 	.word	0x0800d62c

08001b4c <areaIsEmpty>:
//-----------------------------------------------------------------------------
//           Check: area only in one page is empty ?
//
bool areaIsEmpty(uint32_t adr, uint32_t len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b094      	sub	sp, #80	; 0x50
 8001b50:	af08      	add	r7, sp, #32
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
bool ret = false;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint32_t shift = adr - devAdr;
 8001b5c:	4b97      	ldr	r3, [pc, #604]	; (8001dbc <areaIsEmpty+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	623b      	str	r3, [r7, #32]
uint32_t page = shift / nandPort->Config.PageSize;
 8001b66:	4b96      	ldr	r3, [pc, #600]	; (8001dc0 <areaIsEmpty+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	61fb      	str	r3, [r7, #28]
uint32_t block = nand_PageToBlock(page);
 8001b74:	69f8      	ldr	r0, [r7, #28]
 8001b76:	f000 ff4b 	bl	8002a10 <nand_PageToBlock>
 8001b7a:	61b8      	str	r0, [r7, #24]


	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001b7c:	4b90      	ldr	r3, [pc, #576]	; (8001dc0 <areaIsEmpty+0x274>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d109      	bne.n	8001b9e <areaIsEmpty+0x52>
		devError |= devNAND;
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <areaIsEmpty+0x278>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <areaIsEmpty+0x278>)
 8001b96:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_BUSY;
 8001b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b9c:	e10a      	b.n	8001db4 <areaIsEmpty+0x268>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001b9e:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <areaIsEmpty+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	f040 80fa 	bne.w	8001da2 <areaIsEmpty+0x256>
		//
		shift %= nandPort->Config.PageSize;
 8001bae:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <areaIsEmpty+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bba:	fb01 f202 	mul.w	r2, r1, r2
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	623b      	str	r3, [r7, #32]
		uint32_t dlin = shift + len;
 8001bc2:	6a3a      	ldr	r2, [r7, #32]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (dlin > nandPort->Config.PageSize)  dlin = nandPort->Config.PageSize - shift;
 8001bca:	4b7d      	ldr	r3, [pc, #500]	; (8001dc0 <areaIsEmpty+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d905      	bls.n	8001be2 <areaIsEmpty+0x96>
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	; (8001dc0 <areaIsEmpty+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
		//
		__HAL_LOCK(nandPort);
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <areaIsEmpty+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <areaIsEmpty+0xa6>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0e0      	b.n	8001db4 <areaIsEmpty+0x268>
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <areaIsEmpty+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001bfc:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <areaIsEmpty+0x274>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001c06:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <areaIsEmpty+0x27c>)
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <areaIsEmpty+0x27c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c18:	fb01 f202 	mul.w	r2, r1, r2
 8001c1c:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	813b      	strh	r3, [r7, #8]
 8001c22:	2301      	movs	r3, #1
 8001c24:	817b      	strh	r3, [r7, #10]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	81bb      	strh	r3, [r7, #12]
			.Plane = 1,
			.Block = block
		};
		uint32_t deviceaddress = devAdr;
 8001c2c:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <areaIsEmpty+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 8001c32:	893b      	ldrh	r3, [r7, #8]
 8001c34:	4619      	mov	r1, r3
 8001c36:	89bb      	ldrh	r3, [r7, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	897b      	ldrh	r3, [r7, #10]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4b60      	ldr	r3, [pc, #384]	; (8001dc0 <areaIsEmpty+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	fb00 f303 	mul.w	r3, r0, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a5d      	ldr	r2, [pc, #372]	; (8001dc0 <areaIsEmpty+0x274>)
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	440b      	add	r3, r1
 8001c56:	613b      	str	r3, [r7, #16]

		if (dbg > logOn)
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <areaIsEmpty+0x280>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d91a      	bls.n	8001c96 <areaIsEmpty+0x14a>
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
				  __func__, nandaddress, adr, adr + len - 1, len, shift, dlin - 1, page, block, eol);
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	4958      	ldr	r1, [pc, #352]	; (8001dd0 <areaIsEmpty+0x284>)
 8001c6e:	6809      	ldr	r1, [r1, #0]
 8001c70:	9107      	str	r1, [sp, #28]
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	9106      	str	r1, [sp, #24]
 8001c76:	69f9      	ldr	r1, [r7, #28]
 8001c78:	9105      	str	r1, [sp, #20]
 8001c7a:	9204      	str	r2, [sp, #16]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	9203      	str	r2, [sp, #12]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	9202      	str	r2, [sp, #8]
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <areaIsEmpty+0x288>)
 8001c8e:	4952      	ldr	r1, [pc, #328]	; (8001dd8 <areaIsEmpty+0x28c>)
 8001c90:	2001      	movs	r0, #1
 8001c92:	f000 fb53 	bl	800233c <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <areaIsEmpty+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <areaIsEmpty+0x274>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d26d      	bcs.n	8001d88 <areaIsEmpty+0x23c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb6:	f3bf 8f4f 	dsb	sy
}
 8001cba:	bf00      	nop
			__DSB();
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc6:	f3bf 8f4f 	dsb	sy
}
 8001cca:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <areaIsEmpty+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd6:	d907      	bls.n	8001ce8 <areaIsEmpty+0x19c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce2:	f3bf 8f4f 	dsb	sy
}
 8001ce6:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf4:	f3bf 8f4f 	dsb	sy
}
 8001cf8:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	0a1a      	lsrs	r2, r3, #8
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d08:	f3bf 8f4f 	dsb	sy
}
 8001d0c:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <areaIsEmpty+0x274>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <areaIsEmpty+0x274>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d309      	bcc.n	8001d38 <areaIsEmpty+0x1ec>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	0c1a      	lsrs	r2, r3, #16
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d32:	f3bf 8f4f 	dsb	sy
}
 8001d36:	bf00      	nop
				__DSB();
			}
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	2230      	movs	r2, #48	; 0x30
 8001d40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d42:	f3bf 8f4f 	dsb	sy
}
 8001d46:	bf00      	nop
			__DSB();

			ret = true;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t byte;
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	e013      	b.n	8001d7c <areaIsEmpty+0x230>
				byte = *(uint8_t *)deviceaddress;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	73fb      	strb	r3, [r7, #15]
				if ((index >= shift) && (index < dlin)) {
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d309      	bcc.n	8001d76 <areaIsEmpty+0x22a>
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d205      	bcs.n	8001d76 <areaIsEmpty+0x22a>
					if (byte != 0xff) ret = false;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2bff      	cmp	r3, #255	; 0xff
 8001d6e:	d002      	beq.n	8001d76 <areaIsEmpty+0x22a>
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <areaIsEmpty+0x274>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d3e5      	bcc.n	8001d54 <areaIsEmpty+0x208>
				}
			}
		}
		//
		nandPort->State = HAL_NAND_STATE_READY;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <areaIsEmpty+0x274>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <areaIsEmpty+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	//
	return ret;
 8001d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001da0:	e008      	b.n	8001db4 <areaIsEmpty+0x268>
		devError |= devNAND;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <areaIsEmpty+0x278>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <areaIsEmpty+0x278>)
 8001dae:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_ERROR;
 8001db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20001368 	.word	0x20001368
 8001dc0:	20000078 	.word	0x20000078
 8001dc4:	2000034c 	.word	0x2000034c
 8001dc8:	20001388 	.word	0x20001388
 8001dcc:	20000068 	.word	0x20000068
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	0800fde8 	.word	0x0800fde8
 8001dd8:	0800d660 	.word	0x0800d660

08001ddc <get_qStat>:
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dc18      	bgt.n	8001e1c <get_qStat+0x40>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f113 0f06 	cmn.w	r3, #6
 8001df0:	db2a      	blt.n	8001e48 <get_qStat+0x6c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3306      	adds	r3, #6
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d826      	bhi.n	8001e48 <get_qStat+0x6c>
 8001dfa:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <get_qStat+0x24>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e41 	.word	0x08001e41
 8001e04:	08001e3d 	.word	0x08001e3d
 8001e08:	08001e39 	.word	0x08001e39
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	08001e31 	.word	0x08001e31
 8001e14:	08001e2d 	.word	0x08001e2d
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00e      	beq.n	8001e44 <get_qStat+0x68>
 8001e26:	e00f      	b.n	8001e48 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <get_qStat+0x7c>)
 8001e2a:	e00e      	b.n	8001e4a <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <get_qStat+0x80>)
 8001e2e:	e00c      	b.n	8001e4a <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <get_qStat+0x84>)
 8001e32:	e00a      	b.n	8001e4a <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <get_qStat+0x88>)
 8001e36:	e008      	b.n	8001e4a <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <get_qStat+0x8c>)
 8001e3a:	e006      	b.n	8001e4a <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <get_qStat+0x90>)
 8001e3e:	e004      	b.n	8001e4a <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <get_qStat+0x94>)
 8001e42:	e002      	b.n	8001e4a <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <get_qStat+0x98>)
 8001e46:	e000      	b.n	8001e4a <get_qStat+0x6e>
	}

	return "UnknownError";
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <get_qStat+0x9c>)
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	0800d6b0 	.word	0x0800d6b0
 8001e5c:	0800d6b8 	.word	0x0800d6b8
 8001e60:	0800d6c0 	.word	0x0800d6c0
 8001e64:	0800d6d0 	.word	0x0800d6d0
 8001e68:	0800d6e0 	.word	0x0800d6e0
 8001e6c:	0800d6f4 	.word	0x0800d6f4
 8001e70:	0800d704 	.word	0x0800d704
 8001e74:	0800d710 	.word	0x0800d710
 8001e78:	0800d724 	.word	0x0800d724

08001e7c <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d00a      	beq.n	8001ea2 <get_logName+0x26>
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	dc0a      	bgt.n	8001ea6 <get_logName+0x2a>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <get_logName+0x1e>
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d002      	beq.n	8001e9e <get_logName+0x22>
 8001e98:	e005      	b.n	8001ea6 <get_logName+0x2a>
		case logOff:
			return "logOff";
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <get_logName+0x38>)
 8001e9c:	e004      	b.n	8001ea8 <get_logName+0x2c>
		case logOn:
			return "logOn";
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <get_logName+0x3c>)
 8001ea0:	e002      	b.n	8001ea8 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <get_logName+0x40>)
 8001ea4:	e000      	b.n	8001ea8 <get_logName+0x2c>
	}

	return "???";
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <get_logName+0x44>)
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	0800d734 	.word	0x0800d734
 8001eb8:	0800d73c 	.word	0x0800d73c
 8001ebc:	0800d744 	.word	0x0800d744
 8001ec0:	0800d74c 	.word	0x0800d74c

08001ec4 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001ed0:	2330      	movs	r3, #48	; 0x30
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <hex2bin+0x28>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <hex2bin+0x2c>
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	e0b2      	b.n	8002056 <hex2bin+0x192>
    if (len > 8) len = 8;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d901      	bls.n	8001efa <hex2bin+0x36>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f1c3 0308 	rsb	r3, r3, #8
 8001f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001f04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f08:	f107 0210 	add.w	r2, r7, #16
 8001f0c:	4413      	add	r3, r2
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00a fcd2 	bl	800c8bc <memcpy>

    k = j = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001f26:	e090      	b.n	800204a <hex2bin+0x186>
        jk = j + 2;
 8001f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001f30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f38:	e066      	b.n	8002008 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f3e:	3328      	adds	r3, #40	; 0x28
 8001f40:	443b      	add	r3, r7
 8001f42:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f46:	2b2f      	cmp	r3, #47	; 0x2f
 8001f48:	d918      	bls.n	8001f7c <hex2bin+0xb8>
 8001f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f4e:	3328      	adds	r3, #40	; 0x28
 8001f50:	443b      	add	r3, r7
 8001f52:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f56:	2b39      	cmp	r3, #57	; 0x39
 8001f58:	d810      	bhi.n	8001f7c <hex2bin+0xb8>
 8001f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5e:	3328      	adds	r3, #40	; 0x28
 8001f60:	443b      	add	r3, r7
 8001f62:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	3a30      	subs	r2, #48	; 0x30
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	3328      	adds	r3, #40	; 0x28
 8001f74:	443b      	add	r3, r7
 8001f76:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001f7a:	e040      	b.n	8001ffe <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f80:	3328      	adds	r3, #40	; 0x28
 8001f82:	443b      	add	r3, r7
 8001f84:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f88:	2b60      	cmp	r3, #96	; 0x60
 8001f8a:	d918      	bls.n	8001fbe <hex2bin+0xfa>
 8001f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f90:	3328      	adds	r3, #40	; 0x28
 8001f92:	443b      	add	r3, r7
 8001f94:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f98:	2b66      	cmp	r3, #102	; 0x66
 8001f9a:	d810      	bhi.n	8001fbe <hex2bin+0xfa>
 8001f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa0:	3328      	adds	r3, #40	; 0x28
 8001fa2:	443b      	add	r3, r7
 8001fa4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	3a57      	subs	r2, #87	; 0x57
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	3328      	adds	r3, #40	; 0x28
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001fbc:	e01f      	b.n	8001ffe <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc2:	3328      	adds	r3, #40	; 0x28
 8001fc4:	443b      	add	r3, r7
 8001fc6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d917      	bls.n	8001ffe <hex2bin+0x13a>
 8001fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd2:	3328      	adds	r3, #40	; 0x28
 8001fd4:	443b      	add	r3, r7
 8001fd6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fda:	2b46      	cmp	r3, #70	; 0x46
 8001fdc:	d80f      	bhi.n	8001ffe <hex2bin+0x13a>
 8001fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe2:	3328      	adds	r3, #40	; 0x28
 8001fe4:	443b      	add	r3, r7
 8001fe6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	3a37      	subs	r2, #55	; 0x37
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	3328      	adds	r3, #40	; 0x28
 8001ff8:	443b      	add	r3, r7
 8001ffa:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002002:	3301      	adds	r3, #1
 8002004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002008:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800200c:	7ffb      	ldrb	r3, [r7, #31]
 800200e:	429a      	cmp	r2, r3
 8002010:	d393      	bcc.n	8001f3a <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8002012:	7b3b      	ldrb	r3, [r7, #12]
 8002014:	011a      	lsls	r2, r3, #4
 8002016:	7b7b      	ldrb	r3, [r7, #13]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8002020:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002024:	f1c3 0303 	rsb	r3, r3, #3
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	4313      	orrs	r3, r2
 8002034:	623b      	str	r3, [r7, #32]
        k++;
 8002036:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800203a:	3301      	adds	r3, #1
 800203c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8002040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002044:	3302      	adds	r3, #2
 8002046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800204a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800204e:	2b03      	cmp	r3, #3
 8002050:	f67f af6a 	bls.w	8001f28 <hex2bin+0x64>
    }

    return ret;
 8002054:	6a3b      	ldr	r3, [r7, #32]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
	if (on)
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002076:	4807      	ldr	r0, [pc, #28]	; (8002094 <errLedOn+0x34>)
 8002078:	f003 fc32 	bl	80058e0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 800207c:	e005      	b.n	800208a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <errLedOn+0x34>)
 8002086:	f003 fc2b 	bl	80058e0 <HAL_GPIO_WritePin>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020c00 	.word	0x40020c00

08002098 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	return secCounter;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <get_secCounter+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000350 	.word	0x20000350

080020b0 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	secCounter++;
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <inc_secCounter+0x18>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <inc_secCounter+0x18>)
 80020bc:	6013      	str	r3, [r2, #0]
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000350 	.word	0x20000350

080020cc <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	return msCounter;
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <get_msCounter+0x18>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000358 	.word	0x20000358

080020e8 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	msCounter++;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <inc_msCounter+0x20>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	1c50      	adds	r0, r2, #1
 80020f4:	f143 0100 	adc.w	r1, r3, #0
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <inc_msCounter+0x20>)
 80020fa:	e9c3 0100 	strd	r0, r1, [r3]
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20000358 	.word	0x20000358

0800210c <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002114:	f7ff ffc0 	bl	8002098 <get_secCounter>
 8002118:	4602      	mov	r2, r0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800212e:	f7ff ffb3 	bl	8002098 <get_secCounter>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4293      	cmp	r3, r2
 8002138:	bf94      	ite	ls
 800213a:	2301      	movls	r3, #1
 800213c:	2300      	movhi	r3, #0
 800213e:	b2db      	uxtb	r3, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	; 0x50
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	2000      	movs	r0, #0
 8002154:	460a      	mov	r2, r1
 8002156:	4603      	mov	r3, r0
 8002158:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 800215c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f00a face 	bl	800c708 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 800216c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216e:	b2db      	uxtb	r3, r3
 8002170:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 800217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217e:	b2db      	uxtb	r3, r3
 8002180:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002184:	b2db      	uxtb	r3, r3
 8002186:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <set_Date+0xb0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4413      	add	r3, r2
 8002192:	b2db      	uxtb	r3, r3
 8002194:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	b2db      	uxtb	r3, r3
 800219a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4814      	ldr	r0, [pc, #80]	; (80021fc <set_Date+0xb4>)
 80021ac:	f004 fbea 	bl	8006984 <HAL_RTC_SetTime>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <set_Date+0x7e>
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <set_Date+0xb8>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <set_Date+0xb8>)
 80021c2:	701a      	strb	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80021c4:	e014      	b.n	80021f0 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	480b      	ldr	r0, [pc, #44]	; (80021fc <set_Date+0xb4>)
 80021d0:	f004 fcd0 	bl	8006b74 <HAL_RTC_SetDate>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <set_Date+0xa2>
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <set_Date+0xb8>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <set_Date+0xb8>)
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	e002      	b.n	80021f0 <set_Date+0xa8>
			setDate = true;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <set_Date+0xbc>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3750      	adds	r7, #80	; 0x50
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20001365 	.word	0x20001365
 80021fc:	2000013c 	.word	0x2000013c
 8002200:	2000034c 	.word	0x2000034c
 8002204:	20001364 	.word	0x20001364

08002208 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b093      	sub	sp, #76	; 0x4c
 800220c:	af04      	add	r7, sp, #16
 800220e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <sec2str+0x110>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002222:	f7ff ff39 	bl	8002098 <get_secCounter>
 8002226:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	4a3c      	ldr	r2, [pc, #240]	; (800231c <sec2str+0x114>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	4a39      	ldr	r2, [pc, #228]	; (800231c <sec2str+0x114>)
 8002238:	fba2 1203 	umull	r1, r2, r2, r3
 800223c:	0c12      	lsrs	r2, r2, #16
 800223e:	4938      	ldr	r1, [pc, #224]	; (8002320 <sec2str+0x118>)
 8002240:	fb01 f202 	mul.w	r2, r1, r2
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	4a36      	ldr	r2, [pc, #216]	; (8002324 <sec2str+0x11c>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0adb      	lsrs	r3, r3, #11
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <sec2str+0x11c>)
 8002258:	fba2 1203 	umull	r1, r2, r2, r3
 800225c:	0ad2      	lsrs	r2, r2, #11
 800225e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002262:	fb01 f202 	mul.w	r2, r1, r2
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	4a2e      	ldr	r2, [pc, #184]	; (8002328 <sec2str+0x120>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <sec2str+0x120>)
 800227a:	fba3 1302 	umull	r1, r3, r3, r2
 800227e:	0959      	lsrs	r1, r3, #5
 8002280:	460b      	mov	r3, r1
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a5b      	subs	r3, r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	4924      	ldr	r1, [pc, #144]	; (800232c <sec2str+0x124>)
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f00a fc94 	bl	800cbc8 <siprintf>
 80022a0:	6378      	str	r0, [r7, #52]	; 0x34
 80022a2:	e034      	b.n	800230e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4820      	ldr	r0, [pc, #128]	; (8002330 <sec2str+0x128>)
 80022ae:	f004 fce5 	bl	8006c7c <HAL_RTC_GetDate>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <sec2str+0xc0>
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <sec2str+0x12c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <sec2str+0x12c>)
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e022      	b.n	800230e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	2200      	movs	r2, #0
 80022ce:	4619      	mov	r1, r3
 80022d0:	4817      	ldr	r0, [pc, #92]	; (8002330 <sec2str+0x128>)
 80022d2:	f004 fbf1 	bl	8006ab8 <HAL_RTC_GetTime>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <sec2str+0xe4>
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <sec2str+0x12c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <sec2str+0x12c>)
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e010      	b.n	800230e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80022ec:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80022ee:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80022f0:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80022f2:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80022f4:	7c3b      	ldrb	r3, [r7, #16]
 80022f6:	7c7a      	ldrb	r2, [r7, #17]
 80022f8:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80022fa:	9102      	str	r1, [sp, #8]
 80022fc:	9201      	str	r2, [sp, #4]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4623      	mov	r3, r4
 8002302:	4602      	mov	r2, r0
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <sec2str+0x130>)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f00a fc5e 	bl	800cbc8 <siprintf>
 800230c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002310:	4618      	mov	r0, r3
 8002312:	373c      	adds	r7, #60	; 0x3c
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	20001364 	.word	0x20001364
 800231c:	c22e4507 	.word	0xc22e4507
 8002320:	00015180 	.word	0x00015180
 8002324:	91a2b3c5 	.word	0x91a2b3c5
 8002328:	88888889 	.word	0x88888889
 800232c:	0800d750 	.word	0x0800d750
 8002330:	2000013c 	.word	0x2000013c
 8002334:	2000034c 	.word	0x2000034c
 8002338:	0800d768 	.word	0x0800d768

0800233c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 800233c:	b40e      	push	{r1, r2, r3}
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234c:	613b      	str	r3, [r7, #16]
int dl = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <Report+0xb4>)
 8002354:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <Report+0x48>
		dl = sec2str(buf);
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff ff50 	bl	8002208 <sec2str>
 8002368:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7fd ff30 	bl	80001d0 <strlen>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <Report+0xb8>)
 800237a:	6810      	ldr	r0, [r2, #0]
 800237c:	6018      	str	r0, [r3, #0]
		dl += 3;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3303      	adds	r3, #3
 8002382:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002388:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	18d0      	adds	r0, r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	1ad1      	subs	r1, r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239a:	f00a fd3b 	bl	800ce14 <vsniprintf>

	uartRdy = false;
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <Report+0xbc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <Report+0xc0>)
 80023a6:	681c      	ldr	r4, [r3, #0]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7fd ff11 	bl	80001d0 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	4620      	mov	r0, r4
 80023b8:	f005 ff5c 	bl	8008274 <HAL_UART_Transmit_DMA>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <Report+0x94>
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <Report+0xc4>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <Report+0xc4>)
 80023ce:	701a      	strb	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80023d0:	bf00      	nop
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <Report+0xbc>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f8      	bne.n	80023d2 <Report+0x96>

	va_end(args);

	return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023ec:	b003      	add	sp, #12
 80023ee:	4770      	bx	lr
 80023f0:	20000360 	.word	0x20000360
 80023f4:	0800d784 	.word	0x0800d784
 80023f8:	20000060 	.word	0x20000060
 80023fc:	20000074 	.word	0x20000074
 8002400:	2000034c 	.word	0x2000034c

08002404 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b090      	sub	sp, #64	; 0x40
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4aa5      	ldr	r2, [pc, #660]	; (80026a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f040 82a6 	bne.w	8002964 <HAL_UART_RxCpltCallback+0x560>

		rxBuf[ruk++] = (char)rxByte;
 8002418:	4ba4      	ldr	r3, [pc, #656]	; (80026ac <HAL_UART_RxCpltCallback+0x2a8>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	b291      	uxth	r1, r2
 8002420:	4aa2      	ldr	r2, [pc, #648]	; (80026ac <HAL_UART_RxCpltCallback+0x2a8>)
 8002422:	8011      	strh	r1, [r2, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4ba2      	ldr	r3, [pc, #648]	; (80026b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002428:	7819      	ldrb	r1, [r3, #0]
 800242a:	4ba2      	ldr	r3, [pc, #648]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b0>)
 800242c:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 800242e:	4ba0      	ldr	r3, [pc, #640]	; (80026b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b0a      	cmp	r3, #10
 8002434:	f040 8291 	bne.w	800295a <HAL_UART_RxCpltCallback+0x556>
			rxBuf[--ruk] = '\0';
 8002438:	4b9c      	ldr	r3, [pc, #624]	; (80026ac <HAL_UART_RxCpltCallback+0x2a8>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b9a      	ldr	r3, [pc, #616]	; (80026ac <HAL_UART_RxCpltCallback+0x2a8>)
 8002442:	801a      	strh	r2, [r3, #0]
 8002444:	4b99      	ldr	r3, [pc, #612]	; (80026ac <HAL_UART_RxCpltCallback+0x2a8>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b9a      	ldr	r3, [pc, #616]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b0>)
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800245a:	4b97      	ldr	r3, [pc, #604]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002460:	2300      	movs	r3, #0
 8002462:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002464:	4893      	ldr	r0, [pc, #588]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002466:	f7fd feb3 	bl	80001d0 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	2b03      	cmp	r3, #3
 800246e:	f240 826e 	bls.w	800294e <HAL_UART_RxCpltCallback+0x54a>
				int8_t idx = -1;
 8002472:	23ff      	movs	r3, #255	; 0xff
 8002474:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800247e:	e018      	b.n	80024b2 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002480:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002484:	4a8d      	ldr	r2, [pc, #564]	; (80026bc <HAL_UART_RxCpltCallback+0x2b8>)
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	4619      	mov	r1, r3
 800248c:	4889      	ldr	r0, [pc, #548]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b0>)
 800248e:	f00a fbf2 	bl	800cc76 <strstr>
 8002492:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <HAL_UART_RxCpltCallback+0xa0>
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"check:"
														  //"area:"
														  //"save:"
						idx = i;
 800249a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800249e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 80024a2:	e00a      	b.n	80024ba <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 80024a4:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80024b2:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80024b6:	2b0a      	cmp	r3, #10
 80024b8:	dde2      	ble.n	8002480 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024bc:	4a7d      	ldr	r2, [pc, #500]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f040 8245 	bne.w	800294e <HAL_UART_RxCpltCallback+0x54a>
 80024c4:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024cc:	f000 823f 	beq.w	800294e <HAL_UART_RxCpltCallback+0x54a>
					nandLen = MAX_LEN_DATA;//256;
 80024d0:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_UART_RxCpltCallback+0x2bc>)
 80024d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d6:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 80024d8:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80024dc:	4a77      	ldr	r2, [pc, #476]	; (80026bc <HAL_UART_RxCpltCallback+0x2b8>)
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe74 	bl	80001d0 <strlen>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ec:	4413      	add	r3, r2
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 80024fc:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002500:	2b0a      	cmp	r3, #10
 8002502:	f200 81e0 	bhi.w	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
 8002506:	a201      	add	r2, pc, #4	; (adr r2, 800250c <HAL_UART_RxCpltCallback+0x108>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	08002547 	.word	0x08002547
 8002510:	08002555 	.word	0x08002555
 8002514:	080025c9 	.word	0x080025c9
 8002518:	0800264b 	.word	0x0800264b
 800251c:	0800267d 	.word	0x0800267d
 8002520:	080027f3 	.word	0x080027f3
 8002524:	0800282f 	.word	0x0800282f
 8002528:	0800267d 	.word	0x0800267d
 800252c:	0800267d 	.word	0x0800267d
 8002530:	08002867 	.word	0x08002867
 8002534:	08002539 	.word	0x08002539
						case cmdHelp:
							qcmd.cmd = idx;
 8002538:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800253c:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 800253e:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
						break;
 8002544:	e1bf      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						case cmdRestart:
							qcmd.cmd = idx;
 8002546:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800254a:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 800254c:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
						break;
 8002552:	e1b8      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						case cmdEpoch:
							qcmd.cmd = idx;
 8002554:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002558:	773b      	strb	r3, [r7, #28]
							if (*uk == '?') {
 800255a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b3f      	cmp	r3, #63	; 0x3f
 8002560:	d105      	bne.n	800256e <HAL_UART_RxCpltCallback+0x16a>
								qcmd.attr = 1;
 8002562:	2301      	movs	r3, #1
 8002564:	777b      	strb	r3, [r7, #29]
								cmd_flag = 1;
 8002566:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
									cmd_flag = 1;
								}
							}
						break;
 800256c:	e1ab      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
								if (strlen(uk) < 10) {
 800256e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002570:	f7fd fe2e 	bl	80001d0 <strlen>
 8002574:	4603      	mov	r3, r0
 8002576:	2b09      	cmp	r3, #9
 8002578:	d803      	bhi.n	8002582 <HAL_UART_RxCpltCallback+0x17e>
									setDate = false;
 800257a:	4b52      	ldr	r3, [pc, #328]	; (80026c4 <HAL_UART_RxCpltCallback+0x2c0>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
						break;
 8002580:	e1a1      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
									uki = strchr(uk, ':');
 8002582:	213a      	movs	r1, #58	; 0x3a
 8002584:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002586:	f00a fb4e 	bl	800cc26 <strchr>
 800258a:	6378      	str	r0, [r7, #52]	; 0x34
									if (uki) {
 800258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_UART_RxCpltCallback+0x1a8>
										tZone = (uint8_t)atol(uki + 1);
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	3301      	adds	r3, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f00a f8a4 	bl	800c6e4 <atol>
 800259c:	4603      	mov	r3, r0
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <HAL_UART_RxCpltCallback+0x2c4>)
 80025a2:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e002      	b.n	80025b2 <HAL_UART_RxCpltCallback+0x1ae>
										tZone = 0;
 80025ac:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_UART_RxCpltCallback+0x2c4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
									epoch = (uint32_t)atol(uk);
 80025b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025b4:	f00a f896 	bl	800c6e4 <atol>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_UART_RxCpltCallback+0x2c8>)
 80025be:	601a      	str	r2, [r3, #0]
									cmd_flag = 1;
 80025c0:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b4>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
						break;
 80025c6:	e17e      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 80025c8:	213a      	movs	r1, #58	; 0x3a
 80025ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025cc:	f00a fb2b 	bl	800cc26 <strchr>
 80025d0:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_UART_RxCpltCallback+0x1ec>
								nandLen = atol(uki + 1);
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	3301      	adds	r3, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f00a f881 	bl	800c6e4 <atol>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_UART_RxCpltCallback+0x2bc>)
 80025e8:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 80025ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 80025f0:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_UART_RxCpltCallback+0x2cc>)
 80025f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025f4:	f00a fb3f 	bl	800cc76 <strstr>
 80025f8:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80025fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00f      	beq.n	8002620 <HAL_UART_RxCpltCallback+0x21c>
								uki += 2;
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	3302      	adds	r3, #2
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 8002606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002608:	f7fd fde2 	bl	80001d0 <strlen>
 800260c:	4603      	mov	r3, r0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4619      	mov	r1, r3
 8002612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002614:	f7ff fc56 	bl	8001ec4 <hex2bin>
 8002618:	4603      	mov	r3, r0
 800261a:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e006      	b.n	800262e <HAL_UART_RxCpltCallback+0x22a>
							} else {
								nandAdr = atol(uk);
 8002620:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002622:	f00a f85f 	bl	800c6e4 <atol>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 800262c:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 800263a:	6013      	str	r3, [r2, #0]
							check = true;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = idx;
 8002642:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002646:	773b      	strb	r3, [r7, #28]
						break;
 8002648:	e13d      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d203      	bcs.n	800265e <HAL_UART_RxCpltCallback+0x25a>
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 800265c:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_UART_RxCpltCallback+0x2bc>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4413      	add	r3, r2
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d0>)
 800266c:	6013      	str	r3, [r2, #0]
							check = true;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = idx;
 8002674:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002678:	773b      	strb	r3, [r7, #28]
						break;
 800267a:	e124      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdArea://"area:'0x0:0x55:256'" //adr:byte:len
						case cmdSave://"save:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 8002682:	4913      	ldr	r1, [pc, #76]	; (80026d0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002684:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002686:	f00a faf6 	bl	800cc76 <strstr>
 800268a:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	2b00      	cmp	r3, #0
 8002690:	d024      	beq.n	80026dc <HAL_UART_RxCpltCallback+0x2d8>
								if (uki == uk) {
 8002692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	429a      	cmp	r2, r3
 8002698:	d122      	bne.n	80026e0 <HAL_UART_RxCpltCallback+0x2dc>
									uki += 2;
 800269a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269c:	3302      	adds	r3, #2
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026a6:	e01b      	b.n	80026e0 <HAL_UART_RxCpltCallback+0x2dc>
 80026a8:	40004800 	.word	0x40004800
 80026ac:	20001362 	.word	0x20001362
 80026b0:	20001360 	.word	0x20001360
 80026b4:	20000b60 	.word	0x20000b60
 80026b8:	2000034d 	.word	0x2000034d
 80026bc:	20000008 	.word	0x20000008
 80026c0:	20001370 	.word	0x20001370
 80026c4:	20001364 	.word	0x20001364
 80026c8:	20001365 	.word	0x20001365
 80026cc:	20000064 	.word	0x20000064
 80026d0:	0800d788 	.word	0x0800d788
 80026d4:	2000136c 	.word	0x2000136c
 80026d8:	20001368 	.word	0x20001368
								}
							} else uki = uk;
 80026dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 80026e0:	213a      	movs	r1, #58	; 0x3a
 80026e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026e4:	f00a fa9f 	bl	800cc26 <strchr>
 80026e8:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80e7 	beq.w	80028c0 <HAL_UART_RxCpltCallback+0x4bc>
								ukb = uke + 1;
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	3301      	adds	r3, #1
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2210      	movs	r2, #16
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f00a f8e9 	bl	800c8d8 <memset>
								memcpy(tmp, uki, uke - uki);
 8002706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	461a      	mov	r2, r3
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002714:	4618      	mov	r0, r3
 8002716:	f00a f8d1 	bl	800c8bc <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 800271a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800271e:	2b00      	cmp	r3, #0
 8002720:	d010      	beq.n	8002744 <HAL_UART_RxCpltCallback+0x340>
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fd52 	bl	80001d0 <strlen>
 800272c:	4603      	mov	r3, r0
 800272e:	b2da      	uxtb	r2, r3
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fbc4 	bl	8001ec4 <hex2bin>
 800273c:	4603      	mov	r3, r0
 800273e:	4a8b      	ldr	r2, [pc, #556]	; (800296c <HAL_UART_RxCpltCallback+0x568>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e008      	b.n	8002756 <HAL_UART_RxCpltCallback+0x352>
								    else nandAdr = atol(tmp);
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4618      	mov	r0, r3
 800274a:	f009 ffcb 	bl	800c6e4 <atol>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b86      	ldr	r3, [pc, #536]	; (800296c <HAL_UART_RxCpltCallback+0x568>)
 8002754:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 800275a:	213a      	movs	r1, #58	; 0x3a
 800275c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800275e:	f00a fa62 	bl	800cc26 <strchr>
 8002762:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_UART_RxCpltCallback+0x37e>
									nandLen = atol(uke + 1);
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	3301      	adds	r3, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f009 ffb8 	bl	800c6e4 <atol>
 8002774:	4603      	mov	r3, r0
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b7d      	ldr	r3, [pc, #500]	; (8002970 <HAL_UART_RxCpltCallback+0x56c>)
 800277a:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002782:	497c      	ldr	r1, [pc, #496]	; (8002974 <HAL_UART_RxCpltCallback+0x570>)
 8002784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002786:	f00a fa76 	bl	800cc76 <strstr>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <HAL_UART_RxCpltCallback+0x39a>
									ukb += 2;
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	3302      	adds	r3, #2
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800279c:	e002      	b.n	80027a4 <HAL_UART_RxCpltCallback+0x3a0>
								} else hex = false;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 80027a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <HAL_UART_RxCpltCallback+0x3c4>
 80027ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ae:	f7fd fd0f 	bl	80001d0 <strlen>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4619      	mov	r1, r3
 80027b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ba:	f7ff fb83 	bl	8001ec4 <hex2bin>
 80027be:	4603      	mov	r3, r0
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_UART_RxCpltCallback+0x574>)
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e006      	b.n	80027d6 <HAL_UART_RxCpltCallback+0x3d2>
								    else nandByte = (uint8_t)atol(ukb);
 80027c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ca:	f009 ff8b 	bl	800c6e4 <atol>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b69      	ldr	r3, [pc, #420]	; (8002978 <HAL_UART_RxCpltCallback+0x574>)
 80027d4:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_UART_RxCpltCallback+0x568>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b68      	ldr	r3, [pc, #416]	; (800297c <HAL_UART_RxCpltCallback+0x578>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a62      	ldr	r2, [pc, #392]	; (800296c <HAL_UART_RxCpltCallback+0x568>)
 80027e2:	6013      	str	r3, [r2, #0]
								check = true;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								qcmd.cmd = idx;
 80027ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80027ee:	773b      	strb	r3, [r7, #28]
							}
						}
						break;
 80027f0:	e066      	b.n	80028c0 <HAL_UART_RxCpltCallback+0x4bc>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 80027f2:	4963      	ldr	r1, [pc, #396]	; (8002980 <HAL_UART_RxCpltCallback+0x57c>)
 80027f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027f6:	f00a fa3e 	bl	800cc76 <strstr>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_UART_RxCpltCallback+0x402>
								qcmd.attr = 1;
 8002800:	2301      	movs	r3, #1
 8002802:	777b      	strb	r3, [r7, #29]
 8002804:	e00c      	b.n	8002820 <HAL_UART_RxCpltCallback+0x41c>
							} else {
								uint32_t blk = atol(uk);
 8002806:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002808:	f009 ff6c 	bl	800c6e4 <atol>
 800280c:	4603      	mov	r3, r0
 800280e:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002810:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	429a      	cmp	r2, r3
 8002818:	d202      	bcs.n	8002820 <HAL_UART_RxCpltCallback+0x41c>
 800281a:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <HAL_UART_RxCpltCallback+0x584>)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	6013      	str	r3, [r2, #0]
							}
							qcmd.cmd = idx;
 8002820:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002824:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002826:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_UART_RxCpltCallback+0x588>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
						break;
 800282c:	e04b      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 800282e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002830:	f009 ff58 	bl	800c6e4 <atol>
 8002834:	4603      	mov	r3, r0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < ((chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr)) {//(128K / 2K) * 1024 = 65536
 8002838:	4b52      	ldr	r3, [pc, #328]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4b51      	ldr	r3, [pc, #324]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 8002846:	68d2      	ldr	r2, [r2, #12]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	429a      	cmp	r2, r3
 8002850:	d238      	bcs.n	80028c4 <HAL_UART_RxCpltCallback+0x4c0>
								nandPage = page;
 8002852:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_UART_RxCpltCallback+0x58c>)
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	6013      	str	r3, [r2, #0]
								qcmd.cmd = idx;
 8002858:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800285c:	773b      	strb	r3, [r7, #28]
								cmd_flag = 1;
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_UART_RxCpltCallback+0x588>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8002864:	e02e      	b.n	80028c4 <HAL_UART_RxCpltCallback+0x4c0>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8002866:	2303      	movs	r3, #3
 8002868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 800286c:	4949      	ldr	r1, [pc, #292]	; (8002994 <HAL_UART_RxCpltCallback+0x590>)
 800286e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002870:	f00a fa01 	bl	800cc76 <strstr>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_UART_RxCpltCallback+0x47e>
								lg = logOff;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002880:	e014      	b.n	80028ac <HAL_UART_RxCpltCallback+0x4a8>
							} else if (strstr(uk, "on")) {
 8002882:	4945      	ldr	r1, [pc, #276]	; (8002998 <HAL_UART_RxCpltCallback+0x594>)
 8002884:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002886:	f00a f9f6 	bl	800cc76 <strstr>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_UART_RxCpltCallback+0x494>
								lg = logOn;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002896:	e009      	b.n	80028ac <HAL_UART_RxCpltCallback+0x4a8>
							} else if (strstr(uk, "dump")) {
 8002898:	4940      	ldr	r1, [pc, #256]	; (800299c <HAL_UART_RxCpltCallback+0x598>)
 800289a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800289c:	f00a f9eb 	bl	800cc76 <strstr>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_RxCpltCallback+0x4a8>
								lg = logDump;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.cmd = idx;
 80028ac:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80028b0:	773b      	strb	r3, [r7, #28]
							qcmd.attr = lg;
 80028b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028b6:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_UART_RxCpltCallback+0x588>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
						}
						break;
 80028be:	e002      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x4c2>
						break;
 80028c4:	bf00      	nop
					}
					if (check) {
 80028c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d025      	beq.n	800291a <HAL_UART_RxCpltCallback+0x516>
						if ((nandAdr + nandLen) >= ((chipConf.BlockSize * chipConf.BlockNbr) + devAdr)) {
 80028ce:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_UART_RxCpltCallback+0x56c>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_UART_RxCpltCallback+0x568>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	441a      	add	r2, r3
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4929      	ldr	r1, [pc, #164]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 80028e0:	68c9      	ldr	r1, [r1, #12]
 80028e2:	fb03 f101 	mul.w	r1, r3, r1
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_UART_RxCpltCallback+0x578>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	440b      	add	r3, r1
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d311      	bcc.n	8002914 <HAL_UART_RxCpltCallback+0x510>
							nandLen = (chipConf.BlockSize * chipConf.BlockNbr) - nandAdr - 1;
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <HAL_UART_RxCpltCallback+0x580>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	fb12 f303 	smulbb	r3, r2, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_UART_RxCpltCallback+0x568>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_UART_RxCpltCallback+0x56c>)
 8002912:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_UART_RxCpltCallback+0x588>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_UART_RxCpltCallback+0x588>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_UART_RxCpltCallback+0x54a>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002922:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_UART_RxCpltCallback+0x59c>)
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f107 011c 	add.w	r1, r7, #28
 800292a:	2300      	movs	r3, #0
 800292c:	2205      	movs	r2, #5
 800292e:	f006 ffd7 	bl	80098e0 <osMessageQueuePut>
 8002932:	4603      	mov	r3, r0
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_UART_RxCpltCallback+0x5a0>)
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_UART_RxCpltCallback+0x5a0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_UART_RxCpltCallback+0x54a>
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_UART_RxCpltCallback+0x5a4>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_UART_RxCpltCallback+0x5a4>)
 800294c:	701a      	strb	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_UART_RxCpltCallback+0x5a8>)
 8002950:	2200      	movs	r2, #0
 8002952:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <HAL_UART_RxCpltCallback+0x5ac>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 800295a:	2201      	movs	r2, #1
 800295c:	4915      	ldr	r1, [pc, #84]	; (80029b4 <HAL_UART_RxCpltCallback+0x5b0>)
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f005 fc57 	bl	8008212 <HAL_UART_Receive_IT>
	}
}
 8002964:	bf00      	nop
 8002966:	3740      	adds	r7, #64	; 0x40
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000136c 	.word	0x2000136c
 8002970:	20001370 	.word	0x20001370
 8002974:	0800d788 	.word	0x0800d788
 8002978:	20000084 	.word	0x20000084
 800297c:	20001368 	.word	0x20001368
 8002980:	0800d78c 	.word	0x0800d78c
 8002984:	20001388 	.word	0x20001388
 8002988:	20001374 	.word	0x20001374
 800298c:	2000034d 	.word	0x2000034d
 8002990:	20001378 	.word	0x20001378
 8002994:	0800d790 	.word	0x0800d790
 8002998:	0800d794 	.word	0x0800d794
 800299c:	0800d798 	.word	0x0800d798
 80029a0:	20000344 	.word	0x20000344
 80029a4:	200013a8 	.word	0x200013a8
 80029a8:	2000034c 	.word	0x2000034c
 80029ac:	20001362 	.word	0x20001362
 80029b0:	20000b60 	.word	0x20000b60
 80029b4:	20001360 	.word	0x20001360

080029b8 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_UART_TxCpltCallback+0x24>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d102      	bne.n	80029d0 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_UART_TxCpltCallback+0x28>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
	}
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40004800 	.word	0x40004800
 80029e0:	20000060 	.word	0x20000060

080029e4 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <HAL_SPI_TxCpltCallback+0x24>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_SPI_TxCpltCallback+0x28>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
	}
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40013000 	.word	0x40013000
 8002a0c:	20000061 	.word	0x20000061

08002a10 <nand_PageToBlock>:
	}
}
*/
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <nand_PageToBlock+0x28>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	fb03 f202 	mul.w	r2, r3, r2
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <nand_PageToBlock+0x28>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20001388 	.word	0x20001388

08002a3c <emptyArea>:
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
}
//-------------------------------------------------------------------------------------------
/**/
int emptyArea(uint32_t addr, uint32_t len, uint8_t *buf, NAND_AddressTypeDef *nan)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b093      	sub	sp, #76	; 0x4c
 8002a40:	af08      	add	r7, sp, #32
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
int ret = -1;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t shift = (addr - devAdr) % chipConf.PageSize;
 8002a50:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <emptyArea+0x104>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <emptyArea+0x108>)
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a60:	fb01 f202 	mul.w	r2, r1, r2
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
uint32_t dlin = shift + len;
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	623b      	str	r3, [r7, #32]

	if (dlin > chipConf.PageSize)  dlin = chipConf.PageSize - shift;
 8002a70:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <emptyArea+0x108>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6a3a      	ldr	r2, [r7, #32]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d904      	bls.n	8002a84 <emptyArea+0x48>
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <emptyArea+0x108>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	623b      	str	r3, [r7, #32]
	//

	if (dbg > logOn)
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <emptyArea+0x10c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d91c      	bls.n	8002ac6 <emptyArea+0x8a>
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4413      	add	r3, r2
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6a3a      	ldr	r2, [r7, #32]
 8002a96:	3a01      	subs	r2, #1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	8809      	ldrh	r1, [r1, #0]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8002a9c:	4608      	mov	r0, r1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	8889      	ldrh	r1, [r1, #4]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4929      	ldr	r1, [pc, #164]	; (8002b4c <emptyArea+0x110>)
 8002aa6:	6809      	ldr	r1, [r1, #0]
 8002aa8:	9106      	str	r1, [sp, #24]
 8002aaa:	9405      	str	r4, [sp, #20]
 8002aac:	9004      	str	r0, [sp, #16]
 8002aae:	9203      	str	r2, [sp, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	9202      	str	r2, [sp, #8]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <emptyArea+0x114>)
 8002abe:	4925      	ldr	r1, [pc, #148]	; (8002b54 <emptyArea+0x118>)
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff fc3b 	bl	800233c <Report>

	//
	bool rt = false;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	77fb      	strb	r3, [r7, #31]
	if (NAND_Read_Page_8bit(nandPort, nan, buf, 1) != HAL_OK) {
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <emptyArea+0x11c>)
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	f7fe fcd4 	bl	8001480 <NAND_Read_Page_8bit>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <emptyArea+0xb2>
		devError |= devNAND;
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <emptyArea+0x120>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f043 0320 	orr.w	r3, r3, #32
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <emptyArea+0x120>)
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e01e      	b.n	8002b2c <emptyArea+0xf0>
	} else {
		//
		rt = true;
 8002aee:	2301      	movs	r3, #1
 8002af0:	77fb      	strb	r3, [r7, #31]
		uint8_t byte;
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e014      	b.n	8002b22 <emptyArea+0xe6>
			byte = *(buf + i);
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	74fb      	strb	r3, [r7, #19]
			if ((i >= shift) && (i < dlin)) {
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d308      	bcc.n	8002b1c <emptyArea+0xe0>
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d204      	bcs.n	8002b1c <emptyArea+0xe0>
				if (byte != 0xff) rt = false;
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2bff      	cmp	r3, #255	; 0xff
 8002b16:	d001      	beq.n	8002b1c <emptyArea+0xe0>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	77fb      	strb	r3, [r7, #31]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <emptyArea+0x108>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3e5      	bcc.n	8002af8 <emptyArea+0xbc>
			}
		}
		//
	}

	if (rt) ret = shift;
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <emptyArea+0xfa>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	372c      	adds	r7, #44	; 0x2c
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	20001368 	.word	0x20001368
 8002b44:	20001388 	.word	0x20001388
 8002b48:	20000068 	.word	0x20000068
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	0800fdf4 	.word	0x0800fdf4
 8002b54:	0800d7a0 	.word	0x0800d7a0
 8002b58:	20000078 	.word	0x20000078
 8002b5c:	2000034c 	.word	0x2000034c

08002b60 <showBuf>:
/**/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08e      	sub	sp, #56	; 0x38
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60ba      	str	r2, [r7, #8]
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002b72:	2320      	movs	r3, #32
 8002b74:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d10e      	bne.n	8002ba2 <showBuf+0x42>
		if (rd) {
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <showBuf+0x154>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <showBuf+0x154>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9c:	e001      	b.n	8002ba2 <showBuf+0x42>
		} else ind = max_ind;
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d271      	bcs.n	8002c8e <showBuf+0x12e>
		bool done = false;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bc6:	fb01 f202 	mul.w	r2, r1, r2
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <showBuf+0x76>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <showBuf+0x158>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002bdc:	e046      	b.n	8002c6c <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002bde:	4836      	ldr	r0, [pc, #216]	; (8002cb8 <showBuf+0x158>)
 8002be0:	f7fd faf6 	bl	80001d0 <strlen>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <showBuf+0x158>)
 8002be8:	4413      	add	r3, r2
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4933      	ldr	r1, [pc, #204]	; (8002cbc <showBuf+0x15c>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f009 ffea 	bl	800cbc8 <siprintf>
			for (int i = 0; i < step; i++) {
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	e01d      	b.n	8002c36 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002bfa:	482f      	ldr	r0, [pc, #188]	; (8002cb8 <showBuf+0x158>)
 8002bfc:	f7fd fae8 	bl	80001d0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <showBuf+0x158>)
 8002c04:	1898      	adds	r0, r3, r2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	4413      	add	r3, r2
 8002c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	492a      	ldr	r1, [pc, #168]	; (8002cc0 <showBuf+0x160>)
 8002c16:	f009 ffd7 	bl	800cbc8 <siprintf>
				ix++;
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d103      	bne.n	8002c30 <showBuf+0xd0>
					done = true;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002c2e:	e006      	b.n	8002c3e <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbdd      	blt.n	8002bfa <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <showBuf+0x164>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	481c      	ldr	r0, [pc, #112]	; (8002cb8 <showBuf+0x158>)
 8002c46:	f009 ffdf 	bl	800cc08 <strcat>
			adr += step;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	4413      	add	r3, r2
 8002c50:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c56:	4413      	add	r3, r2
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <showBuf+0x10c>
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1b1      	bne.n	8002bde <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <showBuf+0x168>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d014      	beq.n	8002cac <showBuf+0x14c>
 8002c82:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <showBuf+0x158>)
 8002c84:	4911      	ldr	r1, [pc, #68]	; (8002ccc <showBuf+0x16c>)
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fb58 	bl	800233c <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002c8c:	e00e      	b.n	8002cac <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <showBuf+0x168>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <showBuf+0x14c>
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <showBuf+0x164>)
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca4:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <showBuf+0x170>)
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7ff fb48 	bl	800233c <Report>
}
 8002cac:	bf00      	nop
 8002cae:	3730      	adds	r7, #48	; 0x30
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20001388 	.word	0x20001388
 8002cb8:	200013ac 	.word	0x200013ac
 8002cbc:	0800d7e0 	.word	0x0800d7e0
 8002cc0:	0800d7e8 	.word	0x0800d7e8
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	20000068 	.word	0x20000068
 8002ccc:	0800d7f0 	.word	0x0800d7f0
 8002cd0:	0800d7f4 	.word	0x0800d7f4
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cda:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 8002cde:	af06      	add	r7, sp, #24
 8002ce0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002ce4:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8002ce8:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(250);
 8002cea:	20fa      	movs	r0, #250	; 0xfa
 8002cec:	f001 ff54 	bl	8004b98 <HAL_Delay>
	if (dbg != logOff) {
 8002cf0:	4bb5      	ldr	r3, [pc, #724]	; (8002fc8 <defThread+0x2f0>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d018      	beq.n	8002d2a <defThread+0x52>
		Report(0, "%s", eol);
 8002cf8:	4bb4      	ldr	r3, [pc, #720]	; (8002fcc <defThread+0x2f4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	49b4      	ldr	r1, [pc, #720]	; (8002fd0 <defThread+0x2f8>)
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7ff fb1b 	bl	800233c <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002d06:	4bb3      	ldr	r3, [pc, #716]	; (8002fd4 <defThread+0x2fc>)
 8002d08:	681c      	ldr	r4, [r3, #0]
 8002d0a:	f009 fbbb 	bl	800c484 <xPortGetFreeHeapSize>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4bae      	ldr	r3, [pc, #696]	; (8002fcc <defThread+0x2f4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	9302      	str	r3, [sp, #8]
 8002d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	4bae      	ldr	r3, [pc, #696]	; (8002fd8 <defThread+0x300>)
 8002d20:	4622      	mov	r2, r4
 8002d22:	49ae      	ldr	r1, [pc, #696]	; (8002fdc <defThread+0x304>)
 8002d24:	2001      	movs	r0, #1
 8002d26:	f7ff fb09 	bl	800233c <Report>
	}

	uint8_t next_block_erase = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
 8002d36:	2301      	movs	r3, #1
 8002d38:	f8a7 344e 	strh.w	r3, [r7, #1102]	; 0x44e
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8a7 3450 	strh.w	r3, [r7, #1104]	; 0x450
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	bool readed = false;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8002d4e:	4ba4      	ldr	r3, [pc, #656]	; (8002fe0 <defThread+0x308>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d15d      	bne.n	8002e12 <defThread+0x13a>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002d56:	4ba3      	ldr	r3, [pc, #652]	; (8002fe4 <defThread+0x30c>)
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	22f1      	movs	r2, #241	; 0xf1
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <defThread+0x9a>
 8002d60:	4ba1      	ldr	r3, [pc, #644]	; (8002fe8 <defThread+0x310>)
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002d68:	2220      	movs	r2, #32
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f009 ff70 	bl	800cc50 <strncpy>
 8002d70:	e006      	b.n	8002d80 <defThread+0xa8>
		                               else strcpy(cid, "UNKNOWN");
 8002d72:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002d76:	4a9d      	ldr	r2, [pc, #628]	; (8002fec <defThread+0x314>)
 8002d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d7c:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002d80:	4b9b      	ldr	r3, [pc, #620]	; (8002ff0 <defThread+0x318>)
 8002d82:	4a9c      	ldr	r2, [pc, #624]	; (8002ff4 <defThread+0x31c>)
 8002d84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d88:	6018      	str	r0, [r3, #0]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	8019      	strh	r1, [r3, #0]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002d8e:	4b95      	ldr	r3, [pc, #596]	; (8002fe4 <defThread+0x30c>)
 8002d90:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002d9a:	e016      	b.n	8002dca <defThread+0xf2>
 8002d9c:	4894      	ldr	r0, [pc, #592]	; (8002ff0 <defThread+0x318>)
 8002d9e:	f7fd fa17 	bl	80001d0 <strlen>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a92      	ldr	r2, [pc, #584]	; (8002ff0 <defThread+0x318>)
 8002da6:	1898      	adds	r0, r3, r2
 8002da8:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002dac:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8002db0:	4413      	add	r3, r2
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4990      	ldr	r1, [pc, #576]	; (8002ff8 <defThread+0x320>)
 8002db8:	f009 ff06 	bl	800cbc8 <siprintf>
 8002dbc:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002dca:	f897 3489 	ldrb.w	r3, [r7, #1161]	; 0x489
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d9e4      	bls.n	8002d9c <defThread+0xc4>
		sprintf(stx+strlen(stx),
 8002dd2:	4887      	ldr	r0, [pc, #540]	; (8002ff0 <defThread+0x318>)
 8002dd4:	f7fd f9fc 	bl	80001d0 <strlen>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a85      	ldr	r2, [pc, #532]	; (8002ff0 <defThread+0x318>)
 8002ddc:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002dde:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <defThread+0x30c>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8002de2:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002de4:	4b7f      	ldr	r3, [pc, #508]	; (8002fe4 <defThread+0x30c>)
 8002de6:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 8002de8:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002dea:	4b7e      	ldr	r3, [pc, #504]	; (8002fe4 <defThread+0x30c>)
 8002dec:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8002dee:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002df0:	4b7c      	ldr	r3, [pc, #496]	; (8002fe4 <defThread+0x30c>)
 8002df2:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8002df4:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002df6:	4b7b      	ldr	r3, [pc, #492]	; (8002fe4 <defThread+0x30c>)
 8002df8:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 8002dfa:	9303      	str	r3, [sp, #12]
 8002dfc:	9102      	str	r1, [sp, #8]
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	462b      	mov	r3, r5
 8002e08:	4622      	mov	r2, r4
 8002e0a:	497c      	ldr	r1, [pc, #496]	; (8002ffc <defThread+0x324>)
 8002e0c:	f009 fedc 	bl	800cbc8 <siprintf>
 8002e10:	e00c      	b.n	8002e2c <defThread+0x154>
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002e12:	4b73      	ldr	r3, [pc, #460]	; (8002fe0 <defThread+0x308>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002e1a:	4a79      	ldr	r2, [pc, #484]	; (8003000 <defThread+0x328>)
 8002e1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <defThread+0x308>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4977      	ldr	r1, [pc, #476]	; (8003004 <defThread+0x32c>)
 8002e26:	4872      	ldr	r0, [pc, #456]	; (8002ff0 <defThread+0x318>)
 8002e28:	f009 fece 	bl	800cbc8 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <defThread+0x2f0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <defThread+0x16a>
 8002e34:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <defThread+0x2f4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6d      	ldr	r2, [pc, #436]	; (8002ff0 <defThread+0x318>)
 8002e3a:	4973      	ldr	r1, [pc, #460]	; (8003008 <defThread+0x330>)
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	f7ff fa7d 	bl	800233c <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002e48:	4b70      	ldr	r3, [pc, #448]	; (800300c <defThread+0x334>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	22ef      	movs	r2, #239	; 0xef
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f001 f9cd 	bl	80041fa <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <defThread+0x334>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002e6c:	b299      	uxth	r1, r3
 8002e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	23ef      	movs	r3, #239	; 0xef
 8002e76:	22ef      	movs	r2, #239	; 0xef
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f001 f9be 	bl	80041fa <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002e7e:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 8002e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e86:	4962      	ldr	r1, [pc, #392]	; (8003010 <defThread+0x338>)
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f009 fe9d 	bl	800cbc8 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <defThread+0x33c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	23f0      	movs	r3, #240	; 0xf0
 8002e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 fab5 	bl	8004414 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd f98e 	bl	80001d0 <strlen>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eba:	189c      	adds	r4, r3, r2
 8002ebc:	4b56      	ldr	r3, [pc, #344]	; (8003018 <defThread+0x340>)
 8002ebe:	681d      	ldr	r5, [r3, #0]
 8002ec0:	4b55      	ldr	r3, [pc, #340]	; (8003018 <defThread+0x340>)
 8002ec2:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 8002ec4:	4b54      	ldr	r3, [pc, #336]	; (8003018 <defThread+0x340>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
	sprintf(screen+strlen(screen),
 8002ec8:	0a9b      	lsrs	r3, r3, #10
 8002eca:	4a53      	ldr	r2, [pc, #332]	; (8003018 <defThread+0x340>)
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	4952      	ldr	r1, [pc, #328]	; (8003018 <defThread+0x340>)
 8002ed0:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8002ed2:	4851      	ldr	r0, [pc, #324]	; (8003018 <defThread+0x340>)
 8002ed4:	6940      	ldr	r0, [r0, #20]
	sprintf(screen+strlen(screen),
 8002ed6:	0d00      	lsrs	r0, r0, #20
 8002ed8:	9003      	str	r0, [sp, #12]
 8002eda:	9102      	str	r1, [sp, #8]
 8002edc:	9201      	str	r2, [sp, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4633      	mov	r3, r6
 8002ee2:	462a      	mov	r2, r5
 8002ee4:	494d      	ldr	r1, [pc, #308]	; (800301c <defThread+0x344>)
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f009 fe6e 	bl	800cbc8 <siprintf>
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002eec:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <defThread+0x348>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <defThread+0x23a>
 8002ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd f969 	bl	80001d0 <strlen>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f04:	4413      	add	r3, r2
 8002f06:	4a46      	ldr	r2, [pc, #280]	; (8003020 <defThread+0x348>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4946      	ldr	r1, [pc, #280]	; (8003024 <defThread+0x34c>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f009 fe5b 	bl	800cbc8 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <defThread+0x33c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fc2d 	bl	8000778 <__aeabi_i2d>
 8002f1e:	4604      	mov	r4, r0
 8002f20:	460d      	mov	r5, r1
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <defThread+0x33c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fc25 	bl	8000778 <__aeabi_i2d>
 8002f2e:	a324      	add	r3, pc, #144	; (adr r3, 8002fc0 <defThread+0x2e8>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd f9a4 	bl	8000280 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd face 	bl	80004e0 <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fc7e 	bl	800084c <__aeabi_d2uiz>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b298      	uxth	r0, r3
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <defThread+0x33c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a33      	ldr	r2, [pc, #204]	; (8003028 <defThread+0x350>)
 8002f5a:	8812      	ldrh	r2, [r2, #0]
 8002f5c:	43d2      	mvns	r2, r2
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	4931      	ldr	r1, [pc, #196]	; (8003028 <defThread+0x350>)
 8002f62:	8809      	ldrh	r1, [r1, #0]
 8002f64:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002f68:	9102      	str	r1, [sp, #8]
 8002f6a:	9201      	str	r2, [sp, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	9200      	str	r2, [sp, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4622      	mov	r2, r4
 8002f74:	4601      	mov	r1, r0
 8002f76:	2000      	movs	r0, #0
 8002f78:	f001 f9f6 	bl	8004368 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f000 ffad 	bl	8003edc <ipsOn>


	bool loop = true;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
	bool led = false;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
	uint32_t tmr = get_tmr(1);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7ff f8bc 	bl	800210c <get_tmr>
 8002f94:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480

	s_qcmd qcmd = {0};
 8002f98:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002f9c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8002fa4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002fa8:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

  /* Infinite loop */

	while (loop) {
 8002fb6:	f000 be15 	b.w	8003be4 <defThread+0xf0c>
 8002fba:	bf00      	nop
 8002fbc:	f3af 8000 	nop.w
 8002fc0:	33333333 	.word	0x33333333
 8002fc4:	3feb3333 	.word	0x3feb3333
 8002fc8:	20000068 	.word	0x20000068
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	0800d7f0 	.word	0x0800d7f0
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	0800fe00 	.word	0x0800fe00
 8002fdc:	0800d81c 	.word	0x0800d81c
 8002fe0:	20000085 	.word	0x20000085
 8002fe4:	20001380 	.word	0x20001380
 8002fe8:	20000088 	.word	0x20000088
 8002fec:	0800d848 	.word	0x0800d848
 8002ff0:	200013ac 	.word	0x200013ac
 8002ff4:	0800d850 	.word	0x0800d850
 8002ff8:	0800d7e8 	.word	0x0800d7e8
 8002ffc:	0800d858 	.word	0x0800d858
 8003000:	2000008c 	.word	0x2000008c
 8003004:	0800d8ac 	.word	0x0800d8ac
 8003008:	0800d8cc 	.word	0x0800d8cc
 800300c:	2000007c 	.word	0x2000007c
 8003010:	0800d8d4 	.word	0x0800d8d4
 8003014:	20000080 	.word	0x20000080
 8003018:	20001388 	.word	0x20001388
 800301c:	0800d8e0 	.word	0x0800d8e0
 8003020:	2000137c 	.word	0x2000137c
 8003024:	0800d93c 	.word	0x0800d93c
 8003028:	20001366 	.word	0x20001366

		if (check_tmr(tmr)) {
 800302c:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8003030:	f7ff f879 	bl	8002126 <check_tmr>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8091 	beq.w	800315e <defThread+0x486>
			tmr = get_tmr(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f7ff f865 	bl	800210c <get_tmr>
 8003042:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480
			//
			sec2str(screen);
 8003046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f8dc 	bl	8002208 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8003050:	4bb5      	ldr	r3, [pc, #724]	; (8003328 <defThread+0x650>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	23f0      	movs	r3, #240	; 0xf0
 800305a:	fb93 f3f2 	sdiv	r3, r3, r2
 800305e:	b29a      	uxth	r2, r3
 8003060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f001 f9d4 	bl	8004414 <mkLineCenter>
 800306c:	4601      	mov	r1, r0
 800306e:	4bae      	ldr	r3, [pc, #696]	; (8003328 <defThread+0x650>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	221f      	movs	r2, #31
 800307a:	9201      	str	r2, [sp, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	9200      	str	r2, [sp, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	460a      	mov	r2, r1
 8003084:	2100      	movs	r1, #0
 8003086:	2008      	movs	r0, #8
 8003088:	f001 f96e 	bl	8004368 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%02X", devError);
 800308c:	4ba7      	ldr	r3, [pc, #668]	; (800332c <defThread+0x654>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003096:	49a6      	ldr	r1, [pc, #664]	; (8003330 <defThread+0x658>)
 8003098:	4618      	mov	r0, r3
 800309a:	f009 fd95 	bl	800cbc8 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 800309e:	4ba3      	ldr	r3, [pc, #652]	; (800332c <defThread+0x654>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <defThread+0x3d8>
 80030a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030aa:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
 80030ae:	e002      	b.n	80030b6 <defThread+0x3de>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 80030b6:	4b9c      	ldr	r3, [pc, #624]	; (8003328 <defThread+0x650>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80030c2:	b29c      	uxth	r4, r3
 80030c4:	4b98      	ldr	r3, [pc, #608]	; (8003328 <defThread+0x650>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	23f0      	movs	r3, #240	; 0xf0
 80030ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f99a 	bl	8004414 <mkLineCenter>
 80030e0:	4601      	mov	r1, r0
 80030e2:	4b91      	ldr	r3, [pc, #580]	; (8003328 <defThread+0x650>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ea:	9202      	str	r2, [sp, #8]
 80030ec:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	; 0x486
 80030f0:	9201      	str	r2, [sp, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	9200      	str	r2, [sp, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	460a      	mov	r2, r1
 80030fa:	4621      	mov	r1, r4
 80030fc:	2000      	movs	r0, #0
 80030fe:	f001 f933 	bl	8004368 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 8003102:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <defThread+0x65c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d019      	beq.n	800313e <defThread+0x466>
				if (qs != qStat) {
 800310a:	4b8a      	ldr	r3, [pc, #552]	; (8003334 <defThread+0x65c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8003112:	429a      	cmp	r2, r3
 8003114:	d013      	beq.n	800313e <defThread+0x466>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003116:	4b88      	ldr	r3, [pc, #544]	; (8003338 <defThread+0x660>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <defThread+0x45e>
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <defThread+0x65c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fe5a 	bl	8001ddc <get_qStat>
 8003128:	4602      	mov	r2, r0
 800312a:	4b84      	ldr	r3, [pc, #528]	; (800333c <defThread+0x664>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4984      	ldr	r1, [pc, #528]	; (8003340 <defThread+0x668>)
 8003130:	2001      	movs	r0, #1
 8003132:	f7ff f903 	bl	800233c <Report>
					qs = qStat;
 8003136:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <defThread+0x65c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
				}
			}

			if (devError) led = true; else led = false;
 800313e:	4b7b      	ldr	r3, [pc, #492]	; (800332c <defThread+0x654>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <defThread+0x476>
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
 800314c:	e002      	b.n	8003154 <defThread+0x47c>
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
			errLedOn(led);
 8003154:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe ff81 	bl	8002060 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 10)) != osOK) {
 800315e:	4b79      	ldr	r3, [pc, #484]	; (8003344 <defThread+0x66c>)
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8003166:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800316a:	230a      	movs	r3, #10
 800316c:	f006 fc18 	bl	80099a0 <osMessageQueueGet>
 8003170:	4603      	mov	r3, r0
 8003172:	4a70      	ldr	r2, [pc, #448]	; (8003334 <defThread+0x65c>)
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <defThread+0x65c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d029      	beq.n	80031d2 <defThread+0x4fa>
			if (qs != qStat) qs = qStat;
 800317e:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <defThread+0x65c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8003186:	429a      	cmp	r2, r3
 8003188:	d003      	beq.n	8003192 <defThread+0x4ba>
 800318a:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <defThread+0x65c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
			if (qStat != osErrorTimeout) {
 8003192:	4b68      	ldr	r3, [pc, #416]	; (8003334 <defThread+0x65c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f113 0f02 	cmn.w	r3, #2
 800319a:	f000 84b2 	beq.w	8003b02 <defThread+0xe2a>
				devError |= devQUE;
 800319e:	4b63      	ldr	r3, [pc, #396]	; (800332c <defThread+0x654>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <defThread+0x654>)
 80031aa:	701a      	strb	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80031ac:	4b62      	ldr	r3, [pc, #392]	; (8003338 <defThread+0x660>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 84a6 	beq.w	8003b02 <defThread+0xe2a>
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <defThread+0x65c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fe0e 	bl	8001ddc <get_qStat>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b5e      	ldr	r3, [pc, #376]	; (800333c <defThread+0x664>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	495e      	ldr	r1, [pc, #376]	; (8003340 <defThread+0x668>)
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7ff f8b7 	bl	800233c <Report>
 80031ce:	f000 bc98 	b.w	8003b02 <defThread+0xe2a>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 80031d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80031d6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <defThread+0x670>)
 80031e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e8:	4958      	ldr	r1, [pc, #352]	; (800334c <defThread+0x674>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	f009 fcec 	bl	800cbc8 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80031f0:	4b4d      	ldr	r3, [pc, #308]	; (8003328 <defThread+0x650>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003200:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 8003202:	4b49      	ldr	r3, [pc, #292]	; (8003328 <defThread+0x650>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	23f0      	movs	r3, #240	; 0xf0
 800320c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003210:	b29a      	uxth	r2, r3
 8003212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f8fb 	bl	8004414 <mkLineCenter>
 800321e:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003220:	4b41      	ldr	r3, [pc, #260]	; (8003328 <defThread+0x650>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2200      	movs	r2, #0
 8003226:	9202      	str	r2, [sp, #8]
 8003228:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800322c:	9201      	str	r2, [sp, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	9200      	str	r2, [sp, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	460a      	mov	r2, r1
 8003236:	4621      	mov	r1, r4
 8003238:	2000      	movs	r0, #0
 800323a:	f001 f895 	bl	8004368 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 800323e:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <defThread+0x660>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d91e      	bls.n	8003284 <defThread+0x5ac>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8003246:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800324a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003256:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	4618      	mov	r0, r3
 800325e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003262:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <defThread+0x670>)
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	4a32      	ldr	r2, [pc, #200]	; (800333c <defThread+0x664>)
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	9201      	str	r2, [sp, #4]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4603      	mov	r3, r0
 800327a:	460a      	mov	r2, r1
 800327c:	4934      	ldr	r1, [pc, #208]	; (8003350 <defThread+0x678>)
 800327e:	2001      	movs	r0, #1
 8003280:	f7ff f85c 	bl	800233c <Report>
			//
			nand_show = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
			switch (qcmd.cmd) {
 800328a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800328e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b0a      	cmp	r3, #10
 8003296:	f200 8421 	bhi.w	8003adc <defThread+0xe04>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <defThread+0x5c8>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	08003321 	.word	0x08003321
 80032a4:	08003369 	.word	0x08003369
 80032a8:	08003413 	.word	0x08003413
 80032ac:	080034ef 	.word	0x080034ef
 80032b0:	080036ab 	.word	0x080036ab
 80032b4:	08003523 	.word	0x08003523
 80032b8:	080035eb 	.word	0x080035eb
 80032bc:	080036ab 	.word	0x080036ab
 80032c0:	08003929 	.word	0x08003929
 80032c4:	080033a3 	.word	0x080033a3
 80032c8:	080032cd 	.word	0x080032cd
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <defThread+0x664>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4920      	ldr	r1, [pc, #128]	; (8003354 <defThread+0x67c>)
 80032d4:	4820      	ldr	r0, [pc, #128]	; (8003358 <defThread+0x680>)
 80032d6:	f009 fc77 	bl	800cbc8 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 80032e0:	e014      	b.n	800330c <defThread+0x634>
 80032e2:	481d      	ldr	r0, [pc, #116]	; (8003358 <defThread+0x680>)
 80032e4:	f7fc ff74 	bl	80001d0 <strlen>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <defThread+0x680>)
 80032ec:	1898      	adds	r0, r3, r2
 80032ee:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 80032f2:	4a1a      	ldr	r2, [pc, #104]	; (800335c <defThread+0x684>)
 80032f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <defThread+0x664>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4918      	ldr	r1, [pc, #96]	; (8003360 <defThread+0x688>)
 80032fe:	f009 fc63 	bl	800cbc8 <siprintf>
 8003302:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 8003306:	3301      	adds	r3, #1
 8003308:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 800330c:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 8003310:	2b0a      	cmp	r3, #10
 8003312:	d9e6      	bls.n	80032e2 <defThread+0x60a>
					Report(1, "%s", stx);
 8003314:	4a10      	ldr	r2, [pc, #64]	; (8003358 <defThread+0x680>)
 8003316:	4913      	ldr	r1, [pc, #76]	; (8003364 <defThread+0x68c>)
 8003318:	2001      	movs	r0, #1
 800331a:	f7ff f80f 	bl	800233c <Report>
				break;
 800331e:	e3dd      	b.n	8003adc <defThread+0xe04>
				case cmdRestart:
					loop = false;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
		  		break;
 8003326:	e3d9      	b.n	8003adc <defThread+0xe04>
 8003328:	2000007c 	.word	0x2000007c
 800332c:	2000034c 	.word	0x2000034c
 8003330:	0800d94c 	.word	0x0800d94c
 8003334:	200013a8 	.word	0x200013a8
 8003338:	20000068 	.word	0x20000068
 800333c:	20000004 	.word	0x20000004
 8003340:	0800d95c 	.word	0x0800d95c
 8003344:	20000344 	.word	0x20000344
 8003348:	20000034 	.word	0x20000034
 800334c:	0800d968 	.word	0x0800d968
 8003350:	0800d970 	.word	0x0800d970
 8003354:	0800d988 	.word	0x0800d988
 8003358:	200013ac 	.word	0x200013ac
 800335c:	20000008 	.word	0x20000008
 8003360:	0800d9a4 	.word	0x0800d9a4
 8003364:	0800d7f0 	.word	0x0800d7f0
		  		break;
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003368:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800336c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <defThread+0x6aa>
						set_Date(epoch);
 8003376:	4bae      	ldr	r3, [pc, #696]	; (8003630 <defThread+0x958>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fee4 	bl	8002148 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003380:	e39b      	b.n	8003aba <defThread+0xde2>
						sec2str(stx);
 8003382:	48ac      	ldr	r0, [pc, #688]	; (8003634 <defThread+0x95c>)
 8003384:	f7fe ff40 	bl	8002208 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003388:	4bab      	ldr	r3, [pc, #684]	; (8003638 <defThread+0x960>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8394 	beq.w	8003aba <defThread+0xde2>
 8003392:	4baa      	ldr	r3, [pc, #680]	; (800363c <defThread+0x964>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4aa7      	ldr	r2, [pc, #668]	; (8003634 <defThread+0x95c>)
 8003398:	49a9      	ldr	r1, [pc, #676]	; (8003640 <defThread+0x968>)
 800339a:	2000      	movs	r0, #0
 800339c:	f7fe ffce 	bl	800233c <Report>
				break;
 80033a0:	e38b      	b.n	8003aba <defThread+0xde2>
				case cmdLog:
					if (qcmd.attr < logNone) {
 80033a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033a6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d81e      	bhi.n	80033ee <defThread+0x716>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 80033b0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033b4:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fd5e 	bl	8001e7c <get_logName>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033c6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	4619      	mov	r1, r3
 80033ce:	4b9b      	ldr	r3, [pc, #620]	; (800363c <defThread+0x964>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	499b      	ldr	r1, [pc, #620]	; (8003644 <defThread+0x96c>)
 80033d8:	2001      	movs	r0, #1
 80033da:	f7fe ffaf 	bl	800233c <Report>
						dbg = qcmd.attr;
 80033de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033e2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80033e6:	785a      	ldrb	r2, [r3, #1]
 80033e8:	4b93      	ldr	r3, [pc, #588]	; (8003638 <defThread+0x960>)
 80033ea:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 80033ec:	e376      	b.n	8003adc <defThread+0xe04>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 80033ee:	4b92      	ldr	r3, [pc, #584]	; (8003638 <defThread+0x960>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fd42 	bl	8001e7c <get_logName>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b8f      	ldr	r3, [pc, #572]	; (8003638 <defThread+0x960>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	4b8e      	ldr	r3, [pc, #568]	; (800363c <defThread+0x964>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	460b      	mov	r3, r1
 8003408:	498f      	ldr	r1, [pc, #572]	; (8003648 <defThread+0x970>)
 800340a:	2001      	movs	r0, #1
 800340c:	f7fe ff96 	bl	800233c <Report>
				break;
 8003410:	e364      	b.n	8003adc <defThread+0xe04>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8003412:	4b8e      	ldr	r3, [pc, #568]	; (800364c <defThread+0x974>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b8e      	ldr	r3, [pc, #568]	; (8003650 <defThread+0x978>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	4b8d      	ldr	r3, [pc, #564]	; (8003654 <defThread+0x97c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
					NAND_AddressTypeDef addr = {
						.Page = (p % (chipConf.BlockSize / chipConf.PageSize)),
 8003428:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <defThread+0x97c>)
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b89      	ldr	r3, [pc, #548]	; (8003654 <defThread+0x97c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003438:	fbb3 f1f2 	udiv	r1, r3, r2
 800343c:	fb01 f202 	mul.w	r2, r1, r2
 8003440:	1a9b      	subs	r3, r3, r2
					NAND_AddressTypeDef addr = {
 8003442:	b29a      	uxth	r2, r3
 8003444:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003448:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800344c:	801a      	strh	r2, [r3, #0]
 800344e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003452:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003456:	2201      	movs	r2, #1
 8003458:	805a      	strh	r2, [r3, #2]
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 800345a:	f8d7 0454 	ldr.w	r0, [r7, #1108]	; 0x454
 800345e:	f7ff fad7 	bl	8002a10 <nand_PageToBlock>
 8003462:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8003464:	b29a      	uxth	r2, r3
 8003466:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800346a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800346e:	809a      	strh	r2, [r3, #4]
					};
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003470:	4b71      	ldr	r3, [pc, #452]	; (8003638 <defThread+0x960>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01a      	beq.n	80034ae <defThread+0x7d6>
 8003478:	4b74      	ldr	r3, [pc, #464]	; (800364c <defThread+0x974>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <defThread+0x980>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	461c      	mov	r4, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003482:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003486:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800348a:	881b      	ldrh	r3, [r3, #0]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800348c:	4619      	mov	r1, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 800348e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003492:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003496:	889b      	ldrh	r3, [r3, #4]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003498:	4618      	mov	r0, r3
 800349a:	4b68      	ldr	r3, [pc, #416]	; (800363c <defThread+0x964>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	9001      	str	r0, [sp, #4]
 80034a2:	9100      	str	r1, [sp, #0]
 80034a4:	4623      	mov	r3, r4
 80034a6:	496d      	ldr	r1, [pc, #436]	; (800365c <defThread+0x984>)
 80034a8:	2001      	movs	r0, #1
 80034aa:	f7fe ff47 	bl	800233c <Report>
					if (rdBuf) {
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <defThread+0x988>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8303 	beq.w	8003abe <defThread+0xde6>
						if (NAND_Read_Page_8bit(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 80034b8:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <defThread+0x98c>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <defThread+0x988>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	f107 0120 	add.w	r1, r7, #32
 80034c4:	2301      	movs	r3, #1
 80034c6:	f7fd ffdb 	bl	8001480 <NAND_Read_Page_8bit>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <defThread+0x806>
							nand_show = 1;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
							readed = true;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
						} else devError |= devNAND;
					}
				}
				break;
 80034dc:	e2ef      	b.n	8003abe <defThread+0xde6>
						} else devError |= devNAND;
 80034de:	4b62      	ldr	r3, [pc, #392]	; (8003668 <defThread+0x990>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f043 0320 	orr.w	r3, r3, #32
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <defThread+0x990>)
 80034ea:	701a      	strb	r2, [r3, #0]
				break;
 80034ec:	e2e7      	b.n	8003abe <defThread+0xde6>
				case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 80034ee:	4b52      	ldr	r3, [pc, #328]	; (8003638 <defThread+0x960>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <defThread+0x838>
 80034f6:	4b55      	ldr	r3, [pc, #340]	; (800364c <defThread+0x974>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b57      	ldr	r3, [pc, #348]	; (8003658 <defThread+0x980>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	4619      	mov	r1, r3
 8003500:	4b4e      	ldr	r3, [pc, #312]	; (800363c <defThread+0x964>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	460b      	mov	r3, r1
 8003508:	4958      	ldr	r1, [pc, #352]	; (800366c <defThread+0x994>)
 800350a:	2001      	movs	r0, #1
 800350c:	f7fe ff16 	bl	800233c <Report>
					if (rdBuf) nand_show = 2;
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <defThread+0x988>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 82d4 	beq.w	8003ac2 <defThread+0xdea>
 800351a:	2302      	movs	r3, #2
 800351c:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
				break;
 8003520:	e2cf      	b.n	8003ac2 <defThread+0xdea>
				case cmdErase:
					if (!qcmd.attr) {
 8003522:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003526:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d149      	bne.n	80035c4 <defThread+0x8ec>
						NAND_AddressTypeDef addr = {
 8003530:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003534:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8003538:	2200      	movs	r2, #0
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003540:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8003544:	2201      	movs	r2, #1
 8003546:	805a      	strh	r2, [r3, #2]
 8003548:	4b49      	ldr	r3, [pc, #292]	; (8003670 <defThread+0x998>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b29a      	uxth	r2, r3
 800354e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003552:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8003556:	809a      	strh	r2, [r3, #4]
							.Page = 0,
							.Plane = 1,
							.Block = nandBlk
						};
						if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) {
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <defThread+0x98c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f107 0218 	add.w	r2, r7, #24
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fb1b 	bl	8005b9e <HAL_NAND_Erase_Block>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d018      	beq.n	80035a0 <defThread+0x8c8>
							devError |= devNAND;
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <defThread+0x990>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f043 0320 	orr.w	r3, r3, #32
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <defThread+0x990>)
 800357a:	701a      	strb	r2, [r3, #0]
							if (dbg != logOff) Report(1, "Erase nand block:%lu Error !%s", addr.Block, eol);
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <defThread+0x960>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 82a0 	beq.w	8003ac6 <defThread+0xdee>
 8003586:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800358a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800358e:	889b      	ldrh	r3, [r3, #4]
 8003590:	461a      	mov	r2, r3
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <defThread+0x964>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4937      	ldr	r1, [pc, #220]	; (8003674 <defThread+0x99c>)
 8003598:	2001      	movs	r0, #1
 800359a:	f7fe fecf 	bl	800233c <Report>
						iBlk = 0;
						if (dbg != logOff) Report(1, "Erase chip ");
						next_block_erase = 1;
						stik = HAL_GetTick();
					}
				break;
 800359e:	e292      	b.n	8003ac6 <defThread+0xdee>
							if (dbg != logOff) Report(1, "Erase nand block:%lu Ok !%s", addr.Block, eol);
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <defThread+0x960>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 828e 	beq.w	8003ac6 <defThread+0xdee>
 80035aa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80035ae:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80035b2:	889b      	ldrh	r3, [r3, #4]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <defThread+0x964>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	492f      	ldr	r1, [pc, #188]	; (8003678 <defThread+0x9a0>)
 80035bc:	2001      	movs	r0, #1
 80035be:	f7fe febd 	bl	800233c <Report>
				break;
 80035c2:	e280      	b.n	8003ac6 <defThread+0xdee>
						iBlk = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
						if (dbg != logOff) Report(1, "Erase chip ");
 80035ca:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <defThread+0x960>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <defThread+0x902>
 80035d2:	492a      	ldr	r1, [pc, #168]	; (800367c <defThread+0x9a4>)
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fe feb1 	bl	800233c <Report>
						next_block_erase = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
						stik = HAL_GetTick();
 80035e0:	f001 face 	bl	8004b80 <HAL_GetTick>
 80035e4:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
				break;
 80035e8:	e26d      	b.n	8003ac6 <defThread+0xdee>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <defThread+0x9a8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fa0e 	bl	8002a10 <nand_PageToBlock>
 80035f4:	f8c7 0468 	str.w	r0, [r7, #1128]	; 0x468
					if (!pageIsEmpty(nandPage)) {
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <defThread+0x9a8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f961 	bl	80018c4 <pageIsEmpty>
 8003602:	4603      	mov	r3, r0
 8003604:	f083 0301 	eor.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03c      	beq.n	8003688 <defThread+0x9b0>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <defThread+0x960>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8259 	beq.w	8003aca <defThread+0xdf2>
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <defThread+0x9a8>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <defThread+0x964>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8003626:	4917      	ldr	r1, [pc, #92]	; (8003684 <defThread+0x9ac>)
 8003628:	2001      	movs	r0, #1
 800362a:	f7fe fe87 	bl	800233c <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 800362e:	e24c      	b.n	8003aca <defThread+0xdf2>
 8003630:	20000064 	.word	0x20000064
 8003634:	200013ac 	.word	0x200013ac
 8003638:	20000068 	.word	0x20000068
 800363c:	20000004 	.word	0x20000004
 8003640:	0800d9ac 	.word	0x0800d9ac
 8003644:	0800d9c8 	.word	0x0800d9c8
 8003648:	0800d9e4 	.word	0x0800d9e4
 800364c:	2000136c 	.word	0x2000136c
 8003650:	20001368 	.word	0x20001368
 8003654:	20001388 	.word	0x20001388
 8003658:	20001370 	.word	0x20001370
 800365c:	0800da04 	.word	0x0800da04
 8003660:	200013a0 	.word	0x200013a0
 8003664:	20000078 	.word	0x20000078
 8003668:	2000034c 	.word	0x2000034c
 800366c:	0800da34 	.word	0x0800da34
 8003670:	20001374 	.word	0x20001374
 8003674:	0800da58 	.word	0x0800da58
 8003678:	0800da78 	.word	0x0800da78
 800367c:	0800da94 	.word	0x0800da94
 8003680:	20001378 	.word	0x20001378
 8003684:	0800daa0 	.word	0x0800daa0
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 8003688:	4b95      	ldr	r3, [pc, #596]	; (80038e0 <defThread+0xc08>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 821c 	beq.w	8003aca <defThread+0xdf2>
 8003692:	4b94      	ldr	r3, [pc, #592]	; (80038e4 <defThread+0xc0c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b94      	ldr	r3, [pc, #592]	; (80038e8 <defThread+0xc10>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80036a0:	4992      	ldr	r1, [pc, #584]	; (80038ec <defThread+0xc14>)
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7fe fe4a 	bl	800233c <Report>
				break;
 80036a8:	e20f      	b.n	8003aca <defThread+0xdf2>
				case cmdWrite:
				case cmdArea:
					if (wrBuf) {
 80036aa:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <defThread+0xc18>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 820d 	beq.w	8003ace <defThread+0xdf6>
						//
						if (qcmd.cmd == cmdArea) {
 80036b4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80036b8:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b07      	cmp	r3, #7
 80036c0:	d127      	bne.n	8003712 <defThread+0xa3a>
							if (!areaIsEmpty(nandAdr, nandLen)) {
 80036c2:	4b8c      	ldr	r3, [pc, #560]	; (80038f4 <defThread+0xc1c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a8c      	ldr	r2, [pc, #560]	; (80038f8 <defThread+0xc20>)
 80036c8:	8812      	ldrh	r2, [r2, #0]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fa3d 	bl	8001b4c <areaIsEmpty>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <defThread+0xa20>
								if (dbg != logOff) Report(1, "Area Not empty%s", eol);
 80036de:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <defThread+0xc08>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 81f5 	beq.w	8003ad2 <defThread+0xdfa>
 80036e8:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <defThread+0xc10>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4983      	ldr	r1, [pc, #524]	; (80038fc <defThread+0xc24>)
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7fe fe23 	bl	800233c <Report>
							} else {
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
							}
							break;
 80036f6:	e1ec      	b.n	8003ad2 <defThread+0xdfa>
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
 80036f8:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <defThread+0xc08>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 81e8 	beq.w	8003ad2 <defThread+0xdfa>
 8003702:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <defThread+0xc10>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	497d      	ldr	r1, [pc, #500]	; (8003900 <defThread+0xc28>)
 800370a:	2001      	movs	r0, #1
 800370c:	f7fe fe16 	bl	800233c <Report>
 8003710:	e1e4      	b.n	8003adc <defThread+0xe04>
						}
						//
						uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8003712:	4b78      	ldr	r3, [pc, #480]	; (80038f4 <defThread+0xc1c>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b7b      	ldr	r3, [pc, #492]	; (8003904 <defThread+0xc2c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <defThread+0xc30>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
						uint32_t b = nand_PageToBlock(p);
 8003728:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 800372c:	f7ff f970 	bl	8002a10 <nand_PageToBlock>
 8003730:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
						NAND_AddressTypeDef addr = {
							.Page = (p % (chipConf.BlockSize / chipConf.PageSize)),
 8003734:	4b74      	ldr	r3, [pc, #464]	; (8003908 <defThread+0xc30>)
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	4b73      	ldr	r3, [pc, #460]	; (8003908 <defThread+0xc30>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003744:	fbb3 f1f2 	udiv	r1, r3, r2
 8003748:	fb01 f202 	mul.w	r2, r1, r2
 800374c:	1a9b      	subs	r3, r3, r2
						NAND_AddressTypeDef addr = {
 800374e:	b29a      	uxth	r2, r3
 8003750:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003754:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800375e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8003762:	2201      	movs	r2, #1
 8003764:	805a      	strh	r2, [r3, #2]
 8003766:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800376a:	b29a      	uxth	r2, r3
 800376c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003770:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8003774:	809a      	strh	r2, [r3, #4]
							.Plane = 1,
							.Block = b
						};
						if (!pageIsEmpty(nandPage)) {
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <defThread+0xc0c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe f8a2 	bl	80018c4 <pageIsEmpty>
 8003780:	4603      	mov	r3, r0
 8003782:	f083 0301 	eor.w	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d034      	beq.n	80037f6 <defThread+0xb1e>
							if (dbg != logOff) Report(1, "Erase nand block:%lu... ", addr.Block);
 800378c:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <defThread+0xc08>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <defThread+0xad0>
 8003794:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003798:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800379c:	889b      	ldrh	r3, [r3, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	495a      	ldr	r1, [pc, #360]	; (800390c <defThread+0xc34>)
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fe fdca 	bl	800233c <Report>
							uint32_t stik = HAL_GetTick();
 80037a8:	f001 f9ea 	bl	8004b80 <HAL_GetTick>
 80037ac:	f8c7 045c 	str.w	r0, [r7, #1116]	; 0x45c
							if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 80037b0:	4b57      	ldr	r3, [pc, #348]	; (8003910 <defThread+0xc38>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f107 0210 	add.w	r2, r7, #16
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f002 f9ef 	bl	8005b9e <HAL_NAND_Erase_Block>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <defThread+0xafc>
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <defThread+0xc3c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <defThread+0xc3c>)
 80037d2:	701a      	strb	r2, [r3, #0]
							if (dbg != logOff) Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <defThread+0xc08>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d024      	beq.n	8003826 <defThread+0xb4e>
 80037dc:	f001 f9d0 	bl	8004b80 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80037e6:	1ad2      	subs	r2, r2, r3
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <defThread+0xc10>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	494a      	ldr	r1, [pc, #296]	; (8003918 <defThread+0xc40>)
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7fe fda4 	bl	800233c <Report>
 80037f4:	e017      	b.n	8003826 <defThread+0xb4e>
						} else {
							if (dbg != logOff) Report(1, "Check: page:%lu in block:%lu is Empty%s", addr.Page, addr.Block, eol);
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <defThread+0xc08>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <defThread+0xb4e>
 80037fe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003802:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800380e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8003812:	889b      	ldrh	r3, [r3, #4]
 8003814:	4619      	mov	r1, r3
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <defThread+0xc10>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	460b      	mov	r3, r1
 800381e:	493f      	ldr	r1, [pc, #252]	; (800391c <defThread+0xc44>)
 8003820:	2001      	movs	r0, #1
 8003822:	f7fe fd8b 	bl	800233c <Report>
						}
						//if (HAL_NAND_Read_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
						//Report(1, "Copy nand page:%lu block:%lu:%s", addr.Page, addr.Block, eol);
						memset(wrBuf, 0xff, chipConf.PageSize);
 8003826:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <defThread+0xc18>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a37      	ldr	r2, [pc, #220]	; (8003908 <defThread+0xc30>)
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	21ff      	movs	r1, #255	; 0xff
 8003830:	4618      	mov	r0, r3
 8003832:	f009 f851 	bl	800c8d8 <memset>
						uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 8003836:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <defThread+0xc1c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <defThread+0xc2c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	4a31      	ldr	r2, [pc, #196]	; (8003908 <defThread+0xc30>)
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	fbb3 f1f2 	udiv	r1, r3, r2
 8003848:	fb01 f202 	mul.w	r2, r1, r2
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
						memset(wrBuf + ofs, nandByte, nandLen);
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <defThread+0xc18>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800385a:	4413      	add	r3, r2
 800385c:	4a30      	ldr	r2, [pc, #192]	; (8003920 <defThread+0xc48>)
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	4611      	mov	r1, r2
 8003862:	4a25      	ldr	r2, [pc, #148]	; (80038f8 <defThread+0xc20>)
 8003864:	8812      	ldrh	r2, [r2, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f009 f836 	bl	800c8d8 <memset>
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (NAND_Write_Page_8bit(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <defThread+0xc38>)
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <defThread+0xc18>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f107 0110 	add.w	r1, r7, #16
 8003878:	2301      	movs	r3, #1
 800387a:	f7fd ff13 	bl	80016a4 <NAND_Write_Page_8bit>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d006      	beq.n	8003892 <defThread+0xbba>
 8003884:	4b23      	ldr	r3, [pc, #140]	; (8003914 <defThread+0xc3c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f043 0320 	orr.w	r3, r3, #32
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b21      	ldr	r3, [pc, #132]	; (8003914 <defThread+0xc3c>)
 8003890:	701a      	strb	r2, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <defThread+0xc08>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8119 	beq.w	8003ace <defThread+0xdf6>
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <defThread+0xc1c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <defThread+0xc48>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <defThread+0xc20>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 80038ac:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038b0:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80038b4:	881b      	ldrh	r3, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 80038b6:	461c      	mov	r4, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 80038b8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038bc:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80038c0:	889b      	ldrh	r3, [r3, #4]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 80038c2:	461d      	mov	r5, r3
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <defThread+0xc10>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	9304      	str	r3, [sp, #16]
 80038ca:	9503      	str	r5, [sp, #12]
 80038cc:	9402      	str	r4, [sp, #8]
 80038ce:	9001      	str	r0, [sp, #4]
 80038d0:	9100      	str	r1, [sp, #0]
 80038d2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80038d6:	4913      	ldr	r1, [pc, #76]	; (8003924 <defThread+0xc4c>)
 80038d8:	2001      	movs	r0, #1
 80038da:	f7fe fd2f 	bl	800233c <Report>
					}
				break;
 80038de:	e0f6      	b.n	8003ace <defThread+0xdf6>
 80038e0:	20000068 	.word	0x20000068
 80038e4:	20001378 	.word	0x20001378
 80038e8:	20000004 	.word	0x20000004
 80038ec:	0800dac4 	.word	0x0800dac4
 80038f0:	200013a4 	.word	0x200013a4
 80038f4:	2000136c 	.word	0x2000136c
 80038f8:	20001370 	.word	0x20001370
 80038fc:	0800dae8 	.word	0x0800dae8
 8003900:	0800dafc 	.word	0x0800dafc
 8003904:	20001368 	.word	0x20001368
 8003908:	20001388 	.word	0x20001388
 800390c:	0800db0c 	.word	0x0800db0c
 8003910:	20000078 	.word	0x20000078
 8003914:	2000034c 	.word	0x2000034c
 8003918:	0800db28 	.word	0x0800db28
 800391c:	0800db38 	.word	0x0800db38
 8003920:	20000084 	.word	0x20000084
 8003924:	0800db60 	.word	0x0800db60
				case cmdSave:
					if (wrBuf) {
 8003928:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <defThread+0xe74>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80d2 	beq.w	8003ad6 <defThread+0xdfe>
						uint32_t page = (nandAdr - devAdr) / chipConf.PageSize;
 8003932:	4b87      	ldr	r3, [pc, #540]	; (8003b50 <defThread+0xe78>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b87      	ldr	r3, [pc, #540]	; (8003b54 <defThread+0xe7c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	4b86      	ldr	r3, [pc, #536]	; (8003b58 <defThread+0xe80>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
						NAND_AddressTypeDef nans = {
							.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),
 8003948:	4b83      	ldr	r3, [pc, #524]	; (8003b58 <defThread+0xe80>)
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <defThread+0xe80>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fbb2 f2f3 	udiv	r2, r2, r3
 8003954:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003958:	fbb3 f1f2 	udiv	r1, r3, r2
 800395c:	fb01 f202 	mul.w	r2, r1, r2
 8003960:	1a9b      	subs	r3, r3, r2
						NAND_AddressTypeDef nans = {
 8003962:	b29a      	uxth	r2, r3
 8003964:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003968:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003972:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003976:	2201      	movs	r2, #1
 8003978:	805a      	strh	r2, [r3, #2]
							.Plane = 1,
							.Block = nand_PageToBlock(page)
 800397a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800397e:	f7ff f847 	bl	8002a10 <nand_PageToBlock>
 8003982:	4603      	mov	r3, r0
						NAND_AddressTypeDef nans = {
 8003984:	b29a      	uxth	r2, r3
 8003986:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800398a:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800398e:	809a      	strh	r2, [r3, #4]
						};
						int shift = emptyArea(nandAdr, nandLen, wrBuf, &nans);
 8003990:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <defThread+0xe78>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	4b71      	ldr	r3, [pc, #452]	; (8003b5c <defThread+0xe84>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <defThread+0xe74>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	f7ff f84b 	bl	8002a3c <emptyArea>
 80039a6:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
						if (shift == -1) {
 80039aa:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b2:	d111      	bne.n	80039d8 <defThread+0xd00>
							if (dbg != logOff) if (dbg != logOff) Report(1, "Area Not empty. Process not alow%s", eol);
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <defThread+0xe88>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 808e 	beq.w	8003ada <defThread+0xe02>
 80039be:	4b68      	ldr	r3, [pc, #416]	; (8003b60 <defThread+0xe88>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8089 	beq.w	8003ada <defThread+0xe02>
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <defThread+0xe8c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4966      	ldr	r1, [pc, #408]	; (8003b68 <defThread+0xe90>)
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7fe fcb3 	bl	800233c <Report>
 80039d6:	e081      	b.n	8003adc <defThread+0xe04>
							break;
						} else {
							memset(wrBuf + shift, nandByte, nandLen);
 80039d8:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <defThread+0xe74>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80039e0:	4413      	add	r3, r2
 80039e2:	4a62      	ldr	r2, [pc, #392]	; (8003b6c <defThread+0xe94>)
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4a5c      	ldr	r2, [pc, #368]	; (8003b5c <defThread+0xe84>)
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f008 ff73 	bl	800c8d8 <memset>
							if (NAND_Write_Page_8bit(nandPort, &nans, wrBuf, 1) != HAL_OK) devError |= devNAND;
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <defThread+0xe98>)
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	4b55      	ldr	r3, [pc, #340]	; (8003b4c <defThread+0xe74>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	f107 0108 	add.w	r1, r7, #8
 80039fe:	2301      	movs	r3, #1
 8003a00:	f7fd fe50 	bl	80016a4 <NAND_Write_Page_8bit>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <defThread+0xd40>
 8003a0a:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <defThread+0xe9c>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <defThread+0xe9c>)
 8003a16:	701a      	strb	r2, [r3, #0]
							showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
 8003a18:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <defThread+0xe7c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <defThread+0xe74>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a26:	2100      	movs	r1, #0
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7ff f899 	bl	8002b60 <showBuf>
							if (dbg != logOff)
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <defThread+0xe88>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04f      	beq.n	8003ad6 <defThread+0xdfe>
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
									  ARRAY_ADDRESS(&nans, nandPort),
 8003a36:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a3a:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a46:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a4a:	889b      	ldrh	r3, [r3, #4]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a52:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a56:	885b      	ldrh	r3, [r3, #2]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <defThread+0xe98>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <defThread+0xe98>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003a70:	18ca      	adds	r2, r1, r3
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <defThread+0xe78>)
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <defThread+0xe94>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <defThread+0xe84>)
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	461c      	mov	r4, r3
									  nandAdr,
									  shift,
									  nandByte,
									  nandLen,
									  nans.Page,
 8003a82:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a86:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a8a:	881b      	ldrh	r3, [r3, #0]
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003a8c:	461d      	mov	r5, r3
									  nans.Block,
 8003a8e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a92:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a96:	889b      	ldrh	r3, [r3, #4]
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003a98:	461e      	mov	r6, r3
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <defThread+0xe8c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	9604      	str	r6, [sp, #16]
 8003aa2:	9503      	str	r5, [sp, #12]
 8003aa4:	9402      	str	r4, [sp, #8]
 8003aa6:	9001      	str	r0, [sp, #4]
 8003aa8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4931      	ldr	r1, [pc, #196]	; (8003b78 <defThread+0xea0>)
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7fe fc42 	bl	800233c <Report>
									  eol);
						}
					}
				break;
 8003ab8:	e00d      	b.n	8003ad6 <defThread+0xdfe>
				break;
 8003aba:	bf00      	nop
 8003abc:	e00e      	b.n	8003adc <defThread+0xe04>
				break;
 8003abe:	bf00      	nop
 8003ac0:	e00c      	b.n	8003adc <defThread+0xe04>
				break;
 8003ac2:	bf00      	nop
 8003ac4:	e00a      	b.n	8003adc <defThread+0xe04>
				break;
 8003ac6:	bf00      	nop
 8003ac8:	e008      	b.n	8003adc <defThread+0xe04>
				break;
 8003aca:	bf00      	nop
 8003acc:	e006      	b.n	8003adc <defThread+0xe04>
				break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <defThread+0xe04>
							break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <defThread+0xe04>
				break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <defThread+0xe04>
							break;
 8003ada:	bf00      	nop
			}
			if (nand_show) {
 8003adc:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <defThread+0xe2a>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <defThread+0xe78>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <defThread+0xe84>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	461c      	mov	r4, r3
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <defThread+0xea4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f897 148a 	ldrb.w	r1, [r7, #1162]	; 0x48a
 8003af6:	f897 048b 	ldrb.w	r0, [r7, #1163]	; 0x48b
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4623      	mov	r3, r4
 8003afe:	f7ff f82f 	bl	8002b60 <showBuf>
	     (pAddress->Block + (pAddress->Plane * hnand->Config.PlaneSize) ) * hnand->Config.BlockSize
	     )
)
*/
		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 8003b02:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d069      	beq.n	8003bde <defThread+0xf06>
			clr.Block = iBlk;
 8003b0a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f8a7 3450 	strh.w	r3, [r7, #1104]	; 0x450
			iBlk++;
 8003b14:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
			if (HAL_NAND_Erase_Block(nandPort, &clr) != HAL_OK) {
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <defThread+0xe98>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 f838 	bl	8005b9e <HAL_NAND_Erase_Block>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d025      	beq.n	8003b80 <defThread+0xea8>
				devError |= devNAND;
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <defThread+0xe9c>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f043 0320 	orr.w	r3, r3, #32
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <defThread+0xe9c>)
 8003b40:	701a      	strb	r2, [r3, #0]
				next_block_erase = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8003b48:	e02d      	b.n	8003ba6 <defThread+0xece>
 8003b4a:	bf00      	nop
 8003b4c:	200013a4 	.word	0x200013a4
 8003b50:	2000136c 	.word	0x2000136c
 8003b54:	20001368 	.word	0x20001368
 8003b58:	20001388 	.word	0x20001388
 8003b5c:	20001370 	.word	0x20001370
 8003b60:	20000068 	.word	0x20000068
 8003b64:	20000004 	.word	0x20000004
 8003b68:	0800dba8 	.word	0x0800dba8
 8003b6c:	20000084 	.word	0x20000084
 8003b70:	20000078 	.word	0x20000078
 8003b74:	2000034c 	.word	0x2000034c
 8003b78:	0800dbcc 	.word	0x0800dbcc
 8003b7c:	200013a0 	.word	0x200013a0
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8003b80:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <defThread+0xebc>
 8003b8c:	492e      	ldr	r1, [pc, #184]	; (8003c48 <defThread+0xf70>)
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fe fbd4 	bl	800233c <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <defThread+0xf74>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <defThread+0xece>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
			}
			if (!next_block_erase) {
 8003ba6:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d117      	bne.n	8003bde <defThread+0xf06>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003bae:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <defThread+0xf78>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <defThread+0xf06>
 8003bb6:	f000 ffe3 	bl	8004b80 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <defThread+0xf7c>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	099a      	lsrs	r2, r3, #6
 8003bca:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <defThread+0xf80>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003bd6:	4921      	ldr	r1, [pc, #132]	; (8003c5c <defThread+0xf84>)
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f7fe fbaf 	bl	800233c <Report>
			}
		}
		//
		osDelay(5);
 8003bde:	2005      	movs	r0, #5
 8003be0:	f005 fd66 	bl	80096b0 <osDelay>
	while (loop) {
 8003be4:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f aa1f 	bne.w	800302c <defThread+0x354>
	}

	if (wrBuf) free(wrBuf);
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <defThread+0xf88>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <defThread+0xf28>
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <defThread+0xf88>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f008 fe56 	bl	800c8ac <free>
	if (rdBuf) free(rdBuf);
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <defThread+0xf8c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d004      	beq.n	8003c12 <defThread+0xf3a>
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <defThread+0xf8c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f008 fe4d 	bl	800c8ac <free>


	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <defThread+0xf78>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d011      	beq.n	8003c3e <defThread+0xf66>
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <defThread+0xf90>)
 8003c1c:	681c      	ldr	r4, [r3, #0]
 8003c1e:	f008 fc31 	bl	800c484 <xPortGetFreeHeapSize>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <defThread+0xf80>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	9302      	str	r3, [sp, #8]
 8003c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	9200      	str	r2, [sp, #0]
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <defThread+0xf94>)
 8003c34:	4622      	mov	r2, r4
 8003c36:	490e      	ldr	r1, [pc, #56]	; (8003c70 <defThread+0xf98>)
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f7fe fb7f 	bl	800233c <Report>
	osDelay(250);
 8003c3e:	20fa      	movs	r0, #250	; 0xfa
 8003c40:	f005 fd36 	bl	80096b0 <osDelay>

	NVIC_SystemReset();
 8003c44:	f7fc fff4 	bl	8000c30 <__NVIC_SystemReset>
 8003c48:	0800dc24 	.word	0x0800dc24
 8003c4c:	20001388 	.word	0x20001388
 8003c50:	20000068 	.word	0x20000068
 8003c54:	10624dd3 	.word	0x10624dd3
 8003c58:	20000004 	.word	0x20000004
 8003c5c:	0800dc28 	.word	0x0800dc28
 8003c60:	200013a4 	.word	0x200013a4
 8003c64:	200013a0 	.word	0x200013a0
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	0800fe00 	.word	0x0800fe00
 8003c70:	0800dc40 	.word	0x0800dc40

08003c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d102      	bne.n	8003c8c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003c86:	f000 ff67 	bl	8004b58 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003c8a:	e016      	b.n	8003cba <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d111      	bne.n	8003cba <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003c96:	f7fe fa19 	bl	80020cc <get_msCounter>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	f002 0403 	and.w	r4, r2, #3
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	1ee3      	subs	r3, r4, #3
 8003ca6:	432b      	orrs	r3, r5
 8003ca8:	d105      	bne.n	8003cb6 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003caa:	f7fe fa01 	bl	80020b0 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003cb2:	f001 fe2e 	bl	8005912 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003cb6:	f7fe fa17 	bl	80020e8 <inc_msCounter>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40020800 	.word	0x40020800

08003ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	errLedOn(true);
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f7fe f9c5 	bl	8002060 <errLedOn>
  /* USER CODE END Error_Handler_Debug */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2104      	movs	r1, #4
 8003cea:	480c      	ldr	r0, [pc, #48]	; (8003d1c <ST7789_WriteCommand+0x40>)
 8003cec:	f001 fdf8 	bl	80058e0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <ST7789_WriteCommand+0x44>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	2396      	movs	r3, #150	; 0x96
 8003cf6:	1df9      	adds	r1, r7, #7
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f003 f954 	bl	8006fa6 <HAL_SPI_Transmit>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d006      	beq.n	8003d12 <ST7789_WriteCommand+0x36>
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <ST7789_WriteCommand+0x48>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	f043 0310 	orr.w	r3, r3, #16
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <ST7789_WriteCommand+0x48>)
 8003d10:	701a      	strb	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	2000006c 	.word	0x2000006c
 8003d24:	2000034c 	.word	0x2000034c

08003d28 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003d32:	2200      	movs	r2, #0
 8003d34:	2104      	movs	r1, #4
 8003d36:	480e      	ldr	r0, [pc, #56]	; (8003d70 <ST7789_WriteCommands+0x48>)
 8003d38:	f001 fdd2 	bl	80058e0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <ST7789_WriteCommands+0x4c>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	2196      	movs	r1, #150	; 0x96
 8003d46:	460b      	mov	r3, r1
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	f003 f929 	bl	8006fa6 <HAL_SPI_Transmit>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <ST7789_WriteCommands+0x40>
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <ST7789_WriteCommands+0x50>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <ST7789_WriteCommands+0x50>)
 8003d66:	701a      	strb	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40020000 	.word	0x40020000
 8003d74:	2000006c 	.word	0x2000006c
 8003d78:	2000034c 	.word	0x2000034c

08003d7c <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	481f      	ldr	r0, [pc, #124]	; (8003e0c <ST7789_WriteData+0x90>)
 8003d90:	f001 fda6 	bl	80058e0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003d94:	e028      	b.n	8003de8 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bf28      	it	cs
 8003da0:	4613      	movcs	r3, r2
 8003da2:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <ST7789_WriteData+0x94>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <ST7789_WriteData+0x98>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	89ba      	ldrh	r2, [r7, #12]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 fa34 	bl	8007220 <HAL_SPI_Transmit_DMA>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003dc2:	e002      	b.n	8003dca <ST7789_WriteData+0x4e>
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f000 fee7 	bl	8004b98 <HAL_Delay>
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <ST7789_WriteData+0x94>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f083 0301 	eor.w	r3, r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f5      	bne.n	8003dc4 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003dd8:	89bb      	ldrh	r3, [r7, #12]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003de0:	89bb      	ldrh	r3, [r7, #12]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1d3      	bne.n	8003d96 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <ST7789_WriteData+0x86>
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <ST7789_WriteData+0x9c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <ST7789_WriteData+0x9c>)
 8003e00:	701a      	strb	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	20000061 	.word	0x20000061
 8003e14:	2000006c 	.word	0x2000006c
 8003e18:	2000034c 	.word	0x2000034c

08003e1c <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	4814      	ldr	r0, [pc, #80]	; (8003e80 <ST7789_WriteDataLine+0x64>)
 8003e30:	f001 fd56 	bl	80058e0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <ST7789_WriteDataLine+0x68>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <ST7789_WriteDataLine+0x6c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	b292      	uxth	r2, r2
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 f9eb 	bl	8007220 <HAL_SPI_Transmit_DMA>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003e4e:	e002      	b.n	8003e56 <ST7789_WriteDataLine+0x3a>
 8003e50:	2001      	movs	r0, #1
 8003e52:	f000 fea1 	bl	8004b98 <HAL_Delay>
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <ST7789_WriteDataLine+0x68>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f5      	bne.n	8003e50 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <ST7789_WriteDataLine+0x5c>
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <ST7789_WriteDataLine+0x70>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f043 0310 	orr.w	r3, r3, #16
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <ST7789_WriteDataLine+0x70>)
 8003e76:	701a      	strb	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40020000 	.word	0x40020000
 8003e84:	20000061 	.word	0x20000061
 8003e88:	2000006c 	.word	0x2000006c
 8003e8c:	2000034c 	.word	0x2000034c

08003e90 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	480c      	ldr	r0, [pc, #48]	; (8003ed0 <ST7789_WriteSmallData+0x40>)
 8003ea0:	f001 fd1e 	bl	80058e0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <ST7789_WriteSmallData+0x44>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	2396      	movs	r3, #150	; 0x96
 8003eaa:	1df9      	adds	r1, r7, #7
 8003eac:	2201      	movs	r2, #1
 8003eae:	f003 f87a 	bl	8006fa6 <HAL_SPI_Transmit>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <ST7789_WriteSmallData+0x36>
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <ST7789_WriteSmallData+0x48>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f043 0310 	orr.w	r3, r3, #16
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <ST7789_WriteSmallData+0x48>)
 8003ec4:	701a      	strb	r2, [r3, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40020000 	.word	0x40020000
 8003ed4:	2000006c 	.word	0x2000006c
 8003ed8:	2000034c 	.word	0x2000034c

08003edc <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <ipsOn+0x18>
 8003eec:	2029      	movs	r0, #41	; 0x29
 8003eee:	f7ff fef5 	bl	8003cdc <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003ef2:	e002      	b.n	8003efa <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003ef4:	2028      	movs	r0, #40	; 0x28
 8003ef6:	f7ff fef1 	bl	8003cdc <ST7789_WriteCommand>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003f0e:	2036      	movs	r0, #54	; 0x36
 8003f10:	f7ff fee4 	bl	8003cdc <ST7789_WriteCommand>
	switch (m) {
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d81a      	bhi.n	8003f50 <ST7789_SetRotation+0x4c>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <ST7789_SetRotation+0x1c>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f31 	.word	0x08003f31
 8003f24:	08003f39 	.word	0x08003f39
 8003f28:	08003f41 	.word	0x08003f41
 8003f2c:	08003f49 	.word	0x08003f49
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003f30:	20c0      	movs	r0, #192	; 0xc0
 8003f32:	f7ff ffad 	bl	8003e90 <ST7789_WriteSmallData>
		break;
 8003f36:	e00c      	b.n	8003f52 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003f38:	20a0      	movs	r0, #160	; 0xa0
 8003f3a:	f7ff ffa9 	bl	8003e90 <ST7789_WriteSmallData>
		break;
 8003f3e:	e008      	b.n	8003f52 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7ff ffa5 	bl	8003e90 <ST7789_WriteSmallData>
		break;
 8003f46:	e004      	b.n	8003f52 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003f48:	2060      	movs	r0, #96	; 0x60
 8003f4a:	f7ff ffa1 	bl	8003e90 <ST7789_WriteSmallData>
		break;
 8003f4e:	e000      	b.n	8003f52 <ST7789_SetRotation+0x4e>
	default:
		break;
 8003f50:	bf00      	nop
	}
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	80fb      	strh	r3, [r7, #6]
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80bb      	strh	r3, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	807b      	strh	r3, [r7, #2]
 8003f76:	4613      	mov	r3, r2
 8003f78:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	82fb      	strh	r3, [r7, #22]
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003f82:	88bb      	ldrh	r3, [r7, #4]
 8003f84:	827b      	strh	r3, [r7, #18]
 8003f86:	883b      	ldrh	r3, [r7, #0]
 8003f88:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003f8a:	202a      	movs	r0, #42	; 0x2a
 8003f8c:	f7ff fea6 	bl	8003cdc <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003f90:	8afb      	ldrh	r3, [r7, #22]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	733b      	strb	r3, [r7, #12]
 8003f9a:	8afb      	ldrh	r3, [r7, #22]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	737b      	strb	r3, [r7, #13]
 8003fa0:	8abb      	ldrh	r3, [r7, #20]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	73bb      	strb	r3, [r7, #14]
 8003faa:	8abb      	ldrh	r3, [r7, #20]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fee0 	bl	8003d7c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003fbc:	202b      	movs	r0, #43	; 0x2b
 8003fbe:	f7ff fe8d 	bl	8003cdc <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003fc2:	8a7b      	ldrh	r3, [r7, #18]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	723b      	strb	r3, [r7, #8]
 8003fcc:	8a7b      	ldrh	r3, [r7, #18]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	727b      	strb	r3, [r7, #9]
 8003fd2:	8a3b      	ldrh	r3, [r7, #16]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	72bb      	strb	r3, [r7, #10]
 8003fdc:	8a3b      	ldrh	r3, [r7, #16]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fec7 	bl	8003d7c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003fee:	202c      	movs	r0, #44	; 0x2c
 8003ff0:	f7ff fe74 	bl	8003cdc <ST7789_WriteCommand>
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}

08003ffc <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8004000:	2014      	movs	r0, #20
 8004002:	f000 fdc9 	bl	8004b98 <HAL_Delay>
    ST7789_RST_Clr();
 8004006:	2200      	movs	r2, #0
 8004008:	2102      	movs	r1, #2
 800400a:	4808      	ldr	r0, [pc, #32]	; (800402c <ST7789_Reset+0x30>)
 800400c:	f001 fc68 	bl	80058e0 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8004010:	200a      	movs	r0, #10
 8004012:	f000 fdc1 	bl	8004b98 <HAL_Delay>
    ST7789_RST_Set();
 8004016:	2201      	movs	r2, #1
 8004018:	2102      	movs	r1, #2
 800401a:	4804      	ldr	r0, [pc, #16]	; (800402c <ST7789_Reset+0x30>)
 800401c:	f001 fc60 	bl	80058e0 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8004020:	2014      	movs	r0, #20
 8004022:	f000 fdb9 	bl	8004b98 <HAL_Delay>
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40020000 	.word	0x40020000

08004030 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b08f      	sub	sp, #60	; 0x3c
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800403a:	203a      	movs	r0, #58	; 0x3a
 800403c:	f7ff fe4e 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8004040:	2055      	movs	r0, #85	; 0x55
 8004042:	f7ff ff25 	bl	8003e90 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8004046:	20b2      	movs	r0, #178	; 0xb2
 8004048:	f7ff fe48 	bl	8003cdc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800404c:	4a3a      	ldr	r2, [pc, #232]	; (8004138 <ST7789_Init+0x108>)
 800404e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004056:	6018      	str	r0, [r3, #0]
 8004058:	3304      	adds	r3, #4
 800405a:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800405c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004060:	2105      	movs	r1, #5
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fe8a 	bl	8003d7c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8004068:	2003      	movs	r0, #3
 800406a:	f7ff ff4b 	bl	8003f04 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 800406e:	20b7      	movs	r0, #183	; 0xb7
 8004070:	f7ff fe34 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8004074:	2035      	movs	r0, #53	; 0x35
 8004076:	f7ff ff0b 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800407a:	20bb      	movs	r0, #187	; 0xbb
 800407c:	f7ff fe2e 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004080:	2019      	movs	r0, #25
 8004082:	f7ff ff05 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8004086:	20c0      	movs	r0, #192	; 0xc0
 8004088:	f7ff fe28 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 800408c:	202c      	movs	r0, #44	; 0x2c
 800408e:	f7ff feff 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8004092:	20c2      	movs	r0, #194	; 0xc2
 8004094:	f7ff fe22 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004098:	2001      	movs	r0, #1
 800409a:	f7ff fef9 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 800409e:	20ff      	movs	r0, #255	; 0xff
 80040a0:	f7ff fef6 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 80040a4:	20c3      	movs	r0, #195	; 0xc3
 80040a6:	f7ff fe19 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80040aa:	2012      	movs	r0, #18
 80040ac:	f7ff fef0 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 80040b0:	20c4      	movs	r0, #196	; 0xc4
 80040b2:	f7ff fe13 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 80040b6:	2020      	movs	r0, #32
 80040b8:	f7ff feea 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 80040bc:	20c6      	movs	r0, #198	; 0xc6
 80040be:	f7ff fe0d 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 80040c2:	200f      	movs	r0, #15
 80040c4:	f7ff fee4 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 80040c8:	20d0      	movs	r0, #208	; 0xd0
 80040ca:	f7ff fe07 	bl	8003cdc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 80040ce:	20a4      	movs	r0, #164	; 0xa4
 80040d0:	f7ff fede 	bl	8003e90 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 80040d4:	20a1      	movs	r0, #161	; 0xa1
 80040d6:	f7ff fedb 	bl	8003e90 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80040da:	20e0      	movs	r0, #224	; 0xe0
 80040dc:	f7ff fdfe 	bl	8003cdc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <ST7789_Init+0x10c>)
 80040e2:	f107 041c 	add.w	r4, r7, #28
 80040e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e8:	c407      	stmia	r4!, {r0, r1, r2}
 80040ea:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80040ec:	f107 031c 	add.w	r3, r7, #28
 80040f0:	210e      	movs	r1, #14
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fe42 	bl	8003d7c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80040f8:	20e1      	movs	r0, #225	; 0xe1
 80040fa:	f7ff fdef 	bl	8003cdc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <ST7789_Init+0x110>)
 8004100:	f107 040c 	add.w	r4, r7, #12
 8004104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004106:	c407      	stmia	r4!, {r0, r1, r2}
 8004108:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	210e      	movs	r1, #14
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fe33 	bl	8003d7c <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <ST7789_Init+0x114>)
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 800411a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800411e:	2104      	movs	r1, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fe01 	bl	8003d28 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f80d 	bl	8004148 <ST7789_Fill_Color>
}
 800412e:	bf00      	nop
 8004130:	373c      	adds	r7, #60	; 0x3c
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	bf00      	nop
 8004138:	0800dc6c 	.word	0x0800dc6c
 800413c:	0800dc74 	.word	0x0800dc74
 8004140:	0800dc84 	.word	0x0800dc84
 8004144:	28131121 	.word	0x28131121

08004148 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b0fc      	sub	sp, #496	; 0x1f0
 800414c:	af00      	add	r7, sp, #0
 800414e:	4602      	mov	r2, r0
 8004150:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004154:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004158:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800415a:	23ef      	movs	r3, #239	; 0xef
 800415c:	22ef      	movs	r2, #239	; 0xef
 800415e:	2100      	movs	r1, #0
 8004160:	2000      	movs	r0, #0
 8004162:	f7ff fefb 	bl	8003f5c <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8004166:	2300      	movs	r3, #0
 8004168:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800416c:	2300      	movs	r3, #0
 800416e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004172:	e024      	b.n	80041be <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8004174:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004178:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	b29b      	uxth	r3, r3
 8004182:	b21a      	sxth	r2, r3
 8004184:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004188:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	b21b      	sxth	r3, r3
 8004192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004196:	b21b      	sxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b219      	sxth	r1, r3
 800419c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 80041a0:	f107 020c 	add.w	r2, r7, #12
 80041a4:	4413      	add	r3, r2
 80041a6:	b28a      	uxth	r2, r1
 80041a8:	801a      	strh	r2, [r3, #0]
		i += 2;
 80041aa:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 80041ae:	3302      	adds	r3, #2
 80041b0:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 80041b4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80041b8:	3301      	adds	r3, #1
 80041ba:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80041be:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80041c2:	2bef      	cmp	r3, #239	; 0xef
 80041c4:	d9d6      	bls.n	8004174 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80041cc:	e00b      	b.n	80041e6 <ST7789_Fill_Color+0x9e>
 80041ce:	f107 030c 	add.w	r3, r7, #12
 80041d2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe20 	bl	8003e1c <ST7789_WriteDataLine>
 80041dc:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80041e0:	3301      	adds	r3, #1
 80041e2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80041e6:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80041ea:	2bef      	cmp	r3, #239	; 0xef
 80041ec:	d9ef      	bls.n	80041ce <ST7789_Fill_Color+0x86>

//#endif
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80041fa:	b590      	push	{r4, r7, lr}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	461a      	mov	r2, r3
 8004208:	4623      	mov	r3, r4
 800420a:	80fb      	strh	r3, [r7, #6]
 800420c:	4603      	mov	r3, r0
 800420e:	80bb      	strh	r3, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	807b      	strh	r3, [r7, #2]
 8004214:	4613      	mov	r3, r2
 8004216:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8004218:	887b      	ldrh	r3, [r7, #2]
 800421a:	2bef      	cmp	r3, #239	; 0xef
 800421c:	d82b      	bhi.n	8004276 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800421e:	883b      	ldrh	r3, [r7, #0]
 8004220:	2bef      	cmp	r3, #239	; 0xef
 8004222:	d828      	bhi.n	8004276 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8004224:	8c3b      	ldrh	r3, [r7, #32]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	723b      	strb	r3, [r7, #8]
 800422e:	8c3b      	ldrh	r3, [r7, #32]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8004234:	883b      	ldrh	r3, [r7, #0]
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	88b9      	ldrh	r1, [r7, #4]
 800423a:	88f8      	ldrh	r0, [r7, #6]
 800423c:	f7ff fe8e 	bl	8003f5c <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8004240:	88bb      	ldrh	r3, [r7, #4]
 8004242:	81fb      	strh	r3, [r7, #14]
 8004244:	e012      	b.n	800426c <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	81bb      	strh	r3, [r7, #12]
 800424a:	e008      	b.n	800425e <ST7789_Fill+0x64>
 800424c:	f107 0308 	add.w	r3, r7, #8
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fd92 	bl	8003d7c <ST7789_WriteData>
 8004258:	89bb      	ldrh	r3, [r7, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	81bb      	strh	r3, [r7, #12]
 800425e:	89ba      	ldrh	r2, [r7, #12]
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	429a      	cmp	r2, r3
 8004264:	d9f2      	bls.n	800424c <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8004266:	89fb      	ldrh	r3, [r7, #14]
 8004268:	3301      	adds	r3, #1
 800426a:	81fb      	strh	r3, [r7, #14]
 800426c:	89fa      	ldrh	r2, [r7, #14]
 800426e:	883b      	ldrh	r3, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d9e8      	bls.n	8004246 <ST7789_Fill+0x4c>
 8004274:	e000      	b.n	8004278 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8004276:	bf00      	nop
	}
}
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bd90      	pop	{r4, r7, pc}

0800427e <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800427e:	b082      	sub	sp, #8
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
 8004288:	4603      	mov	r3, r0
 800428a:	80fb      	strh	r3, [r7, #6]
 800428c:	460b      	mov	r3, r1
 800428e:	80bb      	strh	r3, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004294:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004298:	b29a      	uxth	r2, r3
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	4413      	add	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29c      	uxth	r4, r3
 80042a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	88bb      	ldrh	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	88b9      	ldrh	r1, [r7, #4]
 80042b6:	88f8      	ldrh	r0, [r7, #6]
 80042b8:	4622      	mov	r2, r4
 80042ba:	f7ff fe4f 	bl	8003f5c <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 80042be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	733b      	strb	r3, [r7, #12]
 80042c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 80042ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	723b      	strb	r3, [r7, #8]
 80042da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e02f      	b.n	800434c <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 80042ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	3b20      	subs	r3, #32
 80042f2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	440b      	add	r3, r1
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e015      	b.n	800433a <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <ST7789_WriteChar+0xa8>
				uk = cdata;
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e002      	b.n	800432c <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 800432c:	2102      	movs	r1, #2
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7ff fd24 	bl	8003d7c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	3301      	adds	r3, #1
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800433e:	461a      	mov	r2, r3
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4293      	cmp	r3, r2
 8004344:	d3e3      	bcc.n	800430e <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004350:	461a      	mov	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4293      	cmp	r3, r2
 8004356:	d3c9      	bcc.n	80042ec <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004364:	b002      	add	sp, #8
 8004366:	4770      	bx	lr

08004368 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004368:	b082      	sub	sp, #8
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af04      	add	r7, sp, #16
 8004370:	603a      	str	r2, [r7, #0]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	4603      	mov	r3, r0
 8004376:	80fb      	strh	r3, [r7, #6]
 8004378:	460b      	mov	r3, r1
 800437a:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d03f      	beq.n	8004402 <ST7789_WriteString+0x9a>

	while (*str) {
 8004382:	e039      	b.n	80043f8 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	7d3a      	ldrb	r2, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	2bef      	cmp	r3, #239	; 0xef
 800438c:	dd13      	ble.n	80043b6 <ST7789_WriteString+0x4e>
			x = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004392:	7d7b      	ldrb	r3, [r7, #21]
 8004394:	b29a      	uxth	r2, r3
 8004396:	88bb      	ldrh	r3, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 800439c:	88bb      	ldrh	r3, [r7, #4]
 800439e:	7d7a      	ldrb	r2, [r7, #21]
 80043a0:	4413      	add	r3, r2
 80043a2:	2bef      	cmp	r3, #239	; 0xef
 80043a4:	dc2f      	bgt.n	8004406 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d103      	bne.n	80043b6 <ST7789_WriteString+0x4e>
				str++;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	603b      	str	r3, [r7, #0]
				continue;
 80043b4:	e020      	b.n	80043f8 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b0a      	cmp	r3, #10
 80043bc:	d012      	beq.n	80043e4 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	88b9      	ldrh	r1, [r7, #4]
 80043c4:	88f8      	ldrh	r0, [r7, #6]
 80043c6:	8c3b      	ldrh	r3, [r7, #32]
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	8bbb      	ldrh	r3, [r7, #28]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f7ff ff53 	bl	800427e <ST7789_WriteChar>
			x += font.width;
 80043d8:	7d3b      	ldrb	r3, [r7, #20]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	4413      	add	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
 80043e2:	e006      	b.n	80043f2 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80043e8:	7d7b      	ldrb	r3, [r7, #21]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1c1      	bne.n	8004384 <ST7789_WriteString+0x1c>
 8004400:	e002      	b.n	8004408 <ST7789_WriteString+0xa0>
	if (!str) return;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8004406:	bf00      	nop
	}
}
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004410:	b002      	add	sp, #8
 8004412:	4770      	bx	lr

08004414 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b0a4      	sub	sp, #144	; 0x90
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	227c      	movs	r2, #124	; 0x7c
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f008 fa53 	bl	800c8d8 <memset>

	memset(st, 0x20, 127);
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	227f      	movs	r2, #127	; 0x7f
 8004438:	2120      	movs	r1, #32
 800443a:	4618      	mov	r0, r3
 800443c:	f008 fa4c 	bl	800c8d8 <memset>
	int8_t k = strlen(str);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fb fec5 	bl	80001d0 <strlen>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 800444c:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	429a      	cmp	r2, r3
 8004454:	da25      	bge.n	80044a2 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	0fda      	lsrs	r2, r3, #31
 8004460:	4413      	add	r3, r2
 8004462:	105b      	asrs	r3, r3, #1
 8004464:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004468:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800446c:	f107 020c 	add.w	r2, r7, #12
 8004470:	4413      	add	r3, r2
 8004472:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4618      	mov	r0, r3
 800447a:	f008 fa1f 	bl	800c8bc <memcpy>
		st[k + n*2 + 1] = '\0';
 800447e:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004482:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	3301      	adds	r3, #1
 800448c:	3390      	adds	r3, #144	; 0x90
 800448e:	443b      	add	r3, r7
 8004490:	2200      	movs	r2, #0
 8004492:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f008 fbcf 	bl	800cc40 <strcpy>
	}

	return str;
 80044a2:	687b      	ldr	r3, [r7, #4]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3790      	adds	r7, #144	; 0x90
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
 80044b6:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_MspInit+0x74>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_MspInit+0x74>)
 80044bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_MspInit+0x74>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_MspInit+0x74>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_MspInit+0x74>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <HAL_MspInit+0x74>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	210f      	movs	r1, #15
 80044ee:	f06f 0001 	mvn.w	r0, #1
 80044f2:	f000 fc2d 	bl	8004d50 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2105      	movs	r1, #5
 80044fa:	2005      	movs	r0, #5
 80044fc:	f000 fc28 	bl	8004d50 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004500:	2005      	movs	r0, #5
 8004502:	f000 fc41 	bl	8004d88 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2105      	movs	r1, #5
 800450a:	2005      	movs	r0, #5
 800450c:	f000 fc20 	bl	8004d50 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004510:	2005      	movs	r0, #5
 8004512:	f000 fc39 	bl	8004d88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800

08004524 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <HAL_RTC_MspInit+0x4c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d110      	bne.n	8004566 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004544:	2302      	movs	r3, #2
 8004546:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RTC_MspInit+0x50>)
 800454a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	4618      	mov	r0, r3
 8004552:	f002 f8bf 	bl	80066d4 <HAL_RCCEx_PeriphCLKConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 800455c:	f7ff fbb6 	bl	8003ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RTC_MspInit+0x54>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004566:	bf00      	nop
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40002800 	.word	0x40002800
 8004574:	00190300 	.word	0x00190300
 8004578:	42470e3c 	.word	0x42470e3c

0800457c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a39      	ldr	r2, [pc, #228]	; (8004680 <HAL_SPI_MspInit+0x104>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d16b      	bne.n	8004676 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <HAL_SPI_MspInit+0x108>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	4a37      	ldr	r2, [pc, #220]	; (8004684 <HAL_SPI_MspInit+0x108>)
 80045a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045ac:	6453      	str	r3, [r2, #68]	; 0x44
 80045ae:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_SPI_MspInit+0x108>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_SPI_MspInit+0x108>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4a30      	ldr	r2, [pc, #192]	; (8004684 <HAL_SPI_MspInit+0x108>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_SPI_MspInit+0x108>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80045d6:	23a0      	movs	r3, #160	; 0xa0
 80045d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e2:	2303      	movs	r3, #3
 80045e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045e6:	2305      	movs	r3, #5
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	4619      	mov	r1, r3
 80045f0:	4825      	ldr	r0, [pc, #148]	; (8004688 <HAL_SPI_MspInit+0x10c>)
 80045f2:	f000 ffd9 	bl	80055a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_SPI_MspInit+0x110>)
 80045f8:	4a25      	ldr	r2, [pc, #148]	; (8004690 <HAL_SPI_MspInit+0x114>)
 80045fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80045fc:	4b23      	ldr	r3, [pc, #140]	; (800468c <HAL_SPI_MspInit+0x110>)
 80045fe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004602:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004604:	4b21      	ldr	r3, [pc, #132]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004606:	2240      	movs	r2, #64	; 0x40
 8004608:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_SPI_MspInit+0x110>)
 800460c:	2200      	movs	r2, #0
 800460e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004616:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_SPI_MspInit+0x110>)
 800461a:	2200      	movs	r2, #0
 800461c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004620:	2200      	movs	r2, #0
 8004622:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004626:	2200      	movs	r2, #0
 8004628:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800462a:	4b18      	ldr	r3, [pc, #96]	; (800468c <HAL_SPI_MspInit+0x110>)
 800462c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004630:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004632:	4b16      	ldr	r3, [pc, #88]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004634:	2204      	movs	r2, #4
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <HAL_SPI_MspInit+0x110>)
 800463a:	2203      	movs	r2, #3
 800463c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004640:	2200      	movs	r2, #0
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800464a:	4810      	ldr	r0, [pc, #64]	; (800468c <HAL_SPI_MspInit+0x110>)
 800464c:	f000 fbaa 	bl	8004da4 <HAL_DMA_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004656:	f7ff fb39 	bl	8003ccc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <HAL_SPI_MspInit+0x110>)
 800465e:	649a      	str	r2, [r3, #72]	; 0x48
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <HAL_SPI_MspInit+0x110>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004666:	2200      	movs	r2, #0
 8004668:	2102      	movs	r1, #2
 800466a:	2023      	movs	r0, #35	; 0x23
 800466c:	f000 fb70 	bl	8004d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004670:	2023      	movs	r0, #35	; 0x23
 8004672:	f000 fb89 	bl	8004d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004676:	bf00      	nop
 8004678:	3728      	adds	r7, #40	; 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40013000 	.word	0x40013000
 8004684:	40023800 	.word	0x40023800
 8004688:	40020000 	.word	0x40020000
 800468c:	200001b4 	.word	0x200001b4
 8004690:	40026458 	.word	0x40026458

08004694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a4:	d115      	bne.n	80046d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_TIM_Base_MspInit+0x48>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <HAL_TIM_Base_MspInit+0x48>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6413      	str	r3, [r2, #64]	; 0x40
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_TIM_Base_MspInit+0x48>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80046c2:	2200      	movs	r2, #0
 80046c4:	2101      	movs	r1, #1
 80046c6:	201c      	movs	r0, #28
 80046c8:	f000 fb42 	bl	8004d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046cc:	201c      	movs	r0, #28
 80046ce:	f000 fb5b 	bl	8004d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <HAL_UART_MspInit+0xf4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d163      	bne.n	80047ca <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <HAL_UART_MspInit+0xf8>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_UART_MspInit+0xf8>)
 800470c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_UART_MspInit+0xf8>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b2d      	ldr	r3, [pc, #180]	; (80047d8 <HAL_UART_MspInit+0xf8>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <HAL_UART_MspInit+0xf8>)
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <HAL_UART_MspInit+0xf8>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800473a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800473e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004748:	2303      	movs	r3, #3
 800474a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800474c:	2307      	movs	r3, #7
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4619      	mov	r1, r3
 8004756:	4821      	ldr	r0, [pc, #132]	; (80047dc <HAL_UART_MspInit+0xfc>)
 8004758:	f000 ff26 	bl	80055a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800475c:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_UART_MspInit+0x100>)
 800475e:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <HAL_UART_MspInit+0x104>)
 8004760:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <HAL_UART_MspInit+0x100>)
 8004764:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004768:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_UART_MspInit+0x100>)
 800476c:	2240      	movs	r2, #64	; 0x40
 800476e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004770:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_UART_MspInit+0x100>)
 8004772:	2200      	movs	r2, #0
 8004774:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <HAL_UART_MspInit+0x100>)
 8004778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800477c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477e:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <HAL_UART_MspInit+0x100>)
 8004780:	2200      	movs	r2, #0
 8004782:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004784:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <HAL_UART_MspInit+0x100>)
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <HAL_UART_MspInit+0x100>)
 800478c:	2200      	movs	r2, #0
 800478e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <HAL_UART_MspInit+0x100>)
 8004792:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004796:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_UART_MspInit+0x100>)
 800479a:	2200      	movs	r2, #0
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800479e:	4810      	ldr	r0, [pc, #64]	; (80047e0 <HAL_UART_MspInit+0x100>)
 80047a0:	f000 fb00 	bl	8004da4 <HAL_DMA_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80047aa:	f7ff fa8f 	bl	8003ccc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <HAL_UART_MspInit+0x100>)
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34
 80047b4:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <HAL_UART_MspInit+0x100>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2105      	movs	r1, #5
 80047be:	2027      	movs	r0, #39	; 0x27
 80047c0:	f000 fac6 	bl	8004d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047c4:	2027      	movs	r0, #39	; 0x27
 80047c6:	f000 fadf 	bl	8004d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80047ca:	bf00      	nop
 80047cc:	3728      	adds	r7, #40	; 0x28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40004800 	.word	0x40004800
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40020400 	.word	0x40020400
 80047e0:	200002a0 	.word	0x200002a0
 80047e4:	40026058 	.word	0x40026058

080047e8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_FSMC_MspInit+0x98>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d139      	bne.n	8004878 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_FSMC_MspInit+0x98>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_FSMC_MspInit+0x9c>)
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_FSMC_MspInit+0x9c>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6393      	str	r3, [r2, #56]	; 0x38
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_FSMC_MspInit+0x9c>)
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004826:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800482a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482c:	2302      	movs	r3, #2
 800482e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004834:	2303      	movs	r3, #3
 8004836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004838:	230c      	movs	r3, #12
 800483a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4811      	ldr	r0, [pc, #68]	; (8004888 <HAL_FSMC_MspInit+0xa0>)
 8004842:	f000 feb1 	bl	80055a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004846:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800484a:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004854:	2303      	movs	r3, #3
 8004856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004858:	230c      	movs	r3, #12
 800485a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	4619      	mov	r1, r3
 8004860:	480a      	ldr	r0, [pc, #40]	; (800488c <HAL_FSMC_MspInit+0xa4>)
 8004862:	f000 fea1 	bl	80055a8 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2105      	movs	r1, #5
 800486a:	2030      	movs	r0, #48	; 0x30
 800486c:	f000 fa70 	bl	8004d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004870:	2030      	movs	r0, #48	; 0x30
 8004872:	f000 fa89 	bl	8004d88 <HAL_NVIC_EnableIRQ>
 8004876:	e000      	b.n	800487a <HAL_FSMC_MspInit+0x92>
    return;
 8004878:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20001bac 	.word	0x20001bac
 8004884:	40023800 	.word	0x40023800
 8004888:	40021000 	.word	0x40021000
 800488c:	40020c00 	.word	0x40020c00

08004890 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004898:	f7ff ffa6 	bl	80047e8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	; 0x30
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80048b4:	2200      	movs	r2, #0
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	2019      	movs	r0, #25
 80048ba:	f000 fa49 	bl	8004d50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80048be:	2019      	movs	r0, #25
 80048c0:	f000 fa62 	bl	8004d88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_InitTick+0xa4>)
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_InitTick+0xa4>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6453      	str	r3, [r2, #68]	; 0x44
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <HAL_InitTick+0xa4>)
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048e0:	f107 0210 	add.w	r2, r7, #16
 80048e4:	f107 0314 	add.w	r3, r7, #20
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fec0 	bl	8006670 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80048f0:	f001 feaa 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4603      	mov	r3, r0
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	4a13      	ldr	r2, [pc, #76]	; (800494c <HAL_InitTick+0xa8>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0c9b      	lsrs	r3, r3, #18
 8004904:	3b01      	subs	r3, #1
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <HAL_InitTick+0xac>)
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <HAL_InitTick+0xb0>)
 800490c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_InitTick+0xac>)
 8004910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004914:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <HAL_InitTick+0xac>)
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_InitTick+0xac>)
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_InitTick+0xac>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004928:	4809      	ldr	r0, [pc, #36]	; (8004950 <HAL_InitTick+0xac>)
 800492a:	f002 ffa3 	bl	8007874 <HAL_TIM_Base_Init>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d104      	bne.n	800493e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004934:	4806      	ldr	r0, [pc, #24]	; (8004950 <HAL_InitTick+0xac>)
 8004936:	f002 ffed 	bl	8007914 <HAL_TIM_Base_Start_IT>
 800493a:	4603      	mov	r3, r0
 800493c:	e000      	b.n	8004940 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
}
 8004940:	4618      	mov	r0, r3
 8004942:	3730      	adds	r7, #48	; 0x30
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	431bde83 	.word	0x431bde83
 8004950:	20001bb0 	.word	0x20001bb0
 8004954:	40010000 	.word	0x40010000

08004958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004966:	b480      	push	{r7}
 8004968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800496a:	e7fe      	b.n	800496a <HardFault_Handler+0x4>

0800496c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004970:	e7fe      	b.n	8004970 <MemManage_Handler+0x4>

08004972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004972:	b480      	push	{r7}
 8004974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004976:	e7fe      	b.n	8004976 <BusFault_Handler+0x4>

08004978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800497c:	e7fe      	b.n	800497c <UsageFault_Handler+0x4>

0800497e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80049a0:	4802      	ldr	r0, [pc, #8]	; (80049ac <DMA1_Stream3_IRQHandler+0x10>)
 80049a2:	f000 fb97 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200002a0 	.word	0x200002a0

080049b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049b4:	4802      	ldr	r0, [pc, #8]	; (80049c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80049b6:	f003 f81d 	bl	80079f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20001bb0 	.word	0x20001bb0

080049c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049c8:	4802      	ldr	r0, [pc, #8]	; (80049d4 <TIM2_IRQHandler+0x10>)
 80049ca:	f003 f813 	bl	80079f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000214 	.word	0x20000214

080049d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80049dc:	4802      	ldr	r0, [pc, #8]	; (80049e8 <SPI1_IRQHandler+0x10>)
 80049de:	f002 fcd5 	bl	800738c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000015c 	.word	0x2000015c

080049ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <USART3_IRQHandler+0x10>)
 80049f2:	f003 fcbd 	bl	8008370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	2000025c 	.word	0x2000025c

08004a00 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <FSMC_IRQHandler+0x10>)
 8004a06:	f000 ffec 	bl	80059e2 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000300 	.word	0x20000300

08004a14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <DMA2_Stream3_IRQHandler+0x10>)
 8004a1a:	f000 fb5b 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200001b4 	.word	0x200001b4

08004a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <_sbrk+0x5c>)
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <_sbrk+0x60>)
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <_sbrk+0x64>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <_sbrk+0x64>)
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <_sbrk+0x68>)
 8004a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <_sbrk+0x64>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d207      	bcs.n	8004a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a58:	f007 fe50 	bl	800c6fc <__errno>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	220c      	movs	r2, #12
 8004a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a66:	e009      	b.n	8004a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <_sbrk+0x64>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <_sbrk+0x64>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <_sbrk+0x64>)
 8004a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20020000 	.word	0x20020000
 8004a88:	00000800 	.word	0x00000800
 8004a8c:	20001bf8 	.word	0x20001bf8
 8004a90:	20006a20 	.word	0x20006a20

08004a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <SystemInit+0x28>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <SystemInit+0x28>)
 8004aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <SystemInit+0x28>)
 8004aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aae:	609a      	str	r2, [r3, #8]
#endif
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ac6:	e003      	b.n	8004ad0 <LoopCopyDataInit>

08004ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ace:	3104      	adds	r1, #4

08004ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ad0:	480b      	ldr	r0, [pc, #44]	; (8004b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ad8:	d3f6      	bcc.n	8004ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004adc:	e002      	b.n	8004ae4 <LoopFillZerobss>

08004ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ae0:	f842 3b04 	str.w	r3, [r2], #4

08004ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ae8:	d3f9      	bcc.n	8004ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004aea:	f7ff ffd3 	bl	8004a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aee:	f007 feb7 	bl	800c860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004af2:	f7fc f8b3 	bl	8000c5c <main>
  bx  lr    
 8004af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004af8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004afc:	0800ffd0 	.word	0x0800ffd0
  ldr  r0, =_sdata
 8004b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b04:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 8004b08:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 8004b0c:	20006a20 	.word	0x20006a20

08004b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b10:	e7fe      	b.n	8004b10 <ADC_IRQHandler>
	...

08004b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <HAL_Init+0x40>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <HAL_Init+0x40>)
 8004b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_Init+0x40>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <HAL_Init+0x40>)
 8004b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <HAL_Init+0x40>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <HAL_Init+0x40>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f000 f8fc 	bl	8004d3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b42:	200f      	movs	r0, #15
 8004b44:	f7ff feae 	bl	80048a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b48:	f7ff fcb0 	bl	80044ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_IncTick+0x20>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_IncTick+0x24>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <HAL_IncTick+0x24>)
 8004b6a:	6013      	str	r3, [r2, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	200000a4 	.word	0x200000a4
 8004b7c:	20001bfc 	.word	0x20001bfc

08004b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return uwTick;
 8004b84:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <HAL_GetTick+0x14>)
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20001bfc 	.word	0x20001bfc

08004b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ba0:	f7ff ffee 	bl	8004b80 <HAL_GetTick>
 8004ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb0:	d005      	beq.n	8004bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <HAL_Delay+0x44>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bbe:	bf00      	nop
 8004bc0:	f7ff ffde 	bl	8004b80 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d8f7      	bhi.n	8004bc0 <HAL_Delay+0x28>
  {
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	200000a4 	.word	0x200000a4

08004be0 <__NVIC_SetPriorityGrouping>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c12:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <__NVIC_SetPriorityGrouping+0x44>)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	60d3      	str	r3, [r2, #12]
}
 8004c18:	bf00      	nop
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <__NVIC_GetPriorityGrouping>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <__NVIC_GetPriorityGrouping+0x18>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 0307 	and.w	r3, r3, #7
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <__NVIC_EnableIRQ>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	db0b      	blt.n	8004c6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	f003 021f 	and.w	r2, r3, #31
 8004c5c:	4907      	ldr	r1, [pc, #28]	; (8004c7c <__NVIC_EnableIRQ+0x38>)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2001      	movs	r0, #1
 8004c66:	fa00 f202 	lsl.w	r2, r0, r2
 8004c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	e000e100 	.word	0xe000e100

08004c80 <__NVIC_SetPriority>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	db0a      	blt.n	8004caa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	490c      	ldr	r1, [pc, #48]	; (8004ccc <__NVIC_SetPriority+0x4c>)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	0112      	lsls	r2, r2, #4
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ca8:	e00a      	b.n	8004cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4908      	ldr	r1, [pc, #32]	; (8004cd0 <__NVIC_SetPriority+0x50>)
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	3b04      	subs	r3, #4
 8004cb8:	0112      	lsls	r2, r2, #4
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	761a      	strb	r2, [r3, #24]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000e100 	.word	0xe000e100
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <NVIC_EncodePriority>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	; 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f1c3 0307 	rsb	r3, r3, #7
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	bf28      	it	cs
 8004cf2:	2304      	movcs	r3, #4
 8004cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d902      	bls.n	8004d04 <NVIC_EncodePriority+0x30>
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3b03      	subs	r3, #3
 8004d02:	e000      	b.n	8004d06 <NVIC_EncodePriority+0x32>
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43da      	mvns	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	401a      	ands	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	43d9      	mvns	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d2c:	4313      	orrs	r3, r2
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3724      	adds	r7, #36	; 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ff4c 	bl	8004be0 <__NVIC_SetPriorityGrouping>
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d62:	f7ff ff61 	bl	8004c28 <__NVIC_GetPriorityGrouping>
 8004d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	6978      	ldr	r0, [r7, #20]
 8004d6e:	f7ff ffb1 	bl	8004cd4 <NVIC_EncodePriority>
 8004d72:	4602      	mov	r2, r0
 8004d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff80 	bl	8004c80 <__NVIC_SetPriority>
}
 8004d80:	bf00      	nop
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff ff54 	bl	8004c44 <__NVIC_EnableIRQ>
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7ff fee6 	bl	8004b80 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e099      	b.n	8004ef4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004de0:	e00f      	b.n	8004e02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004de2:	f7ff fecd 	bl	8004b80 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d908      	bls.n	8004e02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e078      	b.n	8004ef4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e8      	bne.n	8004de2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_DMA_Init+0x158>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d107      	bne.n	8004e6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	4313      	orrs	r3, r2
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0307 	bic.w	r3, r3, #7
 8004e82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d117      	bne.n	8004ec6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb01 	bl	80054b0 <DMA_CheckFifoParam>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e016      	b.n	8004ef4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fab8 	bl	8005444 <DMA_CalcBaseAndBitshift>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004edc:	223f      	movs	r2, #63	; 0x3f
 8004ede:	409a      	lsls	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	f010803f 	.word	0xf010803f

08004f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_DMA_Start_IT+0x26>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e040      	b.n	8004fa8 <HAL_DMA_Start_IT+0xa8>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d12f      	bne.n	8004f9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa4a 	bl	80053e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	223f      	movs	r2, #63	; 0x3f
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0216 	orr.w	r2, r2, #22
 8004f6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0208 	orr.w	r2, r2, #8
 8004f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e005      	b.n	8004fa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fbe:	f7ff fddf 	bl	8004b80 <HAL_GetTick>
 8004fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d008      	beq.n	8004fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2280      	movs	r2, #128	; 0x80
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e052      	b.n	8005088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0216 	bic.w	r2, r2, #22
 8004ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_DMA_Abort+0x62>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0208 	bic.w	r2, r2, #8
 8005020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005032:	e013      	b.n	800505c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005034:	f7ff fda4 	bl	8004b80 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b05      	cmp	r3, #5
 8005040:	d90c      	bls.n	800505c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2203      	movs	r2, #3
 800504c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e015      	b.n	8005088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e4      	bne.n	8005034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	223f      	movs	r2, #63	; 0x3f
 8005070:	409a      	lsls	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2280      	movs	r2, #128	; 0x80
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e00c      	b.n	80050c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2205      	movs	r2, #5
 80050b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050e0:	4b8e      	ldr	r3, [pc, #568]	; (800531c <HAL_DMA_IRQHandler+0x248>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a8e      	ldr	r2, [pc, #568]	; (8005320 <HAL_DMA_IRQHandler+0x24c>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	0a9b      	lsrs	r3, r3, #10
 80050ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	2208      	movs	r2, #8
 8005100:	409a      	lsls	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01a      	beq.n	8005140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d013      	beq.n	8005140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0204 	bic.w	r2, r2, #4
 8005126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512c:	2208      	movs	r2, #8
 800512e:	409a      	lsls	r2, r3
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	f043 0201 	orr.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	2201      	movs	r2, #1
 8005164:	409a      	lsls	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	f043 0202 	orr.w	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517a:	2204      	movs	r2, #4
 800517c:	409a      	lsls	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4013      	ands	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00b      	beq.n	80051ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	2204      	movs	r2, #4
 800519a:	409a      	lsls	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f043 0204 	orr.w	r2, r3, #4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	2210      	movs	r2, #16
 80051b2:	409a      	lsls	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d043      	beq.n	8005244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d03c      	beq.n	8005244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	2210      	movs	r2, #16
 80051d0:	409a      	lsls	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d018      	beq.n	8005216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d108      	bne.n	8005204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d024      	beq.n	8005244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4798      	blx	r3
 8005202:	e01f      	b.n	8005244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
 8005214:	e016      	b.n	8005244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0208 	bic.w	r2, r2, #8
 8005232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005248:	2220      	movs	r2, #32
 800524a:	409a      	lsls	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 808f 	beq.w	8005374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8087 	beq.w	8005374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	2220      	movs	r2, #32
 800526c:	409a      	lsls	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b05      	cmp	r3, #5
 800527c:	d136      	bne.n	80052ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0216 	bic.w	r2, r2, #22
 800528c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_DMA_IRQHandler+0x1da>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0208 	bic.w	r2, r2, #8
 80052bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c2:	223f      	movs	r2, #63	; 0x3f
 80052c4:	409a      	lsls	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d07e      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
        }
        return;
 80052ea:	e079      	b.n	80053e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01d      	beq.n	8005336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	2b00      	cmp	r3, #0
 800530e:	d031      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
 8005318:	e02c      	b.n	8005374 <HAL_DMA_IRQHandler+0x2a0>
 800531a:	bf00      	nop
 800531c:	2000009c 	.word	0x2000009c
 8005320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d023      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
 8005334:	e01e      	b.n	8005374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10f      	bne.n	8005364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0210 	bic.w	r2, r2, #16
 8005352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2b00      	cmp	r3, #0
 800537a:	d032      	beq.n	80053e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d022      	beq.n	80053ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2205      	movs	r2, #5
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d307      	bcc.n	80053bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f2      	bne.n	80053a0 <HAL_DMA_IRQHandler+0x2cc>
 80053ba:	e000      	b.n	80053be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
 80053de:	e000      	b.n	80053e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80053e0:	bf00      	nop
    }
  }
}
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d108      	bne.n	8005428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005426:	e007      	b.n	8005438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	60da      	str	r2, [r3, #12]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	3b10      	subs	r3, #16
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <DMA_CalcBaseAndBitshift+0x68>)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d909      	bls.n	8005486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	1d1a      	adds	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	659a      	str	r2, [r3, #88]	; 0x58
 8005484:	e007      	b.n	8005496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	aaaaaaab 	.word	0xaaaaaaab
 80054ac:	0800fe24 	.word	0x0800fe24

080054b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11f      	bne.n	800550a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d856      	bhi.n	800557e <DMA_CheckFifoParam+0xce>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <DMA_CheckFifoParam+0x28>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054fb 	.word	0x080054fb
 80054e0:	080054e9 	.word	0x080054e9
 80054e4:	0800557f 	.word	0x0800557f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d046      	beq.n	8005582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f8:	e043      	b.n	8005582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005502:	d140      	bne.n	8005586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005508:	e03d      	b.n	8005586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	d121      	bne.n	8005558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d837      	bhi.n	800558a <DMA_CheckFifoParam+0xda>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <DMA_CheckFifoParam+0x70>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005531 	.word	0x08005531
 8005524:	08005537 	.word	0x08005537
 8005528:	08005531 	.word	0x08005531
 800552c:	08005549 	.word	0x08005549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
      break;
 8005534:	e030      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d025      	beq.n	800558e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005546:	e022      	b.n	800558e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005550:	d11f      	bne.n	8005592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005556:	e01c      	b.n	8005592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d903      	bls.n	8005566 <DMA_CheckFifoParam+0xb6>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d003      	beq.n	800556c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005564:	e018      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
      break;
 800556a:	e015      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00e      	beq.n	8005596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      break;
 800557c:	e00b      	b.n	8005596 <DMA_CheckFifoParam+0xe6>
      break;
 800557e:	bf00      	nop
 8005580:	e00a      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      break;
 8005582:	bf00      	nop
 8005584:	e008      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      break;
 8005586:	bf00      	nop
 8005588:	e006      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      break;
 800558a:	bf00      	nop
 800558c:	e004      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      break;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      break;   
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <DMA_CheckFifoParam+0xe8>
      break;
 8005596:	bf00      	nop
    }
  } 
  
  return status; 
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop

080055a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e16b      	b.n	800589c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055c4:	2201      	movs	r2, #1
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	f040 815a 	bne.w	8005896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d005      	beq.n	80055fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d130      	bne.n	800565c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	2203      	movs	r2, #3
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005630:	2201      	movs	r2, #1
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 0201 	and.w	r2, r3, #1
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d017      	beq.n	8005698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	2203      	movs	r2, #3
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d123      	bne.n	80056ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	08da      	lsrs	r2, r3, #3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3208      	adds	r2, #8
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	220f      	movs	r2, #15
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	08da      	lsrs	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3208      	adds	r2, #8
 80056e6:	69b9      	ldr	r1, [r7, #24]
 80056e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	2203      	movs	r2, #3
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 0203 	and.w	r2, r3, #3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80b4 	beq.w	8005896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	4b60      	ldr	r3, [pc, #384]	; (80058b4 <HAL_GPIO_Init+0x30c>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	4a5f      	ldr	r2, [pc, #380]	; (80058b4 <HAL_GPIO_Init+0x30c>)
 8005738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800573c:	6453      	str	r3, [r2, #68]	; 0x44
 800573e:	4b5d      	ldr	r3, [pc, #372]	; (80058b4 <HAL_GPIO_Init+0x30c>)
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800574a:	4a5b      	ldr	r2, [pc, #364]	; (80058b8 <HAL_GPIO_Init+0x310>)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	3302      	adds	r3, #2
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	220f      	movs	r2, #15
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4013      	ands	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a52      	ldr	r2, [pc, #328]	; (80058bc <HAL_GPIO_Init+0x314>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02b      	beq.n	80057ce <HAL_GPIO_Init+0x226>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a51      	ldr	r2, [pc, #324]	; (80058c0 <HAL_GPIO_Init+0x318>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d025      	beq.n	80057ca <HAL_GPIO_Init+0x222>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a50      	ldr	r2, [pc, #320]	; (80058c4 <HAL_GPIO_Init+0x31c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01f      	beq.n	80057c6 <HAL_GPIO_Init+0x21e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a4f      	ldr	r2, [pc, #316]	; (80058c8 <HAL_GPIO_Init+0x320>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d019      	beq.n	80057c2 <HAL_GPIO_Init+0x21a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a4e      	ldr	r2, [pc, #312]	; (80058cc <HAL_GPIO_Init+0x324>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_GPIO_Init+0x216>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a4d      	ldr	r2, [pc, #308]	; (80058d0 <HAL_GPIO_Init+0x328>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00d      	beq.n	80057ba <HAL_GPIO_Init+0x212>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a4c      	ldr	r2, [pc, #304]	; (80058d4 <HAL_GPIO_Init+0x32c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <HAL_GPIO_Init+0x20e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a4b      	ldr	r2, [pc, #300]	; (80058d8 <HAL_GPIO_Init+0x330>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <HAL_GPIO_Init+0x20a>
 80057ae:	2307      	movs	r3, #7
 80057b0:	e00e      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057b2:	2308      	movs	r3, #8
 80057b4:	e00c      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057b6:	2306      	movs	r3, #6
 80057b8:	e00a      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057ba:	2305      	movs	r3, #5
 80057bc:	e008      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057be:	2304      	movs	r3, #4
 80057c0:	e006      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057c2:	2303      	movs	r3, #3
 80057c4:	e004      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e002      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_GPIO_Init+0x228>
 80057ce:	2300      	movs	r3, #0
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	f002 0203 	and.w	r2, r2, #3
 80057d6:	0092      	lsls	r2, r2, #2
 80057d8:	4093      	lsls	r3, r2
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057e0:	4935      	ldr	r1, [pc, #212]	; (80058b8 <HAL_GPIO_Init+0x310>)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	3302      	adds	r3, #2
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_GPIO_Init+0x334>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005812:	4a32      	ldr	r2, [pc, #200]	; (80058dc <HAL_GPIO_Init+0x334>)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <HAL_GPIO_Init+0x334>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	43db      	mvns	r3, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4013      	ands	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <HAL_GPIO_Init+0x334>)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <HAL_GPIO_Init+0x334>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	43db      	mvns	r3, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4013      	ands	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_GPIO_Init+0x334>)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_GPIO_Init+0x334>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005890:	4a12      	ldr	r2, [pc, #72]	; (80058dc <HAL_GPIO_Init+0x334>)
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3301      	adds	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	f67f ae90 	bls.w	80055c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	3724      	adds	r7, #36	; 0x24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40013800 	.word	0x40013800
 80058bc:	40020000 	.word	0x40020000
 80058c0:	40020400 	.word	0x40020400
 80058c4:	40020800 	.word	0x40020800
 80058c8:	40020c00 	.word	0x40020c00
 80058cc:	40021000 	.word	0x40021000
 80058d0:	40021400 	.word	0x40021400
 80058d4:	40021800 	.word	0x40021800
 80058d8:	40021c00 	.word	0x40021c00
 80058dc:	40013c00 	.word	0x40013c00

080058e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
 80058ec:	4613      	mov	r3, r2
 80058ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058f0:	787b      	ldrb	r3, [r7, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058fc:	e003      	b.n	8005906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058fe:	887b      	ldrh	r3, [r7, #2]
 8005900:	041a      	lsls	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	619a      	str	r2, [r3, #24]
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005924:	887a      	ldrh	r2, [r7, #2]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4013      	ands	r3, r2
 800592a:	041a      	lsls	r2, r3, #16
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	43d9      	mvns	r1, r3
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	400b      	ands	r3, r1
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	619a      	str	r2, [r3, #24]
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e03e      	b.n	80059da <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7fe ff8d 	bl	8004890 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f003 fcbd 	bl	8009300 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	461a      	mov	r2, r3
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	f003 fd01 	bl	8009398 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	461a      	mov	r2, r3
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	f003 fd2e 	bl	8009402 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d108      	bne.n	80059c0 <HAL_NAND_Init+0x7a>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0204 	orr.w	r2, r2, #4
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e007      	b.n	80059d0 <HAL_NAND_Init+0x8a>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0204 	orr.w	r2, r2, #4
 80059ce:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d10a      	bne.n	8005a08 <HAL_NAND_IRQHandler+0x26>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e009      	b.n	8005a1c <HAL_NAND_IRQHandler+0x3a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f8b2 	bl	8005b8a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d108      	bne.n	8005a40 <HAL_NAND_IRQHandler+0x5e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e007      	b.n	8005a50 <HAL_NAND_IRQHandler+0x6e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d10a      	bne.n	8005a6e <HAL_NAND_IRQHandler+0x8c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	e009      	b.n	8005a82 <HAL_NAND_IRQHandler+0xa0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2301      	moveq	r3, #1
 8005a7e:	2300      	movne	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f87f 	bl	8005b8a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d108      	bne.n	8005aa6 <HAL_NAND_IRQHandler+0xc4>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0202 	bic.w	r2, r2, #2
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	e007      	b.n	8005ab6 <HAL_NAND_IRQHandler+0xd4>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0202 	bic.w	r2, r2, #2
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b10      	cmp	r3, #16
 8005abc:	d10a      	bne.n	8005ad4 <HAL_NAND_IRQHandler+0xf2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	e009      	b.n	8005ae8 <HAL_NAND_IRQHandler+0x106>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d017      	beq.n	8005b1c <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f84c 	bl	8005b8a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d108      	bne.n	8005b0c <HAL_NAND_IRQHandler+0x12a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0204 	bic.w	r2, r2, #4
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	e007      	b.n	8005b1c <HAL_NAND_IRQHandler+0x13a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0204 	bic.w	r2, r2, #4
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d10a      	bne.n	8005b3a <HAL_NAND_IRQHandler+0x158>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e009      	b.n	8005b4e <HAL_NAND_IRQHandler+0x16c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d017      	beq.n	8005b82 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f819 	bl	8005b8a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d108      	bne.n	8005b72 <HAL_NAND_IRQHandler+0x190>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6e:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005b70:	e007      	b.n	8005b82 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e089      	b.n	8005ccc <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	f040 8082 	bne.w	8005cca <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_NAND_Erase_Block+0x36>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e07b      	b.n	8005ccc <HAL_NAND_Erase_Block+0x12e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8005be4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005be8:	60fb      	str	r3, [r7, #12]
#endif

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf0:	2260      	movs	r2, #96	; 0x60
 8005bf2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bf4:	f3bf 8f4f 	dsb	sy
}
 8005bf8:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	889b      	ldrh	r3, [r3, #4]
 8005c04:	4619      	mov	r1, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	885b      	ldrh	r3, [r3, #2]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	fb00 f303 	mul.w	r3, r0, r3
 8005c14:	440b      	add	r3, r1
 8005c16:	b2d9      	uxtb	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	fb11 f303 	smulbb	r3, r1, r3
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	68f9      	ldr	r1, [r7, #12]
 8005c26:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005c2a:	4413      	add	r3, r2
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c30:	f3bf 8f4f 	dsb	sy
}
 8005c34:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	889b      	ldrh	r3, [r3, #4]
 8005c40:	461a      	mov	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	885b      	ldrh	r3, [r3, #2]
 8005c46:	4618      	mov	r0, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	fb00 f303 	mul.w	r3, r0, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	440b      	add	r3, r1
 8005c5c:	0a1a      	lsrs	r2, r3, #8
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c68:	f3bf 8f4f 	dsb	sy
}
 8005c6c:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	889b      	ldrh	r3, [r3, #4]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	885b      	ldrh	r3, [r3, #2]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	fb00 f303 	mul.w	r3, r0, r3
 8005c88:	4413      	add	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	440b      	add	r3, r1
 8005c94:	0c1a      	lsrs	r2, r3, #16
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca0:	f3bf 8f4f 	dsb	sy
}
 8005ca4:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cac:	22d0      	movs	r2, #208	; 0xd0
 8005cae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cb0:	f3bf 8f4f 	dsb	sy
}
 8005cb4:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ce6:	b2db      	uxtb	r3, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005cfc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005d00:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	2270      	movs	r2, #112	; 0x70
 8005d0a:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e007      	b.n	8005d32 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	e000      	b.n	8005d32 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005d30:	2300      	movs	r3, #0
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e267      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d075      	beq.n	8005e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d5e:	4b88      	ldr	r3, [pc, #544]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d00c      	beq.n	8005d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d6a:	4b85      	ldr	r3, [pc, #532]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d112      	bne.n	8005d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d76:	4b82      	ldr	r3, [pc, #520]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d82:	d10b      	bne.n	8005d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d84:	4b7e      	ldr	r3, [pc, #504]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d05b      	beq.n	8005e48 <HAL_RCC_OscConfig+0x108>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d157      	bne.n	8005e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e242      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da4:	d106      	bne.n	8005db4 <HAL_RCC_OscConfig+0x74>
 8005da6:	4b76      	ldr	r3, [pc, #472]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a75      	ldr	r2, [pc, #468]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e01d      	b.n	8005df0 <HAL_RCC_OscConfig+0xb0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x98>
 8005dbe:	4b70      	ldr	r3, [pc, #448]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a6f      	ldr	r2, [pc, #444]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b6d      	ldr	r3, [pc, #436]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6c      	ldr	r2, [pc, #432]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0xb0>
 8005dd8:	4b69      	ldr	r3, [pc, #420]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a68      	ldr	r2, [pc, #416]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	4b66      	ldr	r3, [pc, #408]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a65      	ldr	r2, [pc, #404]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df8:	f7fe fec2 	bl	8004b80 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e00:	f7fe febe 	bl	8004b80 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	; 0x64
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e207      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e12:	4b5b      	ldr	r3, [pc, #364]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0xc0>
 8005e1e:	e014      	b.n	8005e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fe feae 	bl	8004b80 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fe feaa 	bl	8004b80 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	; 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e1f3      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3a:	4b51      	ldr	r3, [pc, #324]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0xe8>
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d063      	beq.n	8005f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e56:	4b4a      	ldr	r3, [pc, #296]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e62:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d11c      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e6e:	4b44      	ldr	r3, [pc, #272]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d116      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7a:	4b41      	ldr	r3, [pc, #260]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_RCC_OscConfig+0x152>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d001      	beq.n	8005e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e1c7      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e92:	4b3b      	ldr	r3, [pc, #236]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4937      	ldr	r1, [pc, #220]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea6:	e03a      	b.n	8005f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_RCC_OscConfig+0x244>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb6:	f7fe fe63 	bl	8004b80 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ebe:	f7fe fe5f 	bl	8004b80 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e1a8      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005edc:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4925      	ldr	r1, [pc, #148]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	600b      	str	r3, [r1, #0]
 8005ef0:	e015      	b.n	8005f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <HAL_RCC_OscConfig+0x244>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fe fe42 	bl	8004b80 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f00:	f7fe fe3e 	bl	8004b80 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e187      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f12:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d036      	beq.n	8005f98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <HAL_RCC_OscConfig+0x248>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fe fe22 	bl	8004b80 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f40:	f7fe fe1e 	bl	8004b80 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e167      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_OscConfig+0x240>)
 8005f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x200>
 8005f5e:	e01b      	b.n	8005f98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <HAL_RCC_OscConfig+0x248>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f66:	f7fe fe0b 	bl	8004b80 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f6c:	e00e      	b.n	8005f8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6e:	f7fe fe07 	bl	8004b80 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d907      	bls.n	8005f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e150      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
 8005f80:	40023800 	.word	0x40023800
 8005f84:	42470000 	.word	0x42470000
 8005f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f8c:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1ea      	bne.n	8005f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8097 	beq.w	80060d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005faa:	4b81      	ldr	r3, [pc, #516]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	4b7d      	ldr	r3, [pc, #500]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	4a7c      	ldr	r2, [pc, #496]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc6:	4b7a      	ldr	r3, [pc, #488]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd6:	4b77      	ldr	r3, [pc, #476]	; (80061b4 <HAL_RCC_OscConfig+0x474>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d118      	bne.n	8006014 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe2:	4b74      	ldr	r3, [pc, #464]	; (80061b4 <HAL_RCC_OscConfig+0x474>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a73      	ldr	r2, [pc, #460]	; (80061b4 <HAL_RCC_OscConfig+0x474>)
 8005fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fee:	f7fe fdc7 	bl	8004b80 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff6:	f7fe fdc3 	bl	8004b80 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e10c      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	4b6a      	ldr	r3, [pc, #424]	; (80061b4 <HAL_RCC_OscConfig+0x474>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d106      	bne.n	800602a <HAL_RCC_OscConfig+0x2ea>
 800601c:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006020:	4a63      	ldr	r2, [pc, #396]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	6713      	str	r3, [r2, #112]	; 0x70
 8006028:	e01c      	b.n	8006064 <HAL_RCC_OscConfig+0x324>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b05      	cmp	r3, #5
 8006030:	d10c      	bne.n	800604c <HAL_RCC_OscConfig+0x30c>
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a5e      	ldr	r2, [pc, #376]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006038:	f043 0304 	orr.w	r3, r3, #4
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
 800603e:	4b5c      	ldr	r3, [pc, #368]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	4a5b      	ldr	r2, [pc, #364]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6713      	str	r3, [r2, #112]	; 0x70
 800604a:	e00b      	b.n	8006064 <HAL_RCC_OscConfig+0x324>
 800604c:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	4a57      	ldr	r2, [pc, #348]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	6713      	str	r3, [r2, #112]	; 0x70
 8006058:	4b55      	ldr	r3, [pc, #340]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	4a54      	ldr	r2, [pc, #336]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 800605e:	f023 0304 	bic.w	r3, r3, #4
 8006062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d015      	beq.n	8006098 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fe fd88 	bl	8004b80 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006072:	e00a      	b.n	800608a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006074:	f7fe fd84 	bl	8004b80 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e0cb      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608a:	4b49      	ldr	r3, [pc, #292]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ee      	beq.n	8006074 <HAL_RCC_OscConfig+0x334>
 8006096:	e014      	b.n	80060c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006098:	f7fe fd72 	bl	8004b80 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fe fd6e 	bl	8004b80 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0b5      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b6:	4b3e      	ldr	r3, [pc, #248]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ee      	bne.n	80060a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d105      	bne.n	80060d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c8:	4b39      	ldr	r3, [pc, #228]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	4a38      	ldr	r2, [pc, #224]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 80060ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80a1 	beq.w	8006220 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060de:	4b34      	ldr	r3, [pc, #208]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d05c      	beq.n	80061a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d141      	bne.n	8006176 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f2:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <HAL_RCC_OscConfig+0x478>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fe fd42 	bl	8004b80 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006100:	f7fe fd3e 	bl	8004b80 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e087      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006112:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	3b01      	subs	r3, #1
 8006138:	041b      	lsls	r3, r3, #16
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	061b      	lsls	r3, r3, #24
 8006142:	491b      	ldr	r1, [pc, #108]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006144:	4313      	orrs	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <HAL_RCC_OscConfig+0x478>)
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fe fd17 	bl	8004b80 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006156:	f7fe fd13 	bl	8004b80 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e05c      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x416>
 8006174:	e054      	b.n	8006220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006176:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <HAL_RCC_OscConfig+0x478>)
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617c:	f7fe fd00 	bl	8004b80 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006184:	f7fe fcfc 	bl	8004b80 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e045      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <HAL_RCC_OscConfig+0x470>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <HAL_RCC_OscConfig+0x444>
 80061a2:	e03d      	b.n	8006220 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d107      	bne.n	80061bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e038      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40007000 	.word	0x40007000
 80061b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <HAL_RCC_OscConfig+0x4ec>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d028      	beq.n	800621c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d121      	bne.n	800621c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d11a      	bne.n	800621c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061ec:	4013      	ands	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d111      	bne.n	800621c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	3b01      	subs	r3, #1
 8006206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006208:	429a      	cmp	r2, r3
 800620a:	d107      	bne.n	800621c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006218:	429a      	cmp	r2, r3
 800621a:	d001      	beq.n	8006220 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40023800 	.word	0x40023800

08006230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0cc      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006244:	4b68      	ldr	r3, [pc, #416]	; (80063e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d90c      	bls.n	800626c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006252:	4b65      	ldr	r3, [pc, #404]	; (80063e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625a:	4b63      	ldr	r3, [pc, #396]	; (80063e8 <HAL_RCC_ClockConfig+0x1b8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d001      	beq.n	800626c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0b8      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d020      	beq.n	80062ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006284:	4b59      	ldr	r3, [pc, #356]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a58      	ldr	r2, [pc, #352]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800628e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800629c:	4b53      	ldr	r3, [pc, #332]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	4a52      	ldr	r2, [pc, #328]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a8:	4b50      	ldr	r3, [pc, #320]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	494d      	ldr	r1, [pc, #308]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d044      	beq.n	8006350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d107      	bne.n	80062de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ce:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d119      	bne.n	800630e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e07f      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d003      	beq.n	80062ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d107      	bne.n	80062fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ee:	4b3f      	ldr	r3, [pc, #252]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e06f      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e067      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f023 0203 	bic.w	r2, r3, #3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4934      	ldr	r1, [pc, #208]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	4313      	orrs	r3, r2
 800631e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006320:	f7fe fc2e 	bl	8004b80 <HAL_GetTick>
 8006324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006326:	e00a      	b.n	800633e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006328:	f7fe fc2a 	bl	8004b80 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f241 3288 	movw	r2, #5000	; 0x1388
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e04f      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633e:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 020c 	and.w	r2, r3, #12
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	429a      	cmp	r2, r3
 800634e:	d1eb      	bne.n	8006328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d20c      	bcs.n	8006378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006366:	4b20      	ldr	r3, [pc, #128]	; (80063e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d001      	beq.n	8006378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e032      	b.n	80063de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	4916      	ldr	r1, [pc, #88]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	490e      	ldr	r1, [pc, #56]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063b6:	f000 f821 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 80063ba:	4602      	mov	r2, r0
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	091b      	lsrs	r3, r3, #4
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	490a      	ldr	r1, [pc, #40]	; (80063f0 <HAL_RCC_ClockConfig+0x1c0>)
 80063c8:	5ccb      	ldrb	r3, [r1, r3]
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <HAL_RCC_ClockConfig+0x1c4>)
 80063d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063d2:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <HAL_RCC_ClockConfig+0x1c8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fa64 	bl	80048a4 <HAL_InitTick>

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	40023c00 	.word	0x40023c00
 80063ec:	40023800 	.word	0x40023800
 80063f0:	0800fe0c 	.word	0x0800fe0c
 80063f4:	2000009c 	.word	0x2000009c
 80063f8:	200000a0 	.word	0x200000a0

080063fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006400:	b094      	sub	sp, #80	; 0x50
 8006402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	647b      	str	r3, [r7, #68]	; 0x44
 8006408:	2300      	movs	r3, #0
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800640c:	2300      	movs	r3, #0
 800640e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006414:	4b79      	ldr	r3, [pc, #484]	; (80065fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 030c 	and.w	r3, r3, #12
 800641c:	2b08      	cmp	r3, #8
 800641e:	d00d      	beq.n	800643c <HAL_RCC_GetSysClockFreq+0x40>
 8006420:	2b08      	cmp	r3, #8
 8006422:	f200 80e1 	bhi.w	80065e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0x34>
 800642a:	2b04      	cmp	r3, #4
 800642c:	d003      	beq.n	8006436 <HAL_RCC_GetSysClockFreq+0x3a>
 800642e:	e0db      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006430:	4b73      	ldr	r3, [pc, #460]	; (8006600 <HAL_RCC_GetSysClockFreq+0x204>)
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006434:	e0db      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006436:	4b73      	ldr	r3, [pc, #460]	; (8006604 <HAL_RCC_GetSysClockFreq+0x208>)
 8006438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800643a:	e0d8      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800643c:	4b6f      	ldr	r3, [pc, #444]	; (80065fc <HAL_RCC_GetSysClockFreq+0x200>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006446:	4b6d      	ldr	r3, [pc, #436]	; (80065fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d063      	beq.n	800651a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006452:	4b6a      	ldr	r3, [pc, #424]	; (80065fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	099b      	lsrs	r3, r3, #6
 8006458:	2200      	movs	r2, #0
 800645a:	63bb      	str	r3, [r7, #56]	; 0x38
 800645c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006464:	633b      	str	r3, [r7, #48]	; 0x30
 8006466:	2300      	movs	r3, #0
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f04f 0100 	mov.w	r1, #0
 800647a:	0159      	lsls	r1, r3, #5
 800647c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006480:	0150      	lsls	r0, r2, #5
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4621      	mov	r1, r4
 8006488:	1a51      	subs	r1, r2, r1
 800648a:	6139      	str	r1, [r7, #16]
 800648c:	4629      	mov	r1, r5
 800648e:	eb63 0301 	sbc.w	r3, r3, r1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a0:	4659      	mov	r1, fp
 80064a2:	018b      	lsls	r3, r1, #6
 80064a4:	4651      	mov	r1, sl
 80064a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064aa:	4651      	mov	r1, sl
 80064ac:	018a      	lsls	r2, r1, #6
 80064ae:	4651      	mov	r1, sl
 80064b0:	ebb2 0801 	subs.w	r8, r2, r1
 80064b4:	4659      	mov	r1, fp
 80064b6:	eb63 0901 	sbc.w	r9, r3, r1
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ce:	4690      	mov	r8, r2
 80064d0:	4699      	mov	r9, r3
 80064d2:	4623      	mov	r3, r4
 80064d4:	eb18 0303 	adds.w	r3, r8, r3
 80064d8:	60bb      	str	r3, [r7, #8]
 80064da:	462b      	mov	r3, r5
 80064dc:	eb49 0303 	adc.w	r3, r9, r3
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ee:	4629      	mov	r1, r5
 80064f0:	024b      	lsls	r3, r1, #9
 80064f2:	4621      	mov	r1, r4
 80064f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064f8:	4621      	mov	r1, r4
 80064fa:	024a      	lsls	r2, r1, #9
 80064fc:	4610      	mov	r0, r2
 80064fe:	4619      	mov	r1, r3
 8006500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006502:	2200      	movs	r2, #0
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
 8006506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800650c:	f7fa fa0e 	bl	800092c <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4613      	mov	r3, r2
 8006516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006518:	e058      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651a:	4b38      	ldr	r3, [pc, #224]	; (80065fc <HAL_RCC_GetSysClockFreq+0x200>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	099b      	lsrs	r3, r3, #6
 8006520:	2200      	movs	r2, #0
 8006522:	4618      	mov	r0, r3
 8006524:	4611      	mov	r1, r2
 8006526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800652a:	623b      	str	r3, [r7, #32]
 800652c:	2300      	movs	r3, #0
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
 8006530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	f04f 0000 	mov.w	r0, #0
 800653c:	f04f 0100 	mov.w	r1, #0
 8006540:	0159      	lsls	r1, r3, #5
 8006542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006546:	0150      	lsls	r0, r2, #5
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4641      	mov	r1, r8
 800654e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006552:	4649      	mov	r1, r9
 8006554:	eb63 0b01 	sbc.w	fp, r3, r1
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800656c:	ebb2 040a 	subs.w	r4, r2, sl
 8006570:	eb63 050b 	sbc.w	r5, r3, fp
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	00eb      	lsls	r3, r5, #3
 800657e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006582:	00e2      	lsls	r2, r4, #3
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	4643      	mov	r3, r8
 800658a:	18e3      	adds	r3, r4, r3
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	464b      	mov	r3, r9
 8006590:	eb45 0303 	adc.w	r3, r5, r3
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065a2:	4629      	mov	r1, r5
 80065a4:	028b      	lsls	r3, r1, #10
 80065a6:	4621      	mov	r1, r4
 80065a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065ac:	4621      	mov	r1, r4
 80065ae:	028a      	lsls	r2, r1, #10
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b6:	2200      	movs	r2, #0
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	61fa      	str	r2, [r7, #28]
 80065bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c0:	f7fa f9b4 	bl	800092c <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4613      	mov	r3, r2
 80065ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <HAL_RCC_GetSysClockFreq+0x200>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	3301      	adds	r3, #1
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065e6:	e002      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3750      	adds	r7, #80	; 0x50
 80065f4:	46bd      	mov	sp, r7
 80065f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fa:	bf00      	nop
 80065fc:	40023800 	.word	0x40023800
 8006600:	00f42400 	.word	0x00f42400
 8006604:	007a1200 	.word	0x007a1200

08006608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800660c:	4b03      	ldr	r3, [pc, #12]	; (800661c <HAL_RCC_GetHCLKFreq+0x14>)
 800660e:	681b      	ldr	r3, [r3, #0]
}
 8006610:	4618      	mov	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	2000009c 	.word	0x2000009c

08006620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006624:	f7ff fff0 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0a9b      	lsrs	r3, r3, #10
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4903      	ldr	r1, [pc, #12]	; (8006644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40023800 	.word	0x40023800
 8006644:	0800fe1c 	.word	0x0800fe1c

08006648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800664c:	f7ff ffdc 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0b5b      	lsrs	r3, r3, #13
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	; (800666c <HAL_RCC_GetPCLK2Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800fe1c 	.word	0x0800fe1c

08006670 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	220f      	movs	r2, #15
 800667e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0203 	and.w	r2, r3, #3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <HAL_RCC_GetClockConfig+0x60>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0207 	and.w	r2, r3, #7
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40023c00 	.word	0x40023c00

080066d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d105      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d035      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066fc:	4b62      	ldr	r3, [pc, #392]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006702:	f7fe fa3d 	bl	8004b80 <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006708:	e008      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800670a:	f7fe fa39 	bl	8004b80 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e0b0      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800671c:	4b5b      	ldr	r3, [pc, #364]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	019a      	lsls	r2, r3, #6
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	071b      	lsls	r3, r3, #28
 8006734:	4955      	ldr	r1, [pc, #340]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800673c:	4b52      	ldr	r3, [pc, #328]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006742:	f7fe fa1d 	bl	8004b80 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800674a:	f7fe fa19 	bl	8004b80 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e090      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800675c:	4b4b      	ldr	r3, [pc, #300]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8083 	beq.w	800687c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	4b44      	ldr	r3, [pc, #272]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	4a43      	ldr	r2, [pc, #268]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6413      	str	r3, [r2, #64]	; 0x40
 8006786:	4b41      	ldr	r3, [pc, #260]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006792:	4b3f      	ldr	r3, [pc, #252]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a3e      	ldr	r2, [pc, #248]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800679e:	f7fe f9ef 	bl	8004b80 <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fe f9eb 	bl	8004b80 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e062      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067b8:	4b35      	ldr	r3, [pc, #212]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067c4:	4b31      	ldr	r3, [pc, #196]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d02f      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d028      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067e2:	4b2a      	ldr	r3, [pc, #168]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067ec:	4b29      	ldr	r3, [pc, #164]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067f2:	4b28      	ldr	r3, [pc, #160]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067f8:	4a24      	ldr	r2, [pc, #144]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067fe:	4b23      	ldr	r3, [pc, #140]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d114      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800680a:	f7fe f9b9 	bl	8004b80 <HAL_GetTick>
 800680e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006810:	e00a      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006812:	f7fe f9b5 	bl	8004b80 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e02a      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006828:	4b18      	ldr	r3, [pc, #96]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800682a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0ee      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006840:	d10d      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006856:	490d      	ldr	r1, [pc, #52]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	608b      	str	r3, [r1, #8]
 800685c:	e005      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006864:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800686c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006876:	4905      	ldr	r1, [pc, #20]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006878:	4313      	orrs	r3, r2
 800687a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	42470068 	.word	0x42470068
 800688c:	40023800 	.word	0x40023800
 8006890:	40007000 	.word	0x40007000
 8006894:	42470e40 	.word	0x42470e40

08006898 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e066      	b.n	800697c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7f5b      	ldrb	r3, [r3, #29]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fd fe30 	bl	8004524 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	22ca      	movs	r2, #202	; 0xca
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2253      	movs	r2, #83	; 0x53
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa45 	bl	8006d6a <RTC_EnterInitMode>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12c      	bne.n	8006944 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68d2      	ldr	r2, [r2, #12]
 8006924:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6919      	ldr	r1, [r3, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	041a      	lsls	r2, r3, #16
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa4c 	bl	8006dd8 <RTC_ExitInitMode>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d113      	bne.n	8006972 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	7f1b      	ldrb	r3, [r3, #28]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_RTC_SetTime+0x1c>
 800699c:	2302      	movs	r3, #2
 800699e:	e087      	b.n	8006ab0 <HAL_RTC_SetTime+0x12c>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2202      	movs	r2, #2
 80069aa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d126      	bne.n	8006a00 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fa29 	bl	8006e22 <RTC_ByteToBcd2>
 80069d0:	4603      	mov	r3, r0
 80069d2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fa22 	bl	8006e22 <RTC_ByteToBcd2>
 80069de:	4603      	mov	r3, r0
 80069e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80069e2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fa1a 	bl	8006e22 <RTC_ByteToBcd2>
 80069ee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80069f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	78db      	ldrb	r3, [r3, #3]
 80069f8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e018      	b.n	8006a32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a20:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	22ca      	movs	r2, #202	; 0xca
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2253      	movs	r2, #83	; 0x53
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f991 	bl	8006d6a <RTC_EnterInitMode>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d120      	bne.n	8006a94 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a60:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f9a4 	bl	8006dd8 <RTC_ExitInitMode>
 8006a90:	4603      	mov	r3, r0
 8006a92:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	22ff      	movs	r2, #255	; 0xff
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	771a      	strb	r2, [r3, #28]

  return status;
 8006aae:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd90      	pop	{r4, r7, pc}

08006ab8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006aea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006aee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	0d9b      	lsrs	r3, r3, #22
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11a      	bne.n	8006b6a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f98f 	bl	8006e5c <RTC_Bcd2ToByte>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f986 	bl	8006e5c <RTC_Bcd2ToByte>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	789b      	ldrb	r3, [r3, #2]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f97d 	bl	8006e5c <RTC_Bcd2ToByte>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	7f1b      	ldrb	r3, [r3, #28]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_RTC_SetDate+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e071      	b.n	8006c74 <HAL_RTC_SetDate+0x100>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_RTC_SetDate+0x4c>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	f023 0310 	bic.w	r3, r3, #16
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	330a      	adds	r3, #10
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	78db      	ldrb	r3, [r3, #3]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f929 	bl	8006e22 <RTC_ByteToBcd2>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 f922 	bl	8006e22 <RTC_ByteToBcd2>
 8006bde:	4603      	mov	r3, r0
 8006be0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006be2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	789b      	ldrb	r3, [r3, #2]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 f91a 	bl	8006e22 <RTC_ByteToBcd2>
 8006bee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006bf0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e00e      	b.n	8006c1e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c0c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	22ca      	movs	r2, #202	; 0xca
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2253      	movs	r2, #83	; 0x53
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f89b 	bl	8006d6a <RTC_EnterInitMode>
 8006c34:	4603      	mov	r3, r0
 8006c36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f8c2 	bl	8006dd8 <RTC_ExitInitMode>
 8006c54:	4603      	mov	r3, r0
 8006c56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c58:	7cfb      	ldrb	r3, [r7, #19]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d102      	bne.n	8006c64 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	22ff      	movs	r2, #255	; 0xff
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]

  return status;
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd90      	pop	{r4, r7, pc}

08006c7c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	0c1b      	lsrs	r3, r3, #16
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0a1b      	lsrs	r3, r3, #8
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	0b5b      	lsrs	r3, r3, #13
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d11a      	bne.n	8006d10 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	78db      	ldrb	r3, [r3, #3]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f8bc 	bl	8006e5c <RTC_Bcd2ToByte>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f8b3 	bl	8006e5c <RTC_Bcd2ToByte>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	789b      	ldrb	r3, [r3, #2]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f8aa 	bl	8006e5c <RTC_Bcd2ToByte>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d34:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d36:	f7fd ff23 	bl	8004b80 <HAL_GetTick>
 8006d3a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d3c:	e009      	b.n	8006d52 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d3e:	f7fd ff1f 	bl	8004b80 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d4c:	d901      	bls.n	8006d52 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e007      	b.n	8006d62 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0ee      	beq.n	8006d3e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d122      	bne.n	8006dce <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d98:	f7fd fef2 	bl	8004b80 <HAL_GetTick>
 8006d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d9e:	e00c      	b.n	8006dba <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006da0:	f7fd feee 	bl	8004b80 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dae:	d904      	bls.n	8006dba <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2204      	movs	r2, #4
 8006db4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <RTC_EnterInitMode+0x64>
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d1e8      	bne.n	8006da0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006df2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff89 	bl	8006d1a <HAL_RTC_WaitForSynchro>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	4603      	mov	r3, r0
 8006e2a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006e30:	e005      	b.n	8006e3e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	3301      	adds	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	3b0a      	subs	r3, #10
 8006e3c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	d8f6      	bhi.n	8006e32 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	b2db      	uxtb	r3, r3
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	0092      	lsls	r2, r2, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	4413      	add	r3, r2
 8006e86:	b2db      	uxtb	r3, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e07b      	b.n	8006f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d108      	bne.n	8006ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb6:	d009      	beq.n	8006ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	61da      	str	r2, [r3, #28]
 8006ebe:	e005      	b.n	8006ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fd fb48 	bl	800457c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	ea42 0103 	orr.w	r1, r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 0104 	and.w	r1, r3, #4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0210 	and.w	r2, r3, #16
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b088      	sub	sp, #32
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_SPI_Transmit+0x22>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e126      	b.n	8007216 <HAL_SPI_Transmit+0x270>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fd0:	f7fd fdd6 	bl	8004b80 <HAL_GetTick>
 8006fd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d002      	beq.n	8006fec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fea:	e10b      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_SPI_Transmit+0x52>
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ffc:	e102      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2203      	movs	r2, #3
 8007002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	88fa      	ldrh	r2, [r7, #6]
 800701c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007044:	d10f      	bne.n	8007066 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d007      	beq.n	8007084 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708c:	d14b      	bne.n	8007126 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_SPI_Transmit+0xf6>
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d13e      	bne.n	800711a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070c0:	e02b      	b.n	800711a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d112      	bne.n	80070f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	1c9a      	adds	r2, r3, #2
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80070f4:	e011      	b.n	800711a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f6:	f7fd fd43 	bl	8004b80 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d803      	bhi.n	800710e <HAL_SPI_Transmit+0x168>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710c:	d102      	bne.n	8007114 <HAL_SPI_Transmit+0x16e>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007118:	e074      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1ce      	bne.n	80070c2 <HAL_SPI_Transmit+0x11c>
 8007124:	e04c      	b.n	80071c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_SPI_Transmit+0x18e>
 800712e:	8afb      	ldrh	r3, [r7, #22]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d140      	bne.n	80071b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800715a:	e02c      	b.n	80071b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d113      	bne.n	8007192 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007190:	e011      	b.n	80071b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007192:	f7fd fcf5 	bl	8004b80 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d803      	bhi.n	80071aa <HAL_SPI_Transmit+0x204>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a8:	d102      	bne.n	80071b0 <HAL_SPI_Transmit+0x20a>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071b4:	e026      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1cd      	bne.n	800715c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fb13 	bl	80077f0 <SPI_EndRxTxTransaction>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e000      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007214:	7ffb      	ldrb	r3, [r7, #31]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_SPI_Transmit_DMA+0x20>
 800723c:	2302      	movs	r3, #2
 800723e:	e09b      	b.n	8007378 <HAL_SPI_Transmit_DMA+0x158>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d002      	beq.n	800725a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007254:	2302      	movs	r3, #2
 8007256:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007258:	e089      	b.n	800736e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_SPI_Transmit_DMA+0x46>
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
    goto error;
 800726a:	e080      	b.n	800736e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2203      	movs	r2, #3
 8007270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b2:	d10f      	bne.n	80072d4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d8:	4a29      	ldr	r2, [pc, #164]	; (8007380 <HAL_SPI_Transmit_DMA+0x160>)
 80072da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e0:	4a28      	ldr	r2, [pc, #160]	; (8007384 <HAL_SPI_Transmit_DMA+0x164>)
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e8:	4a27      	ldr	r2, [pc, #156]	; (8007388 <HAL_SPI_Transmit_DMA+0x168>)
 80072ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f0:	2200      	movs	r2, #0
 80072f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	4619      	mov	r1, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800730a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800730c:	f7fd fdf8 	bl	8004f00 <HAL_DMA_Start_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00c      	beq.n	8007330 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	f043 0210 	orr.w	r2, r3, #16
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800732e:	e01e      	b.n	800736e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d007      	beq.n	800734e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800734c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0220 	orr.w	r2, r2, #32
 800735c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0202 	orr.w	r2, r2, #2
 800736c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	0800765d 	.word	0x0800765d
 8007384:	080075b5 	.word	0x080075b5
 8007388:	08007679 	.word	0x08007679

0800738c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10f      	bne.n	80073d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	099b      	lsrs	r3, r3, #6
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
    return;
 80073ce:	e0d7      	b.n	8007580 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <HAL_SPI_IRQHandler+0x66>
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	09db      	lsrs	r3, r3, #7
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
    return;
 80073f0:	e0c6      	b.n	8007580 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10c      	bne.n	8007418 <HAL_SPI_IRQHandler+0x8c>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	099b      	lsrs	r3, r3, #6
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	0a1b      	lsrs	r3, r3, #8
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80b4 	beq.w	8007580 <HAL_SPI_IRQHandler+0x1f4>
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	095b      	lsrs	r3, r3, #5
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80ad 	beq.w	8007580 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	099b      	lsrs	r3, r3, #6
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d023      	beq.n	800747a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b03      	cmp	r3, #3
 800743c:	d011      	beq.n	8007462 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	f043 0204 	orr.w	r2, r3, #4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	e00b      	b.n	800747a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007462:	2300      	movs	r3, #0
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	693b      	ldr	r3, [r7, #16]
        return;
 8007478:	e082      	b.n	8007580 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	f043 0201 	orr.w	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	f043 0208 	orr.w	r2, r3, #8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074c8:	2300      	movs	r3, #0
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d04f      	beq.n	800757e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <HAL_SPI_IRQHandler+0x17e>
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d034      	beq.n	8007574 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0203 	bic.w	r2, r2, #3
 8007518:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d011      	beq.n	8007546 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <HAL_SPI_IRQHandler+0x1fc>)
 8007528:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd fdae 	bl	8005090 <HAL_DMA_Abort_IT>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	4a0d      	ldr	r2, [pc, #52]	; (8007588 <HAL_SPI_IRQHandler+0x1fc>)
 8007554:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd fd98 	bl	8005090 <HAL_DMA_Abort_IT>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007572:	e003      	b.n	800757c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f813 	bl	80075a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800757a:	e000      	b.n	800757e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800757c:	bf00      	nop
    return;
 800757e:	bf00      	nop
  }
}
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	080076b9 	.word	0x080076b9

0800758c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075c2:	f7fd fadd 	bl	8004b80 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d6:	d03b      	beq.n	8007650 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0220 	bic.w	r2, r2, #32
 80075e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0202 	bic.w	r2, r2, #2
 80075f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	2164      	movs	r1, #100	; 0x64
 80075fc:	6978      	ldr	r0, [r7, #20]
 80075fe:	f000 f8f7 	bl	80077f0 <SPI_EndRxTxTransaction>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007648:	6978      	ldr	r0, [r7, #20]
 800764a:	f7ff ffa9 	bl	80075a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800764e:	e002      	b.n	8007656 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007650:	6978      	ldr	r0, [r7, #20]
 8007652:	f7fb f9c7 	bl	80029e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff ff8e 	bl	800758c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0203 	bic.w	r2, r2, #3
 8007694:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	f043 0210 	orr.w	r2, r3, #16
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff ff78 	bl	80075a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff ff64 	bl	80075a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076d8:	bf00      	nop
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076f0:	f7fd fa46 	bl	8004b80 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4413      	add	r3, r2
 80076fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007700:	f7fd fa3e 	bl	8004b80 <HAL_GetTick>
 8007704:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007706:	4b39      	ldr	r3, [pc, #228]	; (80077ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	015b      	lsls	r3, r3, #5
 800770c:	0d1b      	lsrs	r3, r3, #20
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007716:	e054      	b.n	80077c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771e:	d050      	beq.n	80077c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007720:	f7fd fa2e 	bl	8004b80 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	429a      	cmp	r2, r3
 800772e:	d902      	bls.n	8007736 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d13d      	bne.n	80077b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774e:	d111      	bne.n	8007774 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007758:	d004      	beq.n	8007764 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007762:	d107      	bne.n	8007774 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777c:	d10f      	bne.n	800779e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800779c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e017      	b.n	80077e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	3b01      	subs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4013      	ands	r3, r2
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d19b      	bne.n	8007718 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	2000009c 	.word	0x2000009c

080077f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <SPI_EndRxTxTransaction+0x7c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <SPI_EndRxTxTransaction+0x80>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	0d5b      	lsrs	r3, r3, #21
 8007808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800780c:	fb02 f303 	mul.w	r3, r2, r3
 8007810:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781a:	d112      	bne.n	8007842 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff ff5a 	bl	80076e0 <SPI_WaitFlagStateUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e00f      	b.n	8007862 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	3b01      	subs	r3, #1
 800784c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007858:	2b80      	cmp	r3, #128	; 0x80
 800785a:	d0f2      	beq.n	8007842 <SPI_EndRxTxTransaction+0x52>
 800785c:	e000      	b.n	8007860 <SPI_EndRxTxTransaction+0x70>
        break;
 800785e:	bf00      	nop
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	2000009c 	.word	0x2000009c
 8007870:	165e9f81 	.word	0x165e9f81

08007874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e041      	b.n	800790a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fc fefa 	bl	8004694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f000 fa96 	bl	8007de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d001      	beq.n	800792c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e04e      	b.n	80079ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a23      	ldr	r2, [pc, #140]	; (80079d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d022      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007956:	d01d      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <HAL_TIM_Base_Start_IT+0xc8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d018      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00e      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d009      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a19      	ldr	r2, [pc, #100]	; (80079ec <HAL_TIM_Base_Start_IT+0xd8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x80>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d111      	bne.n	80079b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b06      	cmp	r3, #6
 80079a4:	d010      	beq.n	80079c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0201 	orr.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b6:	e007      	b.n	80079c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40010000 	.word	0x40010000
 80079dc:	40000400 	.word	0x40000400
 80079e0:	40000800 	.word	0x40000800
 80079e4:	40000c00 	.word	0x40000c00
 80079e8:	40010400 	.word	0x40010400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40001800 	.word	0x40001800

080079f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d122      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d11b      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0202 	mvn.w	r2, #2
 8007a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9b5 	bl	8007da6 <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9a7 	bl	8007d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9b8 	bl	8007dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d122      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d11b      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0204 	mvn.w	r2, #4
 8007a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f98b 	bl	8007da6 <HAL_TIM_IC_CaptureCallback>
 8007a90:	e005      	b.n	8007a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f97d 	bl	8007d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f98e 	bl	8007dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d122      	bne.n	8007af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d11b      	bne.n	8007af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0208 	mvn.w	r2, #8
 8007ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2204      	movs	r2, #4
 8007ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f961 	bl	8007da6 <HAL_TIM_IC_CaptureCallback>
 8007ae4:	e005      	b.n	8007af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f953 	bl	8007d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f964 	bl	8007dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b10      	cmp	r3, #16
 8007b04:	d122      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d11b      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0210 	mvn.w	r2, #16
 8007b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2208      	movs	r2, #8
 8007b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f937 	bl	8007da6 <HAL_TIM_IC_CaptureCallback>
 8007b38:	e005      	b.n	8007b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f929 	bl	8007d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f93a 	bl	8007dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d10e      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d107      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0201 	mvn.w	r2, #1
 8007b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fc f87e 	bl	8003c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d10e      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b90:	2b80      	cmp	r3, #128	; 0x80
 8007b92:	d107      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fae0 	bl	8008164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d10e      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbc:	2b40      	cmp	r3, #64	; 0x40
 8007bbe:	d107      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8ff 	bl	8007dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d10e      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d107      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f06f 0220 	mvn.w	r2, #32
 8007bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 faaa 	bl	8008150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIM_ConfigClockSource+0x1c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e0b4      	b.n	8007d8a <HAL_TIM_ConfigClockSource+0x186>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c58:	d03e      	beq.n	8007cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8007c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5e:	f200 8087 	bhi.w	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	f000 8086 	beq.w	8007d76 <HAL_TIM_ConfigClockSource+0x172>
 8007c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6e:	d87f      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c70:	2b70      	cmp	r3, #112	; 0x70
 8007c72:	d01a      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0xa6>
 8007c74:	2b70      	cmp	r3, #112	; 0x70
 8007c76:	d87b      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c78:	2b60      	cmp	r3, #96	; 0x60
 8007c7a:	d050      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x11a>
 8007c7c:	2b60      	cmp	r3, #96	; 0x60
 8007c7e:	d877      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c80:	2b50      	cmp	r3, #80	; 0x50
 8007c82:	d03c      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0xfa>
 8007c84:	2b50      	cmp	r3, #80	; 0x50
 8007c86:	d873      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	d058      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x13a>
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d86f      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c90:	2b30      	cmp	r3, #48	; 0x30
 8007c92:	d064      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x15a>
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d86b      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d060      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x15a>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d867      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d05c      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x15a>
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d05a      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x15a>
 8007ca8:	e062      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6899      	ldr	r1, [r3, #8]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f000 f9ad 	bl	8008018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	609a      	str	r2, [r3, #8]
      break;
 8007cd6:	e04f      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6899      	ldr	r1, [r3, #8]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f000 f996 	bl	8008018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfa:	609a      	str	r2, [r3, #8]
      break;
 8007cfc:	e03c      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f000 f90a 	bl	8007f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2150      	movs	r1, #80	; 0x50
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f963 	bl	8007fe2 <TIM_ITRx_SetConfig>
      break;
 8007d1c:	e02c      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6859      	ldr	r1, [r3, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f000 f929 	bl	8007f82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2160      	movs	r1, #96	; 0x60
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f953 	bl	8007fe2 <TIM_ITRx_SetConfig>
      break;
 8007d3c:	e01c      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6859      	ldr	r1, [r3, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f000 f8ea 	bl	8007f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f943 	bl	8007fe2 <TIM_ITRx_SetConfig>
      break;
 8007d5c:	e00c      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f000 f93a 	bl	8007fe2 <TIM_ITRx_SetConfig>
      break;
 8007d6e:	e003      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
      break;
 8007d74:	e000      	b.n	8007d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a40      	ldr	r2, [pc, #256]	; (8007ef8 <TIM_Base_SetConfig+0x114>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d013      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e02:	d00f      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a3d      	ldr	r2, [pc, #244]	; (8007efc <TIM_Base_SetConfig+0x118>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a3c      	ldr	r2, [pc, #240]	; (8007f00 <TIM_Base_SetConfig+0x11c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d007      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a3b      	ldr	r2, [pc, #236]	; (8007f04 <TIM_Base_SetConfig+0x120>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a3a      	ldr	r2, [pc, #232]	; (8007f08 <TIM_Base_SetConfig+0x124>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d108      	bne.n	8007e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a2f      	ldr	r2, [pc, #188]	; (8007ef8 <TIM_Base_SetConfig+0x114>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d02b      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e44:	d027      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a2c      	ldr	r2, [pc, #176]	; (8007efc <TIM_Base_SetConfig+0x118>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d023      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2b      	ldr	r2, [pc, #172]	; (8007f00 <TIM_Base_SetConfig+0x11c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01f      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a2a      	ldr	r2, [pc, #168]	; (8007f04 <TIM_Base_SetConfig+0x120>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d01b      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a29      	ldr	r2, [pc, #164]	; (8007f08 <TIM_Base_SetConfig+0x124>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d017      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a28      	ldr	r2, [pc, #160]	; (8007f0c <TIM_Base_SetConfig+0x128>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d013      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a27      	ldr	r2, [pc, #156]	; (8007f10 <TIM_Base_SetConfig+0x12c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00f      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a26      	ldr	r2, [pc, #152]	; (8007f14 <TIM_Base_SetConfig+0x130>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a25      	ldr	r2, [pc, #148]	; (8007f18 <TIM_Base_SetConfig+0x134>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d007      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <TIM_Base_SetConfig+0x138>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d003      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <TIM_Base_SetConfig+0x13c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d108      	bne.n	8007ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <TIM_Base_SetConfig+0x114>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_Base_SetConfig+0xf8>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a0c      	ldr	r2, [pc, #48]	; (8007f08 <TIM_Base_SetConfig+0x124>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d103      	bne.n	8007ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	615a      	str	r2, [r3, #20]
}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40000400 	.word	0x40000400
 8007f00:	40000800 	.word	0x40000800
 8007f04:	40000c00 	.word	0x40000c00
 8007f08:	40010400 	.word	0x40010400
 8007f0c:	40014000 	.word	0x40014000
 8007f10:	40014400 	.word	0x40014400
 8007f14:	40014800 	.word	0x40014800
 8007f18:	40001800 	.word	0x40001800
 8007f1c:	40001c00 	.word	0x40001c00
 8007f20:	40002000 	.word	0x40002000

08007f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	f023 0201 	bic.w	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 030a 	bic.w	r3, r3, #10
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0210 	bic.w	r2, r3, #16
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	031b      	lsls	r3, r3, #12
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	621a      	str	r2, [r3, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f043 0307 	orr.w	r3, r3, #7
 8008004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	609a      	str	r2, [r3, #8]
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	021a      	lsls	r2, r3, #8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	431a      	orrs	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4313      	orrs	r3, r2
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	bf00      	nop
 800804e:	371c      	adds	r7, #28
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800806c:	2302      	movs	r3, #2
 800806e:	e05a      	b.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d022      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080bc:	d01d      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1d      	ldr	r2, [pc, #116]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d018      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1b      	ldr	r2, [pc, #108]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1a      	ldr	r2, [pc, #104]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00e      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a18      	ldr	r2, [pc, #96]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d009      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a15      	ldr	r2, [pc, #84]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d10c      	bne.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4313      	orrs	r3, r2
 800810a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40010000 	.word	0x40010000
 8008138:	40000400 	.word	0x40000400
 800813c:	40000800 	.word	0x40000800
 8008140:	40000c00 	.word	0x40000c00
 8008144:	40010400 	.word	0x40010400
 8008148:	40014000 	.word	0x40014000
 800814c:	40001800 	.word	0x40001800

08008150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e03f      	b.n	800820a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fc fa9e 	bl	80046e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2224      	movs	r2, #36	; 0x24
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fe2b 	bl	8008e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695a      	ldr	r2, [r3, #20]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	4613      	mov	r3, r2
 800821e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b20      	cmp	r3, #32
 800822a:	d11d      	bne.n	8008268 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <HAL_UART_Receive_IT+0x26>
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e016      	b.n	800826a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_UART_Receive_IT+0x38>
 8008246:	2302      	movs	r3, #2
 8008248:	e00f      	b.n	800826a <HAL_UART_Receive_IT+0x58>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	461a      	mov	r2, r3
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fbd9 	bl	8008a16 <UART_Start_Receive_IT>
 8008264:	4603      	mov	r3, r0
 8008266:	e000      	b.n	800826a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008268:	2302      	movs	r3, #2
  }
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08c      	sub	sp, #48	; 0x30
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b20      	cmp	r3, #32
 800828c:	d165      	bne.n	800835a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <HAL_UART_Transmit_DMA+0x26>
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e05e      	b.n	800835c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_UART_Transmit_DMA+0x38>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e057      	b.n	800835c <HAL_UART_Transmit_DMA+0xe8>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	88fa      	ldrh	r2, [r7, #6]
 80082c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2221      	movs	r2, #33	; 0x21
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	4a22      	ldr	r2, [pc, #136]	; (8008364 <HAL_UART_Transmit_DMA+0xf0>)
 80082da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	4a21      	ldr	r2, [pc, #132]	; (8008368 <HAL_UART_Transmit_DMA+0xf4>)
 80082e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e8:	4a20      	ldr	r2, [pc, #128]	; (800836c <HAL_UART_Transmit_DMA+0xf8>)
 80082ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	2200      	movs	r2, #0
 80082f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80082f4:	f107 0308 	add.w	r3, r7, #8
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	6819      	ldr	r1, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	461a      	mov	r2, r3
 800830a:	88fb      	ldrh	r3, [r7, #6]
 800830c:	f7fc fdf8 	bl	8004f00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008318:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3314      	adds	r3, #20
 8008328:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	617b      	str	r3, [r7, #20]
   return(result);
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3314      	adds	r3, #20
 8008340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008342:	627a      	str	r2, [r7, #36]	; 0x24
 8008344:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	6a39      	ldr	r1, [r7, #32]
 8008348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	e000      	b.n	800835c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3730      	adds	r7, #48	; 0x30
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	080088cd 	.word	0x080088cd
 8008368:	08008967 	.word	0x08008967
 800836c:	08008983 	.word	0x08008983

08008370 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b0ba      	sub	sp, #232	; 0xe8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008396:	2300      	movs	r3, #0
 8008398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800839c:	2300      	movs	r3, #0
 800839e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80083ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10f      	bne.n	80083d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <HAL_UART_IRQHandler+0x66>
 80083c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc66 	bl	8008ca0 <UART_Receive_IT>
      return;
 80083d4:	e256      	b.n	8008884 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 80de 	beq.w	800859c <HAL_UART_IRQHandler+0x22c>
 80083e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80d1 	beq.w	800859c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <HAL_UART_IRQHandler+0xae>
 8008406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800840a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f043 0201 	orr.w	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800841e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <HAL_UART_IRQHandler+0xd2>
 800842a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d005      	beq.n	8008442 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f043 0202 	orr.w	r2, r3, #2
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <HAL_UART_IRQHandler+0xf6>
 800844e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f043 0204 	orr.w	r2, r3, #4
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d011      	beq.n	8008496 <HAL_UART_IRQHandler+0x126>
 8008472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800847e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	f043 0208 	orr.w	r2, r3, #8
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 81ed 	beq.w	800887a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d008      	beq.n	80084be <HAL_UART_IRQHandler+0x14e>
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fbf1 	bl	8008ca0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c8:	2b40      	cmp	r3, #64	; 0x40
 80084ca:	bf0c      	ite	eq
 80084cc:	2301      	moveq	r3, #1
 80084ce:	2300      	movne	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d103      	bne.n	80084ea <HAL_UART_IRQHandler+0x17a>
 80084e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d04f      	beq.n	800858a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 faf9 	bl	8008ae2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d141      	bne.n	8008582 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3314      	adds	r3, #20
 8008504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3314      	adds	r3, #20
 8008526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800852a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800852e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1d9      	bne.n	80084fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	2b00      	cmp	r3, #0
 8008550:	d013      	beq.n	800857a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	4a7d      	ldr	r2, [pc, #500]	; (800874c <HAL_UART_IRQHandler+0x3dc>)
 8008558:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	4618      	mov	r0, r3
 8008560:	f7fc fd96 	bl	8005090 <HAL_DMA_Abort_IT>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d016      	beq.n	8008598 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008578:	e00e      	b.n	8008598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f990 	bl	80088a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008580:	e00a      	b.n	8008598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f98c 	bl	80088a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008588:	e006      	b.n	8008598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f988 	bl	80088a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008596:	e170      	b.n	800887a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008598:	bf00      	nop
    return;
 800859a:	e16e      	b.n	800887a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	f040 814a 	bne.w	800883a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085aa:	f003 0310 	and.w	r3, r3, #16
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 8143 	beq.w	800883a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 813c 	beq.w	800883a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085c2:	2300      	movs	r3, #0
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	60bb      	str	r3, [r7, #8]
 80085d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	f040 80b4 	bne.w	8008750 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8140 	beq.w	800887e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008606:	429a      	cmp	r2, r3
 8008608:	f080 8139 	bcs.w	800887e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008612:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800861e:	f000 8088 	beq.w	8008732 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	330c      	adds	r3, #12
 8008628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800863c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800864e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800865a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1d9      	bne.n	8008622 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3314      	adds	r3, #20
 8008674:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800867e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3314      	adds	r3, #20
 800868e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008692:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008696:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800869a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e1      	bne.n	800866e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3314      	adds	r3, #20
 80086b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e3      	bne.n	80086aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008702:	f023 0310 	bic.w	r3, r3, #16
 8008706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	330c      	adds	r3, #12
 8008710:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008714:	65ba      	str	r2, [r7, #88]	; 0x58
 8008716:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800871a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e3      	bne.n	80086f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	4618      	mov	r0, r3
 800872e:	f7fc fc3f 	bl	8004fb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800873a:	b29b      	uxth	r3, r3
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	b29b      	uxth	r3, r3
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f8b6 	bl	80088b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008748:	e099      	b.n	800887e <HAL_UART_IRQHandler+0x50e>
 800874a:	bf00      	nop
 800874c:	08008ba9 	.word	0x08008ba9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008758:	b29b      	uxth	r3, r3
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 808b 	beq.w	8008882 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800876c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8086 	beq.w	8008882 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	330c      	adds	r3, #12
 800877c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800878c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	330c      	adds	r3, #12
 8008796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800879a:	647a      	str	r2, [r7, #68]	; 0x44
 800879c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e3      	bne.n	8008776 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	623b      	str	r3, [r7, #32]
   return(result);
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087d2:	633a      	str	r2, [r7, #48]	; 0x30
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e3      	bne.n	80087ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	60fb      	str	r3, [r7, #12]
   return(result);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0310 	bic.w	r3, r3, #16
 800880a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008818:	61fa      	str	r2, [r7, #28]
 800881a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	69b9      	ldr	r1, [r7, #24]
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	617b      	str	r3, [r7, #20]
   return(result);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e3      	bne.n	80087f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800882c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f83e 	bl	80088b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008838:	e023      	b.n	8008882 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_UART_IRQHandler+0x4ea>
 8008846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9bc 	bl	8008bd0 <UART_Transmit_IT>
    return;
 8008858:	e014      	b.n	8008884 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00e      	beq.n	8008884 <HAL_UART_IRQHandler+0x514>
 8008866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d008      	beq.n	8008884 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f9fc 	bl	8008c70 <UART_EndTransmit_IT>
    return;
 8008878:	e004      	b.n	8008884 <HAL_UART_IRQHandler+0x514>
    return;
 800887a:	bf00      	nop
 800887c:	e002      	b.n	8008884 <HAL_UART_IRQHandler+0x514>
      return;
 800887e:	bf00      	nop
 8008880:	e000      	b.n	8008884 <HAL_UART_IRQHandler+0x514>
      return;
 8008882:	bf00      	nop
  }
}
 8008884:	37e8      	adds	r7, #232	; 0xe8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop

0800888c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b090      	sub	sp, #64	; 0x40
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d137      	bne.n	8008958 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80088e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ea:	2200      	movs	r2, #0
 80088ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3314      	adds	r3, #20
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	623b      	str	r3, [r7, #32]
   return(result);
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008904:	63bb      	str	r3, [r7, #56]	; 0x38
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890e:	633a      	str	r2, [r7, #48]	; 0x30
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e5      	bne.n	80088ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	330c      	adds	r3, #12
 8008928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	60fb      	str	r3, [r7, #12]
   return(result);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
 800893a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	330c      	adds	r3, #12
 8008940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008942:	61fa      	str	r2, [r7, #28]
 8008944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	69b9      	ldr	r1, [r7, #24]
 8008948:	69fa      	ldr	r2, [r7, #28]
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	617b      	str	r3, [r7, #20]
   return(result);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e5      	bne.n	8008922 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008956:	e002      	b.n	800895e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008958:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800895a:	f7fa f82d 	bl	80029b8 <HAL_UART_TxCpltCallback>
}
 800895e:	bf00      	nop
 8008960:	3740      	adds	r7, #64	; 0x40
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff ff89 	bl	800888c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b80      	cmp	r3, #128	; 0x80
 80089a0:	bf0c      	ite	eq
 80089a2:	2301      	moveq	r3, #1
 80089a4:	2300      	movne	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b21      	cmp	r3, #33	; 0x21
 80089b4:	d108      	bne.n	80089c8 <UART_DMAError+0x46>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80089c2:	68b8      	ldr	r0, [r7, #8]
 80089c4:	f000 f865 	bl	8008a92 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	bf0c      	ite	eq
 80089d6:	2301      	moveq	r3, #1
 80089d8:	2300      	movne	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b22      	cmp	r3, #34	; 0x22
 80089e8:	d108      	bne.n	80089fc <UART_DMAError+0x7a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80089f6:	68b8      	ldr	r0, [r7, #8]
 80089f8:	f000 f873 	bl	8008ae2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	f043 0210 	orr.w	r2, r3, #16
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a08:	68b8      	ldr	r0, [r7, #8]
 8008a0a:	f7ff ff49 	bl	80088a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	88fa      	ldrh	r2, [r7, #6]
 8008a2e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	88fa      	ldrh	r2, [r7, #6]
 8008a34:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2222      	movs	r2, #34	; 0x22
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0201 	orr.w	r2, r2, #1
 8008a72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0220 	orr.w	r2, r2, #32
 8008a82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b089      	sub	sp, #36	; 0x24
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	61ba      	str	r2, [r7, #24]
 8008abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6979      	ldr	r1, [r7, #20]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e5      	bne.n	8008a9a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008ad6:	bf00      	nop
 8008ad8:	3724      	adds	r7, #36	; 0x24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b095      	sub	sp, #84	; 0x54
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	330c      	adds	r3, #12
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b0a:	643a      	str	r2, [r7, #64]	; 0x40
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3314      	adds	r3, #20
 8008b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d119      	bne.n	8008b8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	330c      	adds	r3, #12
 8008b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f023 0310 	bic.w	r3, r3, #16
 8008b70:	647b      	str	r3, [r7, #68]	; 0x44
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	330c      	adds	r3, #12
 8008b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b7a:	61ba      	str	r2, [r7, #24]
 8008b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6979      	ldr	r1, [r7, #20]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	613b      	str	r3, [r7, #16]
   return(result);
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e5      	bne.n	8008b5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b9c:	bf00      	nop
 8008b9e:	3754      	adds	r7, #84	; 0x54
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f7ff fe6c 	bl	80088a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc8:	bf00      	nop
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b21      	cmp	r3, #33	; 0x21
 8008be2:	d13e      	bne.n	8008c62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bec:	d114      	bne.n	8008c18 <UART_Transmit_IT+0x48>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d110      	bne.n	8008c18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	1c9a      	adds	r2, r3, #2
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]
 8008c16:	e008      	b.n	8008c2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	1c59      	adds	r1, r3, #1
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6211      	str	r1, [r2, #32]
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4619      	mov	r1, r3
 8008c38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10f      	bne.n	8008c5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e000      	b.n	8008c64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c62:	2302      	movs	r3, #2
  }
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7f9 fe91 	bl	80029b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08c      	sub	sp, #48	; 0x30
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b22      	cmp	r3, #34	; 0x22
 8008cb2:	f040 80ab 	bne.w	8008e0c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbe:	d117      	bne.n	8008cf0 <UART_Receive_IT+0x50>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d113      	bne.n	8008cf0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	1c9a      	adds	r2, r3, #2
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	629a      	str	r2, [r3, #40]	; 0x28
 8008cee:	e026      	b.n	8008d3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d02:	d007      	beq.n	8008d14 <UART_Receive_IT+0x74>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <UART_Receive_IT+0x82>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	e008      	b.n	8008d34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	3b01      	subs	r3, #1
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d15a      	bne.n	8008e08 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0220 	bic.w	r2, r2, #32
 8008d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d135      	bne.n	8008dfe <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	613b      	str	r3, [r7, #16]
   return(result);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f023 0310 	bic.w	r3, r3, #16
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	330c      	adds	r3, #12
 8008db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db8:	623a      	str	r2, [r7, #32]
 8008dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	69f9      	ldr	r1, [r7, #28]
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e5      	bne.n	8008d98 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0310 	and.w	r3, r3, #16
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	d10a      	bne.n	8008df0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fd5c 	bl	80088b4 <HAL_UARTEx_RxEventCallback>
 8008dfc:	e002      	b.n	8008e04 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f9 fb00 	bl	8002404 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	e002      	b.n	8008e0e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e000      	b.n	8008e0e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e0c:	2302      	movs	r3, #2
  }
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3730      	adds	r7, #48	; 0x30
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e1c:	b0c0      	sub	sp, #256	; 0x100
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e34:	68d9      	ldr	r1, [r3, #12]
 8008e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	ea40 0301 	orr.w	r3, r0, r1
 8008e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	431a      	orrs	r2, r3
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e70:	f021 010c 	bic.w	r1, r1, #12
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e92:	6999      	ldr	r1, [r3, #24]
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	ea40 0301 	orr.w	r3, r0, r1
 8008e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b8f      	ldr	r3, [pc, #572]	; (80090e4 <UART_SetConfig+0x2cc>)
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d005      	beq.n	8008eb8 <UART_SetConfig+0xa0>
 8008eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4b8d      	ldr	r3, [pc, #564]	; (80090e8 <UART_SetConfig+0x2d0>)
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d104      	bne.n	8008ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eb8:	f7fd fbc6 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 8008ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ec0:	e003      	b.n	8008eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ec2:	f7fd fbad 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8008ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed4:	f040 810c 	bne.w	80090f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008eea:	4622      	mov	r2, r4
 8008eec:	462b      	mov	r3, r5
 8008eee:	1891      	adds	r1, r2, r2
 8008ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ef2:	415b      	adcs	r3, r3
 8008ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008efa:	4621      	mov	r1, r4
 8008efc:	eb12 0801 	adds.w	r8, r2, r1
 8008f00:	4629      	mov	r1, r5
 8008f02:	eb43 0901 	adc.w	r9, r3, r1
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f1a:	4690      	mov	r8, r2
 8008f1c:	4699      	mov	r9, r3
 8008f1e:	4623      	mov	r3, r4
 8008f20:	eb18 0303 	adds.w	r3, r8, r3
 8008f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f28:	462b      	mov	r3, r5
 8008f2a:	eb49 0303 	adc.w	r3, r9, r3
 8008f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f46:	460b      	mov	r3, r1
 8008f48:	18db      	adds	r3, r3, r3
 8008f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	eb42 0303 	adc.w	r3, r2, r3
 8008f52:	657b      	str	r3, [r7, #84]	; 0x54
 8008f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f5c:	f7f7 fce6 	bl	800092c <__aeabi_uldivmod>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4b61      	ldr	r3, [pc, #388]	; (80090ec <UART_SetConfig+0x2d4>)
 8008f66:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	011c      	lsls	r4, r3, #4
 8008f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	1891      	adds	r1, r2, r2
 8008f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f88:	415b      	adcs	r3, r3
 8008f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f90:	4641      	mov	r1, r8
 8008f92:	eb12 0a01 	adds.w	sl, r2, r1
 8008f96:	4649      	mov	r1, r9
 8008f98:	eb43 0b01 	adc.w	fp, r3, r1
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fb0:	4692      	mov	sl, r2
 8008fb2:	469b      	mov	fp, r3
 8008fb4:	4643      	mov	r3, r8
 8008fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8008fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fbe:	464b      	mov	r3, r9
 8008fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8008fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	18db      	adds	r3, r3, r3
 8008fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8008fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ff2:	f7f7 fc9b 	bl	800092c <__aeabi_uldivmod>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4b3b      	ldr	r3, [pc, #236]	; (80090ec <UART_SetConfig+0x2d4>)
 8008ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	2264      	movs	r2, #100	; 0x64
 8009006:	fb02 f303 	mul.w	r3, r2, r3
 800900a:	1acb      	subs	r3, r1, r3
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009012:	4b36      	ldr	r3, [pc, #216]	; (80090ec <UART_SetConfig+0x2d4>)
 8009014:	fba3 2302 	umull	r2, r3, r3, r2
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009020:	441c      	add	r4, r3
 8009022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009026:	2200      	movs	r2, #0
 8009028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800902c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009034:	4642      	mov	r2, r8
 8009036:	464b      	mov	r3, r9
 8009038:	1891      	adds	r1, r2, r2
 800903a:	63b9      	str	r1, [r7, #56]	; 0x38
 800903c:	415b      	adcs	r3, r3
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009044:	4641      	mov	r1, r8
 8009046:	1851      	adds	r1, r2, r1
 8009048:	6339      	str	r1, [r7, #48]	; 0x30
 800904a:	4649      	mov	r1, r9
 800904c:	414b      	adcs	r3, r1
 800904e:	637b      	str	r3, [r7, #52]	; 0x34
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800905c:	4659      	mov	r1, fp
 800905e:	00cb      	lsls	r3, r1, #3
 8009060:	4651      	mov	r1, sl
 8009062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009066:	4651      	mov	r1, sl
 8009068:	00ca      	lsls	r2, r1, #3
 800906a:	4610      	mov	r0, r2
 800906c:	4619      	mov	r1, r3
 800906e:	4603      	mov	r3, r0
 8009070:	4642      	mov	r2, r8
 8009072:	189b      	adds	r3, r3, r2
 8009074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009078:	464b      	mov	r3, r9
 800907a:	460a      	mov	r2, r1
 800907c:	eb42 0303 	adc.w	r3, r2, r3
 8009080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009098:	460b      	mov	r3, r1
 800909a:	18db      	adds	r3, r3, r3
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
 800909e:	4613      	mov	r3, r2
 80090a0:	eb42 0303 	adc.w	r3, r2, r3
 80090a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80090ae:	f7f7 fc3d 	bl	800092c <__aeabi_uldivmod>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <UART_SetConfig+0x2d4>)
 80090b8:	fba3 1302 	umull	r1, r3, r3, r2
 80090bc:	095b      	lsrs	r3, r3, #5
 80090be:	2164      	movs	r1, #100	; 0x64
 80090c0:	fb01 f303 	mul.w	r3, r1, r3
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	3332      	adds	r3, #50	; 0x32
 80090ca:	4a08      	ldr	r2, [pc, #32]	; (80090ec <UART_SetConfig+0x2d4>)
 80090cc:	fba2 2303 	umull	r2, r3, r2, r3
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	f003 0207 	and.w	r2, r3, #7
 80090d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4422      	add	r2, r4
 80090de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090e0:	e105      	b.n	80092ee <UART_SetConfig+0x4d6>
 80090e2:	bf00      	nop
 80090e4:	40011000 	.word	0x40011000
 80090e8:	40011400 	.word	0x40011400
 80090ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090f4:	2200      	movs	r2, #0
 80090f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009102:	4642      	mov	r2, r8
 8009104:	464b      	mov	r3, r9
 8009106:	1891      	adds	r1, r2, r2
 8009108:	6239      	str	r1, [r7, #32]
 800910a:	415b      	adcs	r3, r3
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
 800910e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009112:	4641      	mov	r1, r8
 8009114:	1854      	adds	r4, r2, r1
 8009116:	4649      	mov	r1, r9
 8009118:	eb43 0501 	adc.w	r5, r3, r1
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	00eb      	lsls	r3, r5, #3
 8009126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800912a:	00e2      	lsls	r2, r4, #3
 800912c:	4614      	mov	r4, r2
 800912e:	461d      	mov	r5, r3
 8009130:	4643      	mov	r3, r8
 8009132:	18e3      	adds	r3, r4, r3
 8009134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009138:	464b      	mov	r3, r9
 800913a:	eb45 0303 	adc.w	r3, r5, r3
 800913e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800914e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800915e:	4629      	mov	r1, r5
 8009160:	008b      	lsls	r3, r1, #2
 8009162:	4621      	mov	r1, r4
 8009164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009168:	4621      	mov	r1, r4
 800916a:	008a      	lsls	r2, r1, #2
 800916c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009170:	f7f7 fbdc 	bl	800092c <__aeabi_uldivmod>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4b60      	ldr	r3, [pc, #384]	; (80092fc <UART_SetConfig+0x4e4>)
 800917a:	fba3 2302 	umull	r2, r3, r3, r2
 800917e:	095b      	lsrs	r3, r3, #5
 8009180:	011c      	lsls	r4, r3, #4
 8009182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009186:	2200      	movs	r2, #0
 8009188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800918c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	1891      	adds	r1, r2, r2
 800919a:	61b9      	str	r1, [r7, #24]
 800919c:	415b      	adcs	r3, r3
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091a4:	4641      	mov	r1, r8
 80091a6:	1851      	adds	r1, r2, r1
 80091a8:	6139      	str	r1, [r7, #16]
 80091aa:	4649      	mov	r1, r9
 80091ac:	414b      	adcs	r3, r1
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091bc:	4659      	mov	r1, fp
 80091be:	00cb      	lsls	r3, r1, #3
 80091c0:	4651      	mov	r1, sl
 80091c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091c6:	4651      	mov	r1, sl
 80091c8:	00ca      	lsls	r2, r1, #3
 80091ca:	4610      	mov	r0, r2
 80091cc:	4619      	mov	r1, r3
 80091ce:	4603      	mov	r3, r0
 80091d0:	4642      	mov	r2, r8
 80091d2:	189b      	adds	r3, r3, r2
 80091d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091d8:	464b      	mov	r3, r9
 80091da:	460a      	mov	r2, r1
 80091dc:	eb42 0303 	adc.w	r3, r2, r3
 80091e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80091ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091fc:	4649      	mov	r1, r9
 80091fe:	008b      	lsls	r3, r1, #2
 8009200:	4641      	mov	r1, r8
 8009202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009206:	4641      	mov	r1, r8
 8009208:	008a      	lsls	r2, r1, #2
 800920a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800920e:	f7f7 fb8d 	bl	800092c <__aeabi_uldivmod>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4b39      	ldr	r3, [pc, #228]	; (80092fc <UART_SetConfig+0x4e4>)
 8009218:	fba3 1302 	umull	r1, r3, r3, r2
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	2164      	movs	r1, #100	; 0x64
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	011b      	lsls	r3, r3, #4
 8009228:	3332      	adds	r3, #50	; 0x32
 800922a:	4a34      	ldr	r2, [pc, #208]	; (80092fc <UART_SetConfig+0x4e4>)
 800922c:	fba2 2303 	umull	r2, r3, r2, r3
 8009230:	095b      	lsrs	r3, r3, #5
 8009232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009236:	441c      	add	r4, r3
 8009238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800923c:	2200      	movs	r2, #0
 800923e:	673b      	str	r3, [r7, #112]	; 0x70
 8009240:	677a      	str	r2, [r7, #116]	; 0x74
 8009242:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009246:	4642      	mov	r2, r8
 8009248:	464b      	mov	r3, r9
 800924a:	1891      	adds	r1, r2, r2
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	415b      	adcs	r3, r3
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009256:	4641      	mov	r1, r8
 8009258:	1851      	adds	r1, r2, r1
 800925a:	6039      	str	r1, [r7, #0]
 800925c:	4649      	mov	r1, r9
 800925e:	414b      	adcs	r3, r1
 8009260:	607b      	str	r3, [r7, #4]
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	f04f 0300 	mov.w	r3, #0
 800926a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800926e:	4659      	mov	r1, fp
 8009270:	00cb      	lsls	r3, r1, #3
 8009272:	4651      	mov	r1, sl
 8009274:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009278:	4651      	mov	r1, sl
 800927a:	00ca      	lsls	r2, r1, #3
 800927c:	4610      	mov	r0, r2
 800927e:	4619      	mov	r1, r3
 8009280:	4603      	mov	r3, r0
 8009282:	4642      	mov	r2, r8
 8009284:	189b      	adds	r3, r3, r2
 8009286:	66bb      	str	r3, [r7, #104]	; 0x68
 8009288:	464b      	mov	r3, r9
 800928a:	460a      	mov	r2, r1
 800928c:	eb42 0303 	adc.w	r3, r2, r3
 8009290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	663b      	str	r3, [r7, #96]	; 0x60
 800929c:	667a      	str	r2, [r7, #100]	; 0x64
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	f04f 0300 	mov.w	r3, #0
 80092a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80092aa:	4649      	mov	r1, r9
 80092ac:	008b      	lsls	r3, r1, #2
 80092ae:	4641      	mov	r1, r8
 80092b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092b4:	4641      	mov	r1, r8
 80092b6:	008a      	lsls	r2, r1, #2
 80092b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80092bc:	f7f7 fb36 	bl	800092c <__aeabi_uldivmod>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <UART_SetConfig+0x4e4>)
 80092c6:	fba3 1302 	umull	r1, r3, r3, r2
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	2164      	movs	r1, #100	; 0x64
 80092ce:	fb01 f303 	mul.w	r3, r1, r3
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	3332      	adds	r3, #50	; 0x32
 80092d8:	4a08      	ldr	r2, [pc, #32]	; (80092fc <UART_SetConfig+0x4e4>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	095b      	lsrs	r3, r3, #5
 80092e0:	f003 020f 	and.w	r2, r3, #15
 80092e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4422      	add	r2, r4
 80092ec:	609a      	str	r2, [r3, #8]
}
 80092ee:	bf00      	nop
 80092f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092f4:	46bd      	mov	sp, r7
 80092f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092fa:	bf00      	nop
 80092fc:	51eb851f 	.word	0x51eb851f

08009300 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b10      	cmp	r3, #16
 8009310:	d11c      	bne.n	800934c <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <FSMC_NAND_Init+0x94>)
 8009318:	4013      	ands	r3, r2
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	6851      	ldr	r1, [r2, #4]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	6892      	ldr	r2, [r2, #8]
 8009322:	4311      	orrs	r1, r2
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	68d2      	ldr	r2, [r2, #12]
 8009328:	4311      	orrs	r1, r2
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	6912      	ldr	r2, [r2, #16]
 800932e:	4311      	orrs	r1, r2
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	6952      	ldr	r2, [r2, #20]
 8009334:	0252      	lsls	r2, r2, #9
 8009336:	4311      	orrs	r1, r2
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	6992      	ldr	r2, [r2, #24]
 800933c:	0352      	lsls	r2, r2, #13
 800933e:	430a      	orrs	r2, r1
 8009340:	4313      	orrs	r3, r2
 8009342:	f043 0208 	orr.w	r2, r3, #8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e01b      	b.n	8009384 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	4b10      	ldr	r3, [pc, #64]	; (8009394 <FSMC_NAND_Init+0x94>)
 8009352:	4013      	ands	r3, r2
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	6851      	ldr	r1, [r2, #4]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	6892      	ldr	r2, [r2, #8]
 800935c:	4311      	orrs	r1, r2
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	68d2      	ldr	r2, [r2, #12]
 8009362:	4311      	orrs	r1, r2
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	6912      	ldr	r2, [r2, #16]
 8009368:	4311      	orrs	r1, r2
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	6952      	ldr	r2, [r2, #20]
 800936e:	0252      	lsls	r2, r2, #9
 8009370:	4311      	orrs	r1, r2
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	6992      	ldr	r2, [r2, #24]
 8009376:	0352      	lsls	r2, r2, #13
 8009378:	430a      	orrs	r2, r1
 800937a:	4313      	orrs	r3, r2
 800937c:	f043 0208 	orr.w	r2, r3, #8
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	fff00181 	.word	0xfff00181

08009398 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b10      	cmp	r3, #16
 80093a8:	d112      	bne.n	80093d0 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	021b      	lsls	r3, r3, #8
 80093b8:	431a      	orrs	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	041b      	lsls	r3, r3, #16
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	061b      	lsls	r3, r3, #24
 80093c8:	431a      	orrs	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	609a      	str	r2, [r3, #8]
 80093ce:	e011      	b.n	80093f4 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	431a      	orrs	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	431a      	orrs	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	431a      	orrs	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009402:	b480      	push	{r7}
 8009404:	b085      	sub	sp, #20
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b10      	cmp	r3, #16
 8009412:	d112      	bne.n	800943a <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	431a      	orrs	r2, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	431a      	orrs	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	061b      	lsls	r3, r3, #24
 8009432:	431a      	orrs	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	e011      	b.n	800945e <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	431a      	orrs	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	041b      	lsls	r3, r3, #16
 8009450:	431a      	orrs	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	061b      	lsls	r3, r3, #24
 8009458:	431a      	orrs	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <__NVIC_SetPriority>:
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947c:	2b00      	cmp	r3, #0
 800947e:	db0a      	blt.n	8009496 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	b2da      	uxtb	r2, r3
 8009484:	490c      	ldr	r1, [pc, #48]	; (80094b8 <__NVIC_SetPriority+0x4c>)
 8009486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800948a:	0112      	lsls	r2, r2, #4
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	440b      	add	r3, r1
 8009490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009494:	e00a      	b.n	80094ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	b2da      	uxtb	r2, r3
 800949a:	4908      	ldr	r1, [pc, #32]	; (80094bc <__NVIC_SetPriority+0x50>)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	3b04      	subs	r3, #4
 80094a4:	0112      	lsls	r2, r2, #4
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	440b      	add	r3, r1
 80094aa:	761a      	strb	r2, [r3, #24]
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	e000e100 	.word	0xe000e100
 80094bc:	e000ed00 	.word	0xe000ed00

080094c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <SysTick_Handler+0x1c>)
 80094c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80094c8:	f002 f856 	bl	800b578 <xTaskGetSchedulerState>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d001      	beq.n	80094d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80094d2:	f002 fe41 	bl	800c158 <xPortSysTickHandler>
  }
}
 80094d6:	bf00      	nop
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	e000e010 	.word	0xe000e010

080094e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094e4:	2100      	movs	r1, #0
 80094e6:	f06f 0004 	mvn.w	r0, #4
 80094ea:	f7ff ffbf 	bl	800946c <__NVIC_SetPriority>
#endif
}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fa:	f3ef 8305 	mrs	r3, IPSR
 80094fe:	603b      	str	r3, [r7, #0]
  return(result);
 8009500:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009506:	f06f 0305 	mvn.w	r3, #5
 800950a:	607b      	str	r3, [r7, #4]
 800950c:	e00f      	b.n	800952e <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <osKernelInitialize+0x44>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d108      	bne.n	8009528 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8009516:	4809      	ldr	r0, [pc, #36]	; (800953c <osKernelInitialize+0x48>)
 8009518:	f003 f81a 	bl	800c550 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <osKernelInitialize+0x44>)
 800951e:	2201      	movs	r2, #1
 8009520:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009522:	2300      	movs	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	e002      	b.n	800952e <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8009528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800952c:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800952e:	687b      	ldr	r3, [r7, #4]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20001c00 	.word	0x20001c00
 800953c:	200000a8 	.word	0x200000a8

08009540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009546:	f3ef 8305 	mrs	r3, IPSR
 800954a:	603b      	str	r3, [r7, #0]
  return(result);
 800954c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009552:	f06f 0305 	mvn.w	r3, #5
 8009556:	607b      	str	r3, [r7, #4]
 8009558:	e010      	b.n	800957c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <osKernelStart+0x48>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d109      	bne.n	8009576 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009562:	f7ff ffbd 	bl	80094e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <osKernelStart+0x48>)
 8009568:	2202      	movs	r2, #2
 800956a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800956c:	f001 fba8 	bl	800acc0 <vTaskStartScheduler>
      stat = osOK;
 8009570:	2300      	movs	r3, #0
 8009572:	607b      	str	r3, [r7, #4]
 8009574:	e002      	b.n	800957c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800957a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800957c:	687b      	ldr	r3, [r7, #4]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20001c00 	.word	0x20001c00

0800958c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af04      	add	r7, sp, #16
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009598:	2300      	movs	r3, #0
 800959a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959c:	f3ef 8305 	mrs	r3, IPSR
 80095a0:	617b      	str	r3, [r7, #20]
  return(result);
 80095a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d17e      	bne.n	80096a6 <osThreadNew+0x11a>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d07b      	beq.n	80096a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80095ae:	2380      	movs	r3, #128	; 0x80
 80095b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80095b2:	2318      	movs	r3, #24
 80095b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d045      	beq.n	8009652 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <osThreadNew+0x48>
        name = attr->name;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d008      	beq.n	80095fa <osThreadNew+0x6e>
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b38      	cmp	r3, #56	; 0x38
 80095ec:	d805      	bhi.n	80095fa <osThreadNew+0x6e>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <osThreadNew+0x72>
        return (NULL);
 80095fa:	2300      	movs	r3, #0
 80095fc:	e054      	b.n	80096a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	089b      	lsrs	r3, r3, #2
 800960c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00e      	beq.n	8009634 <osThreadNew+0xa8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2bbb      	cmp	r3, #187	; 0xbb
 800961c:	d90a      	bls.n	8009634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009622:	2b00      	cmp	r3, #0
 8009624:	d006      	beq.n	8009634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <osThreadNew+0xa8>
        mem = 1;
 800962e:	2301      	movs	r3, #1
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e010      	b.n	8009656 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10c      	bne.n	8009656 <osThreadNew+0xca>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <osThreadNew+0xca>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <osThreadNew+0xca>
          mem = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e001      	b.n	8009656 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d110      	bne.n	800967e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009664:	9202      	str	r2, [sp, #8]
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6a3a      	ldr	r2, [r7, #32]
 8009670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f001 f938 	bl	800a8e8 <xTaskCreateStatic>
 8009678:	4603      	mov	r3, r0
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	e013      	b.n	80096a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d110      	bne.n	80096a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	b29a      	uxth	r2, r3
 8009688:	f107 0310 	add.w	r3, r7, #16
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f001 f983 	bl	800a9a2 <xTaskCreate>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d001      	beq.n	80096a6 <osThreadNew+0x11a>
            hTask = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80096a6:	693b      	ldr	r3, [r7, #16]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3728      	adds	r7, #40	; 0x28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b8:	f3ef 8305 	mrs	r3, IPSR
 80096bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80096be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <osDelay+0x1c>
    stat = osErrorISR;
 80096c4:	f06f 0305 	mvn.w	r3, #5
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e007      	b.n	80096dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fabe 	bl	800ac58 <vTaskDelay>
    }
  }

  return (stat);
 80096dc:	68fb      	ldr	r3, [r7, #12]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b08a      	sub	sp, #40	; 0x28
 80096ea:	af02      	add	r7, sp, #8
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f6:	f3ef 8305 	mrs	r3, IPSR
 80096fa:	613b      	str	r3, [r7, #16]
  return(result);
 80096fc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d175      	bne.n	80097ee <osSemaphoreNew+0x108>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d072      	beq.n	80097ee <osSemaphoreNew+0x108>
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	429a      	cmp	r2, r3
 800970e:	d86e      	bhi.n	80097ee <osSemaphoreNew+0x108>
    mem = -1;
 8009710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009714:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d015      	beq.n	8009748 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d006      	beq.n	8009732 <osSemaphoreNew+0x4c>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	2b4f      	cmp	r3, #79	; 0x4f
 800972a:	d902      	bls.n	8009732 <osSemaphoreNew+0x4c>
        mem = 1;
 800972c:	2301      	movs	r3, #1
 800972e:	61bb      	str	r3, [r7, #24]
 8009730:	e00c      	b.n	800974c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d108      	bne.n	800974c <osSemaphoreNew+0x66>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d104      	bne.n	800974c <osSemaphoreNew+0x66>
          mem = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	61bb      	str	r3, [r7, #24]
 8009746:	e001      	b.n	800974c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009752:	d04c      	beq.n	80097ee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d128      	bne.n	80097ac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d10a      	bne.n	8009776 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	2203      	movs	r2, #3
 8009766:	9200      	str	r2, [sp, #0]
 8009768:	2200      	movs	r2, #0
 800976a:	2100      	movs	r1, #0
 800976c:	2001      	movs	r0, #1
 800976e:	f000 fac5 	bl	8009cfc <xQueueGenericCreateStatic>
 8009772:	61f8      	str	r0, [r7, #28]
 8009774:	e005      	b.n	8009782 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009776:	2203      	movs	r2, #3
 8009778:	2100      	movs	r1, #0
 800977a:	2001      	movs	r0, #1
 800977c:	f000 fb36 	bl	8009dec <xQueueGenericCreate>
 8009780:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d022      	beq.n	80097ce <osSemaphoreNew+0xe8>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01f      	beq.n	80097ce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800978e:	2300      	movs	r3, #0
 8009790:	2200      	movs	r2, #0
 8009792:	2100      	movs	r1, #0
 8009794:	69f8      	ldr	r0, [r7, #28]
 8009796:	f000 fbf1 	bl	8009f7c <xQueueGenericSend>
 800979a:	4603      	mov	r3, r0
 800979c:	2b01      	cmp	r3, #1
 800979e:	d016      	beq.n	80097ce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80097a0:	69f8      	ldr	r0, [r7, #28]
 80097a2:	f000 fee5 	bl	800a570 <vQueueDelete>
            hSemaphore = NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	61fb      	str	r3, [r7, #28]
 80097aa:	e010      	b.n	80097ce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d108      	bne.n	80097c4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	461a      	mov	r2, r3
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 fb73 	bl	8009ea6 <xQueueCreateCountingSemaphoreStatic>
 80097c0:	61f8      	str	r0, [r7, #28]
 80097c2:	e004      	b.n	80097ce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fba4 	bl	8009f14 <xQueueCreateCountingSemaphore>
 80097cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00c      	beq.n	80097ee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e001      	b.n	80097e6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80097e6:	6979      	ldr	r1, [r7, #20]
 80097e8:	69f8      	ldr	r0, [r7, #28]
 80097ea:	f000 fff5 	bl	800a7d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80097ee:	69fb      	ldr	r3, [r7, #28]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3720      	adds	r7, #32
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08a      	sub	sp, #40	; 0x28
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009804:	2300      	movs	r3, #0
 8009806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009808:	f3ef 8305 	mrs	r3, IPSR
 800980c:	613b      	str	r3, [r7, #16]
  return(result);
 800980e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009810:	2b00      	cmp	r3, #0
 8009812:	d15f      	bne.n	80098d4 <osMessageQueueNew+0xdc>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d05c      	beq.n	80098d4 <osMessageQueueNew+0xdc>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d059      	beq.n	80098d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8009820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009824:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d029      	beq.n	8009880 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d012      	beq.n	800985a <osMessageQueueNew+0x62>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b4f      	cmp	r3, #79	; 0x4f
 800983a:	d90e      	bls.n	800985a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695a      	ldr	r2, [r3, #20]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	fb01 f303 	mul.w	r3, r1, r3
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <osMessageQueueNew+0x62>
        mem = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	e014      	b.n	8009884 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d110      	bne.n	8009884 <osMessageQueueNew+0x8c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10c      	bne.n	8009884 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800986e:	2b00      	cmp	r3, #0
 8009870:	d108      	bne.n	8009884 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <osMessageQueueNew+0x8c>
          mem = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	e001      	b.n	8009884 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d10b      	bne.n	80098a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691a      	ldr	r2, [r3, #16]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2100      	movs	r1, #0
 8009894:	9100      	str	r1, [sp, #0]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 fa2f 	bl	8009cfc <xQueueGenericCreateStatic>
 800989e:	61f8      	str	r0, [r7, #28]
 80098a0:	e008      	b.n	80098b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098a8:	2200      	movs	r2, #0
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fa9d 	bl	8009dec <xQueueGenericCreate>
 80098b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00c      	beq.n	80098d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	e001      	b.n	80098cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80098cc:	6979      	ldr	r1, [r7, #20]
 80098ce:	69f8      	ldr	r0, [r7, #28]
 80098d0:	f000 ff82 	bl	800a7d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80098d4:	69fb      	ldr	r3, [r7, #28]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f8:	f3ef 8305 	mrs	r3, IPSR
 80098fc:	617b      	str	r3, [r7, #20]
  return(result);
 80098fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009900:	2b00      	cmp	r3, #0
 8009902:	d028      	beq.n	8009956 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d005      	beq.n	8009916 <osMessageQueuePut+0x36>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <osMessageQueuePut+0x36>
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009916:	f06f 0303 	mvn.w	r3, #3
 800991a:	61fb      	str	r3, [r7, #28]
 800991c:	e038      	b.n	8009990 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009922:	f107 0210 	add.w	r2, r7, #16
 8009926:	2300      	movs	r3, #0
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	69b8      	ldr	r0, [r7, #24]
 800992c:	f000 fc24 	bl	800a178 <xQueueGenericSendFromISR>
 8009930:	4603      	mov	r3, r0
 8009932:	2b01      	cmp	r3, #1
 8009934:	d003      	beq.n	800993e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009936:	f06f 0302 	mvn.w	r3, #2
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	e028      	b.n	8009990 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d025      	beq.n	8009990 <osMessageQueuePut+0xb0>
 8009944:	4b15      	ldr	r3, [pc, #84]	; (800999c <osMessageQueuePut+0xbc>)
 8009946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	e01c      	b.n	8009990 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <osMessageQueuePut+0x82>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d103      	bne.n	800996a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009962:	f06f 0303 	mvn.w	r3, #3
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e012      	b.n	8009990 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800996a:	2300      	movs	r3, #0
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	69b8      	ldr	r0, [r7, #24]
 8009972:	f000 fb03 	bl	8009f7c <xQueueGenericSend>
 8009976:	4603      	mov	r3, r0
 8009978:	2b01      	cmp	r3, #1
 800997a:	d009      	beq.n	8009990 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009982:	f06f 0301 	mvn.w	r3, #1
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	e002      	b.n	8009990 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800998a:	f06f 0302 	mvn.w	r3, #2
 800998e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009990:	69fb      	ldr	r3, [r7, #28]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3720      	adds	r7, #32
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	e000ed04 	.word	0xe000ed04

080099a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b6:	f3ef 8305 	mrs	r3, IPSR
 80099ba:	617b      	str	r3, [r7, #20]
  return(result);
 80099bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d028      	beq.n	8009a14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d005      	beq.n	80099d4 <osMessageQueueGet+0x34>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <osMessageQueueGet+0x34>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80099d4:	f06f 0303 	mvn.w	r3, #3
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	e037      	b.n	8009a4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80099dc:	2300      	movs	r3, #0
 80099de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099e0:	f107 0310 	add.w	r3, r7, #16
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	69b8      	ldr	r0, [r7, #24]
 80099ea:	f000 fd41 	bl	800a470 <xQueueReceiveFromISR>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d003      	beq.n	80099fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80099f4:	f06f 0302 	mvn.w	r3, #2
 80099f8:	61fb      	str	r3, [r7, #28]
 80099fa:	e027      	b.n	8009a4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d024      	beq.n	8009a4c <osMessageQueueGet+0xac>
 8009a02:	4b15      	ldr	r3, [pc, #84]	; (8009a58 <osMessageQueueGet+0xb8>)
 8009a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	e01b      	b.n	8009a4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <osMessageQueueGet+0x80>
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d103      	bne.n	8009a28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a20:	f06f 0303 	mvn.w	r3, #3
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	e011      	b.n	8009a4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	69b8      	ldr	r0, [r7, #24]
 8009a2e:	f000 fc3f 	bl	800a2b0 <xQueueReceive>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d009      	beq.n	8009a4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a3e:	f06f 0301 	mvn.w	r3, #1
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	e002      	b.n	8009a4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a46:	f06f 0302 	mvn.w	r3, #2
 8009a4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a4c:	69fb      	ldr	r3, [r7, #28]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4a07      	ldr	r2, [pc, #28]	; (8009a88 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4a06      	ldr	r2, [pc, #24]	; (8009a8c <vApplicationGetIdleTaskMemory+0x30>)
 8009a72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2280      	movs	r2, #128	; 0x80
 8009a78:	601a      	str	r2, [r3, #0]
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20005c04 	.word	0x20005c04
 8009a8c:	20005cc0 	.word	0x20005cc0

08009a90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4a07      	ldr	r2, [pc, #28]	; (8009abc <vApplicationGetTimerTaskMemory+0x2c>)
 8009aa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4a06      	ldr	r2, [pc, #24]	; (8009ac0 <vApplicationGetTimerTaskMemory+0x30>)
 8009aa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aae:	601a      	str	r2, [r3, #0]
}
 8009ab0:	bf00      	nop
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20005ec0 	.word	0x20005ec0
 8009ac0:	20005f7c 	.word	0x20005f7c

08009ac4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f103 0208 	add.w	r2, r3, #8
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009adc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f103 0208 	add.w	r2, r3, #8
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f103 0208 	add.w	r2, r3, #8
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b66:	b480      	push	{r7}
 8009b68:	b085      	sub	sp, #20
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b7c:	d103      	bne.n	8009b86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	e00c      	b.n	8009ba0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3308      	adds	r3, #8
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e002      	b.n	8009b94 <vListInsert+0x2e>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d2f6      	bcs.n	8009b8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	601a      	str	r2, [r3, #0]
}
 8009bcc:	bf00      	nop
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	6892      	ldr	r2, [r2, #8]
 8009bee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6852      	ldr	r2, [r2, #4]
 8009bf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d103      	bne.n	8009c0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	1e5a      	subs	r2, r3, #1
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c56:	f002 f9ed 	bl	800c034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	68f9      	ldr	r1, [r7, #12]
 8009c64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	441a      	add	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c86:	3b01      	subs	r3, #1
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c8c:	fb01 f303 	mul.w	r3, r1, r3
 8009c90:	441a      	add	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	22ff      	movs	r2, #255	; 0xff
 8009c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	22ff      	movs	r2, #255	; 0xff
 8009ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d114      	bne.n	8009cd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01a      	beq.n	8009cea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3310      	adds	r3, #16
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fa9b 	bl	800b1f4 <xTaskRemoveFromEventList>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d012      	beq.n	8009cea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cc4:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <xQueueGenericReset+0xcc>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	e009      	b.n	8009cea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3310      	adds	r3, #16
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff fef2 	bl	8009ac4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3324      	adds	r3, #36	; 0x24
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff feed 	bl	8009ac4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cea:	f002 f9d3 	bl	800c094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cee:	2301      	movs	r3, #1
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	; 0x38
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <xQueueGenericCreateStatic+0x52>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <xQueueGenericCreateStatic+0x56>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <xQueueGenericCreateStatic+0x58>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	623b      	str	r3, [r7, #32]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <xQueueGenericCreateStatic+0x7e>
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <xQueueGenericCreateStatic+0x82>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e000      	b.n	8009d80 <xQueueGenericCreateStatic+0x84>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	61fb      	str	r3, [r7, #28]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d9a:	2350      	movs	r3, #80	; 0x50
 8009d9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b50      	cmp	r3, #80	; 0x50
 8009da2:	d00a      	beq.n	8009dba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61bb      	str	r3, [r7, #24]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	68b9      	ldr	r1, [r7, #8]
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 f83f 	bl	8009e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3730      	adds	r7, #48	; 0x30
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	fb02 f303 	mul.w	r3, r2, r3
 8009e1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	3350      	adds	r3, #80	; 0x50
 8009e24:	4618      	mov	r0, r3
 8009e26:	f002 fa27 	bl	800c278 <pvPortMalloc>
 8009e2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	3350      	adds	r3, #80	; 0x50
 8009e3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e44:	79fa      	ldrb	r2, [r7, #7]
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f805 	bl	8009e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e56:	69bb      	ldr	r3, [r7, #24]
	}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3720      	adds	r7, #32
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	e002      	b.n	8009e82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e8e:	2101      	movs	r1, #1
 8009e90:	69b8      	ldr	r0, [r7, #24]
 8009e92:	f7ff fecb 	bl	8009c2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	78fa      	ldrb	r2, [r7, #3]
 8009e9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e9e:	bf00      	nop
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b08a      	sub	sp, #40	; 0x28
 8009eaa:	af02      	add	r7, sp, #8
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	60b9      	str	r1, [r7, #8]
 8009eb0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	61bb      	str	r3, [r7, #24]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d90a      	bls.n	8009eec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	617b      	str	r3, [r7, #20]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009eec:	2302      	movs	r3, #2
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f7ff ff00 	bl	8009cfc <xQueueGenericCreateStatic>
 8009efc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
	}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	613b      	str	r3, [r7, #16]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d90a      	bls.n	8009f58 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f58:	2202      	movs	r2, #2
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ff45 	bl	8009dec <xQueueGenericCreate>
 8009f62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f70:	697b      	ldr	r3, [r7, #20]
	}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08e      	sub	sp, #56	; 0x38
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueGenericSend+0x32>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d103      	bne.n	8009fbc <xQueueGenericSend+0x40>
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <xQueueGenericSend+0x44>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <xQueueGenericSend+0x46>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <xQueueGenericSend+0x60>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d103      	bne.n	8009fea <xQueueGenericSend+0x6e>
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <xQueueGenericSend+0x72>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <xQueueGenericSend+0x74>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <xQueueGenericSend+0x8e>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	623b      	str	r3, [r7, #32]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a00a:	f001 fab5 	bl	800b578 <xTaskGetSchedulerState>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <xQueueGenericSend+0x9e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <xQueueGenericSend+0xa2>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e000      	b.n	800a020 <xQueueGenericSend+0xa4>
 800a01e:	2300      	movs	r3, #0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericSend+0xbe>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	61fb      	str	r3, [r7, #28]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a03a:	f001 fffb 	bl	800c034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a046:	429a      	cmp	r2, r3
 800a048:	d302      	bcc.n	800a050 <xQueueGenericSend+0xd4>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d129      	bne.n	800a0a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a056:	f000 faae 	bl	800a5b6 <prvCopyDataToQueue>
 800a05a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b00      	cmp	r3, #0
 800a062:	d010      	beq.n	800a086 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	3324      	adds	r3, #36	; 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f001 f8c3 	bl	800b1f4 <xTaskRemoveFromEventList>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d013      	beq.n	800a09c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a074:	4b3f      	ldr	r3, [pc, #252]	; (800a174 <xQueueGenericSend+0x1f8>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	e00a      	b.n	800a09c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a08c:	4b39      	ldr	r3, [pc, #228]	; (800a174 <xQueueGenericSend+0x1f8>)
 800a08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a09c:	f001 fffa 	bl	800c094 <vPortExitCritical>
				return pdPASS;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e063      	b.n	800a16c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0aa:	f001 fff3 	bl	800c094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e05c      	b.n	800a16c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0b8:	f107 0314 	add.w	r3, r7, #20
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f001 f8fd 	bl	800b2bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0c6:	f001 ffe5 	bl	800c094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ca:	f000 fe69 	bl	800ada0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0ce:	f001 ffb1 	bl	800c034 <vPortEnterCritical>
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0d8:	b25b      	sxtb	r3, r3
 800a0da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0de:	d103      	bne.n	800a0e8 <xQueueGenericSend+0x16c>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ee:	b25b      	sxtb	r3, r3
 800a0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0f4:	d103      	bne.n	800a0fe <xQueueGenericSend+0x182>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0fe:	f001 ffc9 	bl	800c094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a102:	1d3a      	adds	r2, r7, #4
 800a104:	f107 0314 	add.w	r3, r7, #20
 800a108:	4611      	mov	r1, r2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 f8ec 	bl	800b2e8 <xTaskCheckForTimeOut>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d124      	bne.n	800a160 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a118:	f000 fb45 	bl	800a7a6 <prvIsQueueFull>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d018      	beq.n	800a154 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	3310      	adds	r3, #16
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 f812 	bl	800b154 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a132:	f000 fad0 	bl	800a6d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a136:	f000 fe41 	bl	800adbc <xTaskResumeAll>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f af7c 	bne.w	800a03a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a142:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <xQueueGenericSend+0x1f8>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	e772      	b.n	800a03a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a156:	f000 fabe 	bl	800a6d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a15a:	f000 fe2f 	bl	800adbc <xTaskResumeAll>
 800a15e:	e76c      	b.n	800a03a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a162:	f000 fab8 	bl	800a6d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a166:	f000 fe29 	bl	800adbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a16a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3738      	adds	r7, #56	; 0x38
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b090      	sub	sp, #64	; 0x40
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <xQueueGenericSendFromISR+0x3c>
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <xQueueGenericSendFromISR+0x40>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <xQueueGenericSendFromISR+0x42>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1d0:	bf00      	nop
 800a1d2:	e7fe      	b.n	800a1d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d103      	bne.n	800a1e2 <xQueueGenericSendFromISR+0x6a>
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d101      	bne.n	800a1e6 <xQueueGenericSendFromISR+0x6e>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e000      	b.n	800a1e8 <xQueueGenericSendFromISR+0x70>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	623b      	str	r3, [r7, #32]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a202:	f001 fff9 	bl	800c1f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a206:	f3ef 8211 	mrs	r2, BASEPRI
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	61fa      	str	r2, [r7, #28]
 800a21c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a21e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a220:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d302      	bcc.n	800a234 <xQueueGenericSendFromISR+0xbc>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d12f      	bne.n	800a294 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a24a:	f000 f9b4 	bl	800a5b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a24e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a256:	d112      	bne.n	800a27e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d016      	beq.n	800a28e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	3324      	adds	r3, #36	; 0x24
 800a264:	4618      	mov	r0, r3
 800a266:	f000 ffc5 	bl	800b1f4 <xTaskRemoveFromEventList>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00e      	beq.n	800a28e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00b      	beq.n	800a28e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	e007      	b.n	800a28e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a27e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a282:	3301      	adds	r3, #1
 800a284:	b2db      	uxtb	r3, r3
 800a286:	b25a      	sxtb	r2, r3
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a28e:	2301      	movs	r3, #1
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a292:	e001      	b.n	800a298 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3740      	adds	r7, #64	; 0x40
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08c      	sub	sp, #48	; 0x30
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <xQueueReceive+0x30>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	623b      	str	r3, [r7, #32]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d103      	bne.n	800a2ee <xQueueReceive+0x3e>
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <xQueueReceive+0x42>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueReceive+0x44>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueReceive+0x5e>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61fb      	str	r3, [r7, #28]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a30e:	f001 f933 	bl	800b578 <xTaskGetSchedulerState>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <xQueueReceive+0x6e>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xQueueReceive+0x72>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueReceive+0x74>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueReceive+0x8e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61bb      	str	r3, [r7, #24]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a33e:	f001 fe79 	bl	800c034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01f      	beq.n	800a38e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a352:	f000 f99a 	bl	800a68a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	1e5a      	subs	r2, r3, #1
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00f      	beq.n	800a386 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	3310      	adds	r3, #16
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 ff42 	bl	800b1f4 <xTaskRemoveFromEventList>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d007      	beq.n	800a386 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a376:	4b3d      	ldr	r3, [pc, #244]	; (800a46c <xQueueReceive+0x1bc>)
 800a378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a386:	f001 fe85 	bl	800c094 <vPortExitCritical>
				return pdPASS;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e069      	b.n	800a462 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d103      	bne.n	800a39c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a394:	f001 fe7e 	bl	800c094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a398:	2300      	movs	r3, #0
 800a39a:	e062      	b.n	800a462 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3a2:	f107 0310 	add.w	r3, r7, #16
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 ff88 	bl	800b2bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3b0:	f001 fe70 	bl	800c094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3b4:	f000 fcf4 	bl	800ada0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3b8:	f001 fe3c 	bl	800c034 <vPortEnterCritical>
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3c2:	b25b      	sxtb	r3, r3
 800a3c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3c8:	d103      	bne.n	800a3d2 <xQueueReceive+0x122>
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d8:	b25b      	sxtb	r3, r3
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3de:	d103      	bne.n	800a3e8 <xQueueReceive+0x138>
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3e8:	f001 fe54 	bl	800c094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3ec:	1d3a      	adds	r2, r7, #4
 800a3ee:	f107 0310 	add.w	r3, r7, #16
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 ff77 	bl	800b2e8 <xTaskCheckForTimeOut>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d123      	bne.n	800a448 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a402:	f000 f9ba 	bl	800a77a <prvIsQueueEmpty>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d017      	beq.n	800a43c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	3324      	adds	r3, #36	; 0x24
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4611      	mov	r1, r2
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fe9d 	bl	800b154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41c:	f000 f95b 	bl	800a6d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a420:	f000 fccc 	bl	800adbc <xTaskResumeAll>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d189      	bne.n	800a33e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <xQueueReceive+0x1bc>)
 800a42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	e780      	b.n	800a33e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a43e:	f000 f94a 	bl	800a6d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a442:	f000 fcbb 	bl	800adbc <xTaskResumeAll>
 800a446:	e77a      	b.n	800a33e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44a:	f000 f944 	bl	800a6d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a44e:	f000 fcb5 	bl	800adbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a454:	f000 f991 	bl	800a77a <prvIsQueueEmpty>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f43f af6f 	beq.w	800a33e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a462:	4618      	mov	r0, r3
 800a464:	3730      	adds	r7, #48	; 0x30
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08e      	sub	sp, #56	; 0x38
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	623b      	str	r3, [r7, #32]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <xQueueReceiveFromISR+0x3a>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <xQueueReceiveFromISR+0x3e>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueReceiveFromISR+0x40>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61fb      	str	r3, [r7, #28]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4ca:	f001 fe95 	bl	800c1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	61ba      	str	r2, [r7, #24]
 800a4e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d02f      	beq.n	800a556 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a504:	f000 f8c1 	bl	800a68a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	1e5a      	subs	r2, r3, #1
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a518:	d112      	bne.n	800a540 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d016      	beq.n	800a550 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	3310      	adds	r3, #16
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fe64 	bl	800b1f4 <xTaskRemoveFromEventList>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00e      	beq.n	800a550 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00b      	beq.n	800a550 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	e007      	b.n	800a550 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a544:	3301      	adds	r3, #1
 800a546:	b2db      	uxtb	r3, r3
 800a548:	b25a      	sxtb	r2, r3
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a550:	2301      	movs	r3, #1
 800a552:	637b      	str	r3, [r7, #52]	; 0x34
 800a554:	e001      	b.n	800a55a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a556:	2300      	movs	r3, #0
 800a558:	637b      	str	r3, [r7, #52]	; 0x34
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f383 8811 	msr	BASEPRI, r3
}
 800a564:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3738      	adds	r7, #56	; 0x38
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <vQueueDelete+0x28>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60bb      	str	r3, [r7, #8]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 f947 	bl	800a82c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f001 ff09 	bl	800c3c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b086      	sub	sp, #24
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10d      	bne.n	800a5f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d14d      	bne.n	800a678 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 ffe7 	bl	800b5b4 <xTaskPriorityDisinherit>
 800a5e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	609a      	str	r2, [r3, #8]
 800a5ee:	e043      	b.n	800a678 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d119      	bne.n	800a62a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6858      	ldr	r0, [r3, #4]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	461a      	mov	r2, r3
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	f002 f95b 	bl	800c8bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	441a      	add	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d32b      	bcc.n	800a678 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	605a      	str	r2, [r3, #4]
 800a628:	e026      	b.n	800a678 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68d8      	ldr	r0, [r3, #12]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	461a      	mov	r2, r3
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	f002 f941 	bl	800c8bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	425b      	negs	r3, r3
 800a644:	441a      	add	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d207      	bcs.n	800a666 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	425b      	negs	r3, r3
 800a660:	441a      	add	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d105      	bne.n	800a678 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	3b01      	subs	r3, #1
 800a676:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a680:	697b      	ldr	r3, [r7, #20]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d018      	beq.n	800a6ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a4:	441a      	add	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d303      	bcc.n	800a6be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68d9      	ldr	r1, [r3, #12]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6838      	ldr	r0, [r7, #0]
 800a6ca:	f002 f8f7 	bl	800c8bc <memcpy>
	}
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6de:	f001 fca9 	bl	800c034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6ea:	e011      	b.n	800a710 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d012      	beq.n	800a71a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3324      	adds	r3, #36	; 0x24
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fd7b 	bl	800b1f4 <xTaskRemoveFromEventList>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a704:	f000 fe52 	bl	800b3ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a714:	2b00      	cmp	r3, #0
 800a716:	dce9      	bgt.n	800a6ec <prvUnlockQueue+0x16>
 800a718:	e000      	b.n	800a71c <prvUnlockQueue+0x46>
					break;
 800a71a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	22ff      	movs	r2, #255	; 0xff
 800a720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a724:	f001 fcb6 	bl	800c094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a728:	f001 fc84 	bl	800c034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a732:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a734:	e011      	b.n	800a75a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d012      	beq.n	800a764 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3310      	adds	r3, #16
 800a742:	4618      	mov	r0, r3
 800a744:	f000 fd56 	bl	800b1f4 <xTaskRemoveFromEventList>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a74e:	f000 fe2d 	bl	800b3ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	3b01      	subs	r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a75a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dce9      	bgt.n	800a736 <prvUnlockQueue+0x60>
 800a762:	e000      	b.n	800a766 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a764:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	22ff      	movs	r2, #255	; 0xff
 800a76a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a76e:	f001 fc91 	bl	800c094 <vPortExitCritical>
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a782:	f001 fc57 	bl	800c034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a78e:	2301      	movs	r3, #1
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	e001      	b.n	800a798 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a798:	f001 fc7c 	bl	800c094 <vPortExitCritical>

	return xReturn;
 800a79c:	68fb      	ldr	r3, [r7, #12]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7ae:	f001 fc41 	bl	800c034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d102      	bne.n	800a7c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	e001      	b.n	800a7c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c8:	f001 fc64 	bl	800c094 <vPortExitCritical>

	return xReturn;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
 800a7e6:	e014      	b.n	800a812 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7e8:	4a0f      	ldr	r2, [pc, #60]	; (800a828 <vQueueAddToRegistry+0x50>)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10b      	bne.n	800a80c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7f4:	490c      	ldr	r1, [pc, #48]	; (800a828 <vQueueAddToRegistry+0x50>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7fe:	4a0a      	ldr	r2, [pc, #40]	; (800a828 <vQueueAddToRegistry+0x50>)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	00db      	lsls	r3, r3, #3
 800a804:	4413      	add	r3, r2
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a80a:	e006      	b.n	800a81a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3301      	adds	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b07      	cmp	r3, #7
 800a816:	d9e7      	bls.n	800a7e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	2000637c 	.word	0x2000637c

0800a82c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a834:	2300      	movs	r3, #0
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	e016      	b.n	800a868 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a83a:	4a10      	ldr	r2, [pc, #64]	; (800a87c <vQueueUnregisterQueue+0x50>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	4413      	add	r3, r2
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	429a      	cmp	r2, r3
 800a848:	d10b      	bne.n	800a862 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a84a:	4a0c      	ldr	r2, [pc, #48]	; (800a87c <vQueueUnregisterQueue+0x50>)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2100      	movs	r1, #0
 800a850:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a854:	4a09      	ldr	r2, [pc, #36]	; (800a87c <vQueueUnregisterQueue+0x50>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	00db      	lsls	r3, r3, #3
 800a85a:	4413      	add	r3, r2
 800a85c:	2200      	movs	r2, #0
 800a85e:	605a      	str	r2, [r3, #4]
				break;
 800a860:	e006      	b.n	800a870 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3301      	adds	r3, #1
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b07      	cmp	r3, #7
 800a86c:	d9e5      	bls.n	800a83a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a86e:	bf00      	nop
 800a870:	bf00      	nop
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	2000637c 	.word	0x2000637c

0800a880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a890:	f001 fbd0 	bl	800c034 <vPortEnterCritical>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a89a:	b25b      	sxtb	r3, r3
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8a0:	d103      	bne.n	800a8aa <vQueueWaitForMessageRestricted+0x2a>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b0:	b25b      	sxtb	r3, r3
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8b6:	d103      	bne.n	800a8c0 <vQueueWaitForMessageRestricted+0x40>
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c0:	f001 fbe8 	bl	800c094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	3324      	adds	r3, #36	; 0x24
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fc61 	bl	800b19c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8da:	6978      	ldr	r0, [r7, #20]
 800a8dc:	f7ff fefb 	bl	800a6d6 <prvUnlockQueue>
	}
 800a8e0:	bf00      	nop
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08e      	sub	sp, #56	; 0x38
 800a8ec:	af04      	add	r7, sp, #16
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	623b      	str	r3, [r7, #32]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10a      	bne.n	800a92e <xTaskCreateStatic+0x46>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	61fb      	str	r3, [r7, #28]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a92e:	23bc      	movs	r3, #188	; 0xbc
 800a930:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	2bbc      	cmp	r3, #188	; 0xbc
 800a936:	d00a      	beq.n	800a94e <xTaskCreateStatic+0x66>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	61bb      	str	r3, [r7, #24]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a94e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	2b00      	cmp	r3, #0
 800a954:	d01e      	beq.n	800a994 <xTaskCreateStatic+0xac>
 800a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01b      	beq.n	800a994 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a964:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	2202      	movs	r2, #2
 800a96a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a96e:	2300      	movs	r3, #0
 800a970:	9303      	str	r3, [sp, #12]
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	9302      	str	r3, [sp, #8]
 800a976:	f107 0314 	add.w	r3, r7, #20
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 f850 	bl	800aa2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a98c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a98e:	f000 f8f3 	bl	800ab78 <prvAddNewTaskToReadyList>
 800a992:	e001      	b.n	800a998 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a994:	2300      	movs	r3, #0
 800a996:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a998:	697b      	ldr	r3, [r7, #20]
	}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3728      	adds	r7, #40	; 0x28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b08c      	sub	sp, #48	; 0x30
 800a9a6:	af04      	add	r7, sp, #16
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	603b      	str	r3, [r7, #0]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f001 fc5e 	bl	800c278 <pvPortMalloc>
 800a9bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00e      	beq.n	800a9e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9c4:	20bc      	movs	r0, #188	; 0xbc
 800a9c6:	f001 fc57 	bl	800c278 <pvPortMalloc>
 800a9ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	631a      	str	r2, [r3, #48]	; 0x30
 800a9d8:	e005      	b.n	800a9e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9da:	6978      	ldr	r0, [r7, #20]
 800a9dc:	f001 fcf0 	bl	800c3c0 <vPortFree>
 800a9e0:	e001      	b.n	800a9e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9f4:	88fa      	ldrh	r2, [r7, #6]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9303      	str	r3, [sp, #12]
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	9302      	str	r3, [sp, #8]
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f80e 	bl	800aa2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa10:	69f8      	ldr	r0, [r7, #28]
 800aa12:	f000 f8b1 	bl	800ab78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa16:	2301      	movs	r3, #1
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	e002      	b.n	800aa22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa22:	69bb      	ldr	r3, [r7, #24]
	}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3720      	adds	r7, #32
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	461a      	mov	r2, r3
 800aa44:	21a5      	movs	r1, #165	; 0xa5
 800aa46:	f001 ff47 	bl	800c8d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa54:	3b01      	subs	r3, #1
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	f023 0307 	bic.w	r3, r3, #7
 800aa62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	617b      	str	r3, [r7, #20]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01f      	beq.n	800aaca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]
 800aa8e:	e012      	b.n	800aab6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	4413      	add	r3, r2
 800aa96:	7819      	ldrb	r1, [r3, #0]
 800aa98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	3334      	adds	r3, #52	; 0x34
 800aaa0:	460a      	mov	r2, r1
 800aaa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d006      	beq.n	800aabe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	3301      	adds	r3, #1
 800aab4:	61fb      	str	r3, [r7, #28]
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	2b0f      	cmp	r3, #15
 800aaba:	d9e9      	bls.n	800aa90 <prvInitialiseNewTask+0x64>
 800aabc:	e000      	b.n	800aac0 <prvInitialiseNewTask+0x94>
			{
				break;
 800aabe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aac8:	e003      	b.n	800aad2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	2b37      	cmp	r3, #55	; 0x37
 800aad6:	d901      	bls.n	800aadc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aad8:	2337      	movs	r3, #55	; 0x37
 800aada:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	2200      	movs	r2, #0
 800aaec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff f806 	bl	8009b04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	3318      	adds	r3, #24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff f801 	bl	8009b04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	3354      	adds	r3, #84	; 0x54
 800ab2c:	2260      	movs	r2, #96	; 0x60
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 fed1 	bl	800c8d8 <memset>
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	4a0c      	ldr	r2, [pc, #48]	; (800ab6c <prvInitialiseNewTask+0x140>)
 800ab3a:	659a      	str	r2, [r3, #88]	; 0x58
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	4a0c      	ldr	r2, [pc, #48]	; (800ab70 <prvInitialiseNewTask+0x144>)
 800ab40:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	4a0b      	ldr	r2, [pc, #44]	; (800ab74 <prvInitialiseNewTask+0x148>)
 800ab46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	69b8      	ldr	r0, [r7, #24]
 800ab4e:	f001 f941 	bl	800bdd4 <pxPortInitialiseStack>
 800ab52:	4602      	mov	r2, r0
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab64:	bf00      	nop
 800ab66:	3720      	adds	r7, #32
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	0800fe4c 	.word	0x0800fe4c
 800ab70:	0800fe6c 	.word	0x0800fe6c
 800ab74:	0800fe2c 	.word	0x0800fe2c

0800ab78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab80:	f001 fa58 	bl	800c034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab84:	4b2d      	ldr	r3, [pc, #180]	; (800ac3c <prvAddNewTaskToReadyList+0xc4>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	4a2c      	ldr	r2, [pc, #176]	; (800ac3c <prvAddNewTaskToReadyList+0xc4>)
 800ab8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab8e:	4b2c      	ldr	r3, [pc, #176]	; (800ac40 <prvAddNewTaskToReadyList+0xc8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab96:	4a2a      	ldr	r2, [pc, #168]	; (800ac40 <prvAddNewTaskToReadyList+0xc8>)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab9c:	4b27      	ldr	r3, [pc, #156]	; (800ac3c <prvAddNewTaskToReadyList+0xc4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d110      	bne.n	800abc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aba4:	f000 fc26 	bl	800b3f4 <prvInitialiseTaskLists>
 800aba8:	e00d      	b.n	800abc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abaa:	4b26      	ldr	r3, [pc, #152]	; (800ac44 <prvAddNewTaskToReadyList+0xcc>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d109      	bne.n	800abc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abb2:	4b23      	ldr	r3, [pc, #140]	; (800ac40 <prvAddNewTaskToReadyList+0xc8>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d802      	bhi.n	800abc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abc0:	4a1f      	ldr	r2, [pc, #124]	; (800ac40 <prvAddNewTaskToReadyList+0xc8>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abc6:	4b20      	ldr	r3, [pc, #128]	; (800ac48 <prvAddNewTaskToReadyList+0xd0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3301      	adds	r3, #1
 800abcc:	4a1e      	ldr	r2, [pc, #120]	; (800ac48 <prvAddNewTaskToReadyList+0xd0>)
 800abce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abd0:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <prvAddNewTaskToReadyList+0xd0>)
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abdc:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <prvAddNewTaskToReadyList+0xd4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d903      	bls.n	800abec <prvAddNewTaskToReadyList+0x74>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <prvAddNewTaskToReadyList+0xd4>)
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4a15      	ldr	r2, [pc, #84]	; (800ac50 <prvAddNewTaskToReadyList+0xd8>)
 800abfa:	441a      	add	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f7fe ff8b 	bl	8009b1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac08:	f001 fa44 	bl	800c094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac0c:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <prvAddNewTaskToReadyList+0xcc>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00e      	beq.n	800ac32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <prvAddNewTaskToReadyList+0xc8>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d207      	bcs.n	800ac32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac22:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <prvAddNewTaskToReadyList+0xdc>)
 800ac24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20006890 	.word	0x20006890
 800ac40:	200063bc 	.word	0x200063bc
 800ac44:	2000689c 	.word	0x2000689c
 800ac48:	200068ac 	.word	0x200068ac
 800ac4c:	20006898 	.word	0x20006898
 800ac50:	200063c0 	.word	0x200063c0
 800ac54:	e000ed04 	.word	0xe000ed04

0800ac58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d017      	beq.n	800ac9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac6a:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <vTaskDelay+0x60>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00a      	beq.n	800ac88 <vTaskDelay+0x30>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	60bb      	str	r3, [r7, #8]
}
 800ac84:	bf00      	nop
 800ac86:	e7fe      	b.n	800ac86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac88:	f000 f88a 	bl	800ada0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fcfe 	bl	800b690 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac94:	f000 f892 	bl	800adbc <xTaskResumeAll>
 800ac98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d107      	bne.n	800acb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aca0:	4b06      	ldr	r3, [pc, #24]	; (800acbc <vTaskDelay+0x64>)
 800aca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	200068b8 	.word	0x200068b8
 800acbc:	e000ed04 	.word	0xe000ed04

0800acc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acca:	2300      	movs	r3, #0
 800accc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acce:	463a      	mov	r2, r7
 800acd0:	1d39      	adds	r1, r7, #4
 800acd2:	f107 0308 	add.w	r3, r7, #8
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe fec0 	bl	8009a5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	9202      	str	r2, [sp, #8]
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	2300      	movs	r3, #0
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	2300      	movs	r3, #0
 800acec:	460a      	mov	r2, r1
 800acee:	4924      	ldr	r1, [pc, #144]	; (800ad80 <vTaskStartScheduler+0xc0>)
 800acf0:	4824      	ldr	r0, [pc, #144]	; (800ad84 <vTaskStartScheduler+0xc4>)
 800acf2:	f7ff fdf9 	bl	800a8e8 <xTaskCreateStatic>
 800acf6:	4603      	mov	r3, r0
 800acf8:	4a23      	ldr	r2, [pc, #140]	; (800ad88 <vTaskStartScheduler+0xc8>)
 800acfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acfc:	4b22      	ldr	r3, [pc, #136]	; (800ad88 <vTaskStartScheduler+0xc8>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad04:	2301      	movs	r3, #1
 800ad06:	617b      	str	r3, [r7, #20]
 800ad08:	e001      	b.n	800ad0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d102      	bne.n	800ad1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad14:	f000 fd10 	bl	800b738 <xTimerCreateTimerTask>
 800ad18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d11b      	bne.n	800ad58 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	613b      	str	r3, [r7, #16]
}
 800ad32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad34:	4b15      	ldr	r3, [pc, #84]	; (800ad8c <vTaskStartScheduler+0xcc>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3354      	adds	r3, #84	; 0x54
 800ad3a:	4a15      	ldr	r2, [pc, #84]	; (800ad90 <vTaskStartScheduler+0xd0>)
 800ad3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad3e:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <vTaskStartScheduler+0xd4>)
 800ad40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <vTaskStartScheduler+0xd8>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad4c:	4b13      	ldr	r3, [pc, #76]	; (800ad9c <vTaskStartScheduler+0xdc>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad52:	f001 f8cd 	bl	800bef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad56:	e00e      	b.n	800ad76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad5e:	d10a      	bne.n	800ad76 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	60fb      	str	r3, [r7, #12]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <vTaskStartScheduler+0xb4>
}
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	0800dc94 	.word	0x0800dc94
 800ad84:	0800b3c5 	.word	0x0800b3c5
 800ad88:	200068b4 	.word	0x200068b4
 800ad8c:	200063bc 	.word	0x200063bc
 800ad90:	200000bc 	.word	0x200000bc
 800ad94:	200068b0 	.word	0x200068b0
 800ad98:	2000689c 	.word	0x2000689c
 800ad9c:	20006894 	.word	0x20006894

0800ada0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ada4:	4b04      	ldr	r3, [pc, #16]	; (800adb8 <vTaskSuspendAll+0x18>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3301      	adds	r3, #1
 800adaa:	4a03      	ldr	r2, [pc, #12]	; (800adb8 <vTaskSuspendAll+0x18>)
 800adac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adae:	bf00      	nop
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	200068b8 	.word	0x200068b8

0800adbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adca:	4b42      	ldr	r3, [pc, #264]	; (800aed4 <xTaskResumeAll+0x118>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <xTaskResumeAll+0x2c>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	603b      	str	r3, [r7, #0]
}
 800ade4:	bf00      	nop
 800ade6:	e7fe      	b.n	800ade6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ade8:	f001 f924 	bl	800c034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adec:	4b39      	ldr	r3, [pc, #228]	; (800aed4 <xTaskResumeAll+0x118>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4a38      	ldr	r2, [pc, #224]	; (800aed4 <xTaskResumeAll+0x118>)
 800adf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf6:	4b37      	ldr	r3, [pc, #220]	; (800aed4 <xTaskResumeAll+0x118>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d162      	bne.n	800aec4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adfe:	4b36      	ldr	r3, [pc, #216]	; (800aed8 <xTaskResumeAll+0x11c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d05e      	beq.n	800aec4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae06:	e02f      	b.n	800ae68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae08:	4b34      	ldr	r3, [pc, #208]	; (800aedc <xTaskResumeAll+0x120>)
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	3318      	adds	r3, #24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fe fedf 	bl	8009bd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe feda 	bl	8009bd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae28:	4b2d      	ldr	r3, [pc, #180]	; (800aee0 <xTaskResumeAll+0x124>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d903      	bls.n	800ae38 <xTaskResumeAll+0x7c>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	4a2a      	ldr	r2, [pc, #168]	; (800aee0 <xTaskResumeAll+0x124>)
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4a27      	ldr	r2, [pc, #156]	; (800aee4 <xTaskResumeAll+0x128>)
 800ae46:	441a      	add	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f7fe fe65 	bl	8009b1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <xTaskResumeAll+0x12c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d302      	bcc.n	800ae68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae62:	4b22      	ldr	r3, [pc, #136]	; (800aeec <xTaskResumeAll+0x130>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae68:	4b1c      	ldr	r3, [pc, #112]	; (800aedc <xTaskResumeAll+0x120>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1cb      	bne.n	800ae08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae76:	f000 fb5f 	bl	800b538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae7a:	4b1d      	ldr	r3, [pc, #116]	; (800aef0 <xTaskResumeAll+0x134>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d010      	beq.n	800aea8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae86:	f000 f847 	bl	800af18 <xTaskIncrementTick>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ae90:	4b16      	ldr	r3, [pc, #88]	; (800aeec <xTaskResumeAll+0x130>)
 800ae92:	2201      	movs	r2, #1
 800ae94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f1      	bne.n	800ae86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aea2:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <xTaskResumeAll+0x134>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <xTaskResumeAll+0x130>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d009      	beq.n	800aec4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aeb4:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <xTaskResumeAll+0x138>)
 800aeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aec4:	f001 f8e6 	bl	800c094 <vPortExitCritical>

	return xAlreadyYielded;
 800aec8:	68bb      	ldr	r3, [r7, #8]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	200068b8 	.word	0x200068b8
 800aed8:	20006890 	.word	0x20006890
 800aedc:	20006850 	.word	0x20006850
 800aee0:	20006898 	.word	0x20006898
 800aee4:	200063c0 	.word	0x200063c0
 800aee8:	200063bc 	.word	0x200063bc
 800aeec:	200068a4 	.word	0x200068a4
 800aef0:	200068a0 	.word	0x200068a0
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aefe:	4b05      	ldr	r3, [pc, #20]	; (800af14 <xTaskGetTickCount+0x1c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af04:	687b      	ldr	r3, [r7, #4]
}
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20006894 	.word	0x20006894

0800af18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af22:	4b4f      	ldr	r3, [pc, #316]	; (800b060 <xTaskIncrementTick+0x148>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f040 808f 	bne.w	800b04a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af2c:	4b4d      	ldr	r3, [pc, #308]	; (800b064 <xTaskIncrementTick+0x14c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af34:	4a4b      	ldr	r2, [pc, #300]	; (800b064 <xTaskIncrementTick+0x14c>)
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d120      	bne.n	800af82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af40:	4b49      	ldr	r3, [pc, #292]	; (800b068 <xTaskIncrementTick+0x150>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00a      	beq.n	800af60 <xTaskIncrementTick+0x48>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	603b      	str	r3, [r7, #0]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xTaskIncrementTick+0x46>
 800af60:	4b41      	ldr	r3, [pc, #260]	; (800b068 <xTaskIncrementTick+0x150>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	4b41      	ldr	r3, [pc, #260]	; (800b06c <xTaskIncrementTick+0x154>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a3f      	ldr	r2, [pc, #252]	; (800b068 <xTaskIncrementTick+0x150>)
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	4a3f      	ldr	r2, [pc, #252]	; (800b06c <xTaskIncrementTick+0x154>)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	4b3e      	ldr	r3, [pc, #248]	; (800b070 <xTaskIncrementTick+0x158>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	4a3d      	ldr	r2, [pc, #244]	; (800b070 <xTaskIncrementTick+0x158>)
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	f000 fadb 	bl	800b538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af82:	4b3c      	ldr	r3, [pc, #240]	; (800b074 <xTaskIncrementTick+0x15c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d349      	bcc.n	800b020 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af8c:	4b36      	ldr	r3, [pc, #216]	; (800b068 <xTaskIncrementTick+0x150>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d104      	bne.n	800afa0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af96:	4b37      	ldr	r3, [pc, #220]	; (800b074 <xTaskIncrementTick+0x15c>)
 800af98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af9c:	601a      	str	r2, [r3, #0]
					break;
 800af9e:	e03f      	b.n	800b020 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa0:	4b31      	ldr	r3, [pc, #196]	; (800b068 <xTaskIncrementTick+0x150>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d203      	bcs.n	800afc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afb8:	4a2e      	ldr	r2, [pc, #184]	; (800b074 <xTaskIncrementTick+0x15c>)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afbe:	e02f      	b.n	800b020 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe fe07 	bl	8009bd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	3318      	adds	r3, #24
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe fdfe 	bl	8009bd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe0:	4b25      	ldr	r3, [pc, #148]	; (800b078 <xTaskIncrementTick+0x160>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d903      	bls.n	800aff0 <xTaskIncrementTick+0xd8>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afec:	4a22      	ldr	r2, [pc, #136]	; (800b078 <xTaskIncrementTick+0x160>)
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4a1f      	ldr	r2, [pc, #124]	; (800b07c <xTaskIncrementTick+0x164>)
 800affe:	441a      	add	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	3304      	adds	r3, #4
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f7fe fd89 	bl	8009b1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4b1b      	ldr	r3, [pc, #108]	; (800b080 <xTaskIncrementTick+0x168>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	429a      	cmp	r2, r3
 800b018:	d3b8      	bcc.n	800af8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b01e:	e7b5      	b.n	800af8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b020:	4b17      	ldr	r3, [pc, #92]	; (800b080 <xTaskIncrementTick+0x168>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	4915      	ldr	r1, [pc, #84]	; (800b07c <xTaskIncrementTick+0x164>)
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d901      	bls.n	800b03c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b038:	2301      	movs	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b03c:	4b11      	ldr	r3, [pc, #68]	; (800b084 <xTaskIncrementTick+0x16c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	617b      	str	r3, [r7, #20]
 800b048:	e004      	b.n	800b054 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b04a:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <xTaskIncrementTick+0x170>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3301      	adds	r3, #1
 800b050:	4a0d      	ldr	r2, [pc, #52]	; (800b088 <xTaskIncrementTick+0x170>)
 800b052:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b054:	697b      	ldr	r3, [r7, #20]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200068b8 	.word	0x200068b8
 800b064:	20006894 	.word	0x20006894
 800b068:	20006848 	.word	0x20006848
 800b06c:	2000684c 	.word	0x2000684c
 800b070:	200068a8 	.word	0x200068a8
 800b074:	200068b0 	.word	0x200068b0
 800b078:	20006898 	.word	0x20006898
 800b07c:	200063c0 	.word	0x200063c0
 800b080:	200063bc 	.word	0x200063bc
 800b084:	200068a4 	.word	0x200068a4
 800b088:	200068a0 	.word	0x200068a0

0800b08c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b092:	4b2a      	ldr	r3, [pc, #168]	; (800b13c <vTaskSwitchContext+0xb0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b09a:	4b29      	ldr	r3, [pc, #164]	; (800b140 <vTaskSwitchContext+0xb4>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0a0:	e046      	b.n	800b130 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b0a2:	4b27      	ldr	r3, [pc, #156]	; (800b140 <vTaskSwitchContext+0xb4>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a8:	4b26      	ldr	r3, [pc, #152]	; (800b144 <vTaskSwitchContext+0xb8>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	e010      	b.n	800b0d2 <vTaskSwitchContext+0x46>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10a      	bne.n	800b0cc <vTaskSwitchContext+0x40>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	607b      	str	r3, [r7, #4]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <vTaskSwitchContext+0x3e>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	491d      	ldr	r1, [pc, #116]	; (800b148 <vTaskSwitchContext+0xbc>)
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	440b      	add	r3, r1
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0e4      	beq.n	800b0b0 <vTaskSwitchContext+0x24>
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a15      	ldr	r2, [pc, #84]	; (800b148 <vTaskSwitchContext+0xbc>)
 800b0f2:	4413      	add	r3, r2
 800b0f4:	60bb      	str	r3, [r7, #8]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	605a      	str	r2, [r3, #4]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3308      	adds	r3, #8
 800b108:	429a      	cmp	r2, r3
 800b10a:	d104      	bne.n	800b116 <vTaskSwitchContext+0x8a>
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	605a      	str	r2, [r3, #4]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <vTaskSwitchContext+0xc0>)
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	4a08      	ldr	r2, [pc, #32]	; (800b144 <vTaskSwitchContext+0xb8>)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b126:	4b09      	ldr	r3, [pc, #36]	; (800b14c <vTaskSwitchContext+0xc0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3354      	adds	r3, #84	; 0x54
 800b12c:	4a08      	ldr	r2, [pc, #32]	; (800b150 <vTaskSwitchContext+0xc4>)
 800b12e:	6013      	str	r3, [r2, #0]
}
 800b130:	bf00      	nop
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	200068b8 	.word	0x200068b8
 800b140:	200068a4 	.word	0x200068a4
 800b144:	20006898 	.word	0x20006898
 800b148:	200063c0 	.word	0x200063c0
 800b14c:	200063bc 	.word	0x200063bc
 800b150:	200000bc 	.word	0x200000bc

0800b154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	60fb      	str	r3, [r7, #12]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b17a:	4b07      	ldr	r3, [pc, #28]	; (800b198 <vTaskPlaceOnEventList+0x44>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3318      	adds	r3, #24
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7fe fcef 	bl	8009b66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b188:	2101      	movs	r1, #1
 800b18a:	6838      	ldr	r0, [r7, #0]
 800b18c:	f000 fa80 	bl	800b690 <prvAddCurrentTaskToDelayedList>
}
 800b190:	bf00      	nop
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	200063bc 	.word	0x200063bc

0800b19c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	617b      	str	r3, [r7, #20]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1c4:	4b0a      	ldr	r3, [pc, #40]	; (800b1f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3318      	adds	r3, #24
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7fe fca6 	bl	8009b1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b1d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	f000 fa55 	bl	800b690 <prvAddCurrentTaskToDelayedList>
	}
 800b1e6:	bf00      	nop
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200063bc 	.word	0x200063bc

0800b1f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10a      	bne.n	800b220 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	60fb      	str	r3, [r7, #12]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3318      	adds	r3, #24
 800b224:	4618      	mov	r0, r3
 800b226:	f7fe fcd7 	bl	8009bd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b22a:	4b1e      	ldr	r3, [pc, #120]	; (800b2a4 <xTaskRemoveFromEventList+0xb0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d11d      	bne.n	800b26e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fcce 	bl	8009bd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4b19      	ldr	r3, [pc, #100]	; (800b2a8 <xTaskRemoveFromEventList+0xb4>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	429a      	cmp	r2, r3
 800b246:	d903      	bls.n	800b250 <xTaskRemoveFromEventList+0x5c>
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a16      	ldr	r2, [pc, #88]	; (800b2a8 <xTaskRemoveFromEventList+0xb4>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <xTaskRemoveFromEventList+0xb8>)
 800b25e:	441a      	add	r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fe fc59 	bl	8009b1e <vListInsertEnd>
 800b26c:	e005      	b.n	800b27a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	3318      	adds	r3, #24
 800b272:	4619      	mov	r1, r3
 800b274:	480e      	ldr	r0, [pc, #56]	; (800b2b0 <xTaskRemoveFromEventList+0xbc>)
 800b276:	f7fe fc52 	bl	8009b1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b27e:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <xTaskRemoveFromEventList+0xc0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b284:	429a      	cmp	r2, r3
 800b286:	d905      	bls.n	800b294 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b288:	2301      	movs	r3, #1
 800b28a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b28c:	4b0a      	ldr	r3, [pc, #40]	; (800b2b8 <xTaskRemoveFromEventList+0xc4>)
 800b28e:	2201      	movs	r2, #1
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	e001      	b.n	800b298 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b298:	697b      	ldr	r3, [r7, #20]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	200068b8 	.word	0x200068b8
 800b2a8:	20006898 	.word	0x20006898
 800b2ac:	200063c0 	.word	0x200063c0
 800b2b0:	20006850 	.word	0x20006850
 800b2b4:	200063bc 	.word	0x200063bc
 800b2b8:	200068a4 	.word	0x200068a4

0800b2bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2c4:	4b06      	ldr	r3, [pc, #24]	; (800b2e0 <vTaskInternalSetTimeOutState+0x24>)
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2cc:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <vTaskInternalSetTimeOutState+0x28>)
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	605a      	str	r2, [r3, #4]
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	200068a8 	.word	0x200068a8
 800b2e4:	20006894 	.word	0x20006894

0800b2e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	613b      	str	r3, [r7, #16]
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b32a:	f000 fe83 	bl	800c034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b32e:	4b1d      	ldr	r3, [pc, #116]	; (800b3a4 <xTaskCheckForTimeOut+0xbc>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b346:	d102      	bne.n	800b34e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b348:	2300      	movs	r3, #0
 800b34a:	61fb      	str	r3, [r7, #28]
 800b34c:	e023      	b.n	800b396 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	4b15      	ldr	r3, [pc, #84]	; (800b3a8 <xTaskCheckForTimeOut+0xc0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	429a      	cmp	r2, r3
 800b358:	d007      	beq.n	800b36a <xTaskCheckForTimeOut+0x82>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	429a      	cmp	r2, r3
 800b362:	d302      	bcc.n	800b36a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	61fb      	str	r3, [r7, #28]
 800b368:	e015      	b.n	800b396 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	429a      	cmp	r2, r3
 800b372:	d20b      	bcs.n	800b38c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	1ad2      	subs	r2, r2, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7ff ff9b 	bl	800b2bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b386:	2300      	movs	r3, #0
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	e004      	b.n	800b396 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b392:	2301      	movs	r3, #1
 800b394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b396:	f000 fe7d 	bl	800c094 <vPortExitCritical>

	return xReturn;
 800b39a:	69fb      	ldr	r3, [r7, #28]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3720      	adds	r7, #32
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20006894 	.word	0x20006894
 800b3a8:	200068a8 	.word	0x200068a8

0800b3ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3b0:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <vTaskMissedYield+0x14>)
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
}
 800b3b6:	bf00      	nop
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	200068a4 	.word	0x200068a4

0800b3c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3cc:	f000 f852 	bl	800b474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3d0:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <prvIdleTask+0x28>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d9f9      	bls.n	800b3cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <prvIdleTask+0x2c>)
 800b3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3e8:	e7f0      	b.n	800b3cc <prvIdleTask+0x8>
 800b3ea:	bf00      	nop
 800b3ec:	200063c0 	.word	0x200063c0
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]
 800b3fe:	e00c      	b.n	800b41a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	4613      	mov	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4a12      	ldr	r2, [pc, #72]	; (800b454 <prvInitialiseTaskLists+0x60>)
 800b40c:	4413      	add	r3, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fb58 	bl	8009ac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b37      	cmp	r3, #55	; 0x37
 800b41e:	d9ef      	bls.n	800b400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b420:	480d      	ldr	r0, [pc, #52]	; (800b458 <prvInitialiseTaskLists+0x64>)
 800b422:	f7fe fb4f 	bl	8009ac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b426:	480d      	ldr	r0, [pc, #52]	; (800b45c <prvInitialiseTaskLists+0x68>)
 800b428:	f7fe fb4c 	bl	8009ac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b42c:	480c      	ldr	r0, [pc, #48]	; (800b460 <prvInitialiseTaskLists+0x6c>)
 800b42e:	f7fe fb49 	bl	8009ac4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b432:	480c      	ldr	r0, [pc, #48]	; (800b464 <prvInitialiseTaskLists+0x70>)
 800b434:	f7fe fb46 	bl	8009ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b438:	480b      	ldr	r0, [pc, #44]	; (800b468 <prvInitialiseTaskLists+0x74>)
 800b43a:	f7fe fb43 	bl	8009ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b43e:	4b0b      	ldr	r3, [pc, #44]	; (800b46c <prvInitialiseTaskLists+0x78>)
 800b440:	4a05      	ldr	r2, [pc, #20]	; (800b458 <prvInitialiseTaskLists+0x64>)
 800b442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <prvInitialiseTaskLists+0x7c>)
 800b446:	4a05      	ldr	r2, [pc, #20]	; (800b45c <prvInitialiseTaskLists+0x68>)
 800b448:	601a      	str	r2, [r3, #0]
}
 800b44a:	bf00      	nop
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	200063c0 	.word	0x200063c0
 800b458:	20006820 	.word	0x20006820
 800b45c:	20006834 	.word	0x20006834
 800b460:	20006850 	.word	0x20006850
 800b464:	20006864 	.word	0x20006864
 800b468:	2000687c 	.word	0x2000687c
 800b46c:	20006848 	.word	0x20006848
 800b470:	2000684c 	.word	0x2000684c

0800b474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b47a:	e019      	b.n	800b4b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b47c:	f000 fdda 	bl	800c034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b480:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <prvCheckTasksWaitingTermination+0x50>)
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe fba3 	bl	8009bd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b492:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <prvCheckTasksWaitingTermination+0x54>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3b01      	subs	r3, #1
 800b498:	4a0b      	ldr	r2, [pc, #44]	; (800b4c8 <prvCheckTasksWaitingTermination+0x54>)
 800b49a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b49c:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <prvCheckTasksWaitingTermination+0x58>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <prvCheckTasksWaitingTermination+0x58>)
 800b4a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4a6:	f000 fdf5 	bl	800c094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f810 	bl	800b4d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4b0:	4b06      	ldr	r3, [pc, #24]	; (800b4cc <prvCheckTasksWaitingTermination+0x58>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e1      	bne.n	800b47c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4b8:	bf00      	nop
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20006864 	.word	0x20006864
 800b4c8:	20006890 	.word	0x20006890
 800b4cc:	20006878 	.word	0x20006878

0800b4d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3354      	adds	r3, #84	; 0x54
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 fb07 	bl	800caf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d108      	bne.n	800b4fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 ff65 	bl	800c3c0 <vPortFree>
				vPortFree( pxTCB );
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 ff62 	bl	800c3c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4fc:	e018      	b.n	800b530 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b504:	2b01      	cmp	r3, #1
 800b506:	d103      	bne.n	800b510 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 ff59 	bl	800c3c0 <vPortFree>
	}
 800b50e:	e00f      	b.n	800b530 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b516:	2b02      	cmp	r3, #2
 800b518:	d00a      	beq.n	800b530 <prvDeleteTCB+0x60>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	60fb      	str	r3, [r7, #12]
}
 800b52c:	bf00      	nop
 800b52e:	e7fe      	b.n	800b52e <prvDeleteTCB+0x5e>
	}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b53e:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <prvResetNextTaskUnblockTime+0x38>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d104      	bne.n	800b552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b548:	4b0a      	ldr	r3, [pc, #40]	; (800b574 <prvResetNextTaskUnblockTime+0x3c>)
 800b54a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b54e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b550:	e008      	b.n	800b564 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b552:	4b07      	ldr	r3, [pc, #28]	; (800b570 <prvResetNextTaskUnblockTime+0x38>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	4a04      	ldr	r2, [pc, #16]	; (800b574 <prvResetNextTaskUnblockTime+0x3c>)
 800b562:	6013      	str	r3, [r2, #0]
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	20006848 	.word	0x20006848
 800b574:	200068b0 	.word	0x200068b0

0800b578 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b57e:	4b0b      	ldr	r3, [pc, #44]	; (800b5ac <xTaskGetSchedulerState+0x34>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b586:	2301      	movs	r3, #1
 800b588:	607b      	str	r3, [r7, #4]
 800b58a:	e008      	b.n	800b59e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b58c:	4b08      	ldr	r3, [pc, #32]	; (800b5b0 <xTaskGetSchedulerState+0x38>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b594:	2302      	movs	r3, #2
 800b596:	607b      	str	r3, [r7, #4]
 800b598:	e001      	b.n	800b59e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b59a:	2300      	movs	r3, #0
 800b59c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b59e:	687b      	ldr	r3, [r7, #4]
	}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	2000689c 	.word	0x2000689c
 800b5b0:	200068b8 	.word	0x200068b8

0800b5b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d056      	beq.n	800b678 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	; (800b684 <xTaskPriorityDisinherit+0xd0>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d00a      	beq.n	800b5ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	60fb      	str	r3, [r7, #12]
}
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10a      	bne.n	800b608 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60bb      	str	r3, [r7, #8]
}
 800b604:	bf00      	nop
 800b606:	e7fe      	b.n	800b606 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60c:	1e5a      	subs	r2, r3, #1
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d02c      	beq.n	800b678 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b622:	2b00      	cmp	r3, #0
 800b624:	d128      	bne.n	800b678 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	3304      	adds	r3, #4
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fad4 	bl	8009bd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <xTaskPriorityDisinherit+0xd4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d903      	bls.n	800b658 <xTaskPriorityDisinherit+0xa4>
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	4a0c      	ldr	r2, [pc, #48]	; (800b688 <xTaskPriorityDisinherit+0xd4>)
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	4613      	mov	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4a09      	ldr	r2, [pc, #36]	; (800b68c <xTaskPriorityDisinherit+0xd8>)
 800b666:	441a      	add	r2, r3
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4619      	mov	r1, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	f7fe fa55 	bl	8009b1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b674:	2301      	movs	r3, #1
 800b676:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b678:	697b      	ldr	r3, [r7, #20]
	}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	200063bc 	.word	0x200063bc
 800b688:	20006898 	.word	0x20006898
 800b68c:	200063c0 	.word	0x200063c0

0800b690 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b69a:	4b21      	ldr	r3, [pc, #132]	; (800b720 <prvAddCurrentTaskToDelayedList+0x90>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6a0:	4b20      	ldr	r3, [pc, #128]	; (800b724 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fa96 	bl	8009bd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6b2:	d10a      	bne.n	800b6ca <prvAddCurrentTaskToDelayedList+0x3a>
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d007      	beq.n	800b6ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ba:	4b1a      	ldr	r3, [pc, #104]	; (800b724 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4819      	ldr	r0, [pc, #100]	; (800b728 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6c4:	f7fe fa2b 	bl	8009b1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6c8:	e026      	b.n	800b718 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6d2:	4b14      	ldr	r3, [pc, #80]	; (800b724 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d209      	bcs.n	800b6f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6e2:	4b12      	ldr	r3, [pc, #72]	; (800b72c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b0f      	ldr	r3, [pc, #60]	; (800b724 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f7fe fa39 	bl	8009b66 <vListInsert>
}
 800b6f4:	e010      	b.n	800b718 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6f6:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3304      	adds	r3, #4
 800b700:	4619      	mov	r1, r3
 800b702:	4610      	mov	r0, r2
 800b704:	f7fe fa2f 	bl	8009b66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b708:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d202      	bcs.n	800b718 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b712:	4a08      	ldr	r2, [pc, #32]	; (800b734 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	6013      	str	r3, [r2, #0]
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20006894 	.word	0x20006894
 800b724:	200063bc 	.word	0x200063bc
 800b728:	2000687c 	.word	0x2000687c
 800b72c:	2000684c 	.word	0x2000684c
 800b730:	20006848 	.word	0x20006848
 800b734:	200068b0 	.word	0x200068b0

0800b738 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b73e:	2300      	movs	r3, #0
 800b740:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b742:	f000 fb07 	bl	800bd54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b746:	4b1c      	ldr	r3, [pc, #112]	; (800b7b8 <xTimerCreateTimerTask+0x80>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d021      	beq.n	800b792 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b756:	1d3a      	adds	r2, r7, #4
 800b758:	f107 0108 	add.w	r1, r7, #8
 800b75c:	f107 030c 	add.w	r3, r7, #12
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe f995 	bl	8009a90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	9202      	str	r2, [sp, #8]
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	2302      	movs	r3, #2
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	460a      	mov	r2, r1
 800b778:	4910      	ldr	r1, [pc, #64]	; (800b7bc <xTimerCreateTimerTask+0x84>)
 800b77a:	4811      	ldr	r0, [pc, #68]	; (800b7c0 <xTimerCreateTimerTask+0x88>)
 800b77c:	f7ff f8b4 	bl	800a8e8 <xTaskCreateStatic>
 800b780:	4603      	mov	r3, r0
 800b782:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <xTimerCreateTimerTask+0x8c>)
 800b784:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b786:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <xTimerCreateTimerTask+0x8c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b78e:	2301      	movs	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	613b      	str	r3, [r7, #16]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7ae:	697b      	ldr	r3, [r7, #20]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	200068ec 	.word	0x200068ec
 800b7bc:	0800dc9c 	.word	0x0800dc9c
 800b7c0:	0800b8fd 	.word	0x0800b8fd
 800b7c4:	200068f0 	.word	0x200068f0

0800b7c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08a      	sub	sp, #40	; 0x28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	623b      	str	r3, [r7, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	; (800b860 <xTimerGenericCommand+0x98>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d02a      	beq.n	800b854 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b05      	cmp	r3, #5
 800b80e:	dc18      	bgt.n	800b842 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b810:	f7ff feb2 	bl	800b578 <xTaskGetSchedulerState>
 800b814:	4603      	mov	r3, r0
 800b816:	2b02      	cmp	r3, #2
 800b818:	d109      	bne.n	800b82e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b81a:	4b11      	ldr	r3, [pc, #68]	; (800b860 <xTimerGenericCommand+0x98>)
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	f107 0110 	add.w	r1, r7, #16
 800b822:	2300      	movs	r3, #0
 800b824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b826:	f7fe fba9 	bl	8009f7c <xQueueGenericSend>
 800b82a:	6278      	str	r0, [r7, #36]	; 0x24
 800b82c:	e012      	b.n	800b854 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b82e:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <xTimerGenericCommand+0x98>)
 800b830:	6818      	ldr	r0, [r3, #0]
 800b832:	f107 0110 	add.w	r1, r7, #16
 800b836:	2300      	movs	r3, #0
 800b838:	2200      	movs	r2, #0
 800b83a:	f7fe fb9f 	bl	8009f7c <xQueueGenericSend>
 800b83e:	6278      	str	r0, [r7, #36]	; 0x24
 800b840:	e008      	b.n	800b854 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b842:	4b07      	ldr	r3, [pc, #28]	; (800b860 <xTimerGenericCommand+0x98>)
 800b844:	6818      	ldr	r0, [r3, #0]
 800b846:	f107 0110 	add.w	r1, r7, #16
 800b84a:	2300      	movs	r3, #0
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	f7fe fc93 	bl	800a178 <xQueueGenericSendFromISR>
 800b852:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b856:	4618      	mov	r0, r3
 800b858:	3728      	adds	r7, #40	; 0x28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	200068ec 	.word	0x200068ec

0800b864 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af02      	add	r7, sp, #8
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86e:	4b22      	ldr	r3, [pc, #136]	; (800b8f8 <prvProcessExpiredTimer+0x94>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe f9ab 	bl	8009bd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d022      	beq.n	800b8d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	699a      	ldr	r2, [r3, #24]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	18d1      	adds	r1, r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	6978      	ldr	r0, [r7, #20]
 800b89e:	f000 f8d1 	bl	800ba44 <prvInsertTimerInActiveList>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01f      	beq.n	800b8e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	6978      	ldr	r0, [r7, #20]
 800b8b4:	f7ff ff88 	bl	800b7c8 <xTimerGenericCommand>
 800b8b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d113      	bne.n	800b8e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	60fb      	str	r3, [r7, #12]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8dc:	f023 0301 	bic.w	r3, r3, #1
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	6978      	ldr	r0, [r7, #20]
 800b8ee:	4798      	blx	r3
}
 800b8f0:	bf00      	nop
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	200068e4 	.word	0x200068e4

0800b8fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b904:	f107 0308 	add.w	r3, r7, #8
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f857 	bl	800b9bc <prvGetNextExpireTime>
 800b90e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4619      	mov	r1, r3
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f803 	bl	800b920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b91a:	f000 f8d5 	bl	800bac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b91e:	e7f1      	b.n	800b904 <prvTimerTask+0x8>

0800b920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b92a:	f7ff fa39 	bl	800ada0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b92e:	f107 0308 	add.w	r3, r7, #8
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f866 	bl	800ba04 <prvSampleTimeNow>
 800b938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d130      	bne.n	800b9a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10a      	bne.n	800b95c <prvProcessTimerOrBlockTask+0x3c>
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d806      	bhi.n	800b95c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b94e:	f7ff fa35 	bl	800adbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff ff85 	bl	800b864 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b95a:	e024      	b.n	800b9a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b962:	4b13      	ldr	r3, [pc, #76]	; (800b9b0 <prvProcessTimerOrBlockTask+0x90>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <prvProcessTimerOrBlockTask+0x50>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <prvProcessTimerOrBlockTask+0x52>
 800b970:	2300      	movs	r3, #0
 800b972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b974:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <prvProcessTimerOrBlockTask+0x94>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	f7fe ff7d 	bl	800a880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b986:	f7ff fa19 	bl	800adbc <xTaskResumeAll>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b990:	4b09      	ldr	r3, [pc, #36]	; (800b9b8 <prvProcessTimerOrBlockTask+0x98>)
 800b992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	f3bf 8f6f 	isb	sy
}
 800b9a0:	e001      	b.n	800b9a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9a2:	f7ff fa0b 	bl	800adbc <xTaskResumeAll>
}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200068e8 	.word	0x200068e8
 800b9b4:	200068ec 	.word	0x200068ec
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ba00 <prvGetNextExpireTime+0x44>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <prvGetNextExpireTime+0x16>
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	e000      	b.n	800b9d4 <prvGetNextExpireTime+0x18>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d105      	bne.n	800b9ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvGetNextExpireTime+0x44>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e001      	b.n	800b9f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3714      	adds	r7, #20
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	200068e4 	.word	0x200068e4

0800ba04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba0c:	f7ff fa74 	bl	800aef8 <xTaskGetTickCount>
 800ba10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba12:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <prvSampleTimeNow+0x3c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d205      	bcs.n	800ba28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba1c:	f000 f936 	bl	800bc8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	e002      	b.n	800ba2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba2e:	4a04      	ldr	r2, [pc, #16]	; (800ba40 <prvSampleTimeNow+0x3c>)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba34:	68fb      	ldr	r3, [r7, #12]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	200068f4 	.word	0x200068f4

0800ba44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d812      	bhi.n	800ba90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d302      	bcc.n	800ba7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	e01b      	b.n	800bab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba7e:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <prvInsertTimerInActiveList+0x7c>)
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	f7fe f86c 	bl	8009b66 <vListInsert>
 800ba8e:	e012      	b.n	800bab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d206      	bcs.n	800baa6 <prvInsertTimerInActiveList+0x62>
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d302      	bcc.n	800baa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	617b      	str	r3, [r7, #20]
 800baa4:	e007      	b.n	800bab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800baa6:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <prvInsertTimerInActiveList+0x80>)
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3304      	adds	r3, #4
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f7fe f858 	bl	8009b66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bab6:	697b      	ldr	r3, [r7, #20]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	200068e8 	.word	0x200068e8
 800bac4:	200068e4 	.word	0x200068e4

0800bac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08e      	sub	sp, #56	; 0x38
 800bacc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bace:	e0ca      	b.n	800bc66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da18      	bge.n	800bb08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bad6:	1d3b      	adds	r3, r7, #4
 800bad8:	3304      	adds	r3, #4
 800bada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10a      	bne.n	800baf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	61fb      	str	r3, [r7, #28]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bafe:	6850      	ldr	r0, [r2, #4]
 800bb00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb02:	6892      	ldr	r2, [r2, #8]
 800bb04:	4611      	mov	r1, r2
 800bb06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f2c0 80aa 	blt.w	800bc64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	3304      	adds	r3, #4
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fe f859 	bl	8009bd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb26:	463b      	mov	r3, r7
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff ff6b 	bl	800ba04 <prvSampleTimeNow>
 800bb2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	f200 8097 	bhi.w	800bc66 <prvProcessReceivedCommands+0x19e>
 800bb38:	a201      	add	r2, pc, #4	; (adr r2, 800bb40 <prvProcessReceivedCommands+0x78>)
 800bb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3e:	bf00      	nop
 800bb40:	0800bb69 	.word	0x0800bb69
 800bb44:	0800bb69 	.word	0x0800bb69
 800bb48:	0800bb69 	.word	0x0800bb69
 800bb4c:	0800bbdd 	.word	0x0800bbdd
 800bb50:	0800bbf1 	.word	0x0800bbf1
 800bb54:	0800bc3b 	.word	0x0800bc3b
 800bb58:	0800bb69 	.word	0x0800bb69
 800bb5c:	0800bb69 	.word	0x0800bb69
 800bb60:	0800bbdd 	.word	0x0800bbdd
 800bb64:	0800bbf1 	.word	0x0800bbf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb6e:	f043 0301 	orr.w	r3, r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	18d1      	adds	r1, r2, r3
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb88:	f7ff ff5c 	bl	800ba44 <prvInsertTimerInActiveList>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d069      	beq.n	800bc66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d05e      	beq.n	800bc66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	441a      	add	r2, r3
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbba:	f7ff fe05 	bl	800b7c8 <xTimerGenericCommand>
 800bbbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d14f      	bne.n	800bc66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	61bb      	str	r3, [r7, #24]
}
 800bbd8:	bf00      	nop
 800bbda:	e7fe      	b.n	800bbda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe2:	f023 0301 	bic.w	r3, r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bbee:	e03a      	b.n	800bc66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbf6:	f043 0301 	orr.w	r3, r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	617b      	str	r3, [r7, #20]
}
 800bc22:	bf00      	nop
 800bc24:	e7fe      	b.n	800bc24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	699a      	ldr	r2, [r3, #24]
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	18d1      	adds	r1, r2, r3
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc34:	f7ff ff06 	bl	800ba44 <prvInsertTimerInActiveList>
					break;
 800bc38:	e015      	b.n	800bc66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc40:	f003 0302 	and.w	r3, r3, #2
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d103      	bne.n	800bc50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bc48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc4a:	f000 fbb9 	bl	800c3c0 <vPortFree>
 800bc4e:	e00a      	b.n	800bc66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc56:	f023 0301 	bic.w	r3, r3, #1
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc62:	e000      	b.n	800bc66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc66:	4b08      	ldr	r3, [pc, #32]	; (800bc88 <prvProcessReceivedCommands+0x1c0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	1d39      	adds	r1, r7, #4
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fb1e 	bl	800a2b0 <xQueueReceive>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f47f af2a 	bne.w	800bad0 <prvProcessReceivedCommands+0x8>
	}
}
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	3730      	adds	r7, #48	; 0x30
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	200068ec 	.word	0x200068ec

0800bc8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc92:	e048      	b.n	800bd26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc94:	4b2d      	ldr	r3, [pc, #180]	; (800bd4c <prvSwitchTimerLists+0xc0>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc9e:	4b2b      	ldr	r3, [pc, #172]	; (800bd4c <prvSwitchTimerLists+0xc0>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fd ff93 	bl	8009bd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d02e      	beq.n	800bd26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	693a      	ldr	r2, [r7, #16]
 800bcce:	4413      	add	r3, r2
 800bcd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d90e      	bls.n	800bcf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bce6:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <prvSwitchTimerLists+0xc0>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7fd ff38 	bl	8009b66 <vListInsert>
 800bcf6:	e016      	b.n	800bd26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	2100      	movs	r1, #0
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff fd60 	bl	800b7c8 <xTimerGenericCommand>
 800bd08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	603b      	str	r3, [r7, #0]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd26:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <prvSwitchTimerLists+0xc0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1b1      	bne.n	800bc94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd30:	4b06      	ldr	r3, [pc, #24]	; (800bd4c <prvSwitchTimerLists+0xc0>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd36:	4b06      	ldr	r3, [pc, #24]	; (800bd50 <prvSwitchTimerLists+0xc4>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a04      	ldr	r2, [pc, #16]	; (800bd4c <prvSwitchTimerLists+0xc0>)
 800bd3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd3e:	4a04      	ldr	r2, [pc, #16]	; (800bd50 <prvSwitchTimerLists+0xc4>)
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	6013      	str	r3, [r2, #0]
}
 800bd44:	bf00      	nop
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	200068e4 	.word	0x200068e4
 800bd50:	200068e8 	.word	0x200068e8

0800bd54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd5a:	f000 f96b 	bl	800c034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd5e:	4b15      	ldr	r3, [pc, #84]	; (800bdb4 <prvCheckForValidListAndQueue+0x60>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d120      	bne.n	800bda8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd66:	4814      	ldr	r0, [pc, #80]	; (800bdb8 <prvCheckForValidListAndQueue+0x64>)
 800bd68:	f7fd feac 	bl	8009ac4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd6c:	4813      	ldr	r0, [pc, #76]	; (800bdbc <prvCheckForValidListAndQueue+0x68>)
 800bd6e:	f7fd fea9 	bl	8009ac4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd72:	4b13      	ldr	r3, [pc, #76]	; (800bdc0 <prvCheckForValidListAndQueue+0x6c>)
 800bd74:	4a10      	ldr	r2, [pc, #64]	; (800bdb8 <prvCheckForValidListAndQueue+0x64>)
 800bd76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd78:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <prvCheckForValidListAndQueue+0x70>)
 800bd7a:	4a10      	ldr	r2, [pc, #64]	; (800bdbc <prvCheckForValidListAndQueue+0x68>)
 800bd7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd7e:	2300      	movs	r3, #0
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <prvCheckForValidListAndQueue+0x74>)
 800bd84:	4a11      	ldr	r2, [pc, #68]	; (800bdcc <prvCheckForValidListAndQueue+0x78>)
 800bd86:	2110      	movs	r1, #16
 800bd88:	200a      	movs	r0, #10
 800bd8a:	f7fd ffb7 	bl	8009cfc <xQueueGenericCreateStatic>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	4a08      	ldr	r2, [pc, #32]	; (800bdb4 <prvCheckForValidListAndQueue+0x60>)
 800bd92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd94:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <prvCheckForValidListAndQueue+0x60>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d005      	beq.n	800bda8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd9c:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <prvCheckForValidListAndQueue+0x60>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	490b      	ldr	r1, [pc, #44]	; (800bdd0 <prvCheckForValidListAndQueue+0x7c>)
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fd18 	bl	800a7d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bda8:	f000 f974 	bl	800c094 <vPortExitCritical>
}
 800bdac:	bf00      	nop
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	200068ec 	.word	0x200068ec
 800bdb8:	200068bc 	.word	0x200068bc
 800bdbc:	200068d0 	.word	0x200068d0
 800bdc0:	200068e4 	.word	0x200068e4
 800bdc4:	200068e8 	.word	0x200068e8
 800bdc8:	20006998 	.word	0x20006998
 800bdcc:	200068f8 	.word	0x200068f8
 800bdd0:	0800dca4 	.word	0x0800dca4

0800bdd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3b04      	subs	r3, #4
 800bde4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3b04      	subs	r3, #4
 800bdf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f023 0201 	bic.w	r2, r3, #1
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3b04      	subs	r3, #4
 800be02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be04:	4a0c      	ldr	r2, [pc, #48]	; (800be38 <pxPortInitialiseStack+0x64>)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3b14      	subs	r3, #20
 800be0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3b04      	subs	r3, #4
 800be1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f06f 0202 	mvn.w	r2, #2
 800be22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3b20      	subs	r3, #32
 800be28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be2a:	68fb      	ldr	r3, [r7, #12]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	0800be3d 	.word	0x0800be3d

0800be3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be46:	4b12      	ldr	r3, [pc, #72]	; (800be90 <prvTaskExitError+0x54>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be4e:	d00a      	beq.n	800be66 <prvTaskExitError+0x2a>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	60fb      	str	r3, [r7, #12]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <prvTaskExitError+0x28>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	60bb      	str	r3, [r7, #8]
}
 800be78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be7a:	bf00      	nop
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0fc      	beq.n	800be7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be82:	bf00      	nop
 800be84:	bf00      	nop
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	200000b8 	.word	0x200000b8
	...

0800bea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bea0:	4b07      	ldr	r3, [pc, #28]	; (800bec0 <pxCurrentTCBConst2>)
 800bea2:	6819      	ldr	r1, [r3, #0]
 800bea4:	6808      	ldr	r0, [r1, #0]
 800bea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beaa:	f380 8809 	msr	PSP, r0
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f04f 0000 	mov.w	r0, #0
 800beb6:	f380 8811 	msr	BASEPRI, r0
 800beba:	4770      	bx	lr
 800bebc:	f3af 8000 	nop.w

0800bec0 <pxCurrentTCBConst2>:
 800bec0:	200063bc 	.word	0x200063bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop

0800bec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bec8:	4808      	ldr	r0, [pc, #32]	; (800beec <prvPortStartFirstTask+0x24>)
 800beca:	6800      	ldr	r0, [r0, #0]
 800becc:	6800      	ldr	r0, [r0, #0]
 800bece:	f380 8808 	msr	MSP, r0
 800bed2:	f04f 0000 	mov.w	r0, #0
 800bed6:	f380 8814 	msr	CONTROL, r0
 800beda:	b662      	cpsie	i
 800bedc:	b661      	cpsie	f
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	df00      	svc	0
 800bee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beea:	bf00      	nop
 800beec:	e000ed08 	.word	0xe000ed08

0800bef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bef6:	4b46      	ldr	r3, [pc, #280]	; (800c010 <xPortStartScheduler+0x120>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a46      	ldr	r2, [pc, #280]	; (800c014 <xPortStartScheduler+0x124>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d10a      	bne.n	800bf16 <xPortStartScheduler+0x26>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	613b      	str	r3, [r7, #16]
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf16:	4b3e      	ldr	r3, [pc, #248]	; (800c010 <xPortStartScheduler+0x120>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a3f      	ldr	r2, [pc, #252]	; (800c018 <xPortStartScheduler+0x128>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d10a      	bne.n	800bf36 <xPortStartScheduler+0x46>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	60fb      	str	r3, [r7, #12]
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf36:	4b39      	ldr	r3, [pc, #228]	; (800c01c <xPortStartScheduler+0x12c>)
 800bf38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	22ff      	movs	r2, #255	; 0xff
 800bf46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf50:	78fb      	ldrb	r3, [r7, #3]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	4b31      	ldr	r3, [pc, #196]	; (800c020 <xPortStartScheduler+0x130>)
 800bf5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf5e:	4b31      	ldr	r3, [pc, #196]	; (800c024 <xPortStartScheduler+0x134>)
 800bf60:	2207      	movs	r2, #7
 800bf62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf64:	e009      	b.n	800bf7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bf66:	4b2f      	ldr	r3, [pc, #188]	; (800c024 <xPortStartScheduler+0x134>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	4a2d      	ldr	r2, [pc, #180]	; (800c024 <xPortStartScheduler+0x134>)
 800bf6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf7a:	78fb      	ldrb	r3, [r7, #3]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf82:	2b80      	cmp	r3, #128	; 0x80
 800bf84:	d0ef      	beq.n	800bf66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf86:	4b27      	ldr	r3, [pc, #156]	; (800c024 <xPortStartScheduler+0x134>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f1c3 0307 	rsb	r3, r3, #7
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d00a      	beq.n	800bfa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	60bb      	str	r3, [r7, #8]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfa8:	4b1e      	ldr	r3, [pc, #120]	; (800c024 <xPortStartScheduler+0x134>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	021b      	lsls	r3, r3, #8
 800bfae:	4a1d      	ldr	r2, [pc, #116]	; (800c024 <xPortStartScheduler+0x134>)
 800bfb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfb2:	4b1c      	ldr	r3, [pc, #112]	; (800c024 <xPortStartScheduler+0x134>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfba:	4a1a      	ldr	r2, [pc, #104]	; (800c024 <xPortStartScheduler+0x134>)
 800bfbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfc6:	4b18      	ldr	r3, [pc, #96]	; (800c028 <xPortStartScheduler+0x138>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a17      	ldr	r2, [pc, #92]	; (800c028 <xPortStartScheduler+0x138>)
 800bfcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bfd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <xPortStartScheduler+0x138>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a14      	ldr	r2, [pc, #80]	; (800c028 <xPortStartScheduler+0x138>)
 800bfd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bfdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfde:	f000 f8dd 	bl	800c19c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfe2:	4b12      	ldr	r3, [pc, #72]	; (800c02c <xPortStartScheduler+0x13c>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfe8:	f000 f8fc 	bl	800c1e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfec:	4b10      	ldr	r3, [pc, #64]	; (800c030 <xPortStartScheduler+0x140>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a0f      	ldr	r2, [pc, #60]	; (800c030 <xPortStartScheduler+0x140>)
 800bff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bff8:	f7ff ff66 	bl	800bec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bffc:	f7ff f846 	bl	800b08c <vTaskSwitchContext>
	prvTaskExitError();
 800c000:	f7ff ff1c 	bl	800be3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	e000ed00 	.word	0xe000ed00
 800c014:	410fc271 	.word	0x410fc271
 800c018:	410fc270 	.word	0x410fc270
 800c01c:	e000e400 	.word	0xe000e400
 800c020:	200069e8 	.word	0x200069e8
 800c024:	200069ec 	.word	0x200069ec
 800c028:	e000ed20 	.word	0xe000ed20
 800c02c:	200000b8 	.word	0x200000b8
 800c030:	e000ef34 	.word	0xe000ef34

0800c034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	607b      	str	r3, [r7, #4]
}
 800c04c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c04e:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <vPortEnterCritical+0x58>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3301      	adds	r3, #1
 800c054:	4a0d      	ldr	r2, [pc, #52]	; (800c08c <vPortEnterCritical+0x58>)
 800c056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c058:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <vPortEnterCritical+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d10f      	bne.n	800c080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <vPortEnterCritical+0x5c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <vPortEnterCritical+0x4c>
	__asm volatile
 800c06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06e:	f383 8811 	msr	BASEPRI, r3
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	603b      	str	r3, [r7, #0]
}
 800c07c:	bf00      	nop
 800c07e:	e7fe      	b.n	800c07e <vPortEnterCritical+0x4a>
	}
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	200000b8 	.word	0x200000b8
 800c090:	e000ed04 	.word	0xe000ed04

0800c094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c09a:	4b12      	ldr	r3, [pc, #72]	; (800c0e4 <vPortExitCritical+0x50>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <vPortExitCritical+0x24>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	607b      	str	r3, [r7, #4]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0b8:	4b0a      	ldr	r3, [pc, #40]	; (800c0e4 <vPortExitCritical+0x50>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	4a09      	ldr	r2, [pc, #36]	; (800c0e4 <vPortExitCritical+0x50>)
 800c0c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0c2:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <vPortExitCritical+0x50>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d105      	bne.n	800c0d6 <vPortExitCritical+0x42>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	f383 8811 	msr	BASEPRI, r3
}
 800c0d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	200000b8 	.word	0x200000b8
	...

0800c0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0f0:	f3ef 8009 	mrs	r0, PSP
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	4b15      	ldr	r3, [pc, #84]	; (800c150 <pxCurrentTCBConst>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	f01e 0f10 	tst.w	lr, #16
 800c100:	bf08      	it	eq
 800c102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10a:	6010      	str	r0, [r2, #0]
 800c10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c110:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c114:	f380 8811 	msr	BASEPRI, r0
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f7fe ffb4 	bl	800b08c <vTaskSwitchContext>
 800c124:	f04f 0000 	mov.w	r0, #0
 800c128:	f380 8811 	msr	BASEPRI, r0
 800c12c:	bc09      	pop	{r0, r3}
 800c12e:	6819      	ldr	r1, [r3, #0]
 800c130:	6808      	ldr	r0, [r1, #0]
 800c132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c136:	f01e 0f10 	tst.w	lr, #16
 800c13a:	bf08      	it	eq
 800c13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c140:	f380 8809 	msr	PSP, r0
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	f3af 8000 	nop.w

0800c150 <pxCurrentTCBConst>:
 800c150:	200063bc 	.word	0x200063bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop

0800c158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	607b      	str	r3, [r7, #4]
}
 800c170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c172:	f7fe fed1 	bl	800af18 <xTaskIncrementTick>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d003      	beq.n	800c184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c17c:	4b06      	ldr	r3, [pc, #24]	; (800c198 <xPortSysTickHandler+0x40>)
 800c17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	2300      	movs	r3, #0
 800c186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	f383 8811 	msr	BASEPRI, r3
}
 800c18e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	e000ed04 	.word	0xe000ed04

0800c19c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1a0:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <vPortSetupTimerInterrupt+0x34>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1a6:	4b0b      	ldr	r3, [pc, #44]	; (800c1d4 <vPortSetupTimerInterrupt+0x38>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <vPortSetupTimerInterrupt+0x3c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a0a      	ldr	r2, [pc, #40]	; (800c1dc <vPortSetupTimerInterrupt+0x40>)
 800c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b6:	099b      	lsrs	r3, r3, #6
 800c1b8:	4a09      	ldr	r2, [pc, #36]	; (800c1e0 <vPortSetupTimerInterrupt+0x44>)
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1be:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <vPortSetupTimerInterrupt+0x34>)
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	601a      	str	r2, [r3, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	e000e010 	.word	0xe000e010
 800c1d4:	e000e018 	.word	0xe000e018
 800c1d8:	2000009c 	.word	0x2000009c
 800c1dc:	10624dd3 	.word	0x10624dd3
 800c1e0:	e000e014 	.word	0xe000e014

0800c1e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c1f4 <vPortEnableVFP+0x10>
 800c1e8:	6801      	ldr	r1, [r0, #0]
 800c1ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c1ee:	6001      	str	r1, [r0, #0]
 800c1f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1f2:	bf00      	nop
 800c1f4:	e000ed88 	.word	0xe000ed88

0800c1f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1fe:	f3ef 8305 	mrs	r3, IPSR
 800c202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b0f      	cmp	r3, #15
 800c208:	d914      	bls.n	800c234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c20a:	4a17      	ldr	r2, [pc, #92]	; (800c268 <vPortValidateInterruptPriority+0x70>)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c214:	4b15      	ldr	r3, [pc, #84]	; (800c26c <vPortValidateInterruptPriority+0x74>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	7afa      	ldrb	r2, [r7, #11]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d20a      	bcs.n	800c234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	607b      	str	r3, [r7, #4]
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c234:	4b0e      	ldr	r3, [pc, #56]	; (800c270 <vPortValidateInterruptPriority+0x78>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c23c:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <vPortValidateInterruptPriority+0x7c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d90a      	bls.n	800c25a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	603b      	str	r3, [r7, #0]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <vPortValidateInterruptPriority+0x60>
	}
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	e000e3f0 	.word	0xe000e3f0
 800c26c:	200069e8 	.word	0x200069e8
 800c270:	e000ed0c 	.word	0xe000ed0c
 800c274:	200069ec 	.word	0x200069ec

0800c278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c280:	2300      	movs	r3, #0
 800c282:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800c284:	4b48      	ldr	r3, [pc, #288]	; (800c3a8 <pvPortMalloc+0x130>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10a      	bne.n	800c2a2 <pvPortMalloc+0x2a>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	60fb      	str	r3, [r7, #12]
}
 800c29e:	bf00      	nop
 800c2a0:	e7fe      	b.n	800c2a0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800c2a2:	f7fe fd7d 	bl	800ada0 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2a6:	4b41      	ldr	r3, [pc, #260]	; (800c3ac <pvPortMalloc+0x134>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d172      	bne.n	800c398 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00d      	beq.n	800c2d4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c2b8:	2208      	movs	r2, #8
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4413      	add	r3, r2
 800c2be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d004      	beq.n	800c2d4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f023 0307 	bic.w	r3, r3, #7
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d05e      	beq.n	800c398 <pvPortMalloc+0x120>
 800c2da:	4b35      	ldr	r3, [pc, #212]	; (800c3b0 <pvPortMalloc+0x138>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d859      	bhi.n	800c398 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2e4:	4b33      	ldr	r3, [pc, #204]	; (800c3b4 <pvPortMalloc+0x13c>)
 800c2e6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800c2e8:	4b32      	ldr	r3, [pc, #200]	; (800c3b4 <pvPortMalloc+0x13c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ee:	e004      	b.n	800c2fa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	429a      	cmp	r2, r3
 800c302:	d903      	bls.n	800c30c <pvPortMalloc+0x94>
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1f1      	bne.n	800c2f0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c30c:	4b26      	ldr	r3, [pc, #152]	; (800c3a8 <pvPortMalloc+0x130>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	429a      	cmp	r2, r3
 800c314:	d040      	beq.n	800c398 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2208      	movs	r2, #8
 800c31c:	4413      	add	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	2308      	movs	r3, #8
 800c332:	005b      	lsls	r3, r3, #1
 800c334:	429a      	cmp	r2, r3
 800c336:	d90f      	bls.n	800c358 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c352:	6938      	ldr	r0, [r7, #16]
 800c354:	f000 f8a2 	bl	800c49c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c358:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <pvPortMalloc+0x138>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	4a13      	ldr	r2, [pc, #76]	; (800c3b0 <pvPortMalloc+0x138>)
 800c364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c366:	4b12      	ldr	r3, [pc, #72]	; (800c3b0 <pvPortMalloc+0x138>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	4b13      	ldr	r3, [pc, #76]	; (800c3b8 <pvPortMalloc+0x140>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d203      	bcs.n	800c37a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c372:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <pvPortMalloc+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a10      	ldr	r2, [pc, #64]	; (800c3b8 <pvPortMalloc+0x140>)
 800c378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <pvPortMalloc+0x134>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	431a      	orrs	r2, r3
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <pvPortMalloc+0x144>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	4a09      	ldr	r2, [pc, #36]	; (800c3bc <pvPortMalloc+0x144>)
 800c396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c398:	f7fe fd10 	bl	800adbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c39c:	697b      	ldr	r3, [r7, #20]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3720      	adds	r7, #32
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	200069f8 	.word	0x200069f8
 800c3ac:	20006a0c 	.word	0x20006a0c
 800c3b0:	200069fc 	.word	0x200069fc
 800c3b4:	200069f0 	.word	0x200069f0
 800c3b8:	20006a00 	.word	0x20006a00
 800c3bc:	20006a04 	.word	0x20006a04

0800c3c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d04d      	beq.n	800c46e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	425b      	negs	r3, r3
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	4413      	add	r3, r2
 800c3da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	4b24      	ldr	r3, [pc, #144]	; (800c478 <vPortFree+0xb8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <vPortFree+0x44>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	60fb      	str	r3, [r7, #12]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00a      	beq.n	800c422 <vPortFree+0x62>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	60bb      	str	r3, [r7, #8]
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	4b14      	ldr	r3, [pc, #80]	; (800c478 <vPortFree+0xb8>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4013      	ands	r3, r2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d01e      	beq.n	800c46e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d11a      	bne.n	800c46e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	4b0e      	ldr	r3, [pc, #56]	; (800c478 <vPortFree+0xb8>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	43db      	mvns	r3, r3
 800c442:	401a      	ands	r2, r3
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c448:	f7fe fcaa 	bl	800ada0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <vPortFree+0xbc>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4413      	add	r3, r2
 800c456:	4a09      	ldr	r2, [pc, #36]	; (800c47c <vPortFree+0xbc>)
 800c458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c45a:	6938      	ldr	r0, [r7, #16]
 800c45c:	f000 f81e 	bl	800c49c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <vPortFree+0xc0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a06      	ldr	r2, [pc, #24]	; (800c480 <vPortFree+0xc0>)
 800c468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c46a:	f7fe fca7 	bl	800adbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c46e:	bf00      	nop
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20006a0c 	.word	0x20006a0c
 800c47c:	200069fc 	.word	0x200069fc
 800c480:	20006a08 	.word	0x20006a08

0800c484 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c484:	b480      	push	{r7}
 800c486:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c488:	4b03      	ldr	r3, [pc, #12]	; (800c498 <xPortGetFreeHeapSize+0x14>)
 800c48a:	681b      	ldr	r3, [r3, #0]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	200069fc 	.word	0x200069fc

0800c49c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4a4:	4b28      	ldr	r3, [pc, #160]	; (800c548 <prvInsertBlockIntoFreeList+0xac>)
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	e002      	b.n	800c4b0 <prvInsertBlockIntoFreeList+0x14>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d8f7      	bhi.n	800c4aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d108      	bne.n	800c4de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	441a      	add	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	441a      	add	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d118      	bne.n	800c524 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	4b15      	ldr	r3, [pc, #84]	; (800c54c <prvInsertBlockIntoFreeList+0xb0>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d00d      	beq.n	800c51a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	441a      	add	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	e008      	b.n	800c52c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c51a:	4b0c      	ldr	r3, [pc, #48]	; (800c54c <prvInsertBlockIntoFreeList+0xb0>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	601a      	str	r2, [r3, #0]
 800c522:	e003      	b.n	800c52c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	429a      	cmp	r2, r3
 800c532:	d002      	beq.n	800c53a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	200069f0 	.word	0x200069f0
 800c54c:	200069f8 	.word	0x200069f8

0800c550 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c550:	b480      	push	{r7}
 800c552:	b08f      	sub	sp, #60	; 0x3c
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c558:	2300      	movs	r3, #0
 800c55a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c564:	4b5a      	ldr	r3, [pc, #360]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	617b      	str	r3, [r7, #20]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	4413      	add	r3, r2
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c58c:	e07d      	b.n	800c68a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00e      	beq.n	800c5c2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	3307      	adds	r3, #7
 800c5a8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	f023 0307 	bic.w	r3, r3, #7
 800c5b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5be:	4413      	add	r3, r2
 800c5c0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d106      	bne.n	800c5da <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	4a41      	ldr	r2, [pc, #260]	; (800c6d4 <vPortDefineHeapRegions+0x184>)
 800c5d0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c5d2:	4b40      	ldr	r3, [pc, #256]	; (800c6d4 <vPortDefineHeapRegions+0x184>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	605a      	str	r2, [r3, #4]
 800c5d8:	e01f      	b.n	800c61a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c5da:	4b3d      	ldr	r3, [pc, #244]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10a      	bne.n	800c5f8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	613b      	str	r3, [r7, #16]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c5f8:	4b35      	ldr	r3, [pc, #212]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	4293      	cmp	r3, r2
 800c602:	d80a      	bhi.n	800c61a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	60fb      	str	r3, [r7, #12]
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c61a:	4b2d      	ldr	r3, [pc, #180]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c620:	69fa      	ldr	r2, [r7, #28]
 800c622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c624:	4413      	add	r3, r2
 800c626:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c628:	2208      	movs	r2, #8
 800c62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62c:	1a9b      	subs	r3, r3, r2
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	f023 0307 	bic.w	r3, r3, #7
 800c636:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	4a25      	ldr	r2, [pc, #148]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c63c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c63e:	4b24      	ldr	r3, [pc, #144]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2200      	movs	r2, #0
 800c644:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c646:	4b22      	ldr	r3, [pc, #136]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c656:	1ad2      	subs	r2, r2, r3
 800c658:	6a3b      	ldr	r3, [r7, #32]
 800c65a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c65c:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <vPortDefineHeapRegions+0x180>)
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	6a3a      	ldr	r2, [r7, #32]
 800c66e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c676:	4413      	add	r3, r2
 800c678:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	3301      	adds	r3, #1
 800c67e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	00db      	lsls	r3, r3, #3
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	4413      	add	r3, r2
 800c688:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f47f af7d 	bne.w	800c58e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c694:	4a10      	ldr	r2, [pc, #64]	; (800c6d8 <vPortDefineHeapRegions+0x188>)
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c69a:	4a10      	ldr	r2, [pc, #64]	; (800c6dc <vPortDefineHeapRegions+0x18c>)
 800c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10a      	bne.n	800c6bc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	60bb      	str	r3, [r7, #8]
}
 800c6b8:	bf00      	nop
 800c6ba:	e7fe      	b.n	800c6ba <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6bc:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <vPortDefineHeapRegions+0x190>)
 800c6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6c2:	601a      	str	r2, [r3, #0]
}
 800c6c4:	bf00      	nop
 800c6c6:	373c      	adds	r7, #60	; 0x3c
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	200069f8 	.word	0x200069f8
 800c6d4:	200069f0 	.word	0x200069f0
 800c6d8:	20006a00 	.word	0x20006a00
 800c6dc:	200069fc 	.word	0x200069fc
 800c6e0:	20006a0c 	.word	0x20006a0c

0800c6e4 <atol>:
 800c6e4:	220a      	movs	r2, #10
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	f000 bb5e 	b.w	800cda8 <strtol>

0800c6ec <calloc>:
 800c6ec:	4b02      	ldr	r3, [pc, #8]	; (800c6f8 <calloc+0xc>)
 800c6ee:	460a      	mov	r2, r1
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	6818      	ldr	r0, [r3, #0]
 800c6f4:	f000 b8f8 	b.w	800c8e8 <_calloc_r>
 800c6f8:	200000bc 	.word	0x200000bc

0800c6fc <__errno>:
 800c6fc:	4b01      	ldr	r3, [pc, #4]	; (800c704 <__errno+0x8>)
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	200000bc 	.word	0x200000bc

0800c708 <gmtime_r>:
 800c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c710:	460c      	mov	r4, r1
 800c712:	4a4f      	ldr	r2, [pc, #316]	; (800c850 <gmtime_r+0x148>)
 800c714:	2300      	movs	r3, #0
 800c716:	4630      	mov	r0, r6
 800c718:	4639      	mov	r1, r7
 800c71a:	f7f4 f8b7 	bl	800088c <__aeabi_ldivmod>
 800c71e:	4639      	mov	r1, r7
 800c720:	4605      	mov	r5, r0
 800c722:	4a4b      	ldr	r2, [pc, #300]	; (800c850 <gmtime_r+0x148>)
 800c724:	4630      	mov	r0, r6
 800c726:	2300      	movs	r3, #0
 800c728:	f7f4 f8b0 	bl	800088c <__aeabi_ldivmod>
 800c72c:	2a00      	cmp	r2, #0
 800c72e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c732:	bfb7      	itett	lt
 800c734:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c738:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c73c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c740:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c744:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c748:	fbb2 f1f0 	udiv	r1, r2, r0
 800c74c:	fb00 2211 	mls	r2, r0, r1, r2
 800c750:	203c      	movs	r0, #60	; 0x3c
 800c752:	60a1      	str	r1, [r4, #8]
 800c754:	fbb2 f1f0 	udiv	r1, r2, r0
 800c758:	fb00 2211 	mls	r2, r0, r1, r2
 800c75c:	6061      	str	r1, [r4, #4]
 800c75e:	6022      	str	r2, [r4, #0]
 800c760:	2107      	movs	r1, #7
 800c762:	1cda      	adds	r2, r3, #3
 800c764:	fb92 f1f1 	sdiv	r1, r2, r1
 800c768:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c76c:	1a52      	subs	r2, r2, r1
 800c76e:	bf48      	it	mi
 800c770:	3207      	addmi	r2, #7
 800c772:	4d38      	ldr	r5, [pc, #224]	; (800c854 <gmtime_r+0x14c>)
 800c774:	4838      	ldr	r0, [pc, #224]	; (800c858 <gmtime_r+0x150>)
 800c776:	61a2      	str	r2, [r4, #24]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	bfb7      	itett	lt
 800c77c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c780:	fb93 f5f5 	sdivge	r5, r3, r5
 800c784:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c788:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c78c:	fb00 3005 	mla	r0, r0, r5, r3
 800c790:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c794:	fbb0 f2f2 	udiv	r2, r0, r2
 800c798:	4402      	add	r2, r0
 800c79a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c79e:	fbb0 f1f3 	udiv	r1, r0, r3
 800c7a2:	1a52      	subs	r2, r2, r1
 800c7a4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c7a8:	492c      	ldr	r1, [pc, #176]	; (800c85c <gmtime_r+0x154>)
 800c7aa:	fbb0 f1f1 	udiv	r1, r0, r1
 800c7ae:	2764      	movs	r7, #100	; 0x64
 800c7b0:	1a52      	subs	r2, r2, r1
 800c7b2:	fbb2 f1fc 	udiv	r1, r2, ip
 800c7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ba:	fbb1 f6f7 	udiv	r6, r1, r7
 800c7be:	1af3      	subs	r3, r6, r3
 800c7c0:	4403      	add	r3, r0
 800c7c2:	fb0c 3311 	mls	r3, ip, r1, r3
 800c7c6:	2299      	movs	r2, #153	; 0x99
 800c7c8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c7cc:	f10e 0e02 	add.w	lr, lr, #2
 800c7d0:	f103 0c01 	add.w	ip, r3, #1
 800c7d4:	fbbe f0f2 	udiv	r0, lr, r2
 800c7d8:	4342      	muls	r2, r0
 800c7da:	3202      	adds	r2, #2
 800c7dc:	f04f 0805 	mov.w	r8, #5
 800c7e0:	fbb2 f2f8 	udiv	r2, r2, r8
 800c7e4:	ebac 0c02 	sub.w	ip, ip, r2
 800c7e8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c7ec:	4596      	cmp	lr, r2
 800c7ee:	bf94      	ite	ls
 800c7f0:	2202      	movls	r2, #2
 800c7f2:	f06f 0209 	mvnhi.w	r2, #9
 800c7f6:	4410      	add	r0, r2
 800c7f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c7fc:	fb02 1505 	mla	r5, r2, r5, r1
 800c800:	2801      	cmp	r0, #1
 800c802:	bf98      	it	ls
 800c804:	3501      	addls	r5, #1
 800c806:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c80a:	d30d      	bcc.n	800c828 <gmtime_r+0x120>
 800c80c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c810:	61e3      	str	r3, [r4, #28]
 800c812:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c816:	2300      	movs	r3, #0
 800c818:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c81c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c820:	6223      	str	r3, [r4, #32]
 800c822:	4620      	mov	r0, r4
 800c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c828:	078a      	lsls	r2, r1, #30
 800c82a:	d102      	bne.n	800c832 <gmtime_r+0x12a>
 800c82c:	fb07 1616 	mls	r6, r7, r6, r1
 800c830:	b95e      	cbnz	r6, 800c84a <gmtime_r+0x142>
 800c832:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c836:	fbb1 f6f2 	udiv	r6, r1, r2
 800c83a:	fb02 1216 	mls	r2, r2, r6, r1
 800c83e:	fab2 f282 	clz	r2, r2
 800c842:	0952      	lsrs	r2, r2, #5
 800c844:	333b      	adds	r3, #59	; 0x3b
 800c846:	4413      	add	r3, r2
 800c848:	e7e2      	b.n	800c810 <gmtime_r+0x108>
 800c84a:	2201      	movs	r2, #1
 800c84c:	e7fa      	b.n	800c844 <gmtime_r+0x13c>
 800c84e:	bf00      	nop
 800c850:	00015180 	.word	0x00015180
 800c854:	00023ab1 	.word	0x00023ab1
 800c858:	fffdc54f 	.word	0xfffdc54f
 800c85c:	00023ab0 	.word	0x00023ab0

0800c860 <__libc_init_array>:
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	4d0d      	ldr	r5, [pc, #52]	; (800c898 <__libc_init_array+0x38>)
 800c864:	4c0d      	ldr	r4, [pc, #52]	; (800c89c <__libc_init_array+0x3c>)
 800c866:	1b64      	subs	r4, r4, r5
 800c868:	10a4      	asrs	r4, r4, #2
 800c86a:	2600      	movs	r6, #0
 800c86c:	42a6      	cmp	r6, r4
 800c86e:	d109      	bne.n	800c884 <__libc_init_array+0x24>
 800c870:	4d0b      	ldr	r5, [pc, #44]	; (800c8a0 <__libc_init_array+0x40>)
 800c872:	4c0c      	ldr	r4, [pc, #48]	; (800c8a4 <__libc_init_array+0x44>)
 800c874:	f000 fe2a 	bl	800d4cc <_init>
 800c878:	1b64      	subs	r4, r4, r5
 800c87a:	10a4      	asrs	r4, r4, #2
 800c87c:	2600      	movs	r6, #0
 800c87e:	42a6      	cmp	r6, r4
 800c880:	d105      	bne.n	800c88e <__libc_init_array+0x2e>
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	f855 3b04 	ldr.w	r3, [r5], #4
 800c888:	4798      	blx	r3
 800c88a:	3601      	adds	r6, #1
 800c88c:	e7ee      	b.n	800c86c <__libc_init_array+0xc>
 800c88e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c892:	4798      	blx	r3
 800c894:	3601      	adds	r6, #1
 800c896:	e7f2      	b.n	800c87e <__libc_init_array+0x1e>
 800c898:	0800ffc8 	.word	0x0800ffc8
 800c89c:	0800ffc8 	.word	0x0800ffc8
 800c8a0:	0800ffc8 	.word	0x0800ffc8
 800c8a4:	0800ffcc 	.word	0x0800ffcc

0800c8a8 <__retarget_lock_acquire_recursive>:
 800c8a8:	4770      	bx	lr

0800c8aa <__retarget_lock_release_recursive>:
 800c8aa:	4770      	bx	lr

0800c8ac <free>:
 800c8ac:	4b02      	ldr	r3, [pc, #8]	; (800c8b8 <free+0xc>)
 800c8ae:	4601      	mov	r1, r0
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	f000 b82f 	b.w	800c914 <_free_r>
 800c8b6:	bf00      	nop
 800c8b8:	200000bc 	.word	0x200000bc

0800c8bc <memcpy>:
 800c8bc:	440a      	add	r2, r1
 800c8be:	4291      	cmp	r1, r2
 800c8c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c8c4:	d100      	bne.n	800c8c8 <memcpy+0xc>
 800c8c6:	4770      	bx	lr
 800c8c8:	b510      	push	{r4, lr}
 800c8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8d2:	4291      	cmp	r1, r2
 800c8d4:	d1f9      	bne.n	800c8ca <memcpy+0xe>
 800c8d6:	bd10      	pop	{r4, pc}

0800c8d8 <memset>:
 800c8d8:	4402      	add	r2, r0
 800c8da:	4603      	mov	r3, r0
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d100      	bne.n	800c8e2 <memset+0xa>
 800c8e0:	4770      	bx	lr
 800c8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c8e6:	e7f9      	b.n	800c8dc <memset+0x4>

0800c8e8 <_calloc_r>:
 800c8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ea:	fba1 2402 	umull	r2, r4, r1, r2
 800c8ee:	b94c      	cbnz	r4, 800c904 <_calloc_r+0x1c>
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	9201      	str	r2, [sp, #4]
 800c8f4:	f000 f87a 	bl	800c9ec <_malloc_r>
 800c8f8:	9a01      	ldr	r2, [sp, #4]
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	b930      	cbnz	r0, 800c90c <_calloc_r+0x24>
 800c8fe:	4628      	mov	r0, r5
 800c900:	b003      	add	sp, #12
 800c902:	bd30      	pop	{r4, r5, pc}
 800c904:	220c      	movs	r2, #12
 800c906:	6002      	str	r2, [r0, #0]
 800c908:	2500      	movs	r5, #0
 800c90a:	e7f8      	b.n	800c8fe <_calloc_r+0x16>
 800c90c:	4621      	mov	r1, r4
 800c90e:	f7ff ffe3 	bl	800c8d8 <memset>
 800c912:	e7f4      	b.n	800c8fe <_calloc_r+0x16>

0800c914 <_free_r>:
 800c914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c916:	2900      	cmp	r1, #0
 800c918:	d044      	beq.n	800c9a4 <_free_r+0x90>
 800c91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91e:	9001      	str	r0, [sp, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f1a1 0404 	sub.w	r4, r1, #4
 800c926:	bfb8      	it	lt
 800c928:	18e4      	addlt	r4, r4, r3
 800c92a:	f000 fa81 	bl	800ce30 <__malloc_lock>
 800c92e:	4a1e      	ldr	r2, [pc, #120]	; (800c9a8 <_free_r+0x94>)
 800c930:	9801      	ldr	r0, [sp, #4]
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	b933      	cbnz	r3, 800c944 <_free_r+0x30>
 800c936:	6063      	str	r3, [r4, #4]
 800c938:	6014      	str	r4, [r2, #0]
 800c93a:	b003      	add	sp, #12
 800c93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c940:	f000 ba7c 	b.w	800ce3c <__malloc_unlock>
 800c944:	42a3      	cmp	r3, r4
 800c946:	d908      	bls.n	800c95a <_free_r+0x46>
 800c948:	6825      	ldr	r5, [r4, #0]
 800c94a:	1961      	adds	r1, r4, r5
 800c94c:	428b      	cmp	r3, r1
 800c94e:	bf01      	itttt	eq
 800c950:	6819      	ldreq	r1, [r3, #0]
 800c952:	685b      	ldreq	r3, [r3, #4]
 800c954:	1949      	addeq	r1, r1, r5
 800c956:	6021      	streq	r1, [r4, #0]
 800c958:	e7ed      	b.n	800c936 <_free_r+0x22>
 800c95a:	461a      	mov	r2, r3
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	b10b      	cbz	r3, 800c964 <_free_r+0x50>
 800c960:	42a3      	cmp	r3, r4
 800c962:	d9fa      	bls.n	800c95a <_free_r+0x46>
 800c964:	6811      	ldr	r1, [r2, #0]
 800c966:	1855      	adds	r5, r2, r1
 800c968:	42a5      	cmp	r5, r4
 800c96a:	d10b      	bne.n	800c984 <_free_r+0x70>
 800c96c:	6824      	ldr	r4, [r4, #0]
 800c96e:	4421      	add	r1, r4
 800c970:	1854      	adds	r4, r2, r1
 800c972:	42a3      	cmp	r3, r4
 800c974:	6011      	str	r1, [r2, #0]
 800c976:	d1e0      	bne.n	800c93a <_free_r+0x26>
 800c978:	681c      	ldr	r4, [r3, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	6053      	str	r3, [r2, #4]
 800c97e:	4421      	add	r1, r4
 800c980:	6011      	str	r1, [r2, #0]
 800c982:	e7da      	b.n	800c93a <_free_r+0x26>
 800c984:	d902      	bls.n	800c98c <_free_r+0x78>
 800c986:	230c      	movs	r3, #12
 800c988:	6003      	str	r3, [r0, #0]
 800c98a:	e7d6      	b.n	800c93a <_free_r+0x26>
 800c98c:	6825      	ldr	r5, [r4, #0]
 800c98e:	1961      	adds	r1, r4, r5
 800c990:	428b      	cmp	r3, r1
 800c992:	bf04      	itt	eq
 800c994:	6819      	ldreq	r1, [r3, #0]
 800c996:	685b      	ldreq	r3, [r3, #4]
 800c998:	6063      	str	r3, [r4, #4]
 800c99a:	bf04      	itt	eq
 800c99c:	1949      	addeq	r1, r1, r5
 800c99e:	6021      	streq	r1, [r4, #0]
 800c9a0:	6054      	str	r4, [r2, #4]
 800c9a2:	e7ca      	b.n	800c93a <_free_r+0x26>
 800c9a4:	b003      	add	sp, #12
 800c9a6:	bd30      	pop	{r4, r5, pc}
 800c9a8:	20006a14 	.word	0x20006a14

0800c9ac <sbrk_aligned>:
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	4e0e      	ldr	r6, [pc, #56]	; (800c9e8 <sbrk_aligned+0x3c>)
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	6831      	ldr	r1, [r6, #0]
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	b911      	cbnz	r1, 800c9be <sbrk_aligned+0x12>
 800c9b8:	f000 f8f6 	bl	800cba8 <_sbrk_r>
 800c9bc:	6030      	str	r0, [r6, #0]
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f000 f8f1 	bl	800cba8 <_sbrk_r>
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	d00a      	beq.n	800c9e0 <sbrk_aligned+0x34>
 800c9ca:	1cc4      	adds	r4, r0, #3
 800c9cc:	f024 0403 	bic.w	r4, r4, #3
 800c9d0:	42a0      	cmp	r0, r4
 800c9d2:	d007      	beq.n	800c9e4 <sbrk_aligned+0x38>
 800c9d4:	1a21      	subs	r1, r4, r0
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 f8e6 	bl	800cba8 <_sbrk_r>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d101      	bne.n	800c9e4 <sbrk_aligned+0x38>
 800c9e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	20006a18 	.word	0x20006a18

0800c9ec <_malloc_r>:
 800c9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f0:	1ccd      	adds	r5, r1, #3
 800c9f2:	f025 0503 	bic.w	r5, r5, #3
 800c9f6:	3508      	adds	r5, #8
 800c9f8:	2d0c      	cmp	r5, #12
 800c9fa:	bf38      	it	cc
 800c9fc:	250c      	movcc	r5, #12
 800c9fe:	2d00      	cmp	r5, #0
 800ca00:	4607      	mov	r7, r0
 800ca02:	db01      	blt.n	800ca08 <_malloc_r+0x1c>
 800ca04:	42a9      	cmp	r1, r5
 800ca06:	d905      	bls.n	800ca14 <_malloc_r+0x28>
 800ca08:	230c      	movs	r3, #12
 800ca0a:	603b      	str	r3, [r7, #0]
 800ca0c:	2600      	movs	r6, #0
 800ca0e:	4630      	mov	r0, r6
 800ca10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca14:	4e2e      	ldr	r6, [pc, #184]	; (800cad0 <_malloc_r+0xe4>)
 800ca16:	f000 fa0b 	bl	800ce30 <__malloc_lock>
 800ca1a:	6833      	ldr	r3, [r6, #0]
 800ca1c:	461c      	mov	r4, r3
 800ca1e:	bb34      	cbnz	r4, 800ca6e <_malloc_r+0x82>
 800ca20:	4629      	mov	r1, r5
 800ca22:	4638      	mov	r0, r7
 800ca24:	f7ff ffc2 	bl	800c9ac <sbrk_aligned>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	d14d      	bne.n	800caca <_malloc_r+0xde>
 800ca2e:	6834      	ldr	r4, [r6, #0]
 800ca30:	4626      	mov	r6, r4
 800ca32:	2e00      	cmp	r6, #0
 800ca34:	d140      	bne.n	800cab8 <_malloc_r+0xcc>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	eb04 0803 	add.w	r8, r4, r3
 800ca40:	f000 f8b2 	bl	800cba8 <_sbrk_r>
 800ca44:	4580      	cmp	r8, r0
 800ca46:	d13a      	bne.n	800cabe <_malloc_r+0xd2>
 800ca48:	6821      	ldr	r1, [r4, #0]
 800ca4a:	3503      	adds	r5, #3
 800ca4c:	1a6d      	subs	r5, r5, r1
 800ca4e:	f025 0503 	bic.w	r5, r5, #3
 800ca52:	3508      	adds	r5, #8
 800ca54:	2d0c      	cmp	r5, #12
 800ca56:	bf38      	it	cc
 800ca58:	250c      	movcc	r5, #12
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	f7ff ffa5 	bl	800c9ac <sbrk_aligned>
 800ca62:	3001      	adds	r0, #1
 800ca64:	d02b      	beq.n	800cabe <_malloc_r+0xd2>
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	442b      	add	r3, r5
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	e00e      	b.n	800ca8c <_malloc_r+0xa0>
 800ca6e:	6822      	ldr	r2, [r4, #0]
 800ca70:	1b52      	subs	r2, r2, r5
 800ca72:	d41e      	bmi.n	800cab2 <_malloc_r+0xc6>
 800ca74:	2a0b      	cmp	r2, #11
 800ca76:	d916      	bls.n	800caa6 <_malloc_r+0xba>
 800ca78:	1961      	adds	r1, r4, r5
 800ca7a:	42a3      	cmp	r3, r4
 800ca7c:	6025      	str	r5, [r4, #0]
 800ca7e:	bf18      	it	ne
 800ca80:	6059      	strne	r1, [r3, #4]
 800ca82:	6863      	ldr	r3, [r4, #4]
 800ca84:	bf08      	it	eq
 800ca86:	6031      	streq	r1, [r6, #0]
 800ca88:	5162      	str	r2, [r4, r5]
 800ca8a:	604b      	str	r3, [r1, #4]
 800ca8c:	4638      	mov	r0, r7
 800ca8e:	f104 060b 	add.w	r6, r4, #11
 800ca92:	f000 f9d3 	bl	800ce3c <__malloc_unlock>
 800ca96:	f026 0607 	bic.w	r6, r6, #7
 800ca9a:	1d23      	adds	r3, r4, #4
 800ca9c:	1af2      	subs	r2, r6, r3
 800ca9e:	d0b6      	beq.n	800ca0e <_malloc_r+0x22>
 800caa0:	1b9b      	subs	r3, r3, r6
 800caa2:	50a3      	str	r3, [r4, r2]
 800caa4:	e7b3      	b.n	800ca0e <_malloc_r+0x22>
 800caa6:	6862      	ldr	r2, [r4, #4]
 800caa8:	42a3      	cmp	r3, r4
 800caaa:	bf0c      	ite	eq
 800caac:	6032      	streq	r2, [r6, #0]
 800caae:	605a      	strne	r2, [r3, #4]
 800cab0:	e7ec      	b.n	800ca8c <_malloc_r+0xa0>
 800cab2:	4623      	mov	r3, r4
 800cab4:	6864      	ldr	r4, [r4, #4]
 800cab6:	e7b2      	b.n	800ca1e <_malloc_r+0x32>
 800cab8:	4634      	mov	r4, r6
 800caba:	6876      	ldr	r6, [r6, #4]
 800cabc:	e7b9      	b.n	800ca32 <_malloc_r+0x46>
 800cabe:	230c      	movs	r3, #12
 800cac0:	603b      	str	r3, [r7, #0]
 800cac2:	4638      	mov	r0, r7
 800cac4:	f000 f9ba 	bl	800ce3c <__malloc_unlock>
 800cac8:	e7a1      	b.n	800ca0e <_malloc_r+0x22>
 800caca:	6025      	str	r5, [r4, #0]
 800cacc:	e7de      	b.n	800ca8c <_malloc_r+0xa0>
 800cace:	bf00      	nop
 800cad0:	20006a14 	.word	0x20006a14

0800cad4 <cleanup_glue>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	460c      	mov	r4, r1
 800cad8:	6809      	ldr	r1, [r1, #0]
 800cada:	4605      	mov	r5, r0
 800cadc:	b109      	cbz	r1, 800cae2 <cleanup_glue+0xe>
 800cade:	f7ff fff9 	bl	800cad4 <cleanup_glue>
 800cae2:	4621      	mov	r1, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caea:	f7ff bf13 	b.w	800c914 <_free_r>
	...

0800caf0 <_reclaim_reent>:
 800caf0:	4b2c      	ldr	r3, [pc, #176]	; (800cba4 <_reclaim_reent+0xb4>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4283      	cmp	r3, r0
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	4604      	mov	r4, r0
 800cafa:	d051      	beq.n	800cba0 <_reclaim_reent+0xb0>
 800cafc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cafe:	b143      	cbz	r3, 800cb12 <_reclaim_reent+0x22>
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d14a      	bne.n	800cb9c <_reclaim_reent+0xac>
 800cb06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb08:	6819      	ldr	r1, [r3, #0]
 800cb0a:	b111      	cbz	r1, 800cb12 <_reclaim_reent+0x22>
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f7ff ff01 	bl	800c914 <_free_r>
 800cb12:	6961      	ldr	r1, [r4, #20]
 800cb14:	b111      	cbz	r1, 800cb1c <_reclaim_reent+0x2c>
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7ff fefc 	bl	800c914 <_free_r>
 800cb1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb1e:	b111      	cbz	r1, 800cb26 <_reclaim_reent+0x36>
 800cb20:	4620      	mov	r0, r4
 800cb22:	f7ff fef7 	bl	800c914 <_free_r>
 800cb26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb28:	b111      	cbz	r1, 800cb30 <_reclaim_reent+0x40>
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f7ff fef2 	bl	800c914 <_free_r>
 800cb30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb32:	b111      	cbz	r1, 800cb3a <_reclaim_reent+0x4a>
 800cb34:	4620      	mov	r0, r4
 800cb36:	f7ff feed 	bl	800c914 <_free_r>
 800cb3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb3c:	b111      	cbz	r1, 800cb44 <_reclaim_reent+0x54>
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f7ff fee8 	bl	800c914 <_free_r>
 800cb44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb46:	b111      	cbz	r1, 800cb4e <_reclaim_reent+0x5e>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f7ff fee3 	bl	800c914 <_free_r>
 800cb4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb50:	b111      	cbz	r1, 800cb58 <_reclaim_reent+0x68>
 800cb52:	4620      	mov	r0, r4
 800cb54:	f7ff fede 	bl	800c914 <_free_r>
 800cb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb5a:	b111      	cbz	r1, 800cb62 <_reclaim_reent+0x72>
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff fed9 	bl	800c914 <_free_r>
 800cb62:	69a3      	ldr	r3, [r4, #24]
 800cb64:	b1e3      	cbz	r3, 800cba0 <_reclaim_reent+0xb0>
 800cb66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb68:	4620      	mov	r0, r4
 800cb6a:	4798      	blx	r3
 800cb6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb6e:	b1b9      	cbz	r1, 800cba0 <_reclaim_reent+0xb0>
 800cb70:	4620      	mov	r0, r4
 800cb72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb76:	f7ff bfad 	b.w	800cad4 <cleanup_glue>
 800cb7a:	5949      	ldr	r1, [r1, r5]
 800cb7c:	b941      	cbnz	r1, 800cb90 <_reclaim_reent+0xa0>
 800cb7e:	3504      	adds	r5, #4
 800cb80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb82:	2d80      	cmp	r5, #128	; 0x80
 800cb84:	68d9      	ldr	r1, [r3, #12]
 800cb86:	d1f8      	bne.n	800cb7a <_reclaim_reent+0x8a>
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f7ff fec3 	bl	800c914 <_free_r>
 800cb8e:	e7ba      	b.n	800cb06 <_reclaim_reent+0x16>
 800cb90:	680e      	ldr	r6, [r1, #0]
 800cb92:	4620      	mov	r0, r4
 800cb94:	f7ff febe 	bl	800c914 <_free_r>
 800cb98:	4631      	mov	r1, r6
 800cb9a:	e7ef      	b.n	800cb7c <_reclaim_reent+0x8c>
 800cb9c:	2500      	movs	r5, #0
 800cb9e:	e7ef      	b.n	800cb80 <_reclaim_reent+0x90>
 800cba0:	bd70      	pop	{r4, r5, r6, pc}
 800cba2:	bf00      	nop
 800cba4:	200000bc 	.word	0x200000bc

0800cba8 <_sbrk_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d06      	ldr	r5, [pc, #24]	; (800cbc4 <_sbrk_r+0x1c>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	f7f7 ff38 	bl	8004a28 <_sbrk>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <_sbrk_r+0x1a>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	b103      	cbz	r3, 800cbc2 <_sbrk_r+0x1a>
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	20006a1c 	.word	0x20006a1c

0800cbc8 <siprintf>:
 800cbc8:	b40e      	push	{r1, r2, r3}
 800cbca:	b500      	push	{lr}
 800cbcc:	b09c      	sub	sp, #112	; 0x70
 800cbce:	ab1d      	add	r3, sp, #116	; 0x74
 800cbd0:	9002      	str	r0, [sp, #8]
 800cbd2:	9006      	str	r0, [sp, #24]
 800cbd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbd8:	4809      	ldr	r0, [pc, #36]	; (800cc00 <siprintf+0x38>)
 800cbda:	9107      	str	r1, [sp, #28]
 800cbdc:	9104      	str	r1, [sp, #16]
 800cbde:	4909      	ldr	r1, [pc, #36]	; (800cc04 <siprintf+0x3c>)
 800cbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe4:	9105      	str	r1, [sp, #20]
 800cbe6:	6800      	ldr	r0, [r0, #0]
 800cbe8:	9301      	str	r3, [sp, #4]
 800cbea:	a902      	add	r1, sp, #8
 800cbec:	f000 f988 	bl	800cf00 <_svfiprintf_r>
 800cbf0:	9b02      	ldr	r3, [sp, #8]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	b01c      	add	sp, #112	; 0x70
 800cbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbfc:	b003      	add	sp, #12
 800cbfe:	4770      	bx	lr
 800cc00:	200000bc 	.word	0x200000bc
 800cc04:	ffff0208 	.word	0xffff0208

0800cc08 <strcat>:
 800cc08:	b510      	push	{r4, lr}
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	7814      	ldrb	r4, [r2, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	3201      	adds	r2, #1
 800cc12:	2c00      	cmp	r4, #0
 800cc14:	d1fa      	bne.n	800cc0c <strcat+0x4>
 800cc16:	3b01      	subs	r3, #1
 800cc18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc20:	2a00      	cmp	r2, #0
 800cc22:	d1f9      	bne.n	800cc18 <strcat+0x10>
 800cc24:	bd10      	pop	{r4, pc}

0800cc26 <strchr>:
 800cc26:	b2c9      	uxtb	r1, r1
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc2e:	b11a      	cbz	r2, 800cc38 <strchr+0x12>
 800cc30:	428a      	cmp	r2, r1
 800cc32:	d1f9      	bne.n	800cc28 <strchr+0x2>
 800cc34:	4618      	mov	r0, r3
 800cc36:	4770      	bx	lr
 800cc38:	2900      	cmp	r1, #0
 800cc3a:	bf18      	it	ne
 800cc3c:	2300      	movne	r3, #0
 800cc3e:	e7f9      	b.n	800cc34 <strchr+0xe>

0800cc40 <strcpy>:
 800cc40:	4603      	mov	r3, r0
 800cc42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc46:	f803 2b01 	strb.w	r2, [r3], #1
 800cc4a:	2a00      	cmp	r2, #0
 800cc4c:	d1f9      	bne.n	800cc42 <strcpy+0x2>
 800cc4e:	4770      	bx	lr

0800cc50 <strncpy>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	3901      	subs	r1, #1
 800cc54:	4603      	mov	r3, r0
 800cc56:	b132      	cbz	r2, 800cc66 <strncpy+0x16>
 800cc58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc5c:	f803 4b01 	strb.w	r4, [r3], #1
 800cc60:	3a01      	subs	r2, #1
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	d1f7      	bne.n	800cc56 <strncpy+0x6>
 800cc66:	441a      	add	r2, r3
 800cc68:	2100      	movs	r1, #0
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d100      	bne.n	800cc70 <strncpy+0x20>
 800cc6e:	bd10      	pop	{r4, pc}
 800cc70:	f803 1b01 	strb.w	r1, [r3], #1
 800cc74:	e7f9      	b.n	800cc6a <strncpy+0x1a>

0800cc76 <strstr>:
 800cc76:	780a      	ldrb	r2, [r1, #0]
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	b96a      	cbnz	r2, 800cc98 <strstr+0x22>
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d109      	bne.n	800cc96 <strstr+0x20>
 800cc82:	460c      	mov	r4, r1
 800cc84:	4605      	mov	r5, r0
 800cc86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f6      	beq.n	800cc7c <strstr+0x6>
 800cc8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cc92:	429e      	cmp	r6, r3
 800cc94:	d0f7      	beq.n	800cc86 <strstr+0x10>
 800cc96:	3001      	adds	r0, #1
 800cc98:	7803      	ldrb	r3, [r0, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1ef      	bne.n	800cc7e <strstr+0x8>
 800cc9e:	4618      	mov	r0, r3
 800cca0:	e7ec      	b.n	800cc7c <strstr+0x6>
	...

0800cca4 <_strtol_l.constprop.0>:
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccaa:	d001      	beq.n	800ccb0 <_strtol_l.constprop.0+0xc>
 800ccac:	2b24      	cmp	r3, #36	; 0x24
 800ccae:	d906      	bls.n	800ccbe <_strtol_l.constprop.0+0x1a>
 800ccb0:	f7ff fd24 	bl	800c6fc <__errno>
 800ccb4:	2316      	movs	r3, #22
 800ccb6:	6003      	str	r3, [r0, #0]
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cda4 <_strtol_l.constprop.0+0x100>
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	462e      	mov	r6, r5
 800ccc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccca:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ccce:	f017 0708 	ands.w	r7, r7, #8
 800ccd2:	d1f7      	bne.n	800ccc4 <_strtol_l.constprop.0+0x20>
 800ccd4:	2c2d      	cmp	r4, #45	; 0x2d
 800ccd6:	d132      	bne.n	800cd3e <_strtol_l.constprop.0+0x9a>
 800ccd8:	782c      	ldrb	r4, [r5, #0]
 800ccda:	2701      	movs	r7, #1
 800ccdc:	1cb5      	adds	r5, r6, #2
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d05b      	beq.n	800cd9a <_strtol_l.constprop.0+0xf6>
 800cce2:	2b10      	cmp	r3, #16
 800cce4:	d109      	bne.n	800ccfa <_strtol_l.constprop.0+0x56>
 800cce6:	2c30      	cmp	r4, #48	; 0x30
 800cce8:	d107      	bne.n	800ccfa <_strtol_l.constprop.0+0x56>
 800ccea:	782c      	ldrb	r4, [r5, #0]
 800ccec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ccf0:	2c58      	cmp	r4, #88	; 0x58
 800ccf2:	d14d      	bne.n	800cd90 <_strtol_l.constprop.0+0xec>
 800ccf4:	786c      	ldrb	r4, [r5, #1]
 800ccf6:	2310      	movs	r3, #16
 800ccf8:	3502      	adds	r5, #2
 800ccfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ccfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cd02:	f04f 0c00 	mov.w	ip, #0
 800cd06:	fbb8 f9f3 	udiv	r9, r8, r3
 800cd0a:	4666      	mov	r6, ip
 800cd0c:	fb03 8a19 	mls	sl, r3, r9, r8
 800cd10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cd14:	f1be 0f09 	cmp.w	lr, #9
 800cd18:	d816      	bhi.n	800cd48 <_strtol_l.constprop.0+0xa4>
 800cd1a:	4674      	mov	r4, lr
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	dd24      	ble.n	800cd6a <_strtol_l.constprop.0+0xc6>
 800cd20:	f1bc 0f00 	cmp.w	ip, #0
 800cd24:	db1e      	blt.n	800cd64 <_strtol_l.constprop.0+0xc0>
 800cd26:	45b1      	cmp	r9, r6
 800cd28:	d31c      	bcc.n	800cd64 <_strtol_l.constprop.0+0xc0>
 800cd2a:	d101      	bne.n	800cd30 <_strtol_l.constprop.0+0x8c>
 800cd2c:	45a2      	cmp	sl, r4
 800cd2e:	db19      	blt.n	800cd64 <_strtol_l.constprop.0+0xc0>
 800cd30:	fb06 4603 	mla	r6, r6, r3, r4
 800cd34:	f04f 0c01 	mov.w	ip, #1
 800cd38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd3c:	e7e8      	b.n	800cd10 <_strtol_l.constprop.0+0x6c>
 800cd3e:	2c2b      	cmp	r4, #43	; 0x2b
 800cd40:	bf04      	itt	eq
 800cd42:	782c      	ldrbeq	r4, [r5, #0]
 800cd44:	1cb5      	addeq	r5, r6, #2
 800cd46:	e7ca      	b.n	800ccde <_strtol_l.constprop.0+0x3a>
 800cd48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cd4c:	f1be 0f19 	cmp.w	lr, #25
 800cd50:	d801      	bhi.n	800cd56 <_strtol_l.constprop.0+0xb2>
 800cd52:	3c37      	subs	r4, #55	; 0x37
 800cd54:	e7e2      	b.n	800cd1c <_strtol_l.constprop.0+0x78>
 800cd56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cd5a:	f1be 0f19 	cmp.w	lr, #25
 800cd5e:	d804      	bhi.n	800cd6a <_strtol_l.constprop.0+0xc6>
 800cd60:	3c57      	subs	r4, #87	; 0x57
 800cd62:	e7db      	b.n	800cd1c <_strtol_l.constprop.0+0x78>
 800cd64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cd68:	e7e6      	b.n	800cd38 <_strtol_l.constprop.0+0x94>
 800cd6a:	f1bc 0f00 	cmp.w	ip, #0
 800cd6e:	da05      	bge.n	800cd7c <_strtol_l.constprop.0+0xd8>
 800cd70:	2322      	movs	r3, #34	; 0x22
 800cd72:	6003      	str	r3, [r0, #0]
 800cd74:	4646      	mov	r6, r8
 800cd76:	b942      	cbnz	r2, 800cd8a <_strtol_l.constprop.0+0xe6>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	e79e      	b.n	800ccba <_strtol_l.constprop.0+0x16>
 800cd7c:	b107      	cbz	r7, 800cd80 <_strtol_l.constprop.0+0xdc>
 800cd7e:	4276      	negs	r6, r6
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	d0f9      	beq.n	800cd78 <_strtol_l.constprop.0+0xd4>
 800cd84:	f1bc 0f00 	cmp.w	ip, #0
 800cd88:	d000      	beq.n	800cd8c <_strtol_l.constprop.0+0xe8>
 800cd8a:	1e69      	subs	r1, r5, #1
 800cd8c:	6011      	str	r1, [r2, #0]
 800cd8e:	e7f3      	b.n	800cd78 <_strtol_l.constprop.0+0xd4>
 800cd90:	2430      	movs	r4, #48	; 0x30
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1b1      	bne.n	800ccfa <_strtol_l.constprop.0+0x56>
 800cd96:	2308      	movs	r3, #8
 800cd98:	e7af      	b.n	800ccfa <_strtol_l.constprop.0+0x56>
 800cd9a:	2c30      	cmp	r4, #48	; 0x30
 800cd9c:	d0a5      	beq.n	800ccea <_strtol_l.constprop.0+0x46>
 800cd9e:	230a      	movs	r3, #10
 800cda0:	e7ab      	b.n	800ccfa <_strtol_l.constprop.0+0x56>
 800cda2:	bf00      	nop
 800cda4:	0800fe8d 	.word	0x0800fe8d

0800cda8 <strtol>:
 800cda8:	4613      	mov	r3, r2
 800cdaa:	460a      	mov	r2, r1
 800cdac:	4601      	mov	r1, r0
 800cdae:	4802      	ldr	r0, [pc, #8]	; (800cdb8 <strtol+0x10>)
 800cdb0:	6800      	ldr	r0, [r0, #0]
 800cdb2:	f7ff bf77 	b.w	800cca4 <_strtol_l.constprop.0>
 800cdb6:	bf00      	nop
 800cdb8:	200000bc 	.word	0x200000bc

0800cdbc <_vsniprintf_r>:
 800cdbc:	b530      	push	{r4, r5, lr}
 800cdbe:	4614      	mov	r4, r2
 800cdc0:	2c00      	cmp	r4, #0
 800cdc2:	b09b      	sub	sp, #108	; 0x6c
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	da05      	bge.n	800cdd6 <_vsniprintf_r+0x1a>
 800cdca:	238b      	movs	r3, #139	; 0x8b
 800cdcc:	6003      	str	r3, [r0, #0]
 800cdce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdd2:	b01b      	add	sp, #108	; 0x6c
 800cdd4:	bd30      	pop	{r4, r5, pc}
 800cdd6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cdda:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cdde:	bf14      	ite	ne
 800cde0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cde4:	4623      	moveq	r3, r4
 800cde6:	9302      	str	r3, [sp, #8]
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdee:	9100      	str	r1, [sp, #0]
 800cdf0:	9104      	str	r1, [sp, #16]
 800cdf2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cdf6:	4669      	mov	r1, sp
 800cdf8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cdfa:	f000 f881 	bl	800cf00 <_svfiprintf_r>
 800cdfe:	1c43      	adds	r3, r0, #1
 800ce00:	bfbc      	itt	lt
 800ce02:	238b      	movlt	r3, #139	; 0x8b
 800ce04:	602b      	strlt	r3, [r5, #0]
 800ce06:	2c00      	cmp	r4, #0
 800ce08:	d0e3      	beq.n	800cdd2 <_vsniprintf_r+0x16>
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	701a      	strb	r2, [r3, #0]
 800ce10:	e7df      	b.n	800cdd2 <_vsniprintf_r+0x16>
	...

0800ce14 <vsniprintf>:
 800ce14:	b507      	push	{r0, r1, r2, lr}
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	460a      	mov	r2, r1
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	4803      	ldr	r0, [pc, #12]	; (800ce2c <vsniprintf+0x18>)
 800ce20:	6800      	ldr	r0, [r0, #0]
 800ce22:	f7ff ffcb 	bl	800cdbc <_vsniprintf_r>
 800ce26:	b003      	add	sp, #12
 800ce28:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce2c:	200000bc 	.word	0x200000bc

0800ce30 <__malloc_lock>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__malloc_lock+0x8>)
 800ce32:	f7ff bd39 	b.w	800c8a8 <__retarget_lock_acquire_recursive>
 800ce36:	bf00      	nop
 800ce38:	20006a10 	.word	0x20006a10

0800ce3c <__malloc_unlock>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__malloc_unlock+0x8>)
 800ce3e:	f7ff bd34 	b.w	800c8aa <__retarget_lock_release_recursive>
 800ce42:	bf00      	nop
 800ce44:	20006a10 	.word	0x20006a10

0800ce48 <__ssputs_r>:
 800ce48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce4c:	688e      	ldr	r6, [r1, #8]
 800ce4e:	429e      	cmp	r6, r3
 800ce50:	4682      	mov	sl, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	4690      	mov	r8, r2
 800ce56:	461f      	mov	r7, r3
 800ce58:	d838      	bhi.n	800cecc <__ssputs_r+0x84>
 800ce5a:	898a      	ldrh	r2, [r1, #12]
 800ce5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce60:	d032      	beq.n	800cec8 <__ssputs_r+0x80>
 800ce62:	6825      	ldr	r5, [r4, #0]
 800ce64:	6909      	ldr	r1, [r1, #16]
 800ce66:	eba5 0901 	sub.w	r9, r5, r1
 800ce6a:	6965      	ldr	r5, [r4, #20]
 800ce6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce74:	3301      	adds	r3, #1
 800ce76:	444b      	add	r3, r9
 800ce78:	106d      	asrs	r5, r5, #1
 800ce7a:	429d      	cmp	r5, r3
 800ce7c:	bf38      	it	cc
 800ce7e:	461d      	movcc	r5, r3
 800ce80:	0553      	lsls	r3, r2, #21
 800ce82:	d531      	bpl.n	800cee8 <__ssputs_r+0xa0>
 800ce84:	4629      	mov	r1, r5
 800ce86:	f7ff fdb1 	bl	800c9ec <_malloc_r>
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	b950      	cbnz	r0, 800cea4 <__ssputs_r+0x5c>
 800ce8e:	230c      	movs	r3, #12
 800ce90:	f8ca 3000 	str.w	r3, [sl]
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce9a:	81a3      	strh	r3, [r4, #12]
 800ce9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea4:	6921      	ldr	r1, [r4, #16]
 800cea6:	464a      	mov	r2, r9
 800cea8:	f7ff fd08 	bl	800c8bc <memcpy>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	6126      	str	r6, [r4, #16]
 800ceba:	6165      	str	r5, [r4, #20]
 800cebc:	444e      	add	r6, r9
 800cebe:	eba5 0509 	sub.w	r5, r5, r9
 800cec2:	6026      	str	r6, [r4, #0]
 800cec4:	60a5      	str	r5, [r4, #8]
 800cec6:	463e      	mov	r6, r7
 800cec8:	42be      	cmp	r6, r7
 800ceca:	d900      	bls.n	800cece <__ssputs_r+0x86>
 800cecc:	463e      	mov	r6, r7
 800cece:	6820      	ldr	r0, [r4, #0]
 800ced0:	4632      	mov	r2, r6
 800ced2:	4641      	mov	r1, r8
 800ced4:	f000 faa8 	bl	800d428 <memmove>
 800ced8:	68a3      	ldr	r3, [r4, #8]
 800ceda:	1b9b      	subs	r3, r3, r6
 800cedc:	60a3      	str	r3, [r4, #8]
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	4433      	add	r3, r6
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	2000      	movs	r0, #0
 800cee6:	e7db      	b.n	800cea0 <__ssputs_r+0x58>
 800cee8:	462a      	mov	r2, r5
 800ceea:	f000 fab7 	bl	800d45c <_realloc_r>
 800ceee:	4606      	mov	r6, r0
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d1e1      	bne.n	800ceb8 <__ssputs_r+0x70>
 800cef4:	6921      	ldr	r1, [r4, #16]
 800cef6:	4650      	mov	r0, sl
 800cef8:	f7ff fd0c 	bl	800c914 <_free_r>
 800cefc:	e7c7      	b.n	800ce8e <__ssputs_r+0x46>
	...

0800cf00 <_svfiprintf_r>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	4698      	mov	r8, r3
 800cf06:	898b      	ldrh	r3, [r1, #12]
 800cf08:	061b      	lsls	r3, r3, #24
 800cf0a:	b09d      	sub	sp, #116	; 0x74
 800cf0c:	4607      	mov	r7, r0
 800cf0e:	460d      	mov	r5, r1
 800cf10:	4614      	mov	r4, r2
 800cf12:	d50e      	bpl.n	800cf32 <_svfiprintf_r+0x32>
 800cf14:	690b      	ldr	r3, [r1, #16]
 800cf16:	b963      	cbnz	r3, 800cf32 <_svfiprintf_r+0x32>
 800cf18:	2140      	movs	r1, #64	; 0x40
 800cf1a:	f7ff fd67 	bl	800c9ec <_malloc_r>
 800cf1e:	6028      	str	r0, [r5, #0]
 800cf20:	6128      	str	r0, [r5, #16]
 800cf22:	b920      	cbnz	r0, 800cf2e <_svfiprintf_r+0x2e>
 800cf24:	230c      	movs	r3, #12
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf2c:	e0d1      	b.n	800d0d2 <_svfiprintf_r+0x1d2>
 800cf2e:	2340      	movs	r3, #64	; 0x40
 800cf30:	616b      	str	r3, [r5, #20]
 800cf32:	2300      	movs	r3, #0
 800cf34:	9309      	str	r3, [sp, #36]	; 0x24
 800cf36:	2320      	movs	r3, #32
 800cf38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf40:	2330      	movs	r3, #48	; 0x30
 800cf42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0ec <_svfiprintf_r+0x1ec>
 800cf46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf4a:	f04f 0901 	mov.w	r9, #1
 800cf4e:	4623      	mov	r3, r4
 800cf50:	469a      	mov	sl, r3
 800cf52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf56:	b10a      	cbz	r2, 800cf5c <_svfiprintf_r+0x5c>
 800cf58:	2a25      	cmp	r2, #37	; 0x25
 800cf5a:	d1f9      	bne.n	800cf50 <_svfiprintf_r+0x50>
 800cf5c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf60:	d00b      	beq.n	800cf7a <_svfiprintf_r+0x7a>
 800cf62:	465b      	mov	r3, fp
 800cf64:	4622      	mov	r2, r4
 800cf66:	4629      	mov	r1, r5
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7ff ff6d 	bl	800ce48 <__ssputs_r>
 800cf6e:	3001      	adds	r0, #1
 800cf70:	f000 80aa 	beq.w	800d0c8 <_svfiprintf_r+0x1c8>
 800cf74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf76:	445a      	add	r2, fp
 800cf78:	9209      	str	r2, [sp, #36]	; 0x24
 800cf7a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f000 80a2 	beq.w	800d0c8 <_svfiprintf_r+0x1c8>
 800cf84:	2300      	movs	r3, #0
 800cf86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf8e:	f10a 0a01 	add.w	sl, sl, #1
 800cf92:	9304      	str	r3, [sp, #16]
 800cf94:	9307      	str	r3, [sp, #28]
 800cf96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf9a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf9c:	4654      	mov	r4, sl
 800cf9e:	2205      	movs	r2, #5
 800cfa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa4:	4851      	ldr	r0, [pc, #324]	; (800d0ec <_svfiprintf_r+0x1ec>)
 800cfa6:	f7f3 f91b 	bl	80001e0 <memchr>
 800cfaa:	9a04      	ldr	r2, [sp, #16]
 800cfac:	b9d8      	cbnz	r0, 800cfe6 <_svfiprintf_r+0xe6>
 800cfae:	06d0      	lsls	r0, r2, #27
 800cfb0:	bf44      	itt	mi
 800cfb2:	2320      	movmi	r3, #32
 800cfb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfb8:	0711      	lsls	r1, r2, #28
 800cfba:	bf44      	itt	mi
 800cfbc:	232b      	movmi	r3, #43	; 0x2b
 800cfbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfc2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfc6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc8:	d015      	beq.n	800cff6 <_svfiprintf_r+0xf6>
 800cfca:	9a07      	ldr	r2, [sp, #28]
 800cfcc:	4654      	mov	r4, sl
 800cfce:	2000      	movs	r0, #0
 800cfd0:	f04f 0c0a 	mov.w	ip, #10
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfda:	3b30      	subs	r3, #48	; 0x30
 800cfdc:	2b09      	cmp	r3, #9
 800cfde:	d94e      	bls.n	800d07e <_svfiprintf_r+0x17e>
 800cfe0:	b1b0      	cbz	r0, 800d010 <_svfiprintf_r+0x110>
 800cfe2:	9207      	str	r2, [sp, #28]
 800cfe4:	e014      	b.n	800d010 <_svfiprintf_r+0x110>
 800cfe6:	eba0 0308 	sub.w	r3, r0, r8
 800cfea:	fa09 f303 	lsl.w	r3, r9, r3
 800cfee:	4313      	orrs	r3, r2
 800cff0:	9304      	str	r3, [sp, #16]
 800cff2:	46a2      	mov	sl, r4
 800cff4:	e7d2      	b.n	800cf9c <_svfiprintf_r+0x9c>
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	1d19      	adds	r1, r3, #4
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	9103      	str	r1, [sp, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	bfbb      	ittet	lt
 800d002:	425b      	neglt	r3, r3
 800d004:	f042 0202 	orrlt.w	r2, r2, #2
 800d008:	9307      	strge	r3, [sp, #28]
 800d00a:	9307      	strlt	r3, [sp, #28]
 800d00c:	bfb8      	it	lt
 800d00e:	9204      	strlt	r2, [sp, #16]
 800d010:	7823      	ldrb	r3, [r4, #0]
 800d012:	2b2e      	cmp	r3, #46	; 0x2e
 800d014:	d10c      	bne.n	800d030 <_svfiprintf_r+0x130>
 800d016:	7863      	ldrb	r3, [r4, #1]
 800d018:	2b2a      	cmp	r3, #42	; 0x2a
 800d01a:	d135      	bne.n	800d088 <_svfiprintf_r+0x188>
 800d01c:	9b03      	ldr	r3, [sp, #12]
 800d01e:	1d1a      	adds	r2, r3, #4
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	9203      	str	r2, [sp, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	bfb8      	it	lt
 800d028:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d02c:	3402      	adds	r4, #2
 800d02e:	9305      	str	r3, [sp, #20]
 800d030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0fc <_svfiprintf_r+0x1fc>
 800d034:	7821      	ldrb	r1, [r4, #0]
 800d036:	2203      	movs	r2, #3
 800d038:	4650      	mov	r0, sl
 800d03a:	f7f3 f8d1 	bl	80001e0 <memchr>
 800d03e:	b140      	cbz	r0, 800d052 <_svfiprintf_r+0x152>
 800d040:	2340      	movs	r3, #64	; 0x40
 800d042:	eba0 000a 	sub.w	r0, r0, sl
 800d046:	fa03 f000 	lsl.w	r0, r3, r0
 800d04a:	9b04      	ldr	r3, [sp, #16]
 800d04c:	4303      	orrs	r3, r0
 800d04e:	3401      	adds	r4, #1
 800d050:	9304      	str	r3, [sp, #16]
 800d052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d056:	4826      	ldr	r0, [pc, #152]	; (800d0f0 <_svfiprintf_r+0x1f0>)
 800d058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d05c:	2206      	movs	r2, #6
 800d05e:	f7f3 f8bf 	bl	80001e0 <memchr>
 800d062:	2800      	cmp	r0, #0
 800d064:	d038      	beq.n	800d0d8 <_svfiprintf_r+0x1d8>
 800d066:	4b23      	ldr	r3, [pc, #140]	; (800d0f4 <_svfiprintf_r+0x1f4>)
 800d068:	bb1b      	cbnz	r3, 800d0b2 <_svfiprintf_r+0x1b2>
 800d06a:	9b03      	ldr	r3, [sp, #12]
 800d06c:	3307      	adds	r3, #7
 800d06e:	f023 0307 	bic.w	r3, r3, #7
 800d072:	3308      	adds	r3, #8
 800d074:	9303      	str	r3, [sp, #12]
 800d076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d078:	4433      	add	r3, r6
 800d07a:	9309      	str	r3, [sp, #36]	; 0x24
 800d07c:	e767      	b.n	800cf4e <_svfiprintf_r+0x4e>
 800d07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d082:	460c      	mov	r4, r1
 800d084:	2001      	movs	r0, #1
 800d086:	e7a5      	b.n	800cfd4 <_svfiprintf_r+0xd4>
 800d088:	2300      	movs	r3, #0
 800d08a:	3401      	adds	r4, #1
 800d08c:	9305      	str	r3, [sp, #20]
 800d08e:	4619      	mov	r1, r3
 800d090:	f04f 0c0a 	mov.w	ip, #10
 800d094:	4620      	mov	r0, r4
 800d096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d09a:	3a30      	subs	r2, #48	; 0x30
 800d09c:	2a09      	cmp	r2, #9
 800d09e:	d903      	bls.n	800d0a8 <_svfiprintf_r+0x1a8>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0c5      	beq.n	800d030 <_svfiprintf_r+0x130>
 800d0a4:	9105      	str	r1, [sp, #20]
 800d0a6:	e7c3      	b.n	800d030 <_svfiprintf_r+0x130>
 800d0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e7f0      	b.n	800d094 <_svfiprintf_r+0x194>
 800d0b2:	ab03      	add	r3, sp, #12
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <_svfiprintf_r+0x1f8>)
 800d0ba:	a904      	add	r1, sp, #16
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f3af 8000 	nop.w
 800d0c2:	1c42      	adds	r2, r0, #1
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	d1d6      	bne.n	800d076 <_svfiprintf_r+0x176>
 800d0c8:	89ab      	ldrh	r3, [r5, #12]
 800d0ca:	065b      	lsls	r3, r3, #25
 800d0cc:	f53f af2c 	bmi.w	800cf28 <_svfiprintf_r+0x28>
 800d0d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0d2:	b01d      	add	sp, #116	; 0x74
 800d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	ab03      	add	r3, sp, #12
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	462a      	mov	r2, r5
 800d0de:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <_svfiprintf_r+0x1f8>)
 800d0e0:	a904      	add	r1, sp, #16
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	f000 f87a 	bl	800d1dc <_printf_i>
 800d0e8:	e7eb      	b.n	800d0c2 <_svfiprintf_r+0x1c2>
 800d0ea:	bf00      	nop
 800d0ec:	0800ff8d 	.word	0x0800ff8d
 800d0f0:	0800ff97 	.word	0x0800ff97
 800d0f4:	00000000 	.word	0x00000000
 800d0f8:	0800ce49 	.word	0x0800ce49
 800d0fc:	0800ff93 	.word	0x0800ff93

0800d100 <_printf_common>:
 800d100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	4616      	mov	r6, r2
 800d106:	4699      	mov	r9, r3
 800d108:	688a      	ldr	r2, [r1, #8]
 800d10a:	690b      	ldr	r3, [r1, #16]
 800d10c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d110:	4293      	cmp	r3, r2
 800d112:	bfb8      	it	lt
 800d114:	4613      	movlt	r3, r2
 800d116:	6033      	str	r3, [r6, #0]
 800d118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d11c:	4607      	mov	r7, r0
 800d11e:	460c      	mov	r4, r1
 800d120:	b10a      	cbz	r2, 800d126 <_printf_common+0x26>
 800d122:	3301      	adds	r3, #1
 800d124:	6033      	str	r3, [r6, #0]
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	0699      	lsls	r1, r3, #26
 800d12a:	bf42      	ittt	mi
 800d12c:	6833      	ldrmi	r3, [r6, #0]
 800d12e:	3302      	addmi	r3, #2
 800d130:	6033      	strmi	r3, [r6, #0]
 800d132:	6825      	ldr	r5, [r4, #0]
 800d134:	f015 0506 	ands.w	r5, r5, #6
 800d138:	d106      	bne.n	800d148 <_printf_common+0x48>
 800d13a:	f104 0a19 	add.w	sl, r4, #25
 800d13e:	68e3      	ldr	r3, [r4, #12]
 800d140:	6832      	ldr	r2, [r6, #0]
 800d142:	1a9b      	subs	r3, r3, r2
 800d144:	42ab      	cmp	r3, r5
 800d146:	dc26      	bgt.n	800d196 <_printf_common+0x96>
 800d148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d14c:	1e13      	subs	r3, r2, #0
 800d14e:	6822      	ldr	r2, [r4, #0]
 800d150:	bf18      	it	ne
 800d152:	2301      	movne	r3, #1
 800d154:	0692      	lsls	r2, r2, #26
 800d156:	d42b      	bmi.n	800d1b0 <_printf_common+0xb0>
 800d158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d15c:	4649      	mov	r1, r9
 800d15e:	4638      	mov	r0, r7
 800d160:	47c0      	blx	r8
 800d162:	3001      	adds	r0, #1
 800d164:	d01e      	beq.n	800d1a4 <_printf_common+0xa4>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	68e5      	ldr	r5, [r4, #12]
 800d16a:	6832      	ldr	r2, [r6, #0]
 800d16c:	f003 0306 	and.w	r3, r3, #6
 800d170:	2b04      	cmp	r3, #4
 800d172:	bf08      	it	eq
 800d174:	1aad      	subeq	r5, r5, r2
 800d176:	68a3      	ldr	r3, [r4, #8]
 800d178:	6922      	ldr	r2, [r4, #16]
 800d17a:	bf0c      	ite	eq
 800d17c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d180:	2500      	movne	r5, #0
 800d182:	4293      	cmp	r3, r2
 800d184:	bfc4      	itt	gt
 800d186:	1a9b      	subgt	r3, r3, r2
 800d188:	18ed      	addgt	r5, r5, r3
 800d18a:	2600      	movs	r6, #0
 800d18c:	341a      	adds	r4, #26
 800d18e:	42b5      	cmp	r5, r6
 800d190:	d11a      	bne.n	800d1c8 <_printf_common+0xc8>
 800d192:	2000      	movs	r0, #0
 800d194:	e008      	b.n	800d1a8 <_printf_common+0xa8>
 800d196:	2301      	movs	r3, #1
 800d198:	4652      	mov	r2, sl
 800d19a:	4649      	mov	r1, r9
 800d19c:	4638      	mov	r0, r7
 800d19e:	47c0      	blx	r8
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d103      	bne.n	800d1ac <_printf_common+0xac>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ac:	3501      	adds	r5, #1
 800d1ae:	e7c6      	b.n	800d13e <_printf_common+0x3e>
 800d1b0:	18e1      	adds	r1, r4, r3
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	2030      	movs	r0, #48	; 0x30
 800d1b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1ba:	4422      	add	r2, r4
 800d1bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1c4:	3302      	adds	r3, #2
 800d1c6:	e7c7      	b.n	800d158 <_printf_common+0x58>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	47c0      	blx	r8
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	d0e6      	beq.n	800d1a4 <_printf_common+0xa4>
 800d1d6:	3601      	adds	r6, #1
 800d1d8:	e7d9      	b.n	800d18e <_printf_common+0x8e>
	...

0800d1dc <_printf_i>:
 800d1dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e0:	7e0f      	ldrb	r7, [r1, #24]
 800d1e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1e4:	2f78      	cmp	r7, #120	; 0x78
 800d1e6:	4691      	mov	r9, r2
 800d1e8:	4680      	mov	r8, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	469a      	mov	sl, r3
 800d1ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1f2:	d807      	bhi.n	800d204 <_printf_i+0x28>
 800d1f4:	2f62      	cmp	r7, #98	; 0x62
 800d1f6:	d80a      	bhi.n	800d20e <_printf_i+0x32>
 800d1f8:	2f00      	cmp	r7, #0
 800d1fa:	f000 80d8 	beq.w	800d3ae <_printf_i+0x1d2>
 800d1fe:	2f58      	cmp	r7, #88	; 0x58
 800d200:	f000 80a3 	beq.w	800d34a <_printf_i+0x16e>
 800d204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d20c:	e03a      	b.n	800d284 <_printf_i+0xa8>
 800d20e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d212:	2b15      	cmp	r3, #21
 800d214:	d8f6      	bhi.n	800d204 <_printf_i+0x28>
 800d216:	a101      	add	r1, pc, #4	; (adr r1, 800d21c <_printf_i+0x40>)
 800d218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d21c:	0800d275 	.word	0x0800d275
 800d220:	0800d289 	.word	0x0800d289
 800d224:	0800d205 	.word	0x0800d205
 800d228:	0800d205 	.word	0x0800d205
 800d22c:	0800d205 	.word	0x0800d205
 800d230:	0800d205 	.word	0x0800d205
 800d234:	0800d289 	.word	0x0800d289
 800d238:	0800d205 	.word	0x0800d205
 800d23c:	0800d205 	.word	0x0800d205
 800d240:	0800d205 	.word	0x0800d205
 800d244:	0800d205 	.word	0x0800d205
 800d248:	0800d395 	.word	0x0800d395
 800d24c:	0800d2b9 	.word	0x0800d2b9
 800d250:	0800d377 	.word	0x0800d377
 800d254:	0800d205 	.word	0x0800d205
 800d258:	0800d205 	.word	0x0800d205
 800d25c:	0800d3b7 	.word	0x0800d3b7
 800d260:	0800d205 	.word	0x0800d205
 800d264:	0800d2b9 	.word	0x0800d2b9
 800d268:	0800d205 	.word	0x0800d205
 800d26c:	0800d205 	.word	0x0800d205
 800d270:	0800d37f 	.word	0x0800d37f
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	1d1a      	adds	r2, r3, #4
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	602a      	str	r2, [r5, #0]
 800d27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d284:	2301      	movs	r3, #1
 800d286:	e0a3      	b.n	800d3d0 <_printf_i+0x1f4>
 800d288:	6820      	ldr	r0, [r4, #0]
 800d28a:	6829      	ldr	r1, [r5, #0]
 800d28c:	0606      	lsls	r6, r0, #24
 800d28e:	f101 0304 	add.w	r3, r1, #4
 800d292:	d50a      	bpl.n	800d2aa <_printf_i+0xce>
 800d294:	680e      	ldr	r6, [r1, #0]
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	2e00      	cmp	r6, #0
 800d29a:	da03      	bge.n	800d2a4 <_printf_i+0xc8>
 800d29c:	232d      	movs	r3, #45	; 0x2d
 800d29e:	4276      	negs	r6, r6
 800d2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2a4:	485e      	ldr	r0, [pc, #376]	; (800d420 <_printf_i+0x244>)
 800d2a6:	230a      	movs	r3, #10
 800d2a8:	e019      	b.n	800d2de <_printf_i+0x102>
 800d2aa:	680e      	ldr	r6, [r1, #0]
 800d2ac:	602b      	str	r3, [r5, #0]
 800d2ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2b2:	bf18      	it	ne
 800d2b4:	b236      	sxthne	r6, r6
 800d2b6:	e7ef      	b.n	800d298 <_printf_i+0xbc>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	6820      	ldr	r0, [r4, #0]
 800d2bc:	1d19      	adds	r1, r3, #4
 800d2be:	6029      	str	r1, [r5, #0]
 800d2c0:	0601      	lsls	r1, r0, #24
 800d2c2:	d501      	bpl.n	800d2c8 <_printf_i+0xec>
 800d2c4:	681e      	ldr	r6, [r3, #0]
 800d2c6:	e002      	b.n	800d2ce <_printf_i+0xf2>
 800d2c8:	0646      	lsls	r6, r0, #25
 800d2ca:	d5fb      	bpl.n	800d2c4 <_printf_i+0xe8>
 800d2cc:	881e      	ldrh	r6, [r3, #0]
 800d2ce:	4854      	ldr	r0, [pc, #336]	; (800d420 <_printf_i+0x244>)
 800d2d0:	2f6f      	cmp	r7, #111	; 0x6f
 800d2d2:	bf0c      	ite	eq
 800d2d4:	2308      	moveq	r3, #8
 800d2d6:	230a      	movne	r3, #10
 800d2d8:	2100      	movs	r1, #0
 800d2da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2de:	6865      	ldr	r5, [r4, #4]
 800d2e0:	60a5      	str	r5, [r4, #8]
 800d2e2:	2d00      	cmp	r5, #0
 800d2e4:	bfa2      	ittt	ge
 800d2e6:	6821      	ldrge	r1, [r4, #0]
 800d2e8:	f021 0104 	bicge.w	r1, r1, #4
 800d2ec:	6021      	strge	r1, [r4, #0]
 800d2ee:	b90e      	cbnz	r6, 800d2f4 <_printf_i+0x118>
 800d2f0:	2d00      	cmp	r5, #0
 800d2f2:	d04d      	beq.n	800d390 <_printf_i+0x1b4>
 800d2f4:	4615      	mov	r5, r2
 800d2f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2fa:	fb03 6711 	mls	r7, r3, r1, r6
 800d2fe:	5dc7      	ldrb	r7, [r0, r7]
 800d300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d304:	4637      	mov	r7, r6
 800d306:	42bb      	cmp	r3, r7
 800d308:	460e      	mov	r6, r1
 800d30a:	d9f4      	bls.n	800d2f6 <_printf_i+0x11a>
 800d30c:	2b08      	cmp	r3, #8
 800d30e:	d10b      	bne.n	800d328 <_printf_i+0x14c>
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	07de      	lsls	r6, r3, #31
 800d314:	d508      	bpl.n	800d328 <_printf_i+0x14c>
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	6861      	ldr	r1, [r4, #4]
 800d31a:	4299      	cmp	r1, r3
 800d31c:	bfde      	ittt	le
 800d31e:	2330      	movle	r3, #48	; 0x30
 800d320:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d324:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d328:	1b52      	subs	r2, r2, r5
 800d32a:	6122      	str	r2, [r4, #16]
 800d32c:	f8cd a000 	str.w	sl, [sp]
 800d330:	464b      	mov	r3, r9
 800d332:	aa03      	add	r2, sp, #12
 800d334:	4621      	mov	r1, r4
 800d336:	4640      	mov	r0, r8
 800d338:	f7ff fee2 	bl	800d100 <_printf_common>
 800d33c:	3001      	adds	r0, #1
 800d33e:	d14c      	bne.n	800d3da <_printf_i+0x1fe>
 800d340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d344:	b004      	add	sp, #16
 800d346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34a:	4835      	ldr	r0, [pc, #212]	; (800d420 <_printf_i+0x244>)
 800d34c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d350:	6829      	ldr	r1, [r5, #0]
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	f851 6b04 	ldr.w	r6, [r1], #4
 800d358:	6029      	str	r1, [r5, #0]
 800d35a:	061d      	lsls	r5, r3, #24
 800d35c:	d514      	bpl.n	800d388 <_printf_i+0x1ac>
 800d35e:	07df      	lsls	r7, r3, #31
 800d360:	bf44      	itt	mi
 800d362:	f043 0320 	orrmi.w	r3, r3, #32
 800d366:	6023      	strmi	r3, [r4, #0]
 800d368:	b91e      	cbnz	r6, 800d372 <_printf_i+0x196>
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	f023 0320 	bic.w	r3, r3, #32
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	2310      	movs	r3, #16
 800d374:	e7b0      	b.n	800d2d8 <_printf_i+0xfc>
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	f043 0320 	orr.w	r3, r3, #32
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	2378      	movs	r3, #120	; 0x78
 800d380:	4828      	ldr	r0, [pc, #160]	; (800d424 <_printf_i+0x248>)
 800d382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d386:	e7e3      	b.n	800d350 <_printf_i+0x174>
 800d388:	0659      	lsls	r1, r3, #25
 800d38a:	bf48      	it	mi
 800d38c:	b2b6      	uxthmi	r6, r6
 800d38e:	e7e6      	b.n	800d35e <_printf_i+0x182>
 800d390:	4615      	mov	r5, r2
 800d392:	e7bb      	b.n	800d30c <_printf_i+0x130>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	6826      	ldr	r6, [r4, #0]
 800d398:	6961      	ldr	r1, [r4, #20]
 800d39a:	1d18      	adds	r0, r3, #4
 800d39c:	6028      	str	r0, [r5, #0]
 800d39e:	0635      	lsls	r5, r6, #24
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	d501      	bpl.n	800d3a8 <_printf_i+0x1cc>
 800d3a4:	6019      	str	r1, [r3, #0]
 800d3a6:	e002      	b.n	800d3ae <_printf_i+0x1d2>
 800d3a8:	0670      	lsls	r0, r6, #25
 800d3aa:	d5fb      	bpl.n	800d3a4 <_printf_i+0x1c8>
 800d3ac:	8019      	strh	r1, [r3, #0]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	6123      	str	r3, [r4, #16]
 800d3b2:	4615      	mov	r5, r2
 800d3b4:	e7ba      	b.n	800d32c <_printf_i+0x150>
 800d3b6:	682b      	ldr	r3, [r5, #0]
 800d3b8:	1d1a      	adds	r2, r3, #4
 800d3ba:	602a      	str	r2, [r5, #0]
 800d3bc:	681d      	ldr	r5, [r3, #0]
 800d3be:	6862      	ldr	r2, [r4, #4]
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f7f2 ff0c 	bl	80001e0 <memchr>
 800d3c8:	b108      	cbz	r0, 800d3ce <_printf_i+0x1f2>
 800d3ca:	1b40      	subs	r0, r0, r5
 800d3cc:	6060      	str	r0, [r4, #4]
 800d3ce:	6863      	ldr	r3, [r4, #4]
 800d3d0:	6123      	str	r3, [r4, #16]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3d8:	e7a8      	b.n	800d32c <_printf_i+0x150>
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	462a      	mov	r2, r5
 800d3de:	4649      	mov	r1, r9
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	47d0      	blx	sl
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	d0ab      	beq.n	800d340 <_printf_i+0x164>
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	079b      	lsls	r3, r3, #30
 800d3ec:	d413      	bmi.n	800d416 <_printf_i+0x23a>
 800d3ee:	68e0      	ldr	r0, [r4, #12]
 800d3f0:	9b03      	ldr	r3, [sp, #12]
 800d3f2:	4298      	cmp	r0, r3
 800d3f4:	bfb8      	it	lt
 800d3f6:	4618      	movlt	r0, r3
 800d3f8:	e7a4      	b.n	800d344 <_printf_i+0x168>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	4649      	mov	r1, r9
 800d400:	4640      	mov	r0, r8
 800d402:	47d0      	blx	sl
 800d404:	3001      	adds	r0, #1
 800d406:	d09b      	beq.n	800d340 <_printf_i+0x164>
 800d408:	3501      	adds	r5, #1
 800d40a:	68e3      	ldr	r3, [r4, #12]
 800d40c:	9903      	ldr	r1, [sp, #12]
 800d40e:	1a5b      	subs	r3, r3, r1
 800d410:	42ab      	cmp	r3, r5
 800d412:	dcf2      	bgt.n	800d3fa <_printf_i+0x21e>
 800d414:	e7eb      	b.n	800d3ee <_printf_i+0x212>
 800d416:	2500      	movs	r5, #0
 800d418:	f104 0619 	add.w	r6, r4, #25
 800d41c:	e7f5      	b.n	800d40a <_printf_i+0x22e>
 800d41e:	bf00      	nop
 800d420:	0800ff9e 	.word	0x0800ff9e
 800d424:	0800ffaf 	.word	0x0800ffaf

0800d428 <memmove>:
 800d428:	4288      	cmp	r0, r1
 800d42a:	b510      	push	{r4, lr}
 800d42c:	eb01 0402 	add.w	r4, r1, r2
 800d430:	d902      	bls.n	800d438 <memmove+0x10>
 800d432:	4284      	cmp	r4, r0
 800d434:	4623      	mov	r3, r4
 800d436:	d807      	bhi.n	800d448 <memmove+0x20>
 800d438:	1e43      	subs	r3, r0, #1
 800d43a:	42a1      	cmp	r1, r4
 800d43c:	d008      	beq.n	800d450 <memmove+0x28>
 800d43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d446:	e7f8      	b.n	800d43a <memmove+0x12>
 800d448:	4402      	add	r2, r0
 800d44a:	4601      	mov	r1, r0
 800d44c:	428a      	cmp	r2, r1
 800d44e:	d100      	bne.n	800d452 <memmove+0x2a>
 800d450:	bd10      	pop	{r4, pc}
 800d452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d45a:	e7f7      	b.n	800d44c <memmove+0x24>

0800d45c <_realloc_r>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	4680      	mov	r8, r0
 800d462:	4614      	mov	r4, r2
 800d464:	460e      	mov	r6, r1
 800d466:	b921      	cbnz	r1, 800d472 <_realloc_r+0x16>
 800d468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d46c:	4611      	mov	r1, r2
 800d46e:	f7ff babd 	b.w	800c9ec <_malloc_r>
 800d472:	b92a      	cbnz	r2, 800d480 <_realloc_r+0x24>
 800d474:	f7ff fa4e 	bl	800c914 <_free_r>
 800d478:	4625      	mov	r5, r4
 800d47a:	4628      	mov	r0, r5
 800d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d480:	f000 f81b 	bl	800d4ba <_malloc_usable_size_r>
 800d484:	4284      	cmp	r4, r0
 800d486:	4607      	mov	r7, r0
 800d488:	d802      	bhi.n	800d490 <_realloc_r+0x34>
 800d48a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d48e:	d812      	bhi.n	800d4b6 <_realloc_r+0x5a>
 800d490:	4621      	mov	r1, r4
 800d492:	4640      	mov	r0, r8
 800d494:	f7ff faaa 	bl	800c9ec <_malloc_r>
 800d498:	4605      	mov	r5, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d0ed      	beq.n	800d47a <_realloc_r+0x1e>
 800d49e:	42bc      	cmp	r4, r7
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	bf28      	it	cs
 800d4a6:	463a      	movcs	r2, r7
 800d4a8:	f7ff fa08 	bl	800c8bc <memcpy>
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	f7ff fa30 	bl	800c914 <_free_r>
 800d4b4:	e7e1      	b.n	800d47a <_realloc_r+0x1e>
 800d4b6:	4635      	mov	r5, r6
 800d4b8:	e7df      	b.n	800d47a <_realloc_r+0x1e>

0800d4ba <_malloc_usable_size_r>:
 800d4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4be:	1f18      	subs	r0, r3, #4
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	bfbc      	itt	lt
 800d4c4:	580b      	ldrlt	r3, [r1, r0]
 800d4c6:	18c0      	addlt	r0, r0, r3
 800d4c8:	4770      	bx	lr
	...

0800d4cc <_init>:
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ce:	bf00      	nop
 800d4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4d2:	bc08      	pop	{r3}
 800d4d4:	469e      	mov	lr, r3
 800d4d6:	4770      	bx	lr

0800d4d8 <_fini>:
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4da:	bf00      	nop
 800d4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4de:	bc08      	pop	{r3}
 800d4e0:	469e      	mov	lr, r3
 800d4e2:	4770      	bx	lr
