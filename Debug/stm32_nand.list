
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a60  0800d588  0800d588  0001d588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffe8  0800ffe8  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffe8  0800ffe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fff0  0800fff0  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fff0  0800fff0  0001fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fff4  0800fff4  0001fff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800fff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020134  2**0
                  CONTENTS
 10 .bss          00008a5c  20000138  20000138  00020138  2**3
                  ALLOC
 11 ._user_heap_stack 00003004  20008b94  20008b94  00020138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002535f  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a13  00000000  00000000  000454c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  00049ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007649  00000000  00000000  0004bb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002356b  00000000  00000000  00053179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e49c0  00000000  00000000  000766e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b0a4  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001aa8  00000000  00000000  0015b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007f84  00000000  00000000  0015cba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d570 	.word	0x0800d570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	0800d570 	.word	0x0800d570

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <tmpPrint>:
	uint8_t tmpBuf[32] = {0};
	uint8_t tmpLen = 0;
	char tmpChar[256];

	void tmpPrint(const char *func, uint8_t *buf, uint8_t len)
	{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
		strcpy(tmpChar, "to_nand:");
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <tmpPrint+0x5c>)
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <tmpPrint+0x60>)
 8000c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c44:	c303      	stmia	r3!, {r0, r1}
 8000c46:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) sprintf(tmpChar+strlen(tmpChar), " %02X", *(uint8_t *)(buf + i));
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
 8000c4c:	e010      	b.n	8000c70 <tmpPrint+0x40>
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <tmpPrint+0x5c>)
 8000c50:	f7ff fabe 	bl	80001d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <tmpPrint+0x5c>)
 8000c58:	1898      	adds	r0, r3, r2
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	490b      	ldr	r1, [pc, #44]	; (8000c94 <tmpPrint+0x64>)
 8000c66:	f00b ffb5 	bl	800cbd4 <siprintf>
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	75fb      	strb	r3, [r7, #23]
 8000c70:	7dfa      	ldrb	r2, [r7, #23]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3ea      	bcc.n	8000c4e <tmpPrint+0x1e>
		Report(0, "\t\t%s\r\n", tmpChar);
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <tmpPrint+0x5c>)
 8000c7a:	4907      	ldr	r1, [pc, #28]	; (8000c98 <tmpPrint+0x68>)
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f001 fccd 	bl	800261c <Report>
	}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000178 	.word	0x20000178
 8000c90:	0800d588 	.word	0x0800d588
 8000c94:	0800d594 	.word	0x0800d594
 8000c98:	0800d59c 	.word	0x0800d59c

08000c9c <io_nand_init>:
#endif

//-------------------------------------------------------------------------------------------
void io_nand_init(NAND_HandleTypeDef *hnand)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    if (HAL_NAND_ECC_Disable(hnand) != HAL_OK) devError |= devNAND;
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f004 fee4 	bl	8005a72 <HAL_NAND_ECC_Disable>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <io_nand_init+0x22>
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <io_nand_init+0x98>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <io_nand_init+0x98>)
 8000cbc:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(hnand, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(hnand, &nandID) == HAL_OK) {//read ID information from chip
 8000cbe:	491e      	ldr	r1, [pc, #120]	; (8000d38 <io_nand_init+0x9c>)
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f867 	bl	8000d94 <NAND_Read_ID>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d12e      	bne.n	8000d2a <io_nand_init+0x8e>

    	nandState = HAL_NAND_GetState(hnand);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f004 fef9 	bl	8005ac4 <HAL_NAND_GetState>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <io_nand_init+0xa0>)
 8000cd8:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand->Config, sizeof(s_chipConf));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <io_nand_init+0xa4>)
 8000ce2:	6810      	ldr	r0, [r2, #0]
 8000ce4:	6851      	ldr	r1, [r2, #4]
 8000ce6:	6895      	ldr	r5, [r2, #8]
 8000ce8:	68d4      	ldr	r4, [r2, #12]
 8000cea:	6018      	str	r0, [r3, #0]
 8000cec:	6059      	str	r1, [r3, #4]
 8000cee:	609d      	str	r5, [r3, #8]
 8000cf0:	60dc      	str	r4, [r3, #12]
 8000cf2:	6910      	ldr	r0, [r2, #16]
 8000cf4:	6951      	ldr	r1, [r2, #20]
 8000cf6:	6118      	str	r0, [r3, #16]
 8000cf8:	6159      	str	r1, [r3, #20]
    	chipConf.PlaneSize *= chipConf.BlockNbr;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <io_nand_init+0xa4>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <io_nand_init+0xa4>)
 8000d00:	68d2      	ldr	r2, [r2, #12]
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <io_nand_init+0xa4>)
 8000d08:	6153      	str	r3, [r2, #20]

    	total_pages = chipConf.BlockSize * chipConf.BlockNbr;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <io_nand_init+0xa4>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <io_nand_init+0xa4>)
 8000d10:	68d2      	ldr	r2, [r2, #12]
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <io_nand_init+0xa8>)
 8000d18:	6013      	str	r3, [r2, #0]
    	total_bytes = total_pages * chipConf.PageSize;//chipConf.PlaneSize;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <io_nand_init+0xa4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <io_nand_init+0xa8>)
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <io_nand_init+0xac>)
 8000d28:	6013      	str	r3, [r2, #0]

    }

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000488 	.word	0x20000488
 8000d38:	200014c0 	.word	0x200014c0
 8000d3c:	20000085 	.word	0x20000085
 8000d40:	200014c8 	.word	0x200014c8
 8000d44:	200014a0 	.word	0x200014a0
 8000d48:	200014a4 	.word	0x200014a4

08000d4c <io_nand_get_page_size>:
//-------------------------------------------------------------------------------------------
uint32_t io_nand_get_page_size(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    return chipConf.PageSize;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <io_nand_get_page_size+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200014c8 	.word	0x200014c8

08000d64 <io_nand_get_block_number>:
uint32_t io_nand_get_block_number(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	return chipConf.BlockNbr;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <io_nand_get_block_number+0x14>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200014c8 	.word	0x200014c8

08000d7c <io_nand_get_block_size>:
uint32_t io_nand_get_block_size(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	return chipConf.BlockSize;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <io_nand_get_block_size+0x14>)
 8000d82:	689b      	ldr	r3, [r3, #8]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200014c8 	.word	0x200014c8

08000d94 <NAND_Read_ID>:
{
	return chipConf.PlaneSize;
}
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d101      	bne.n	8000dae <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 8000daa:	2302      	movs	r3, #2
 8000dac:	e059      	b.n	8000e62 <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d152      	bne.n	8000e60 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <NAND_Read_ID+0x34>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e04c      	b.n	8000e62 <NAND_Read_ID+0xce>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000dda:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000dde:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	2290      	movs	r2, #144	; 0x90
 8000dea:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dec:	f3bf 8f4f 	dsb	sy
}
 8000df0:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfe:	f3bf 8f4f 	dsb	sy
}
 8000e02:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d123      	bne.n	8000e54 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3310      	adds	r3, #16
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	0e1b      	lsrs	r3, r3, #24
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	711a      	strb	r2, [r3, #4]


	    	hnand->State = HAL_NAND_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e000      	b.n	8000e62 <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200014a8 	.word	0x200014a8

08000e74 <io_nand_read_8b>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b090      	sub	sp, #64	; 0x40
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	68f9      	ldr	r1, [r7, #12]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fce7 	bl	800185c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8000e8e:	4b6c      	ldr	r3, [pc, #432]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d101      	bne.n	8000ea0 <io_nand_read_8b+0x2c>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e1da      	b.n	8001256 <io_nand_read_8b+0x3e2>

    __HAL_LOCK(nandPort);
 8000ea0:	4b67      	ldr	r3, [pc, #412]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <io_nand_read_8b+0x3c>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e1d2      	b.n	8001256 <io_nand_read_8b+0x3e2>
 8000eb0:	4b63      	ldr	r3, [pc, #396]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8000ec4:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <io_nand_read_8b+0x1d0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8000eca:	8a3b      	ldrh	r3, [r7, #16]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	8a7b      	ldrh	r3, [r7, #18]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000edc:	fb00 f303 	mul.w	r3, r0, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a57      	ldr	r2, [pc, #348]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	440b      	add	r3, r1
 8000eee:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8000ef0:	4b55      	ldr	r3, [pc, #340]	; (8001048 <io_nand_read_8b+0x1d4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d910      	bls.n	8000f1a <io_nand_read_8b+0xa6>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000ef8:	8a3b      	ldrh	r3, [r7, #16]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 8000efa:	461a      	mov	r2, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 8000efe:	4619      	mov	r1, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000f00:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 8000f02:	4618      	mov	r0, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	9002      	str	r0, [sp, #8]
 8000f0a:	9101      	str	r1, [sp, #4]
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	; (800104c <io_nand_read_8b+0x1d8>)
 8000f12:	494f      	ldr	r1, [pc, #316]	; (8001050 <io_nand_read_8b+0x1dc>)
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 fb81 	bl	800261c <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8000f1e:	2220      	movs	r2, #32
 8000f20:	2100      	movs	r1, #0
 8000f22:	484c      	ldr	r0, [pc, #304]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000f24:	f00b fd40 	bl	800c9a8 <memset>
    tmpLen = 0;
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
    __DSB();

    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <io_nand_read_8b+0xe4>
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	b2d1      	uxtb	r1, r2
 8000f4c:	4a42      	ldr	r2, [pc, #264]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f4e:	7011      	strb	r1, [r2, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	5499      	strb	r1, [r3, r2]

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f62:	d87b      	bhi.n	800105c <io_nand_read_8b+0x1e8>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f70:	f3bf 8f4f 	dsb	sy
}
 8000f74:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);;
 8000f76:	7ffb      	ldrb	r3, [r7, #31]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00a      	beq.n	8000f92 <io_nand_read_8b+0x11e>
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	b2d1      	uxtb	r1, r2
 8000f84:	4a34      	ldr	r2, [pc, #208]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f86:	7011      	strb	r1, [r2, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2d9      	uxtb	r1, r3
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000f90:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6a3a      	ldr	r2, [r7, #32]
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9e:	f3bf 8f4f 	dsb	sy
}
 8000fa2:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8000fa4:	7ffb      	ldrb	r3, [r7, #31]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00a      	beq.n	8000fc0 <io_nand_read_8b+0x14c>
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	b2d1      	uxtb	r1, r2
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fb4:	7011      	strb	r1, [r2, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000fbe:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	0a1a      	lsrs	r2, r3, #8
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <io_nand_read_8b+0x17e>
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	0a19      	lsrs	r1, r3, #8
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	b2d0      	uxtb	r0, r2
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fe8:	7010      	strb	r0, [r2, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	b2c9      	uxtb	r1, r1
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000ff0:	5499      	strb	r1, [r3, r2]
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001006:	f0c0 80ad 	bcc.w	8001164 <io_nand_read_8b+0x2f0>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	0c1a      	lsrs	r2, r3, #16
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001018:	f3bf 8f4f 	dsb	sy
}
 800101c:	bf00      	nop
			__DSB();
			if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 809f 	beq.w	8001164 <io_nand_read_8b+0x2f0>
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	0c19      	lsrs	r1, r3, #16
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <io_nand_read_8b+0x1e4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	b2d0      	uxtb	r0, r2
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <io_nand_read_8b+0x1e4>)
 8001034:	7010      	strb	r0, [r2, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	b2c9      	uxtb	r1, r1
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <io_nand_read_8b+0x1e0>)
 800103c:	5499      	strb	r1, [r3, r2]
 800103e:	e091      	b.n	8001164 <io_nand_read_8b+0x2f0>
 8001040:	20000078 	.word	0x20000078
 8001044:	200014a8 	.word	0x200014a8
 8001048:	20000068 	.word	0x20000068
 800104c:	0800fd8c 	.word	0x0800fd8c
 8001050:	0800d5a4 	.word	0x0800d5a4
 8001054:	20000154 	.word	0x20000154
 8001058:	20000174 	.word	0x20000174
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001068:	f3bf 8f4f 	dsb	sy
}
 800106c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <io_nand_read_8b+0x216>
 8001074:	4b7a      	ldr	r3, [pc, #488]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b2d1      	uxtb	r1, r2
 800107c:	4a78      	ldr	r2, [pc, #480]	; (8001260 <io_nand_read_8b+0x3ec>)
 800107e:	7011      	strb	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4b77      	ldr	r3, [pc, #476]	; (8001264 <io_nand_read_8b+0x3f0>)
 8001088:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	0a1a      	lsrs	r2, r3, #8
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 800109e:	7ffb      	ldrb	r3, [r7, #31]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <io_nand_read_8b+0x248>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	0a19      	lsrs	r1, r3, #8
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	b2d0      	uxtb	r0, r2
 80010b0:	4a6b      	ldr	r2, [pc, #428]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010b2:	7010      	strb	r0, [r2, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <io_nand_read_8b+0x3f0>)
 80010ba:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c8:	f3bf 8f4f 	dsb	sy
}
 80010cc:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <io_nand_read_8b+0x276>
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	b2d1      	uxtb	r1, r2
 80010dc:	4a60      	ldr	r2, [pc, #384]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010de:	7011      	strb	r1, [r2, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <io_nand_read_8b+0x3f0>)
 80010e8:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	0a1a      	lsrs	r2, r3, #8
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010f8:	f3bf 8f4f 	dsb	sy
}
 80010fc:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <io_nand_read_8b+0x2a8>
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	0a19      	lsrs	r1, r3, #8
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <io_nand_read_8b+0x3ec>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	b2d0      	uxtb	r0, r2
 8001110:	4a53      	ldr	r2, [pc, #332]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001112:	7010      	strb	r0, [r2, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <io_nand_read_8b+0x3f0>)
 800111a:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <io_nand_read_8b+0x3f4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <io_nand_read_8b+0x3f4>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d318      	bcc.n	8001164 <io_nand_read_8b+0x2f0>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	0c1a      	lsrs	r2, r3, #16
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <io_nand_read_8b+0x2f0>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	0c19      	lsrs	r1, r3, #16
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b2d0      	uxtb	r0, r2
 8001158:	4a41      	ldr	r2, [pc, #260]	; (8001260 <io_nand_read_8b+0x3ec>)
 800115a:	7010      	strb	r0, [r2, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <io_nand_read_8b+0x3f0>)
 8001162:	5499      	strb	r1, [r3, r2]
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800116e:	f3bf 8f4f 	dsb	sy
}
 8001172:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_TRUE1;
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <io_nand_read_8b+0x31a>
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <io_nand_read_8b+0x3ec>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	b2d1      	uxtb	r1, r2
 8001182:	4a37      	ldr	r2, [pc, #220]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001184:	7011      	strb	r1, [r2, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <io_nand_read_8b+0x3f0>)
 800118a:	2130      	movs	r1, #48	; 0x30
 800118c:	5499      	strb	r1, [r3, r2]


    uint32_t tickstart = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <io_nand_read_8b+0x3f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119a:	2b01      	cmp	r3, #1
 800119c:	d134      	bne.n	8001208 <io_nand_read_8b+0x394>
        tickstart = HAL_GetTick();
 800119e:	f003 fc59 	bl	8004a54 <HAL_GetTick>
 80011a2:	61b8      	str	r0, [r7, #24]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011a4:	e013      	b.n	80011ce <io_nand_read_8b+0x35a>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80011a6:	f003 fc55 	bl	8004a54 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d90b      	bls.n	80011ce <io_nand_read_8b+0x35a>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <io_nand_read_8b+0x3f4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2203      	movs	r2, #3
 80011bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <io_nand_read_8b+0x3f4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e043      	b.n	8001256 <io_nand_read_8b+0x3e2>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <io_nand_read_8b+0x3f4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fc84 	bl	8005ae0 <HAL_NAND_Read_Status>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b40      	cmp	r3, #64	; 0x40
 80011dc:	d1e3      	bne.n	80011a6 <io_nand_read_8b+0x332>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e8:	f3bf 8f4f 	dsb	sy
}
 80011ec:	bf00      	nop
        __DSB();
        if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <io_nand_read_8b+0x394>
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <io_nand_read_8b+0x3ec>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	b2d1      	uxtb	r1, r2
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <io_nand_read_8b+0x3ec>)
 80011fe:	7011      	strb	r1, [r2, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <io_nand_read_8b+0x3f0>)
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001210:	e008      	b.n	8001224 <io_nand_read_8b+0x3b0>
 8001212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	1c59      	adds	r1, r3, #1
 8001218:	62f9      	str	r1, [r7, #44]	; 0x2c
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	3301      	adds	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
 8001224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3f2      	bcc.n	8001212 <io_nand_read_8b+0x39e>

    nandPort->State = HAL_NAND_STATE_READY;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <io_nand_read_8b+0x3f4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <io_nand_read_8b+0x3f4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <io_nand_read_8b+0x3e0>
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4905      	ldr	r1, [pc, #20]	; (8001264 <io_nand_read_8b+0x3f0>)
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <io_nand_read_8b+0x3f8>)
 8001250:	f7ff fcee 	bl	8000c30 <tmpPrint>

    return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000174 	.word	0x20000174
 8001264:	20000154 	.word	0x20000154
 8001268:	20000078 	.word	0x20000078
 800126c:	0800fd8c 	.word	0x0800fd8c

08001270 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	; 0x40
 8001274:	af04      	add	r7, sp, #16
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fae9 	bl	800185c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <io_nand_write_8b+0x1f8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <io_nand_write_8b+0x2c>
 8001298:	2302      	movs	r3, #2
 800129a:	e1d6      	b.n	800164a <io_nand_write_8b+0x3da>

    __HAL_LOCK(nandPort);
 800129c:	4b72      	ldr	r3, [pc, #456]	; (8001468 <io_nand_write_8b+0x1f8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <io_nand_write_8b+0x3c>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e1ce      	b.n	800164a <io_nand_write_8b+0x3da>
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 80012b6:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <io_nand_write_8b+0x1fc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 80012c6:	8a3b      	ldrh	r3, [r7, #16]
 80012c8:	4619      	mov	r1, r3
 80012ca:	8abb      	ldrh	r3, [r7, #20]
 80012cc:	461a      	mov	r2, r3
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4b65      	ldr	r3, [pc, #404]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d8:	fb00 f303 	mul.w	r3, r0, r3
 80012dc:	4413      	add	r3, r2
 80012de:	4a62      	ldr	r2, [pc, #392]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	440b      	add	r3, r1
 80012ea:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 80012ec:	4b60      	ldr	r3, [pc, #384]	; (8001470 <io_nand_write_8b+0x200>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d910      	bls.n	8001316 <io_nand_write_8b+0xa6>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012f4:	8a3b      	ldrh	r3, [r7, #16]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 80012f6:	461a      	mov	r2, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012f8:	8a7b      	ldrh	r3, [r7, #18]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 80012fa:	4619      	mov	r1, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012fc:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 80012fe:	4618      	mov	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	9002      	str	r0, [sp, #8]
 8001306:	9101      	str	r1, [sp, #4]
 8001308:	9200      	str	r2, [sp, #0]
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	4a59      	ldr	r2, [pc, #356]	; (8001474 <io_nand_write_8b+0x204>)
 800130e:	495a      	ldr	r1, [pc, #360]	; (8001478 <io_nand_write_8b+0x208>)
 8001310:	2001      	movs	r0, #1
 8001312:	f001 f983 	bl	800261c <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8001316:	2301      	movs	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 800131a:	2220      	movs	r2, #32
 800131c:	2100      	movs	r1, #0
 800131e:	4857      	ldr	r0, [pc, #348]	; (800147c <io_nand_write_8b+0x20c>)
 8001320:	f00b fb42 	bl	800c9a8 <memset>
    tmpLen = 0;
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <io_nand_write_8b+0x210>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001334:	f3bf 8f4f 	dsb	sy
}
 8001338:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <io_nand_write_8b+0xe4>
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <io_nand_write_8b+0x210>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	b2d1      	uxtb	r1, r2
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <io_nand_write_8b+0x210>)
 800134a:	7011      	strb	r1, [r2, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <io_nand_write_8b+0x20c>)
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
}
 8001362:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE0;
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <io_nand_write_8b+0x10e>
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <io_nand_write_8b+0x210>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	b2d1      	uxtb	r1, r2
 8001372:	4a43      	ldr	r2, [pc, #268]	; (8001480 <io_nand_write_8b+0x210>)
 8001374:	7011      	strb	r1, [r2, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <io_nand_write_8b+0x20c>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	5499      	strb	r1, [r3, r2]

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <io_nand_write_8b+0x1f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001388:	d87c      	bhi.n	8001484 <io_nand_write_8b+0x214>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001396:	f3bf 8f4f 	dsb	sy
}
 800139a:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <io_nand_write_8b+0x148>
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <io_nand_write_8b+0x210>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	b2d1      	uxtb	r1, r2
 80013aa:	4a35      	ldr	r2, [pc, #212]	; (8001480 <io_nand_write_8b+0x210>)
 80013ac:	7011      	strb	r1, [r2, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2d9      	uxtb	r1, r3
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <io_nand_write_8b+0x20c>)
 80013b6:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013be:	6a3a      	ldr	r2, [r7, #32]
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013c4:	f3bf 8f4f 	dsb	sy
}
 80013c8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <io_nand_write_8b+0x176>
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <io_nand_write_8b+0x210>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	b2d1      	uxtb	r1, r2
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <io_nand_write_8b+0x210>)
 80013da:	7011      	strb	r1, [r2, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <io_nand_write_8b+0x20c>)
 80013e4:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	0a1a      	lsrs	r2, r3, #8
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013f4:	f3bf 8f4f 	dsb	sy
}
 80013f8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <io_nand_write_8b+0x1a8>
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	0a19      	lsrs	r1, r3, #8
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <io_nand_write_8b+0x210>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	b2d0      	uxtb	r0, r2
 800140c:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <io_nand_write_8b+0x210>)
 800140e:	7010      	strb	r0, [r2, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <io_nand_write_8b+0x20c>)
 8001416:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <io_nand_write_8b+0x1f8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <io_nand_write_8b+0x1f8>)
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	f0c0 80ae 	bcc.w	800158c <io_nand_write_8b+0x31c>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	0c1a      	lsrs	r2, r3, #16
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800143e:	f3bf 8f4f 	dsb	sy
}
 8001442:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a0 	beq.w	800158c <io_nand_write_8b+0x31c>
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	0c19      	lsrs	r1, r3, #16
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <io_nand_write_8b+0x210>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	b2d0      	uxtb	r0, r2
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <io_nand_write_8b+0x210>)
 800145a:	7010      	strb	r0, [r2, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <io_nand_write_8b+0x20c>)
 8001462:	5499      	strb	r1, [r3, r2]
 8001464:	e092      	b.n	800158c <io_nand_write_8b+0x31c>
 8001466:	bf00      	nop
 8001468:	20000078 	.word	0x20000078
 800146c:	200014a8 	.word	0x200014a8
 8001470:	20000068 	.word	0x20000068
 8001474:	0800fd9c 	.word	0x0800fd9c
 8001478:	0800d5a4 	.word	0x0800d5a4
 800147c:	20000154 	.word	0x20000154
 8001480:	20000174 	.word	0x20000174
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001490:	f3bf 8f4f 	dsb	sy
}
 8001494:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00a      	beq.n	80014b2 <io_nand_write_8b+0x242>
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <io_nand_write_8b+0x3e4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	b2d1      	uxtb	r1, r2
 80014a4:	4a6b      	ldr	r2, [pc, #428]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014a6:	7011      	strb	r1, [r2, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2d9      	uxtb	r1, r3
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <io_nand_write_8b+0x3e8>)
 80014b0:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	0a1a      	lsrs	r2, r3, #8
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014c0:	f3bf 8f4f 	dsb	sy
}
 80014c4:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <io_nand_write_8b+0x274>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	0a19      	lsrs	r1, r3, #8
 80014d0:	4b60      	ldr	r3, [pc, #384]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	b2d0      	uxtb	r0, r2
 80014d8:	4a5e      	ldr	r2, [pc, #376]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014da:	7010      	strb	r0, [r2, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <io_nand_write_8b+0x3e8>)
 80014e2:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ea:	6a3a      	ldr	r2, [r7, #32]
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80014f6:	7ffb      	ldrb	r3, [r7, #31]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <io_nand_write_8b+0x2a2>
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	b2d1      	uxtb	r1, r2
 8001504:	4a53      	ldr	r2, [pc, #332]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001506:	7011      	strb	r1, [r2, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <io_nand_write_8b+0x3e8>)
 8001510:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	0a1a      	lsrs	r2, r3, #8
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001520:	f3bf 8f4f 	dsb	sy
}
 8001524:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8001526:	7ffb      	ldrb	r3, [r7, #31]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <io_nand_write_8b+0x2d4>
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	0a19      	lsrs	r1, r3, #8
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	b2d0      	uxtb	r0, r2
 8001538:	4a46      	ldr	r2, [pc, #280]	; (8001654 <io_nand_write_8b+0x3e4>)
 800153a:	7010      	strb	r0, [r2, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <io_nand_write_8b+0x3e8>)
 8001542:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001544:	4b45      	ldr	r3, [pc, #276]	; (800165c <io_nand_write_8b+0x3ec>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <io_nand_write_8b+0x3ec>)
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d318      	bcc.n	800158c <io_nand_write_8b+0x31c>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	0c1a      	lsrs	r2, r3, #16
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <io_nand_write_8b+0x31c>
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	0c19      	lsrs	r1, r3, #16
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <io_nand_write_8b+0x3e4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	b2d0      	uxtb	r0, r2
 8001580:	4a34      	ldr	r2, [pc, #208]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001582:	7010      	strb	r0, [r2, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <io_nand_write_8b+0x3e8>)
 800158a:	5499      	strb	r1, [r3, r2]
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
 8001594:	e00b      	b.n	80015ae <io_nand_write_8b+0x33e>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	3301      	adds	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ef      	bcc.n	8001596 <io_nand_write_8b+0x326>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	2210      	movs	r2, #16
 80015be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE_TRUE1;
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d021      	beq.n	8001610 <io_nand_write_8b+0x3a0>
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <io_nand_write_8b+0x3e4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	b2d1      	uxtb	r1, r2
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <io_nand_write_8b+0x3e4>)
 80015d6:	7011      	strb	r1, [r2, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <io_nand_write_8b+0x3e8>)
 80015dc:	2110      	movs	r1, #16
 80015de:	5499      	strb	r1, [r3, r2]

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80015e0:	e016      	b.n	8001610 <io_nand_write_8b+0x3a0>
        tickstart = HAL_GetTick();
 80015e2:	f003 fa37 	bl	8004a54 <HAL_GetTick>
 80015e6:	61b8      	str	r0, [r7, #24]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80015e8:	f003 fa34 	bl	8004a54 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f6:	d90b      	bls.n	8001610 <io_nand_write_8b+0x3a0>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <io_nand_write_8b+0x3ec>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2203      	movs	r2, #3
 80015fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <io_nand_write_8b+0x3ec>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e01c      	b.n	800164a <io_nand_write_8b+0x3da>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <io_nand_write_8b+0x3ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fa63 	bl	8005ae0 <HAL_NAND_Read_Status>
 800161a:	4603      	mov	r3, r0
 800161c:	2b40      	cmp	r3, #64	; 0x40
 800161e:	d1e0      	bne.n	80015e2 <io_nand_write_8b+0x372>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <io_nand_write_8b+0x3ec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <io_nand_write_8b+0x3ec>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <io_nand_write_8b+0x3d8>
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <io_nand_write_8b+0x3e4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4905      	ldr	r1, [pc, #20]	; (8001658 <io_nand_write_8b+0x3e8>)
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <io_nand_write_8b+0x3f0>)
 8001644:	f7ff faf4 	bl	8000c30 <tmpPrint>

    return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000174 	.word	0x20000174
 8001658:	20000154 	.word	0x20000154
 800165c:	20000078 	.word	0x20000078
 8001660:	0800fd9c 	.word	0x0800fd9c

08001664 <io_nand_erase_block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af04      	add	r7, sp, #16
 800166a:	6078      	str	r0, [r7, #4]
//NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 800166c:	4b74      	ldr	r3, [pc, #464]	; (8001840 <io_nand_erase_block+0x1dc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d101      	bne.n	800167e <io_nand_erase_block+0x1a>

		return HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	e0dc      	b.n	8001838 <io_nand_erase_block+0x1d4>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <io_nand_erase_block+0x1dc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 80d2 	bne.w	8001832 <io_nand_erase_block+0x1ce>

		__HAL_LOCK(nandPort);
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <io_nand_erase_block+0x1dc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <io_nand_erase_block+0x3a>
 800169a:	2302      	movs	r3, #2
 800169c:	e0cc      	b.n	8001838 <io_nand_erase_block+0x1d4>
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <io_nand_erase_block+0x1e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(pAddress, nandPort);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	885b      	ldrh	r3, [r3, #2]
 80016c8:	4618      	mov	r0, r3
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	fb00 f303 	mul.w	r3, r0, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	440b      	add	r3, r1
 80016e2:	613b      	str	r3, [r7, #16]


		if (dbg > logOn)
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <io_nand_erase_block+0x1e4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d910      	bls.n	800170e <io_nand_erase_block+0xaa>
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	881b      	ldrh	r3, [r3, #0]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016f0:	461a      	mov	r2, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	885b      	ldrh	r3, [r3, #2]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016f6:	4619      	mov	r1, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	889b      	ldrh	r3, [r3, #4]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	9101      	str	r1, [sp, #4]
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <io_nand_erase_block+0x1e8>)
 8001706:	4952      	ldr	r1, [pc, #328]	; (8001850 <io_nand_erase_block+0x1ec>)
 8001708:	2001      	movs	r0, #1
 800170a:	f000 ff87 	bl	800261c <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8001712:	2220      	movs	r2, #32
 8001714:	2100      	movs	r1, #0
 8001716:	484f      	ldr	r0, [pc, #316]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001718:	f00b f946 	bl	800c9a8 <memset>
    tmpLen = 0;
 800171c:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <io_nand_erase_block+0x1f4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	2260      	movs	r2, #96	; 0x60
 800172a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800172c:	f3bf 8f4f 	dsb	sy
}
 8001730:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE0;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <io_nand_erase_block+0xe8>
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <io_nand_erase_block+0x1f4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	b2d1      	uxtb	r1, r2
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <io_nand_erase_block+0x1f4>)
 8001742:	7011      	strb	r1, [r2, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001748:	2160      	movs	r1, #96	; 0x60
 800174a:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001758:	f3bf 8f4f 	dsb	sy
}
 800175c:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <io_nand_erase_block+0x116>
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <io_nand_erase_block+0x1f4>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	b2d1      	uxtb	r1, r2
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <io_nand_erase_block+0x1f4>)
 800176e:	7011      	strb	r1, [r2, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	b2d9      	uxtb	r1, r3
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001778:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	0a1a      	lsrs	r2, r3, #8
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001788:	f3bf 8f4f 	dsb	sy
}
 800178c:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <io_nand_erase_block+0x148>
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	0a19      	lsrs	r1, r3, #8
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <io_nand_erase_block+0x1f4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	b2d0      	uxtb	r0, r2
 80017a0:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017a2:	7010      	strb	r0, [r2, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	b2c9      	uxtb	r1, r1
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <io_nand_erase_block+0x1f0>)
 80017aa:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	0c1a      	lsrs	r2, r3, #16
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ba:	f3bf 8f4f 	dsb	sy
}
 80017be:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <io_nand_erase_block+0x17a>
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	0c19      	lsrs	r1, r3, #16
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	b2d0      	uxtb	r0, r2
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017d4:	7010      	strb	r0, [r2, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <io_nand_erase_block+0x1f0>)
 80017dc:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	22d0      	movs	r2, #208	; 0xd0
 80017e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017e8:	f3bf 8f4f 	dsb	sy
}
 80017ec:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE1;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <io_nand_erase_block+0x1a4>
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	b2d1      	uxtb	r1, r2
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017fe:	7011      	strb	r1, [r2, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001804:	21d0      	movs	r1, #208	; 0xd0
 8001806:	5499      	strb	r1, [r3, r2]

		nandPort->State = HAL_NAND_STATE_READY;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <io_nand_erase_block+0x1dc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <io_nand_erase_block+0x1dc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

		if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <io_nand_erase_block+0x1d2>
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <io_nand_erase_block+0x1f4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	490a      	ldr	r1, [pc, #40]	; (8001854 <io_nand_erase_block+0x1f0>)
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <io_nand_erase_block+0x1e8>)
 800182c:	f7ff fa00 	bl	8000c30 <tmpPrint>
 8001830:	e001      	b.n	8001836 <io_nand_erase_block+0x1d2>

	} else {

		return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <io_nand_erase_block+0x1d4>

	}

	return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000078 	.word	0x20000078
 8001844:	200014a8 	.word	0x200014a8
 8001848:	20000068 	.word	0x20000068
 800184c:	0800fdb0 	.word	0x0800fdb0
 8001850:	0800d5e4 	.word	0x0800d5e4
 8001854:	20000154 	.word	0x20000154
 8001858:	20000174 	.word	0x20000174

0800185c <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t addr)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = addr / chipConf.PlaneSize;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	817b      	strh	r3, [r7, #10]
	a.Block = (addr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 8001874:	897b      	ldrh	r3, [r7, #10]
 8001876:	461a      	mov	r2, r3
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	81bb      	strh	r3, [r7, #12]
	a.Page  = addr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	8979      	ldrh	r1, [r7, #10]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	b29b      	uxth	r3, r3
 800189c:	fb11 f303 	smulbb	r3, r1, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	89b9      	ldrh	r1, [r7, #12]
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	fb11 f303 	smulbb	r3, r1, r3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	813b      	strh	r3, [r7, #8]

	return a;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	461a      	mov	r2, r3
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	6010      	str	r0, [r2, #0]
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	8093      	strh	r3, [r2, #4]
}
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200014c8 	.word	0x200014c8

080018dc <io_nand_read>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]

	if (io_nand_read_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fabf 	bl	8000e74 <io_nand_read_8b>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <io_nand_read+0x2e>
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <io_nand_read+0x38>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <io_nand_read+0x38>)
 8001908:	801a      	strh	r2, [r3, #0]

    return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000488 	.word	0x20000488

08001918 <io_nand_write>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]

	if (io_nand_write_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fc9f 	bl	8001270 <io_nand_write_8b>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <io_nand_write+0x2e>
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <io_nand_write+0x38>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b03      	ldr	r3, [pc, #12]	; (8001950 <io_nand_write+0x38>)
 8001944:	801a      	strh	r2, [r3, #0]

	return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000488 	.word	0x20000488

08001954 <io_nand_block_erase>:
//-----------------------------------------------------------------------------------------
void io_nand_block_erase(uint32_t addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff7a 	bl	800185c <io_uint32_to_flash_adr>

	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe79 	bl	8001664 <io_nand_erase_block>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <io_nand_block_erase+0x32>
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <io_nand_block_erase+0x3c>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b03      	ldr	r3, [pc, #12]	; (8001990 <io_nand_block_erase+0x3c>)
 8001984:	801a      	strh	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000488 	.word	0x20000488

08001994 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001998:	f3bf 8f4f 	dsb	sy
}
 800199c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <__NVIC_SystemReset+0x24>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019a6:	4904      	ldr	r1, [pc, #16]	; (80019b8 <__NVIC_SystemReset+0x24>)
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_SystemReset+0x28>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ae:	f3bf 8f4f 	dsb	sy
}
 80019b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <__NVIC_SystemReset+0x20>
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	05fa0004 	.word	0x05fa0004

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f003 f80f 	bl	80049e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 f889 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 fa2d 	bl	8001e2c <MX_GPIO_Init>
  MX_DMA_Init();
 80019d2:	f000 f9f5 	bl	8001dc0 <MX_DMA_Init>
  MX_TIM2_Init();
 80019d6:	f000 f97d 	bl	8001cd4 <MX_TIM2_Init>
  MX_RTC_Init();
 80019da:	f000 f8eb 	bl	8001bb4 <MX_RTC_Init>
  MX_FSMC_Init();
 80019de:	f000 facb 	bl	8001f78 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 80019e2:	f000 f9c3 	bl	8001d6c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80019e6:	f000 f93f 	bl	8001c68 <MX_SPI1_Init>
  MX_FATFS_Init();
 80019ea:	f007 fc51 	bl	8009290 <MX_FATFS_Init>
#ifdef SET_FAT_FS
	dbg = logDump;
#endif


  for (uint8_t i = 0; i < 4; i++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e01e      	b.n	8001a32 <main+0x72>
	  HAL_Delay(150);
 80019f4:	2096      	movs	r0, #150	; 0x96
 80019f6:	f003 f839 	bl	8004a6c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	482a      	ldr	r0, [pc, #168]	; (8001aa8 <main+0xe8>)
 8001a00:	f003 fed8 	bl	80057b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0a:	4828      	ldr	r0, [pc, #160]	; (8001aac <main+0xec>)
 8001a0c:	f003 fed2 	bl	80057b4 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001a10:	2096      	movs	r0, #150	; 0x96
 8001a12:	f003 f82b 	bl	8004a6c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	4823      	ldr	r0, [pc, #140]	; (8001aa8 <main+0xe8>)
 8001a1c:	f003 feca 	bl	80057b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a26:	4821      	ldr	r0, [pc, #132]	; (8001aac <main+0xec>)
 8001a28:	f003 fec4 	bl	80057b4 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d9dd      	bls.n	80019f4 <main+0x34>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <main+0xf0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f005 fe5f 	bl	8007700 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <main+0xf4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	491b      	ldr	r1, [pc, #108]	; (8001ab8 <main+0xf8>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f006 fad7 	bl	8007ffe <HAL_UART_Receive_IT>

  set_Date(epoch);
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <main+0xfc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fce7 	bl	8002428 <set_Date>

  ST7789_Reset();
 8001a5a:	f002 fa39 	bl	8003ed0 <ST7789_Reset>
  ST7789_Init(back_color);
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <main+0x100>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fa4e 	bl	8003f04 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a68:	f007 fdbe 	bl	80095e8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8001a6c:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <main+0x104>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2001      	movs	r0, #1
 8001a72:	f007 feb2 	bl	80097da <osSemaphoreNew>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <main+0x108>)
 8001a7a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQue_attributes);
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <main+0x10c>)
 8001a7e:	2102      	movs	r1, #2
 8001a80:	2010      	movs	r0, #16
 8001a82:	f007 ff33 	bl	80098ec <osMessageQueueNew>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <main+0x110>)
 8001a8a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8001a8c:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <main+0x114>)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <main+0x118>)
 8001a92:	f007 fdf5 	bl	8009680 <osThreadNew>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a10      	ldr	r2, [pc, #64]	; (8001adc <main+0x11c>)
 8001a9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a9c:	f007 fdca 	bl	8009634 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f002 ffe3 	bl	8004a6c <HAL_Delay>
 8001aa6:	e7fb      	b.n	8001aa0 <main+0xe0>
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	20000070 	.word	0x20000070
 8001ab4:	20000074 	.word	0x20000074
 8001ab8:	20001498 	.word	0x20001498
 8001abc:	20000064 	.word	0x20000064
 8001ac0:	2000149e 	.word	0x2000149e
 8001ac4:	0800fe00 	.word	0x0800fe00
 8001ac8:	20000484 	.word	0x20000484
 8001acc:	0800fde8 	.word	0x0800fde8
 8001ad0:	20000480 	.word	0x20000480
 8001ad4:	0800fdc4 	.word	0x0800fdc4
 8001ad8:	08002e01 	.word	0x08002e01
 8001adc:	2000047c 	.word	0x2000047c

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2230      	movs	r2, #48	; 0x30
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00a ff5a 	bl	800c9a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <SystemClock_Config+0xcc>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <SystemClock_Config+0xcc>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <SystemClock_Config+0xcc>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <SystemClock_Config+0xd0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <SystemClock_Config+0xd0>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <SystemClock_Config+0xd0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b46:	2302      	movs	r3, #2
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b50:	2308      	movs	r3, #8
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 ffe0 	bl	8005b2c <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b72:	f001 fff5 	bl	8003b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	230f      	movs	r3, #15
 8001b78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2105      	movs	r1, #5
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 fa41 	bl	800601c <HAL_RCC_ClockConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ba0:	f001 ffde 	bl	8003b60 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <MX_RTC_Init+0xac>)
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <MX_RTC_Init+0xb0>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <MX_RTC_Init+0xac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_RTC_Init+0xac>)
 8001bda:	227f      	movs	r2, #127	; 0x7f
 8001bdc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <MX_RTC_Init+0xac>)
 8001be0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001be4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_RTC_Init+0xac>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_RTC_Init+0xac>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_RTC_Init+0xac>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bf8:	4819      	ldr	r0, [pc, #100]	; (8001c60 <MX_RTC_Init+0xac>)
 8001bfa:	f004 fd43 	bl	8006684 <HAL_RTC_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001c04:	f001 ffac 	bl	8003b60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8001c08:	2315      	movs	r3, #21
 8001c0a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8001c0c:	2334      	movs	r3, #52	; 0x34
 8001c0e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8001c10:	230c      	movs	r3, #12
 8001c12:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <MX_RTC_Init+0xac>)
 8001c24:	f004 fda4 	bl	8006770 <HAL_RTC_SetTime>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001c2e:	f001 ff97 	bl	8003b60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c32:	2301      	movs	r3, #1
 8001c34:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c36:	2301      	movs	r3, #1
 8001c38:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_RTC_Init+0xac>)
 8001c4a:	f004 fe89 	bl	8006960 <HAL_RTC_SetDate>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001c54:	f001 ff84 	bl	8003b60 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000278 	.word	0x20000278
 8001c64:	40002800 	.word	0x40002800

08001c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <MX_SPI1_Init+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c88:	2202      	movs	r2, #2
 8001c8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001cba:	f004 ffe1 	bl	8006c80 <HAL_SPI_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cc4:	f001 ff4c 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000298 	.word	0x20000298
 8001cd0:	40013000 	.word	0x40013000

08001cd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001cfa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d08:	22f9      	movs	r2, #249	; 0xf9
 8001d0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d18:	4813      	ldr	r0, [pc, #76]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d1a:	f005 fca1 	bl	8007660 <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d24:	f001 ff1c 	bl	8003b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4619      	mov	r1, r3
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d36:	f005 fe5b 	bl	80079f0 <HAL_TIM_ConfigClockSource>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d40:	f001 ff0e 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d44:	2320      	movs	r3, #32
 8001d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_TIM2_Init+0x94>)
 8001d52:	f006 f877 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d5c:	f001 ff00 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000350 	.word	0x20000350

08001d6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_USART3_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d78:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_USART3_UART_Init+0x4c>)
 8001da4:	f006 f8de 	bl	8007f64 <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f001 fed7 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000398 	.word	0x20000398
 8001dbc:	40004800 	.word	0x40004800

08001dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_DMA_Init+0x68>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <MX_DMA_Init+0x68>)
 8001dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_DMA_Init+0x68>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_DMA_Init+0x68>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <MX_DMA_Init+0x68>)
 8001dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <MX_DMA_Init+0x68>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2105      	movs	r1, #5
 8001e02:	200e      	movs	r0, #14
 8001e04:	f002 ff0e 	bl	8004c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e08:	200e      	movs	r0, #14
 8001e0a:	f002 ff27 	bl	8004c5c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2103      	movs	r1, #3
 8001e12:	203b      	movs	r0, #59	; 0x3b
 8001e14:	f002 ff06 	bl	8004c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e18:	203b      	movs	r0, #59	; 0x3b
 8001e1a:	f002 ff1f 	bl	8004c5c <HAL_NVIC_EnableIRQ>

}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08c      	sub	sp, #48	; 0x30
 8001e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a47      	ldr	r2, [pc, #284]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a40      	ldr	r2, [pc, #256]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a32      	ldr	r2, [pc, #200]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <MX_GPIO_Init+0x13c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	210e      	movs	r1, #14
 8001eee:	481f      	ldr	r0, [pc, #124]	; (8001f6c <MX_GPIO_Init+0x140>)
 8001ef0:	f003 fc60 	bl	80057b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efa:	481d      	ldr	r0, [pc, #116]	; (8001f70 <MX_GPIO_Init+0x144>)
 8001efc:	f003 fc5a 	bl	80057b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	481b      	ldr	r0, [pc, #108]	; (8001f74 <MX_GPIO_Init+0x148>)
 8001f06:	f003 fc55 	bl	80057b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 8001f0a:	230e      	movs	r3, #14
 8001f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4812      	ldr	r0, [pc, #72]	; (8001f6c <MX_GPIO_Init+0x140>)
 8001f22:	f003 faab 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <MX_GPIO_Init+0x144>)
 8001f40:	f003 fa9c 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f50:	2301      	movs	r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_GPIO_Init+0x148>)
 8001f5c:	f003 fa8e 	bl	800547c <HAL_GPIO_Init>

}
 8001f60:	bf00      	nop
 8001f62:	3730      	adds	r7, #48	; 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40020800 	.word	0x40020800

08001f78 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <MX_FSMC_Init+0xd0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8001f92:	463b      	mov	r3, r7
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <MX_FSMC_Init+0xd8>)
 8001fa2:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc2:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 64;//16;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;//131072;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fe0:	2240      	movs	r2, #64	; 0x40
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_FSMC_Init+0xd4>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 1024;//134217728;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <MX_FSMC_Init+0xd4>)
 8001ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_FSMC_Init+0xd4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8002002:	23fc      	movs	r3, #252	; 0xfc
 8002004:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8002006:	23fc      	movs	r3, #252	; 0xfc
 8002008:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 800200a:	23fc      	movs	r3, #252	; 0xfc
 800200c:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 800200e:	23fc      	movs	r3, #252	; 0xfc
 8002010:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8002012:	23fc      	movs	r3, #252	; 0xfc
 8002014:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8002016:	23fc      	movs	r3, #252	; 0xfc
 8002018:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 800201a:	23fc      	movs	r3, #252	; 0xfc
 800201c:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 800201e:	23fc      	movs	r3, #252	; 0xfc
 8002020:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8002022:	463a      	mov	r2, r7
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_FSMC_Init+0xd4>)
 800202c:	f003 fbf5 	bl	800581a <HAL_NAND_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 8002036:	f001 fd93 	bl	8003b60 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */


  io_nand_init(&hnand1);
 800203a:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_FSMC_Init+0xd4>)
 800203c:	f7fe fe2e 	bl	8000c9c <io_nand_init>


  /* USER CODE END FSMC_Init 2 */
}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200014bc 	.word	0x200014bc
 800204c:	2000043c 	.word	0x2000043c
 8002050:	a0000060 	.word	0xa0000060

08002054 <pageIsEmpty>:

/* USER CODE BEGIN 4 */

//-------------------------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
bool ret = false;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <pageIsEmpty+0x5c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	4913      	ldr	r1, [pc, #76]	; (80020b4 <pageIsEmpty+0x60>)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fc37 	bl	80018dc <io_nand_read>
	if (!(devError & devNAND)) {
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <pageIsEmpty+0x64>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <pageIsEmpty+0x52>
		ret = true;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	e00b      	b.n	800209c <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <pageIsEmpty+0x60>)
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2bff      	cmp	r3, #255	; 0xff
 800208e:	d002      	beq.n	8002096 <pageIsEmpty+0x42>
				ret = false;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
				break;
 8002094:	e007      	b.n	80020a6 <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <pageIsEmpty+0x5c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3ee      	bcc.n	8002084 <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200014c8 	.word	0x200014c8
 80020b4:	200014e0 	.word	0x200014e0
 80020b8:	20000488 	.word	0x20000488

080020bc <get_qStat>:
//--------------------------------------------------------------------------------------------------------

#endif
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dc18      	bgt.n	80020fc <get_qStat+0x40>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f113 0f06 	cmn.w	r3, #6
 80020d0:	db2a      	blt.n	8002128 <get_qStat+0x6c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3306      	adds	r3, #6
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d826      	bhi.n	8002128 <get_qStat+0x6c>
 80020da:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <get_qStat+0x24>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	08002121 	.word	0x08002121
 80020e4:	0800211d 	.word	0x0800211d
 80020e8:	08002119 	.word	0x08002119
 80020ec:	08002115 	.word	0x08002115
 80020f0:	08002111 	.word	0x08002111
 80020f4:	0800210d 	.word	0x0800210d
 80020f8:	08002109 	.word	0x08002109
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002102:	4293      	cmp	r3, r2
 8002104:	d00e      	beq.n	8002124 <get_qStat+0x68>
 8002106:	e00f      	b.n	8002128 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <get_qStat+0x7c>)
 800210a:	e00e      	b.n	800212a <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <get_qStat+0x80>)
 800210e:	e00c      	b.n	800212a <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <get_qStat+0x84>)
 8002112:	e00a      	b.n	800212a <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <get_qStat+0x88>)
 8002116:	e008      	b.n	800212a <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <get_qStat+0x8c>)
 800211a:	e006      	b.n	800212a <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <get_qStat+0x90>)
 800211e:	e004      	b.n	800212a <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <get_qStat+0x94>)
 8002122:	e002      	b.n	800212a <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <get_qStat+0x98>)
 8002126:	e000      	b.n	800212a <get_qStat+0x6e>
	}

	return "UnknownError";
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <get_qStat+0x9c>)
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	0800d760 	.word	0x0800d760
 800213c:	0800d768 	.word	0x0800d768
 8002140:	0800d770 	.word	0x0800d770
 8002144:	0800d780 	.word	0x0800d780
 8002148:	0800d790 	.word	0x0800d790
 800214c:	0800d7a4 	.word	0x0800d7a4
 8002150:	0800d7b4 	.word	0x0800d7b4
 8002154:	0800d7c0 	.word	0x0800d7c0
 8002158:	0800d7d4 	.word	0x0800d7d4

0800215c <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d00a      	beq.n	8002182 <get_logName+0x26>
 800216c:	2b02      	cmp	r3, #2
 800216e:	dc0a      	bgt.n	8002186 <get_logName+0x2a>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <get_logName+0x1e>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d002      	beq.n	800217e <get_logName+0x22>
 8002178:	e005      	b.n	8002186 <get_logName+0x2a>
		case logOff:
			return "logOff";
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <get_logName+0x38>)
 800217c:	e004      	b.n	8002188 <get_logName+0x2c>
		case logOn:
			return "logOn";
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <get_logName+0x3c>)
 8002180:	e002      	b.n	8002188 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <get_logName+0x40>)
 8002184:	e000      	b.n	8002188 <get_logName+0x2c>
	}

	return "???";
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <get_logName+0x44>)
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	0800d7e4 	.word	0x0800d7e4
 8002198:	0800d7ec 	.word	0x0800d7ec
 800219c:	0800d7f4 	.word	0x0800d7f4
 80021a0:	0800d7fc 	.word	0x0800d7fc

080021a4 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 80021b0:	2330      	movs	r3, #48	; 0x30
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	2300      	movs	r3, #0
 80021ba:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <hex2bin+0x28>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <hex2bin+0x2c>
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	e0b2      	b.n	8002336 <hex2bin+0x192>
    if (len > 8) len = 8;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d901      	bls.n	80021da <hex2bin+0x36>
 80021d6:	2308      	movs	r3, #8
 80021d8:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f1c3 0308 	rsb	r3, r3, #8
 80021e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 80021e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80021e8:	f107 0210 	add.w	r2, r7, #16
 80021ec:	4413      	add	r3, r2
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00a fbca 	bl	800c98c <memcpy>

    k = j = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002202:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8002206:	e090      	b.n	800232a <hex2bin+0x186>
        jk = j + 2;
 8002208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800220c:	3302      	adds	r3, #2
 800220e:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8002210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002218:	e066      	b.n	80022e8 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800221a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800221e:	3328      	adds	r3, #40	; 0x28
 8002220:	443b      	add	r3, r7
 8002222:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002226:	2b2f      	cmp	r3, #47	; 0x2f
 8002228:	d918      	bls.n	800225c <hex2bin+0xb8>
 800222a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800222e:	3328      	adds	r3, #40	; 0x28
 8002230:	443b      	add	r3, r7
 8002232:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002236:	2b39      	cmp	r3, #57	; 0x39
 8002238:	d810      	bhi.n	800225c <hex2bin+0xb8>
 800223a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800223e:	3328      	adds	r3, #40	; 0x28
 8002240:	443b      	add	r3, r7
 8002242:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	3a30      	subs	r2, #48	; 0x30
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	3328      	adds	r3, #40	; 0x28
 8002254:	443b      	add	r3, r7
 8002256:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800225a:	e040      	b.n	80022de <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 800225c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002260:	3328      	adds	r3, #40	; 0x28
 8002262:	443b      	add	r3, r7
 8002264:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002268:	2b60      	cmp	r3, #96	; 0x60
 800226a:	d918      	bls.n	800229e <hex2bin+0xfa>
 800226c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002270:	3328      	adds	r3, #40	; 0x28
 8002272:	443b      	add	r3, r7
 8002274:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002278:	2b66      	cmp	r3, #102	; 0x66
 800227a:	d810      	bhi.n	800229e <hex2bin+0xfa>
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002280:	3328      	adds	r3, #40	; 0x28
 8002282:	443b      	add	r3, r7
 8002284:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	3a57      	subs	r2, #87	; 0x57
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	3328      	adds	r3, #40	; 0x28
 8002296:	443b      	add	r3, r7
 8002298:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800229c:	e01f      	b.n	80022de <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 800229e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022a2:	3328      	adds	r3, #40	; 0x28
 80022a4:	443b      	add	r3, r7
 80022a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80022aa:	2b40      	cmp	r3, #64	; 0x40
 80022ac:	d917      	bls.n	80022de <hex2bin+0x13a>
 80022ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b2:	3328      	adds	r3, #40	; 0x28
 80022b4:	443b      	add	r3, r7
 80022b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80022ba:	2b46      	cmp	r3, #70	; 0x46
 80022bc:	d80f      	bhi.n	80022de <hex2bin+0x13a>
 80022be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c2:	3328      	adds	r3, #40	; 0x28
 80022c4:	443b      	add	r3, r7
 80022c6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80022ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	3a37      	subs	r2, #55	; 0x37
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	3328      	adds	r3, #40	; 0x28
 80022d8:	443b      	add	r3, r7
 80022da:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 80022de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022ec:	7ffb      	ldrb	r3, [r7, #31]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d393      	bcc.n	800221a <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 80022f2:	7b3b      	ldrb	r3, [r7, #12]
 80022f4:	011a      	lsls	r2, r3, #4
 80022f6:	7b7b      	ldrb	r3, [r7, #13]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8002300:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002304:	f1c3 0303 	rsb	r3, r3, #3
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	6a3a      	ldr	r2, [r7, #32]
 8002312:	4313      	orrs	r3, r2
 8002314:	623b      	str	r3, [r7, #32]
        k++;
 8002316:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800231a:	3301      	adds	r3, #1
 800231c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8002320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002324:	3302      	adds	r3, #2
 8002326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800232a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800232e:	2b03      	cmp	r3, #3
 8002330:	f67f af6a 	bls.w	8002208 <hex2bin+0x64>
    }

    return ret;
 8002334:	6a3b      	ldr	r3, [r7, #32]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
	if (on)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <errLedOn+0x34>)
 8002358:	f003 fa2c 	bl	80057b4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 800235c:	e005      	b.n	800236a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <errLedOn+0x34>)
 8002366:	f003 fa25 	bl	80057b4 <HAL_GPIO_WritePin>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40020c00 	.word	0x40020c00

08002378 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	return secCounter;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <get_secCounter+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000048c 	.word	0x2000048c

08002390 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
	secCounter++;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <inc_secCounter+0x18>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <inc_secCounter+0x18>)
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	2000048c 	.word	0x2000048c

080023ac <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	return msCounter;
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <get_msCounter+0x18>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000490 	.word	0x20000490

080023c8 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	msCounter++;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <inc_msCounter+0x20>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	1c50      	adds	r0, r2, #1
 80023d4:	f143 0100 	adc.w	r1, r3, #0
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <inc_msCounter+0x20>)
 80023da:	e9c3 0100 	strd	r0, r1, [r3]
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	20000490 	.word	0x20000490

080023ec <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 80023f4:	f7ff ffc0 	bl	8002378 <get_secCounter>
 80023f8:	4602      	mov	r2, r0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800240e:	f7ff ffb3 	bl	8002378 <get_secCounter>
 8002412:	4602      	mov	r2, r0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4293      	cmp	r3, r2
 8002418:	bf94      	ite	ls
 800241a:	2301      	movls	r3, #1
 800241c:	2300      	movhi	r3, #0
 800241e:	b2db      	uxtb	r3, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	2000      	movs	r0, #0
 8002434:	460a      	mov	r2, r1
 8002436:	4603      	mov	r3, r0
 8002438:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 800243c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f00a f9ce 	bl	800c7e8 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 800244c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244e:	b2db      	uxtb	r3, r3
 8002450:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	b2db      	uxtb	r3, r3
 8002460:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002464:	b2db      	uxtb	r3, r3
 8002466:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <set_Date+0xb0>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4413      	add	r3, r2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	b2db      	uxtb	r3, r3
 800247a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	b2db      	uxtb	r3, r3
 8002480:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2200      	movs	r2, #0
 8002488:	4619      	mov	r1, r3
 800248a:	4814      	ldr	r0, [pc, #80]	; (80024dc <set_Date+0xb4>)
 800248c:	f004 f970 	bl	8006770 <HAL_RTC_SetTime>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <set_Date+0x7e>
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <set_Date+0xb8>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <set_Date+0xb8>)
 80024a2:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80024a4:	e014      	b.n	80024d0 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	2200      	movs	r2, #0
 80024ac:	4619      	mov	r1, r3
 80024ae:	480b      	ldr	r0, [pc, #44]	; (80024dc <set_Date+0xb4>)
 80024b0:	f004 fa56 	bl	8006960 <HAL_RTC_SetDate>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <set_Date+0xa2>
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <set_Date+0xb8>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <set_Date+0xb8>)
 80024c6:	801a      	strh	r2, [r3, #0]
}
 80024c8:	e002      	b.n	80024d0 <set_Date+0xa8>
			setDate = true;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <set_Date+0xbc>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3750      	adds	r7, #80	; 0x50
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000149d 	.word	0x2000149d
 80024dc:	20000278 	.word	0x20000278
 80024e0:	20000488 	.word	0x20000488
 80024e4:	2000149c 	.word	0x2000149c

080024e8 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b093      	sub	sp, #76	; 0x4c
 80024ec:	af04      	add	r7, sp, #16
 80024ee:	6078      	str	r0, [r7, #4]
int ret = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80024f4:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <sec2str+0x110>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d040      	beq.n	8002584 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002502:	f7ff ff39 	bl	8002378 <get_secCounter>
 8002506:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <sec2str+0x114>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	4a39      	ldr	r2, [pc, #228]	; (80025fc <sec2str+0x114>)
 8002518:	fba2 1203 	umull	r1, r2, r2, r3
 800251c:	0c12      	lsrs	r2, r2, #16
 800251e:	4938      	ldr	r1, [pc, #224]	; (8002600 <sec2str+0x118>)
 8002520:	fb01 f202 	mul.w	r2, r1, r2
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <sec2str+0x11c>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	0adb      	lsrs	r3, r3, #11
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	4a33      	ldr	r2, [pc, #204]	; (8002604 <sec2str+0x11c>)
 8002538:	fba2 1203 	umull	r1, r2, r2, r3
 800253c:	0ad2      	lsrs	r2, r2, #11
 800253e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002542:	fb01 f202 	mul.w	r2, r1, r2
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <sec2str+0x120>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <sec2str+0x120>)
 800255a:	fba3 1302 	umull	r1, r3, r3, r2
 800255e:	0959      	lsrs	r1, r3, #5
 8002560:	460b      	mov	r3, r1
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a5b      	subs	r3, r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002578:	4924      	ldr	r1, [pc, #144]	; (800260c <sec2str+0x124>)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f00a fb2a 	bl	800cbd4 <siprintf>
 8002580:	6378      	str	r0, [r7, #52]	; 0x34
 8002582:	e034      	b.n	80025ee <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	4820      	ldr	r0, [pc, #128]	; (8002610 <sec2str+0x128>)
 800258e:	f004 fa6b 	bl	8006a68 <HAL_RTC_GetDate>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <sec2str+0xc0>
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <sec2str+0x12c>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <sec2str+0x12c>)
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	e022      	b.n	80025ee <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4817      	ldr	r0, [pc, #92]	; (8002610 <sec2str+0x128>)
 80025b2:	f004 f977 	bl	80068a4 <HAL_RTC_GetTime>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <sec2str+0xe4>
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <sec2str+0x12c>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <sec2str+0x12c>)
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e010      	b.n	80025ee <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80025ce:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80025d0:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80025d2:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80025d4:	7c3b      	ldrb	r3, [r7, #16]
 80025d6:	7c7a      	ldrb	r2, [r7, #17]
 80025d8:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80025da:	9102      	str	r1, [sp, #8]
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4623      	mov	r3, r4
 80025e2:	4602      	mov	r2, r0
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <sec2str+0x130>)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f00a faf4 	bl	800cbd4 <siprintf>
 80025ec:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	373c      	adds	r7, #60	; 0x3c
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	2000149c 	.word	0x2000149c
 80025fc:	c22e4507 	.word	0xc22e4507
 8002600:	00015180 	.word	0x00015180
 8002604:	91a2b3c5 	.word	0x91a2b3c5
 8002608:	88888889 	.word	0x88888889
 800260c:	0800d800 	.word	0x0800d800
 8002610:	20000278 	.word	0x20000278
 8002614:	20000488 	.word	0x20000488
 8002618:	0800d818 	.word	0x0800d818

0800261c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 800261c:	b40e      	push	{r1, r2, r3}
 800261e:	b590      	push	{r4, r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262c:	613b      	str	r3, [r7, #16]
int dl = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002632:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <Report+0xb4>)
 8002634:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <Report+0x48>
		dl = sec2str(buf);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff ff50 	bl	80024e8 <sec2str>
 8002648:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7fd fdc0 	bl	80001d0 <strlen>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <Report+0xb8>)
 800265a:	6810      	ldr	r0, [r2, #0]
 800265c:	6018      	str	r0, [r3, #0]
		dl += 3;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3303      	adds	r3, #3
 8002662:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002668:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	18d0      	adds	r0, r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	1ad1      	subs	r1, r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	f00a fbd1 	bl	800ce20 <vsniprintf>

	uartRdy = false;
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <Report+0xbc>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <Report+0xc0>)
 8002686:	681c      	ldr	r4, [r3, #0]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fd fda1 	bl	80001d0 <strlen>
 800268e:	4603      	mov	r3, r0
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	4620      	mov	r0, r4
 8002698:	f005 fce2 	bl	8008060 <HAL_UART_Transmit_DMA>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <Report+0x94>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <Report+0xc4>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <Report+0xc4>)
 80026ae:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80026b0:	bf00      	nop
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <Report+0xbc>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f8      	bne.n	80026b2 <Report+0x96>

	va_end(args);

	return 0;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80026cc:	b003      	add	sp, #12
 80026ce:	4770      	bx	lr
 80026d0:	20000498 	.word	0x20000498
 80026d4:	0800d834 	.word	0x0800d834
 80026d8:	20000060 	.word	0x20000060
 80026dc:	20000074 	.word	0x20000074
 80026e0:	20000488 	.word	0x20000488

080026e4 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b090      	sub	sp, #64	; 0x40
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4aad      	ldr	r2, [pc, #692]	; (80029a8 <HAL_UART_RxCpltCallback+0x2c4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	f040 826f 	bne.w	8002bd6 <HAL_UART_RxCpltCallback+0x4f2>

		rxBuf[ruk++] = (char)rxByte;
 80026f8:	4bac      	ldr	r3, [pc, #688]	; (80029ac <HAL_UART_RxCpltCallback+0x2c8>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	b291      	uxth	r1, r2
 8002700:	4aaa      	ldr	r2, [pc, #680]	; (80029ac <HAL_UART_RxCpltCallback+0x2c8>)
 8002702:	8011      	strh	r1, [r2, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002708:	7819      	ldrb	r1, [r3, #0]
 800270a:	4baa      	ldr	r3, [pc, #680]	; (80029b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800270c:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 800270e:	4ba8      	ldr	r3, [pc, #672]	; (80029b0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b0a      	cmp	r3, #10
 8002714:	f040 825a 	bne.w	8002bcc <HAL_UART_RxCpltCallback+0x4e8>
			rxBuf[--ruk] = '\0';
 8002718:	4ba4      	ldr	r3, [pc, #656]	; (80029ac <HAL_UART_RxCpltCallback+0x2c8>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4ba2      	ldr	r3, [pc, #648]	; (80029ac <HAL_UART_RxCpltCallback+0x2c8>)
 8002722:	801a      	strh	r2, [r3, #0]
 8002724:	4ba1      	ldr	r3, [pc, #644]	; (80029ac <HAL_UART_RxCpltCallback+0x2c8>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4ba2      	ldr	r3, [pc, #648]	; (80029b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800273a:	4b9f      	ldr	r3, [pc, #636]	; (80029b8 <HAL_UART_RxCpltCallback+0x2d4>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002740:	2300      	movs	r3, #0
 8002742:	83bb      	strh	r3, [r7, #28]
			int8_t idx = -1;
 8002744:	23ff      	movs	r3, #255	; 0xff
 8002746:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			if (strlen(rxBuf) >= 4) {
 800274a:	489a      	ldr	r0, [pc, #616]	; (80029b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800274c:	f7fd fd40 	bl	80001d0 <strlen>
 8002750:	4603      	mov	r3, r0
 8002752:	2b03      	cmp	r3, #3
 8002754:	f240 8210 	bls.w	8002b78 <HAL_UART_RxCpltCallback+0x494>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800275e:	e018      	b.n	8002792 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002760:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002764:	4a95      	ldr	r2, [pc, #596]	; (80029bc <HAL_UART_RxCpltCallback+0x2d8>)
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	4619      	mov	r1, r3
 800276c:	4891      	ldr	r0, [pc, #580]	; (80029b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800276e:	f00a fa88 	bl	800cc82 <strstr>
 8002772:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_UART_RxCpltCallback+0xa0>
														  //"check:"
														  //"area:"
														  //"save:"
														  //"log:"
														  //"help"
						idx = i;
 800277a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800277e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002782:	e00a      	b.n	800279a <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002784:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002788:	b2db      	uxtb	r3, r3
 800278a:	3301      	adds	r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002792:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002796:	2b0a      	cmp	r3, #10
 8002798:	dde2      	ble.n	8002760 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279c:	4a85      	ldr	r2, [pc, #532]	; (80029b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f040 81ea 	bne.w	8002b78 <HAL_UART_RxCpltCallback+0x494>
 80027a4:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ac:	f000 81e4 	beq.w	8002b78 <HAL_UART_RxCpltCallback+0x494>
					nandLen = MAX_LEN_DATA;//256;
 80027b0:	4b83      	ldr	r3, [pc, #524]	; (80029c0 <HAL_UART_RxCpltCallback+0x2dc>)
 80027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b6:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 80027b8:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80027bc:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <HAL_UART_RxCpltCallback+0x2d8>)
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fd04 	bl	80001d0 <strlen>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027cc:	4413      	add	r3, r2
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d8:	2300      	movs	r3, #0
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 80027dc:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80027e0:	2b0a      	cmp	r3, #10
 80027e2:	f200 81a6 	bhi.w	8002b32 <HAL_UART_RxCpltCallback+0x44e>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <HAL_UART_RxCpltCallback+0x108>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002819 	.word	0x08002819
 80027f0:	08002821 	.word	0x08002821
 80027f4:	08002879 	.word	0x08002879
 80027f8:	080028f5 	.word	0x080028f5
 80027fc:	08002915 	.word	0x08002915
 8002800:	08002a81 	.word	0x08002a81
 8002804:	08002ab7 	.word	0x08002ab7
 8002808:	08002ad9 	.word	0x08002ad9
 800280c:	08002819 	.word	0x08002819
 8002810:	08002819 	.word	0x08002819
 8002814:	08002819 	.word	0x08002819
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 8002818:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_UART_RxCpltCallback+0x2d4>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
						break;
 800281e:	e188      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002820:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002822:	f7fd fcd5 	bl	80001d0 <strlen>
 8002826:	4603      	mov	r3, r0
 8002828:	2b09      	cmp	r3, #9
 800282a:	d802      	bhi.n	8002832 <HAL_UART_RxCpltCallback+0x14e>
								qcmd.attr = 1;
 800282c:	2301      	movs	r3, #1
 800282e:	777b      	strb	r3, [r7, #29]
 8002830:	e01e      	b.n	8002870 <HAL_UART_RxCpltCallback+0x18c>
							} else {
								uki = strchr(uk, ':');
 8002832:	213a      	movs	r1, #58	; 0x3a
 8002834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002836:	f00a f9fc 	bl	800cc32 <strchr>
 800283a:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 800283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_UART_RxCpltCallback+0x178>
									tZone = (uint8_t)atol(uki + 1);
 8002842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002844:	3301      	adds	r3, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f009 ffc4 	bl	800c7d4 <atol>
 800284c:	4603      	mov	r3, r0
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_UART_RxCpltCallback+0x2e0>)
 8002852:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e002      	b.n	8002862 <HAL_UART_RxCpltCallback+0x17e>
								} else {
									tZone = 0;
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_UART_RxCpltCallback+0x2e0>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002864:	f009 ffb6 	bl	800c7d4 <atol>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_UART_RxCpltCallback+0x2e4>)
 800286e:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002870:	4b51      	ldr	r3, [pc, #324]	; (80029b8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
						break;
 8002876:	e15c      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8002878:	213a      	movs	r1, #58	; 0x3a
 800287a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800287c:	f00a f9d9 	bl	800cc32 <strchr>
 8002880:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 8002888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288a:	3301      	adds	r3, #1
 800288c:	4618      	mov	r0, r3
 800288e:	f009 ffa1 	bl	800c7d4 <atol>
 8002892:	4603      	mov	r3, r0
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_UART_RxCpltCallback+0x2dc>)
 8002898:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 80028a0:	494a      	ldr	r1, [pc, #296]	; (80029cc <HAL_UART_RxCpltCallback+0x2e8>)
 80028a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028a4:	f00a f9ed 	bl	800cc82 <strstr>
 80028a8:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00f      	beq.n	80028d0 <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	3302      	adds	r3, #2
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 80028b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028b8:	f7fd fc8a 	bl	80001d0 <strlen>
 80028bc:	4603      	mov	r3, r0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028c4:	f7ff fc6e 	bl	80021a4 <hex2bin>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4a41      	ldr	r2, [pc, #260]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e006      	b.n	80028de <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 80028d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028d2:	f009 ff7f 	bl	800c7d4 <atol>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 80028dc:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <HAL_UART_RxCpltCallback+0x2f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 80028ea:	6013      	str	r3, [r2, #0]
							check = true;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80028f2:	e11e      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						case cmdNext://"next";
							//if (nandAdr < devAdr) nandAdr = devAdr;
							nandLen = 512;
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_UART_RxCpltCallback+0x2dc>)
 80028f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fa:	801a      	strh	r2, [r3, #0]
							nandAdr += nandLen;
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_UART_RxCpltCallback+0x2dc>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 800290a:	6013      	str	r3, [r2, #0]
							cmd_flag = 1;//check = true;
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_UART_RxCpltCallback+0x2d4>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
						break;
 8002912:	e10e      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 800291a:	492c      	ldr	r1, [pc, #176]	; (80029cc <HAL_UART_RxCpltCallback+0x2e8>)
 800291c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800291e:	f00a f9b0 	bl	800cc82 <strstr>
 8002922:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_UART_RxCpltCallback+0x25c>
								if (uki == uk) {
 800292a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292e:	429a      	cmp	r2, r3
 8002930:	d108      	bne.n	8002944 <HAL_UART_RxCpltCallback+0x260>
									uki += 2;
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	3302      	adds	r3, #2
 8002936:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800293e:	e001      	b.n	8002944 <HAL_UART_RxCpltCallback+0x260>
								}
							} else uki = uk;
 8002940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002944:	213a      	movs	r1, #58	; 0x3a
 8002946:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002948:	f00a f973 	bl	800cc32 <strchr>
 800294c:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80eb 	beq.w	8002b2c <HAL_UART_RxCpltCallback+0x448>
								ukb = uke + 1;
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	3301      	adds	r3, #1
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	2210      	movs	r2, #16
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f00a f81f 	bl	800c9a8 <memset>
								memcpy(tmp, uki, uke - uki);
 800296a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	461a      	mov	r2, r3
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002978:	4618      	mov	r0, r3
 800297a:	f00a f807 	bl	800c98c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 800297e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <HAL_UART_RxCpltCallback+0x2f4>
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fc20 	bl	80001d0 <strlen>
 8002990:	4603      	mov	r3, r0
 8002992:	b2da      	uxtb	r2, r3
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fc02 	bl	80021a4 <hex2bin>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <HAL_UART_RxCpltCallback+0x2ec>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e020      	b.n	80029ea <HAL_UART_RxCpltCallback+0x306>
 80029a8:	40004800 	.word	0x40004800
 80029ac:	2000149a 	.word	0x2000149a
 80029b0:	20001498 	.word	0x20001498
 80029b4:	20000c98 	.word	0x20000c98
 80029b8:	2000048a 	.word	0x2000048a
 80029bc:	20000008 	.word	0x20000008
 80029c0:	200014b0 	.word	0x200014b0
 80029c4:	2000149d 	.word	0x2000149d
 80029c8:	20000064 	.word	0x20000064
 80029cc:	0800d838 	.word	0x0800d838
 80029d0:	200014ac 	.word	0x200014ac
 80029d4:	200014a8 	.word	0x200014a8
								else nandAdr = atol(tmp);
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4618      	mov	r0, r3
 80029de:	f009 fef9 	bl	800c7d4 <atol>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b7e      	ldr	r3, [pc, #504]	; (8002be0 <HAL_UART_RxCpltCallback+0x4fc>)
 80029e8:	601a      	str	r2, [r3, #0]
								uki = ukb;
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 80029ee:	213a      	movs	r1, #58	; 0x3a
 80029f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029f2:	f00a f91e 	bl	800cc32 <strchr>
 80029f6:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_UART_RxCpltCallback+0x332>
									nandLen = atol(uke + 1);
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	3301      	adds	r3, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f009 fee6 	bl	800c7d4 <atol>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_UART_RxCpltCallback+0x500>)
 8002a0e:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002a16:	4974      	ldr	r1, [pc, #464]	; (8002be8 <HAL_UART_RxCpltCallback+0x504>)
 8002a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a1a:	f00a f932 	bl	800cc82 <strstr>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_UART_RxCpltCallback+0x34e>
									ukb += 2;
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	3302      	adds	r3, #2
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a30:	e002      	b.n	8002a38 <HAL_UART_RxCpltCallback+0x354>
								} else hex = false;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <HAL_UART_RxCpltCallback+0x378>
 8002a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a42:	f7fd fbc5 	bl	80001d0 <strlen>
 8002a46:	4603      	mov	r3, r0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4e:	f7ff fba9 	bl	80021a4 <hex2bin>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_UART_RxCpltCallback+0x508>)
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e006      	b.n	8002a6a <HAL_UART_RxCpltCallback+0x386>
									else nandByte = (uint8_t)atol(ukb);
 8002a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5e:	f009 feb9 	bl	800c7d4 <atol>
 8002a62:	4603      	mov	r3, r0
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_UART_RxCpltCallback+0x508>)
 8002a68:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_UART_RxCpltCallback+0x4fc>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b60      	ldr	r3, [pc, #384]	; (8002bf0 <HAL_UART_RxCpltCallback+0x50c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a5a      	ldr	r2, [pc, #360]	; (8002be0 <HAL_UART_RxCpltCallback+0x4fc>)
 8002a76:	6013      	str	r3, [r2, #0]
								check = true;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 8002a7e:	e055      	b.n	8002b2c <HAL_UART_RxCpltCallback+0x448>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002a80:	495c      	ldr	r1, [pc, #368]	; (8002bf4 <HAL_UART_RxCpltCallback+0x510>)
 8002a82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a84:	f00a f8fd 	bl	800cc82 <strstr>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_UART_RxCpltCallback+0x3b0>
								qcmd.attr = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	777b      	strb	r3, [r7, #29]
 8002a92:	e00c      	b.n	8002aae <HAL_UART_RxCpltCallback+0x3ca>
							} else {
								uint32_t blk = atol(uk);
 8002a94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a96:	f009 fe9d 	bl	800c7d4 <atol>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002a9e:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <HAL_UART_RxCpltCallback+0x514>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d202      	bcs.n	8002aae <HAL_UART_RxCpltCallback+0x3ca>
 8002aa8:	4a54      	ldr	r2, [pc, #336]	; (8002bfc <HAL_UART_RxCpltCallback+0x518>)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002aae:	4b54      	ldr	r3, [pc, #336]	; (8002c00 <HAL_UART_RxCpltCallback+0x51c>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
						break;
 8002ab4:	e03d      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 8002ab6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ab8:	f009 fe8c 	bl	800c7d4 <atol>
 8002abc:	4603      	mov	r3, r0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//128MB / 2K = 65536 - pages
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_UART_RxCpltCallback+0x520>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d232      	bcs.n	8002b30 <HAL_UART_RxCpltCallback+0x44c>
								nandPage = page;
 8002aca:	4a4f      	ldr	r2, [pc, #316]	; (8002c08 <HAL_UART_RxCpltCallback+0x524>)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_UART_RxCpltCallback+0x51c>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8002ad6:	e02b      	b.n	8002b30 <HAL_UART_RxCpltCallback+0x44c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 8002ade:	494b      	ldr	r1, [pc, #300]	; (8002c0c <HAL_UART_RxCpltCallback+0x528>)
 8002ae0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ae2:	f00a f8ce 	bl	800cc82 <strstr>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_UART_RxCpltCallback+0x410>
								lg = logOff;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002af2:	e014      	b.n	8002b1e <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "on")) {
 8002af4:	4946      	ldr	r1, [pc, #280]	; (8002c10 <HAL_UART_RxCpltCallback+0x52c>)
 8002af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002af8:	f00a f8c3 	bl	800cc82 <strstr>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UART_RxCpltCallback+0x426>
								lg = logOn;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002b08:	e009      	b.n	8002b1e <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "dump")) {
 8002b0a:	4942      	ldr	r1, [pc, #264]	; (8002c14 <HAL_UART_RxCpltCallback+0x530>)
 8002b0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b0e:	f00a f8b8 	bl	800cc82 <strstr>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_UART_RxCpltCallback+0x43a>
								lg = logDump;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 8002b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b22:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_UART_RxCpltCallback+0x51c>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
						}
						break;
 8002b2a:	e002      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002b2c:	bf00      	nop
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002b30:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002b32:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002b36:	773b      	strb	r3, [r7, #28]
					if (check) {
 8002b38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <HAL_UART_RxCpltCallback+0x494>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002b40:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_UART_RxCpltCallback+0x500>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_UART_RxCpltCallback+0x4fc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_UART_RxCpltCallback+0x534>)
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_UART_RxCpltCallback+0x50c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	440b      	add	r3, r1
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d30b      	bcc.n	8002b72 <HAL_UART_RxCpltCallback+0x48e>
							nandLen = total_bytes - nandAdr - 1;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_UART_RxCpltCallback+0x534>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_UART_RxCpltCallback+0x4fc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_UART_RxCpltCallback+0x500>)
 8002b70:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_UART_RxCpltCallback+0x51c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (idx == -1) {
 8002b78:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_RxCpltCallback+0x4a8>
				qcmd.cmd = cmdErr;
 8002b82:	230b      	movs	r3, #11
 8002b84:	773b      	strb	r3, [r7, #28]
				cmd_flag = 1;
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_UART_RxCpltCallback+0x51c>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
			}
			if (cmd_flag) {
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_UART_RxCpltCallback+0x51c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_UART_RxCpltCallback+0x4dc>
				if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_UART_RxCpltCallback+0x538>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 011c 	add.w	r1, r7, #28
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	f006 ff18 	bl	80099d4 <osMessageQueuePut>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_UART_RxCpltCallback+0x53c>)
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_UART_RxCpltCallback+0x53c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_UART_RxCpltCallback+0x4dc>
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_UART_RxCpltCallback+0x540>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_UART_RxCpltCallback+0x540>)
 8002bbe:	801a      	strh	r2, [r3, #0]
			}
			ruk = 0;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_UART_RxCpltCallback+0x544>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_UART_RxCpltCallback+0x548>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4918      	ldr	r1, [pc, #96]	; (8002c30 <HAL_UART_RxCpltCallback+0x54c>)
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f005 fa14 	bl	8007ffe <HAL_UART_Receive_IT>
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	3740      	adds	r7, #64	; 0x40
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200014ac 	.word	0x200014ac
 8002be4:	200014b0 	.word	0x200014b0
 8002be8:	0800d838 	.word	0x0800d838
 8002bec:	20000084 	.word	0x20000084
 8002bf0:	200014a8 	.word	0x200014a8
 8002bf4:	0800d83c 	.word	0x0800d83c
 8002bf8:	200014c8 	.word	0x200014c8
 8002bfc:	200014b4 	.word	0x200014b4
 8002c00:	2000048a 	.word	0x2000048a
 8002c04:	200014a0 	.word	0x200014a0
 8002c08:	200014b8 	.word	0x200014b8
 8002c0c:	0800d840 	.word	0x0800d840
 8002c10:	0800d844 	.word	0x0800d844
 8002c14:	0800d848 	.word	0x0800d848
 8002c18:	200014a4 	.word	0x200014a4
 8002c1c:	20000480 	.word	0x20000480
 8002c20:	200024e0 	.word	0x200024e0
 8002c24:	20000488 	.word	0x20000488
 8002c28:	2000149a 	.word	0x2000149a
 8002c2c:	20000c98 	.word	0x20000c98
 8002c30:	20001498 	.word	0x20001498

08002c34 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_UART_TxCpltCallback+0x24>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d102      	bne.n	8002c4c <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_UART_TxCpltCallback+0x28>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	20000060 	.word	0x20000060

08002c60 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_SPI_TxCpltCallback+0x24>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d102      	bne.n	8002c78 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_SPI_TxCpltCallback+0x28>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
	}
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40013000 	.word	0x40013000
 8002c88:	20000061 	.word	0x20000061

08002c8c <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60ba      	str	r2, [r7, #8]
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d10e      	bne.n	8002cce <showBuf+0x42>
		if (rd) {
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <showBuf+0x154>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <showBuf+0x154>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc8:	e001      	b.n	8002cce <showBuf+0x42>
		} else ind = max_ind;
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d271      	bcs.n	8002dba <showBuf+0x12e>
		bool done = false;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cf2:	fb01 f202 	mul.w	r2, r1, r2
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <showBuf+0x76>
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <showBuf+0x158>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002d08:	e046      	b.n	8002d98 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002d0a:	4836      	ldr	r0, [pc, #216]	; (8002de4 <showBuf+0x158>)
 8002d0c:	f7fd fa60 	bl	80001d0 <strlen>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <showBuf+0x158>)
 8002d14:	4413      	add	r3, r2
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4933      	ldr	r1, [pc, #204]	; (8002de8 <showBuf+0x15c>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f009 ff5a 	bl	800cbd4 <siprintf>
			for (int i = 0; i < step; i++) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e01d      	b.n	8002d62 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002d26:	482f      	ldr	r0, [pc, #188]	; (8002de4 <showBuf+0x158>)
 8002d28:	f7fd fa52 	bl	80001d0 <strlen>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <showBuf+0x158>)
 8002d30:	1898      	adds	r0, r3, r2
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	4413      	add	r3, r2
 8002d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	492a      	ldr	r1, [pc, #168]	; (8002dec <showBuf+0x160>)
 8002d42:	f009 ff47 	bl	800cbd4 <siprintf>
				ix++;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d103      	bne.n	8002d5c <showBuf+0xd0>
					done = true;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002d5a:	e006      	b.n	8002d6a <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	dbdd      	blt.n	8002d26 <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <showBuf+0x164>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	481c      	ldr	r0, [pc, #112]	; (8002de4 <showBuf+0x158>)
 8002d72:	f009 ff4f 	bl	800cc14 <strcat>
			adr += step;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d82:	4413      	add	r3, r2
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <showBuf+0x10c>
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1b1      	bne.n	8002d0a <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <showBuf+0x168>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d014      	beq.n	8002dd8 <showBuf+0x14c>
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <showBuf+0x158>)
 8002db0:	4911      	ldr	r1, [pc, #68]	; (8002df8 <showBuf+0x16c>)
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7ff fc32 	bl	800261c <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002db8:	e00e      	b.n	8002dd8 <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <showBuf+0x168>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <showBuf+0x14c>
 8002dc2:	7bbb      	ldrb	r3, [r7, #14]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <showBuf+0x164>)
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	9201      	str	r2, [sp, #4]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd0:	490a      	ldr	r1, [pc, #40]	; (8002dfc <showBuf+0x170>)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7ff fc22 	bl	800261c <Report>
}
 8002dd8:	bf00      	nop
 8002dda:	3730      	adds	r7, #48	; 0x30
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200014c8 	.word	0x200014c8
 8002de4:	200024e4 	.word	0x200024e4
 8002de8:	0800d850 	.word	0x0800d850
 8002dec:	0800d858 	.word	0x0800d858
 8002df0:	20000004 	.word	0x20000004
 8002df4:	20000068 	.word	0x20000068
 8002df8:	0800d860 	.word	0x0800d860
 8002dfc:	0800d864 	.word	0x0800d864

08002e00 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 8002e06:	af06      	add	r7, sp, #24
 8002e08:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002e0c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002e10:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(250);
 8002e12:	20fa      	movs	r0, #250	; 0xfa
 8002e14:	f001 fe2a 	bl	8004a6c <HAL_Delay>
	if (dbg != logOff) {
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <defThread+0x1a0>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d018      	beq.n	8002e52 <defThread+0x52>
		Report(0, "%s", eol);
 8002e20:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <defThread+0x1a4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4960      	ldr	r1, [pc, #384]	; (8002fa8 <defThread+0x1a8>)
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff fbf7 	bl	800261c <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <defThread+0x1ac>)
 8002e30:	681c      	ldr	r4, [r3, #0]
 8002e32:	f009 fb9f 	bl	800c574 <xPortGetFreeHeapSize>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <defThread+0x1a4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	9200      	str	r2, [sp, #0]
 8002e46:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <defThread+0x1b0>)
 8002e48:	4622      	mov	r2, r4
 8002e4a:	495a      	ldr	r1, [pc, #360]	; (8002fb4 <defThread+0x1b4>)
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7ff fbe5 	bl	800261c <Report>
    }
#endif



	uint8_t byte = logOff;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
	uint8_t next_block_erase = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
	bool readed = false;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
	char cid[32] = {0};
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8002e70:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	615a      	str	r2, [r3, #20]
 8002e82:	619a      	str	r2, [r3, #24]
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize) / 1024;
 8002e84:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <defThread+0x1b8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <defThread+0x1b8>)
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	0a9b      	lsrs	r3, r3, #10
 8002e92:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	uint32_t PlaneSizeMB = (chipConf.PlaneNbr * (chipConf.BlockSize * chipConf.PageSize * chipConf.BlockNbr)) / 1024 / 1024;
 8002e96:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <defThread+0x1b8>)
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <defThread+0x1b8>)
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	4946      	ldr	r1, [pc, #280]	; (8002fb8 <defThread+0x1b8>)
 8002ea0:	6809      	ldr	r1, [r1, #0]
 8002ea2:	fb01 f202 	mul.w	r2, r1, r2
 8002ea6:	4944      	ldr	r1, [pc, #272]	; (8002fb8 <defThread+0x1b8>)
 8002ea8:	68c9      	ldr	r1, [r1, #12]
 8002eaa:	fb01 f202 	mul.w	r2, r1, r2
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	0d1b      	lsrs	r3, r3, #20
 8002eb4:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002eb8:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <defThread+0x1bc>)
 8002eba:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	if (nandState == HAL_NAND_STATE_READY) {
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <defThread+0x1c0>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	f040 8090 	bne.w	8002fe8 <defThread+0x1e8>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <defThread+0x1bc>)
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	22f1      	movs	r2, #241	; 0xf1
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <defThread+0xe4>
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <defThread+0x1c4>)
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8002eda:	2220      	movs	r2, #32
 8002edc:	4618      	mov	r0, r3
 8002ede:	f009 febd 	bl	800cc5c <strncpy>
 8002ee2:	e006      	b.n	8002ef2 <defThread+0xf2>
									   else strcpy(cid, "UNKNOWN");
 8002ee4:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8002ee8:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <defThread+0x1c8>)
 8002eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eee:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <defThread+0x1cc>)
 8002ef4:	4a36      	ldr	r2, [pc, #216]	; (8002fd0 <defThread+0x1d0>)
 8002ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002efa:	6018      	str	r0, [r3, #0]
 8002efc:	3304      	adds	r3, #4
 8002efe:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
 8002f06:	e016      	b.n	8002f36 <defThread+0x136>
 8002f08:	4830      	ldr	r0, [pc, #192]	; (8002fcc <defThread+0x1cc>)
 8002f0a:	f7fd f961 	bl	80001d0 <strlen>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <defThread+0x1cc>)
 8002f12:	1898      	adds	r0, r3, r2
 8002f14:	f997 3469 	ldrsb.w	r3, [r7, #1129]	; 0x469
 8002f18:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	492c      	ldr	r1, [pc, #176]	; (8002fd4 <defThread+0x1d4>)
 8002f24:	f009 fe56 	bl	800cbd4 <siprintf>
 8002f28:	f997 3469 	ldrsb.w	r3, [r7, #1129]	; 0x469
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
 8002f36:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d9e4      	bls.n	8002f08 <defThread+0x108>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8002f3e:	4823      	ldr	r0, [pc, #140]	; (8002fcc <defThread+0x1cc>)
 8002f40:	f7fd f946 	bl	80001d0 <strlen>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <defThread+0x1cc>)
 8002f48:	1898      	adds	r0, r3, r2
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <defThread+0x1bc>)
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8002f54:	4920      	ldr	r1, [pc, #128]	; (8002fd8 <defThread+0x1d8>)
 8002f56:	f009 fe3d 	bl	800cbd4 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8002f5a:	481c      	ldr	r0, [pc, #112]	; (8002fcc <defThread+0x1cc>)
 8002f5c:	f7fd f938 	bl	80001d0 <strlen>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <defThread+0x1cc>)
 8002f64:	189c      	adds	r4, r3, r2
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <defThread+0x1b8>)
 8002f68:	681d      	ldr	r5, [r3, #0]
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <defThread+0x1b8>)
 8002f6c:	685e      	ldr	r6, [r3, #4]
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <defThread+0x1b8>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <defThread+0x1b8>)
 8002f74:	6912      	ldr	r2, [r2, #16]
 8002f76:	4919      	ldr	r1, [pc, #100]	; (8002fdc <defThread+0x1dc>)
 8002f78:	6809      	ldr	r1, [r1, #0]
 8002f7a:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <defThread+0x1e0>)
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	9005      	str	r0, [sp, #20]
 8002f80:	9104      	str	r1, [sp, #16]
 8002f82:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8002f86:	9103      	str	r1, [sp, #12]
 8002f88:	9202      	str	r2, [sp, #8]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	4633      	mov	r3, r6
 8002f94:	462a      	mov	r2, r5
 8002f96:	4913      	ldr	r1, [pc, #76]	; (8002fe4 <defThread+0x1e4>)
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f009 fe1b 	bl	800cbd4 <siprintf>
 8002f9e:	e030      	b.n	8003002 <defThread+0x202>
 8002fa0:	20000068 	.word	0x20000068
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	0800d860 	.word	0x0800d860
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	0800fe10 	.word	0x0800fe10
 8002fb4:	0800d88c 	.word	0x0800d88c
 8002fb8:	200014c8 	.word	0x200014c8
 8002fbc:	200014c0 	.word	0x200014c0
 8002fc0:	20000085 	.word	0x20000085
 8002fc4:	20000088 	.word	0x20000088
 8002fc8:	0800d8b8 	.word	0x0800d8b8
 8002fcc:	200024e4 	.word	0x200024e4
 8002fd0:	0800d8c0 	.word	0x0800d8c0
 8002fd4:	0800d858 	.word	0x0800d858
 8002fd8:	0800d8c8 	.word	0x0800d8c8
 8002fdc:	200014a0 	.word	0x200014a0
 8002fe0:	200014a4 	.word	0x200014a4
 8002fe4:	0800d8e0 	.word	0x0800d8e0
						chipConf.PlaneNbr,
						PlaneSizeMB,
						total_pages, total_bytes);
	} else {
		sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
				nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002fe8:	4bb5      	ldr	r3, [pc, #724]	; (80032c0 <defThread+0x4c0>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	f003 0303 	and.w	r3, r3, #3
		sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002ff0:	4ab4      	ldr	r2, [pc, #720]	; (80032c4 <defThread+0x4c4>)
 8002ff2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ff6:	4bb2      	ldr	r3, [pc, #712]	; (80032c0 <defThread+0x4c0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	49b3      	ldr	r1, [pc, #716]	; (80032c8 <defThread+0x4c8>)
 8002ffc:	48b3      	ldr	r0, [pc, #716]	; (80032cc <defThread+0x4cc>)
 8002ffe:	f009 fde9 	bl	800cbd4 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003002:	4bb3      	ldr	r3, [pc, #716]	; (80032d0 <defThread+0x4d0>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <defThread+0x218>
 800300a:	4bb2      	ldr	r3, [pc, #712]	; (80032d4 <defThread+0x4d4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4aaf      	ldr	r2, [pc, #700]	; (80032cc <defThread+0x4cc>)
 8003010:	49b1      	ldr	r1, [pc, #708]	; (80032d8 <defThread+0x4d8>)
 8003012:	2001      	movs	r0, #1
 8003014:	f7ff fb02 	bl	800261c <Report>

	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8003018:	2300      	movs	r3, #0
 800301a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 800301e:	4baf      	ldr	r3, [pc, #700]	; (80032dc <defThread+0x4dc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	b29b      	uxth	r3, r3
 8003026:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	22ef      	movs	r2, #239	; 0xef
 800302e:	2100      	movs	r1, #0
 8003030:	2000      	movs	r0, #0
 8003032:	f001 f84c 	bl	80040ce <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8003036:	4ba9      	ldr	r3, [pc, #676]	; (80032dc <defThread+0x4dc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	b29b      	uxth	r3, r3
 800303e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003042:	b299      	uxth	r1, r3
 8003044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	23ef      	movs	r3, #239	; 0xef
 800304c:	22ef      	movs	r2, #239	; 0xef
 800304e:	2000      	movs	r0, #0
 8003050:	f001 f83d 	bl	80040ce <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8003054:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	49a0      	ldr	r1, [pc, #640]	; (80032e0 <defThread+0x4e0>)
 800305e:	4618      	mov	r0, r3
 8003060:	f009 fdb8 	bl	800cbd4 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8003064:	4b9f      	ldr	r3, [pc, #636]	; (80032e4 <defThread+0x4e4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	23f0      	movs	r3, #240	; 0xf0
 800306e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003072:	b29a      	uxth	r2, r3
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f001 f934 	bl	80042e8 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd f8a3 	bl	80001d0 <strlen>
 800308a:	4602      	mov	r2, r0
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	1898      	adds	r0, r3, r2
 8003092:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <defThread+0x4e8>)
 8003094:	681c      	ldr	r4, [r3, #0]
 8003096:	4b94      	ldr	r3, [pc, #592]	; (80032e8 <defThread+0x4e8>)
 8003098:	685d      	ldr	r5, [r3, #4]
 800309a:	4b93      	ldr	r3, [pc, #588]	; (80032e8 <defThread+0x4e8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4a92      	ldr	r2, [pc, #584]	; (80032e8 <defThread+0x4e8>)
 80030a0:	6912      	ldr	r2, [r2, #16]
 80030a2:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 80030a6:	9103      	str	r1, [sp, #12]
 80030a8:	9202      	str	r2, [sp, #8]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	462b      	mov	r3, r5
 80030b4:	4622      	mov	r2, r4
 80030b6:	498d      	ldr	r1, [pc, #564]	; (80032ec <defThread+0x4ec>)
 80030b8:	f009 fd8c 	bl	800cbd4 <siprintf>
				chipConf.SpareAreaSize,
				BlockSizeKB,
				chipConf.BlockNbr,
				chipConf.PlaneNbr,
				PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 80030bc:	4b8c      	ldr	r3, [pc, #560]	; (80032f0 <defThread+0x4f0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <defThread+0x2e2>
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd f881 	bl	80001d0 <strlen>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4413      	add	r3, r2
 80030d6:	4a86      	ldr	r2, [pc, #536]	; (80032f0 <defThread+0x4f0>)
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	4986      	ldr	r1, [pc, #536]	; (80032f4 <defThread+0x4f4>)
 80030dc:	4618      	mov	r0, r3
 80030de:	f009 fd79 	bl	800cbd4 <siprintf>
	ST7789_WriteString(0,
						tFont->height + (tFont->height * 0.85),
 80030e2:	4b80      	ldr	r3, [pc, #512]	; (80032e4 <defThread+0x4e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fb45 	bl	8000778 <__aeabi_i2d>
 80030ee:	4604      	mov	r4, r0
 80030f0:	460d      	mov	r5, r1
 80030f2:	4b7c      	ldr	r3, [pc, #496]	; (80032e4 <defThread+0x4e4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fb3d 	bl	8000778 <__aeabi_i2d>
 80030fe:	a36e      	add	r3, pc, #440	; (adr r3, 80032b8 <defThread+0x4b8>)
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	f7fd f8bc 	bl	8000280 <__aeabi_dmul>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4620      	mov	r0, r4
 800310e:	4629      	mov	r1, r5
 8003110:	f7fd f9e6 	bl	80004e0 <__adddf3>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f7fd fb96 	bl	800084c <__aeabi_d2uiz>
 8003120:	4603      	mov	r3, r0
 8003122:	b298      	uxth	r0, r3
 8003124:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <defThread+0x4e4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a73      	ldr	r2, [pc, #460]	; (80032f8 <defThread+0x4f8>)
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	43d2      	mvns	r2, r2
 800312e:	b292      	uxth	r2, r2
 8003130:	4971      	ldr	r1, [pc, #452]	; (80032f8 <defThread+0x4f8>)
 8003132:	8809      	ldrh	r1, [r1, #0]
 8003134:	f107 0414 	add.w	r4, r7, #20
 8003138:	9102      	str	r1, [sp, #8]
 800313a:	9201      	str	r2, [sp, #4]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	9200      	str	r2, [sp, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4622      	mov	r2, r4
 8003144:	4601      	mov	r1, r0
 8003146:	2000      	movs	r0, #0
 8003148:	f001 f878 	bl	800423c <ST7789_WriteString>
						screen,
						*tFont,
						~back_color,
						back_color);
	ipsOn(1);
 800314c:	2001      	movs	r0, #1
 800314e:	f000 fe2f 	bl	8003db0 <ipsOn>

	bool loop = true;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3465 	strb.w	r3, [r7, #1125]	; 0x465
	bool led = false;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3464 	strb.w	r3, [r7, #1124]	; 0x464
	uint32_t tmr = get_tmr(1);
 800315e:	2001      	movs	r0, #1
 8003160:	f7ff f944 	bl	80023ec <get_tmr>
 8003164:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460

	uint32_t page_offset = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	uint32_t page_addr = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	s_qcmd qcmd = {0};
 8003174:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003178:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800317c:	2200      	movs	r2, #0
 800317e:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8003180:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003184:	f2a3 4369 	subw	r3, r3, #1129	; 0x469
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

  /* Infinite loop */

	while (loop) {
 8003192:	f000 bc73 	b.w	8003a7c <defThread+0xc7c>

		if (check_tmr(tmr)) {
 8003196:	f8d7 0460 	ldr.w	r0, [r7, #1120]	; 0x460
 800319a:	f7ff f934 	bl	8002406 <check_tmr>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80bb 	beq.w	800331c <defThread+0x51c>
			tmr = get_tmr(1);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff f920 	bl	80023ec <get_tmr>
 80031ac:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
			//
			sec2str(screen);
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff f997 	bl	80024e8 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80031ba:	4b48      	ldr	r3, [pc, #288]	; (80032dc <defThread+0x4dc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	23f0      	movs	r3, #240	; 0xf0
 80031c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 f889 	bl	80042e8 <mkLineCenter>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <defThread+0x4dc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80031e0:	9202      	str	r2, [sp, #8]
 80031e2:	221f      	movs	r2, #31
 80031e4:	9201      	str	r2, [sp, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	9200      	str	r2, [sp, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	460a      	mov	r2, r1
 80031ee:	2100      	movs	r1, #0
 80031f0:	2008      	movs	r0, #8
 80031f2:	f001 f823 	bl	800423c <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <defThread+0x4fc>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	493f      	ldr	r1, [pc, #252]	; (8003300 <defThread+0x500>)
 8003202:	4618      	mov	r0, r3
 8003204:	f009 fce6 	bl	800cbd4 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8003208:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <defThread+0x4fc>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <defThread+0x41a>
 8003210:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003214:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
 8003218:	e002      	b.n	8003220 <defThread+0x420>
 800321a:	2300      	movs	r3, #0
 800321c:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <defThread+0x4dc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800322c:	b29c      	uxth	r4, r3
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <defThread+0x4dc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	23f0      	movs	r3, #240	; 0xf0
 8003238:	fb93 f3f2 	sdiv	r3, r3, r2
 800323c:	b29a      	uxth	r2, r3
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f84f 	bl	80042e8 <mkLineCenter>
 800324a:	4601      	mov	r1, r0
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <defThread+0x4dc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003254:	9202      	str	r2, [sp, #8]
 8003256:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 800325a:	9201      	str	r2, [sp, #4]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	460a      	mov	r2, r1
 8003264:	4621      	mov	r1, r4
 8003266:	2000      	movs	r0, #0
 8003268:	f000 ffe8 	bl	800423c <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <defThread+0x504>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d019      	beq.n	80032a8 <defThread+0x4a8>
				if (qs != qStat) {
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <defThread+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800327c:	429a      	cmp	r2, r3
 800327e:	d013      	beq.n	80032a8 <defThread+0x4a8>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <defThread+0x4d0>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <defThread+0x4a0>
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <defThread+0x504>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe ff15 	bl	80020bc <get_qStat>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <defThread+0x4d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	491b      	ldr	r1, [pc, #108]	; (8003308 <defThread+0x508>)
 800329a:	2001      	movs	r0, #1
 800329c:	f7ff f9be 	bl	800261c <Report>
					qs = qStat;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <defThread+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
				}
			}

			if (devError) led = true; else led = false;
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <defThread+0x4fc>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d02d      	beq.n	800330c <defThread+0x50c>
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3464 	strb.w	r3, [r7, #1124]	; 0x464
 80032b6:	e02c      	b.n	8003312 <defThread+0x512>
 80032b8:	33333333 	.word	0x33333333
 80032bc:	3feb3333 	.word	0x3feb3333
 80032c0:	20000085 	.word	0x20000085
 80032c4:	2000008c 	.word	0x2000008c
 80032c8:	0800d964 	.word	0x0800d964
 80032cc:	200024e4 	.word	0x200024e4
 80032d0:	20000068 	.word	0x20000068
 80032d4:	20000004 	.word	0x20000004
 80032d8:	0800d984 	.word	0x0800d984
 80032dc:	2000007c 	.word	0x2000007c
 80032e0:	0800d98c 	.word	0x0800d98c
 80032e4:	20000080 	.word	0x20000080
 80032e8:	200014c8 	.word	0x200014c8
 80032ec:	0800d998 	.word	0x0800d998
 80032f0:	200014bc 	.word	0x200014bc
 80032f4:	0800d9f4 	.word	0x0800d9f4
 80032f8:	2000149e 	.word	0x2000149e
 80032fc:	20000488 	.word	0x20000488
 8003300:	0800da04 	.word	0x0800da04
 8003304:	200024e0 	.word	0x200024e0
 8003308:	0800da14 	.word	0x0800da14
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3464 	strb.w	r3, [r7, #1124]	; 0x464
			errLedOn(led);
 8003312:	f897 3464 	ldrb.w	r3, [r7, #1124]	; 0x464
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f812 	bl	8002340 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 800331c:	4bae      	ldr	r3, [pc, #696]	; (80035d8 <defThread+0x7d8>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	f107 020f 	add.w	r2, r7, #15
 8003324:	f107 0110 	add.w	r1, r7, #16
 8003328:	2305      	movs	r3, #5
 800332a:	f006 fbb3 	bl	8009a94 <osMessageQueueGet>
 800332e:	4603      	mov	r3, r0
 8003330:	4aaa      	ldr	r2, [pc, #680]	; (80035dc <defThread+0x7dc>)
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4ba9      	ldr	r3, [pc, #676]	; (80035dc <defThread+0x7dc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d028      	beq.n	800338e <defThread+0x58e>
			if (qs != qStat) qs = qStat;
 800333c:	4ba7      	ldr	r3, [pc, #668]	; (80035dc <defThread+0x7dc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003344:	429a      	cmp	r2, r3
 8003346:	d003      	beq.n	8003350 <defThread+0x550>
 8003348:	4ba4      	ldr	r3, [pc, #656]	; (80035dc <defThread+0x7dc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (qStat != osErrorTimeout) {
 8003350:	4ba2      	ldr	r3, [pc, #648]	; (80035dc <defThread+0x7dc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f113 0f02 	cmn.w	r3, #2
 8003358:	f000 8330 	beq.w	80039bc <defThread+0xbbc>
				devError |= devQUE;
 800335c:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <defThread+0x7e0>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003364:	b29a      	uxth	r2, r3
 8003366:	4b9e      	ldr	r3, [pc, #632]	; (80035e0 <defThread+0x7e0>)
 8003368:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800336a:	4b9e      	ldr	r3, [pc, #632]	; (80035e4 <defThread+0x7e4>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8324 	beq.w	80039bc <defThread+0xbbc>
 8003374:	4b99      	ldr	r3, [pc, #612]	; (80035dc <defThread+0x7dc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe fe9f 	bl	80020bc <get_qStat>
 800337e:	4602      	mov	r2, r0
 8003380:	4b99      	ldr	r3, [pc, #612]	; (80035e8 <defThread+0x7e8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4999      	ldr	r1, [pc, #612]	; (80035ec <defThread+0x7ec>)
 8003386:	2001      	movs	r0, #1
 8003388:	f7ff f948 	bl	800261c <Report>
 800338c:	e316      	b.n	80039bc <defThread+0xbbc>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 800338e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003392:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b95      	ldr	r3, [pc, #596]	; (80035f0 <defThread+0x7f0>)
 800339c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4993      	ldr	r1, [pc, #588]	; (80035f4 <defThread+0x7f4>)
 80033a6:	4618      	mov	r0, r3
 80033a8:	f009 fc14 	bl	800cbd4 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80033ac:	4b92      	ldr	r3, [pc, #584]	; (80035f8 <defThread+0x7f8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80033bc:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80033be:	4b8e      	ldr	r3, [pc, #568]	; (80035f8 <defThread+0x7f8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	23f0      	movs	r3, #240	; 0xf0
 80033c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 ff87 	bl	80042e8 <mkLineCenter>
 80033da:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80033dc:	4b86      	ldr	r3, [pc, #536]	; (80035f8 <defThread+0x7f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2200      	movs	r2, #0
 80033e2:	9202      	str	r2, [sp, #8]
 80033e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80033e8:	9201      	str	r2, [sp, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	460a      	mov	r2, r1
 80033f2:	4621      	mov	r1, r4
 80033f4:	2000      	movs	r0, #0
 80033f6:	f000 ff21 	bl	800423c <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 80033fa:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <defThread+0x7e4>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d91e      	bls.n	8003440 <defThread+0x640>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8003402:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003406:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003412:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	4618      	mov	r0, r3
 800341a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800341e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <defThread+0x7f0>)
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <defThread+0x7e8>)
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	9201      	str	r2, [sp, #4]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4603      	mov	r3, r0
 8003436:	460a      	mov	r2, r1
 8003438:	4970      	ldr	r1, [pc, #448]	; (80035fc <defThread+0x7fc>)
 800343a:	2001      	movs	r0, #1
 800343c:	f7ff f8ee 	bl	800261c <Report>
			//
			nand_show = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
			switch (qcmd.cmd) {
 8003446:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800344a:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b0b      	cmp	r3, #11
 8003452:	f200 82a1 	bhi.w	8003998 <defThread+0xb98>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <defThread+0x65c>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	0800350b 	.word	0x0800350b
 8003460:	08003641 	.word	0x08003641
 8003464:	080036eb 	.word	0x080036eb
 8003468:	080036eb 	.word	0x080036eb
 800346c:	08003865 	.word	0x08003865
 8003470:	08003773 	.word	0x08003773
 8003474:	080037fd 	.word	0x080037fd
 8003478:	0800367b 	.word	0x0800367b
 800347c:	08003513 	.word	0x08003513
 8003480:	080034f1 	.word	0x080034f1
 8003484:	0800349d 	.word	0x0800349d
 8003488:	0800348d 	.word	0x0800348d
				case cmdErr:
					Report(1, "!!! Error command !!!%s", eol);
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <defThread+0x7e8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	495b      	ldr	r1, [pc, #364]	; (8003600 <defThread+0x800>)
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff f8c1 	bl	800261c <Report>
				break;
 800349a:	e27d      	b.n	8003998 <defThread+0xb98>
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 800349c:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <defThread+0x7e8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	4958      	ldr	r1, [pc, #352]	; (8003604 <defThread+0x804>)
 80034a4:	4858      	ldr	r0, [pc, #352]	; (8003608 <defThread+0x808>)
 80034a6:	f009 fb95 	bl	800cbd4 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
 80034b0:	e014      	b.n	80034dc <defThread+0x6dc>
 80034b2:	4855      	ldr	r0, [pc, #340]	; (8003608 <defThread+0x808>)
 80034b4:	f7fc fe8c 	bl	80001d0 <strlen>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a53      	ldr	r2, [pc, #332]	; (8003608 <defThread+0x808>)
 80034bc:	1898      	adds	r0, r3, r2
 80034be:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 80034c2:	4a52      	ldr	r2, [pc, #328]	; (800360c <defThread+0x80c>)
 80034c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034c8:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <defThread+0x7e8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4950      	ldr	r1, [pc, #320]	; (8003610 <defThread+0x810>)
 80034ce:	f009 fb81 	bl	800cbd4 <siprintf>
 80034d2:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 80034d6:	3301      	adds	r3, #1
 80034d8:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
 80034dc:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 80034e0:	2b0a      	cmp	r3, #10
 80034e2:	d9e6      	bls.n	80034b2 <defThread+0x6b2>
					Report(1, "%s", stx);
 80034e4:	4a48      	ldr	r2, [pc, #288]	; (8003608 <defThread+0x808>)
 80034e6:	494b      	ldr	r1, [pc, #300]	; (8003614 <defThread+0x814>)
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7ff f897 	bl	800261c <Report>
				break;
 80034ee:	e253      	b.n	8003998 <defThread+0xb98>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80034f0:	f009 f840 	bl	800c574 <xPortGetFreeHeapSize>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <defThread+0x7e8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003500:	4945      	ldr	r1, [pc, #276]	; (8003618 <defThread+0x818>)
 8003502:	2001      	movs	r0, #1
 8003504:	f7ff f88a 	bl	800261c <Report>
				break;
 8003508:	e246      	b.n	8003998 <defThread+0xb98>
				case cmdRestart:
					loop = false;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 3465 	strb.w	r3, [r7, #1125]	; 0x465
				break;
 8003510:	e242      	b.n	8003998 <defThread+0xb98>
				case cmdInfo:
					if (dbg != logOff) {
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <defThread+0x7e4>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8235 	beq.w	8003986 <defThread+0xb86>
						strcpy(stx, "NAND:");
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <defThread+0x808>)
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <defThread+0x81c>)
 8003520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003524:	6018      	str	r0, [r3, #0]
 8003526:	3304      	adds	r3, #4
 8003528:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800352a:	2300      	movs	r3, #0
 800352c:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
 8003530:	e016      	b.n	8003560 <defThread+0x760>
 8003532:	4835      	ldr	r0, [pc, #212]	; (8003608 <defThread+0x808>)
 8003534:	f7fc fe4c 	bl	80001d0 <strlen>
 8003538:	4603      	mov	r3, r0
 800353a:	4a33      	ldr	r2, [pc, #204]	; (8003608 <defThread+0x808>)
 800353c:	1898      	adds	r0, r3, r2
 800353e:	f997 3452 	ldrsb.w	r3, [r7, #1106]	; 0x452
 8003542:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4934      	ldr	r1, [pc, #208]	; (8003620 <defThread+0x820>)
 800354e:	f009 fb41 	bl	800cbd4 <siprintf>
 8003552:	f997 3452 	ldrsb.w	r3, [r7, #1106]	; 0x452
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
 8003560:	f897 3452 	ldrb.w	r3, [r7, #1106]	; 0x452
 8003564:	2b04      	cmp	r3, #4
 8003566:	d9e4      	bls.n	8003532 <defThread+0x732>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003568:	4827      	ldr	r0, [pc, #156]	; (8003608 <defThread+0x808>)
 800356a:	f7fc fe31 	bl	80001d0 <strlen>
 800356e:	4603      	mov	r3, r0
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <defThread+0x808>)
 8003572:	1898      	adds	r0, r3, r2
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <defThread+0x824>)
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	461a      	mov	r2, r3
 800357a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800357e:	492a      	ldr	r1, [pc, #168]	; (8003628 <defThread+0x828>)
 8003580:	f009 fb28 	bl	800cbd4 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8003584:	4820      	ldr	r0, [pc, #128]	; (8003608 <defThread+0x808>)
 8003586:	f7fc fe23 	bl	80001d0 <strlen>
 800358a:	4603      	mov	r3, r0
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <defThread+0x808>)
 800358e:	189c      	adds	r4, r3, r2
 8003590:	4b26      	ldr	r3, [pc, #152]	; (800362c <defThread+0x82c>)
 8003592:	681d      	ldr	r5, [r3, #0]
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <defThread+0x82c>)
 8003596:	685e      	ldr	r6, [r3, #4]
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <defThread+0x82c>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a23      	ldr	r2, [pc, #140]	; (800362c <defThread+0x82c>)
 800359e:	6912      	ldr	r2, [r2, #16]
 80035a0:	4923      	ldr	r1, [pc, #140]	; (8003630 <defThread+0x830>)
 80035a2:	6809      	ldr	r1, [r1, #0]
 80035a4:	4823      	ldr	r0, [pc, #140]	; (8003634 <defThread+0x834>)
 80035a6:	6800      	ldr	r0, [r0, #0]
 80035a8:	9005      	str	r0, [sp, #20]
 80035aa:	9104      	str	r1, [sp, #16]
 80035ac:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 80035b0:	9103      	str	r1, [sp, #12]
 80035b2:	9202      	str	r2, [sp, #8]
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4633      	mov	r3, r6
 80035be:	462a      	mov	r2, r5
 80035c0:	491d      	ldr	r1, [pc, #116]	; (8003638 <defThread+0x838>)
 80035c2:	4620      	mov	r0, r4
 80035c4:	f009 fb06 	bl	800cbd4 <siprintf>
												BlockSizeKB,
												chipConf.BlockNbr,
												chipConf.PlaneNbr,
												PlaneSizeMB,
												total_pages, total_bytes);
						Report(1, "%s%s", stx, eol);
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <defThread+0x7e8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <defThread+0x808>)
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <defThread+0x83c>)
 80035d0:	2001      	movs	r0, #1
 80035d2:	f7ff f823 	bl	800261c <Report>
					}
				break;
 80035d6:	e1d6      	b.n	8003986 <defThread+0xb86>
 80035d8:	20000480 	.word	0x20000480
 80035dc:	200024e0 	.word	0x200024e0
 80035e0:	20000488 	.word	0x20000488
 80035e4:	20000068 	.word	0x20000068
 80035e8:	20000004 	.word	0x20000004
 80035ec:	0800da14 	.word	0x0800da14
 80035f0:	20000034 	.word	0x20000034
 80035f4:	0800da20 	.word	0x0800da20
 80035f8:	2000007c 	.word	0x2000007c
 80035fc:	0800da28 	.word	0x0800da28
 8003600:	0800da40 	.word	0x0800da40
 8003604:	0800da58 	.word	0x0800da58
 8003608:	200024e4 	.word	0x200024e4
 800360c:	20000008 	.word	0x20000008
 8003610:	0800da74 	.word	0x0800da74
 8003614:	0800d860 	.word	0x0800d860
 8003618:	0800da7c 	.word	0x0800da7c
 800361c:	0800d8c0 	.word	0x0800d8c0
 8003620:	0800d858 	.word	0x0800d858
 8003624:	200014c0 	.word	0x200014c0
 8003628:	0800d8c8 	.word	0x0800d8c8
 800362c:	200014c8 	.word	0x200014c8
 8003630:	200014a0 	.word	0x200014a0
 8003634:	200014a4 	.word	0x200014a4
 8003638:	0800d8e0 	.word	0x0800d8e0
 800363c:	0800d984 	.word	0x0800d984
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003640:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003644:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <defThread+0x85a>
						set_Date(epoch);
 800364e:	4b95      	ldr	r3, [pc, #596]	; (80038a4 <defThread+0xaa4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fee8 	bl	8002428 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003658:	e197      	b.n	800398a <defThread+0xb8a>
						sec2str(stx);
 800365a:	4893      	ldr	r0, [pc, #588]	; (80038a8 <defThread+0xaa8>)
 800365c:	f7fe ff44 	bl	80024e8 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003660:	4b92      	ldr	r3, [pc, #584]	; (80038ac <defThread+0xaac>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8190 	beq.w	800398a <defThread+0xb8a>
 800366a:	4b91      	ldr	r3, [pc, #580]	; (80038b0 <defThread+0xab0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a8e      	ldr	r2, [pc, #568]	; (80038a8 <defThread+0xaa8>)
 8003670:	4990      	ldr	r1, [pc, #576]	; (80038b4 <defThread+0xab4>)
 8003672:	2000      	movs	r0, #0
 8003674:	f7fe ffd2 	bl	800261c <Report>
				break;
 8003678:	e187      	b.n	800398a <defThread+0xb8a>
				case cmdLog:
					if (qcmd.attr < logNone) {
 800367a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800367e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d81e      	bhi.n	80036c6 <defThread+0x8c6>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003688:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800368c:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fd62 	bl	800215c <get_logName>
 8003698:	4602      	mov	r2, r0
 800369a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800369e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	4619      	mov	r1, r3
 80036a6:	4b82      	ldr	r3, [pc, #520]	; (80038b0 <defThread+0xab0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	460b      	mov	r3, r1
 80036ae:	4982      	ldr	r1, [pc, #520]	; (80038b8 <defThread+0xab8>)
 80036b0:	2001      	movs	r0, #1
 80036b2:	f7fe ffb3 	bl	800261c <Report>
						dbg = qcmd.attr;
 80036b6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80036ba:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80036be:	785a      	ldrb	r2, [r3, #1]
 80036c0:	4b7a      	ldr	r3, [pc, #488]	; (80038ac <defThread+0xaac>)
 80036c2:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 80036c4:	e168      	b.n	8003998 <defThread+0xb98>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 80036c6:	4b79      	ldr	r3, [pc, #484]	; (80038ac <defThread+0xaac>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fd46 	bl	800215c <get_logName>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <defThread+0xaac>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	4b75      	ldr	r3, [pc, #468]	; (80038b0 <defThread+0xab0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	460b      	mov	r3, r1
 80036e0:	4976      	ldr	r1, [pc, #472]	; (80038bc <defThread+0xabc>)
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fe ff9a 	bl	800261c <Report>
				break;
 80036e8:	e156      	b.n	8003998 <defThread+0xb98>
				case cmdRead:
				case cmdNext:
				{
					if (qcmd.cmd == cmdRead) {
 80036ea:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80036ee:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d10d      	bne.n	8003714 <defThread+0x914>
						readed = true;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
						page_offset = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
						page_addr = nandAdr;
 8003704:	4b6e      	ldr	r3, [pc, #440]	; (80038c0 <defThread+0xac0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
						nand_show = 1;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 8003712:	e01c      	b.n	800374e <defThread+0x94e>
					} else {
						page_offset += nandLen;
 8003714:	4b6b      	ldr	r3, [pc, #428]	; (80038c4 <defThread+0xac4>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800371e:	4413      	add	r3, r2
 8003720:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
						if (!(page_offset % chipConf.PageSize)) {
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <defThread+0xac8>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800372c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003730:	fb01 f202 	mul.w	r2, r1, r2
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <defThread+0x948>
							page_offset = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
							nandAdr = page_addr;
 8003740:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <defThread+0xac0>)
 8003742:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003746:	6013      	str	r3, [r2, #0]
						}
						nand_show = 1;//2;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
					}
					io_nand_read((page_addr - devAdr) / chipConf.PageSize, rdBuf, nandLen, page_offset);
 800374e:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <defThread+0xacc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <defThread+0xac8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <defThread+0xac4>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800376a:	4959      	ldr	r1, [pc, #356]	; (80038d0 <defThread+0xad0>)
 800376c:	f7fe f8b6 	bl	80018dc <io_nand_read>
				}
				break;
 8003770:	e112      	b.n	8003998 <defThread+0xb98>
				/*case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
					nand_show = 2;
				break;*/
				case cmdErase:
					if (!qcmd.attr) {
 8003772:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003776:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d12a      	bne.n	80037d6 <defThread+0x9d6>
						uint32_t bk = nandBlk;// * chipConf.PageSize;
 8003780:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <defThread+0xad4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
						io_nand_block_erase(bk);
 8003788:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 800378c:	f7fe f8e2 	bl	8001954 <io_nand_block_erase>
						if (dbg != logOff) {
 8003790:	4b46      	ldr	r3, [pc, #280]	; (80038ac <defThread+0xaac>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80fa 	beq.w	800398e <defThread+0xb8e>
							if (devError & devNAND) {
 800379a:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <defThread+0xad8>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <defThread+0x9be>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk, bk, eol);
 80037a6:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <defThread+0xad4>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <defThread+0xab0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80037b4:	4949      	ldr	r1, [pc, #292]	; (80038dc <defThread+0xadc>)
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fe ff30 	bl	800261c <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 80037bc:	e0e7      	b.n	800398e <defThread+0xb8e>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk, bk, eol);
 80037be:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <defThread+0xad4>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <defThread+0xab0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80037cc:	4944      	ldr	r1, [pc, #272]	; (80038e0 <defThread+0xae0>)
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7fe ff24 	bl	800261c <Report>
				break;
 80037d4:	e0db      	b.n	800398e <defThread+0xb8e>
						iBlk = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
						next_block_erase = 1;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
						if (dbg != logOff) Report(1, "Erase chip ");
 80037e2:	4b32      	ldr	r3, [pc, #200]	; (80038ac <defThread+0xaac>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <defThread+0x9f2>
 80037ea:	493e      	ldr	r1, [pc, #248]	; (80038e4 <defThread+0xae4>)
 80037ec:	2001      	movs	r0, #1
 80037ee:	f7fe ff15 	bl	800261c <Report>
						stik = HAL_GetTick();
 80037f2:	f001 f92f 	bl	8004a54 <HAL_GetTick>
 80037f6:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
				break;
 80037fa:	e0c8      	b.n	800398e <defThread+0xb8e>
				case cmdCheck:
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <defThread+0xac8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a39      	ldr	r2, [pc, #228]	; (80038e8 <defThread+0xae8>)
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
					if (!pageIsEmpty(adr)) {
 800380c:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8003810:	f7fe fc20 	bl	8002054 <pageIsEmpty>
 8003814:	4603      	mov	r3, r0
 8003816:	f083 0301 	eor.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d010      	beq.n	8003842 <defThread+0xa42>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu Not empty%s", nandPage, adr, eol);
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <defThread+0xaac>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80b4 	beq.w	8003992 <defThread+0xb92>
 800382a:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <defThread+0xae8>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <defThread+0xab0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003838:	492c      	ldr	r1, [pc, #176]	; (80038ec <defThread+0xaec>)
 800383a:	2001      	movs	r0, #1
 800383c:	f7fe feee 	bl	800261c <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
					}
				}
				break;
 8003840:	e0a7      	b.n	8003992 <defThread+0xb92>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
 8003842:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <defThread+0xaac>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80a3 	beq.w	8003992 <defThread+0xb92>
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <defThread+0xae8>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <defThread+0xab0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800385a:	4925      	ldr	r1, [pc, #148]	; (80038f0 <defThread+0xaf0>)
 800385c:	2001      	movs	r0, #1
 800385e:	f7fe fedd 	bl	800261c <Report>
				break;
 8003862:	e096      	b.n	8003992 <defThread+0xb92>
				case cmdWrite:
				{
					uint32_t wadr = (nandAdr - devAdr) / chipConf.PageSize;
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <defThread+0xac0>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b18      	ldr	r3, [pc, #96]	; (80038cc <defThread+0xacc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <defThread+0xac8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
					if (!pageIsEmpty(wadr)) {
 800387a:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 800387e:	f7fe fbe9 	bl	8002054 <pageIsEmpty>
 8003882:	4603      	mov	r3, r0
 8003884:	f083 0301 	eor.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d034      	beq.n	80038f8 <defThread+0xaf8>
						io_nand_block_erase(wadr);
 800388e:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8003892:	f7fe f85f 	bl	8001954 <io_nand_block_erase>
						sprintf(stx, "Erase nand addr:%lu done", wadr);
 8003896:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 800389a:	4916      	ldr	r1, [pc, #88]	; (80038f4 <defThread+0xaf4>)
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <defThread+0xaa8>)
 800389e:	f009 f999 	bl	800cbd4 <siprintf>
 80038a2:	e02f      	b.n	8003904 <defThread+0xb04>
 80038a4:	20000064 	.word	0x20000064
 80038a8:	200024e4 	.word	0x200024e4
 80038ac:	20000068 	.word	0x20000068
 80038b0:	20000004 	.word	0x20000004
 80038b4:	0800daa8 	.word	0x0800daa8
 80038b8:	0800dac4 	.word	0x0800dac4
 80038bc:	0800dae0 	.word	0x0800dae0
 80038c0:	200014ac 	.word	0x200014ac
 80038c4:	200014b0 	.word	0x200014b0
 80038c8:	200014c8 	.word	0x200014c8
 80038cc:	200014a8 	.word	0x200014a8
 80038d0:	200014e0 	.word	0x200014e0
 80038d4:	200014b4 	.word	0x200014b4
 80038d8:	20000488 	.word	0x20000488
 80038dc:	0800db00 	.word	0x0800db00
 80038e0:	0800db28 	.word	0x0800db28
 80038e4:	0800db4c 	.word	0x0800db4c
 80038e8:	200014b8 	.word	0x200014b8
 80038ec:	0800db58 	.word	0x0800db58
 80038f0:	0800db7c 	.word	0x0800db7c
 80038f4:	0800db9c 	.word	0x0800db9c
					} else {
						sprintf(stx, "Addr:%lu is Empty", wadr);
 80038f8:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80038fc:	496f      	ldr	r1, [pc, #444]	; (8003abc <defThread+0xcbc>)
 80038fe:	4870      	ldr	r0, [pc, #448]	; (8003ac0 <defThread+0xcc0>)
 8003900:	f009 f968 	bl	800cbd4 <siprintf>
					}
					if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <defThread+0xcc4>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <defThread+0xb1a>
 800390c:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <defThread+0xcc8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6b      	ldr	r2, [pc, #428]	; (8003ac0 <defThread+0xcc0>)
 8003912:	496e      	ldr	r1, [pc, #440]	; (8003acc <defThread+0xccc>)
 8003914:	2001      	movs	r0, #1
 8003916:	f7fe fe81 	bl	800261c <Report>
					memset(wrBuf, EMPTY, chipConf.PageSize);
 800391a:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <defThread+0xcd0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	21ff      	movs	r1, #255	; 0xff
 8003922:	486c      	ldr	r0, [pc, #432]	; (8003ad4 <defThread+0xcd4>)
 8003924:	f009 f840 	bl	800c9a8 <memset>
					uint32_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
					memset(wrBuf /* + ofs*/, nandByte, nandLen);
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <defThread+0xcd8>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	4b69      	ldr	r3, [pc, #420]	; (8003adc <defThread+0xcdc>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	4866      	ldr	r0, [pc, #408]	; (8003ad4 <defThread+0xcd4>)
 800393c:	f009 f834 	bl	800c9a8 <memset>
					////showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
					//if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, nandLen, ofs) != HAL_OK) devError |= devNAND;
					//if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu (page:%lu blk:%lu)%s",
					//	      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, addr.Page, addr.Block, eol);
					io_nand_write(wadr, wrBuf, nandLen, ofs);
 8003940:	4b66      	ldr	r3, [pc, #408]	; (8003adc <defThread+0xcdc>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800394a:	4962      	ldr	r1, [pc, #392]	; (8003ad4 <defThread+0xcd4>)
 800394c:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8003950:	f7fd ffe2 	bl	8001918 <io_nand_write>
					if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu%s",
 8003954:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <defThread+0xcc4>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <defThread+0xb96>
 800395c:	4b60      	ldr	r3, [pc, #384]	; (8003ae0 <defThread+0xce0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <defThread+0xcd8>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <defThread+0xcdc>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	4619      	mov	r1, r3
 800396c:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <defThread+0xcc8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	9100      	str	r1, [sp, #0]
 800397a:	4603      	mov	r3, r0
 800397c:	4959      	ldr	r1, [pc, #356]	; (8003ae4 <defThread+0xce4>)
 800397e:	2001      	movs	r0, #1
 8003980:	f7fe fe4c 	bl	800261c <Report>
							nandAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 8003984:	e007      	b.n	8003996 <defThread+0xb96>
				break;
 8003986:	bf00      	nop
 8003988:	e006      	b.n	8003998 <defThread+0xb98>
				break;
 800398a:	bf00      	nop
 800398c:	e004      	b.n	8003998 <defThread+0xb98>
				break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <defThread+0xb98>
				break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <defThread+0xb98>
				break;
 8003996:	bf00      	nop
			}
			if (nand_show) {
 8003998:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <defThread+0xbbc>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <defThread+0xce0>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <defThread+0xcdc>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	461c      	mov	r4, r3
 80039aa:	f897 146a 	ldrb.w	r1, [r7, #1130]	; 0x46a
 80039ae:	f897 046b 	ldrb.w	r0, [r7, #1131]	; 0x46b
 80039b2:	4b4d      	ldr	r3, [pc, #308]	; (8003ae8 <defThread+0xce8>)
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4623      	mov	r3, r4
 80039b8:	f7ff f968 	bl	8002c8c <showBuf>
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 80039bc:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d058      	beq.n	8003a76 <defThread+0xc76>
			byte = dbg;
 80039c4:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <defThread+0xcc4>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
			dbg = logOff;//disable print log !
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <defThread+0xcc4>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 80039d2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 80039d6:	f7fd ffbd 	bl	8001954 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <defThread+0xcc4>)
 80039dc:	f897 3451 	ldrb.w	r3, [r7, #1105]	; 0x451
 80039e0:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 80039e2:	4b42      	ldr	r3, [pc, #264]	; (8003aec <defThread+0xcec>)
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <defThread+0xbf6>
				next_block_erase = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 80039f4:	e01c      	b.n	8003a30 <defThread+0xc30>
			} else {
				if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
 80039f6:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <defThread+0xcd0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	029a      	lsls	r2, r3, #10
 80039fc:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a04:	fb01 f202 	mul.w	r2, r1, r2
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <defThread+0xc16>
 8003a0e:	4938      	ldr	r1, [pc, #224]	; (8003af0 <defThread+0xcf0>)
 8003a10:	2000      	movs	r0, #0
 8003a12:	f7fe fe03 	bl	800261c <Report>
				if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <defThread+0xcd0>)
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <defThread+0xcd0>)
 8003a1c:	6912      	ldr	r2, [r2, #16]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <defThread+0xc30>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
			}
			iBlk += chipConf.PageSize;
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <defThread+0xcd0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8003a38:	4413      	add	r3, r2
 8003a3a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
			if (!next_block_erase) {
 8003a3e:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d117      	bne.n	8003a76 <defThread+0xc76>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <defThread+0xcc4>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d013      	beq.n	8003a76 <defThread+0xc76>
 8003a4e:	f001 f801 	bl	8004a54 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <defThread+0xcf4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099a      	lsrs	r2, r3, #6
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <defThread+0xcc8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8003a6e:	4922      	ldr	r1, [pc, #136]	; (8003af8 <defThread+0xcf8>)
 8003a70:	2000      	movs	r0, #0
 8003a72:	f7fe fdd3 	bl	800261c <Report>
			}
		}
		//
		osDelay(5);
 8003a76:	2005      	movs	r0, #5
 8003a78:	f005 fe94 	bl	80097a4 <osDelay>
	while (loop) {
 8003a7c:	f897 3465 	ldrb.w	r3, [r7, #1125]	; 0x465
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f ab88 	bne.w	8003196 <defThread+0x396>
		mnt = false;
		if (dbg != logOff) Report(1, "Umount drive '%.*s'%s", sizeof(USERPath), USERPath, eol);
	}
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <defThread+0xcc4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d011      	beq.n	8003ab2 <defThread+0xcb2>
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <defThread+0xcfc>)
 8003a90:	681c      	ldr	r4, [r3, #0]
 8003a92:	f008 fd6f 	bl	800c574 <xPortGetFreeHeapSize>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <defThread+0xcc8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	9302      	str	r3, [sp, #8]
 8003a9e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <defThread+0xd00>)
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4916      	ldr	r1, [pc, #88]	; (8003b04 <defThread+0xd04>)
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7fe fdb5 	bl	800261c <Report>
	osDelay(250);
 8003ab2:	20fa      	movs	r0, #250	; 0xfa
 8003ab4:	f005 fe76 	bl	80097a4 <osDelay>

	NVIC_SystemReset();
 8003ab8:	f7fd ff6c 	bl	8001994 <__NVIC_SystemReset>
 8003abc:	0800dbb8 	.word	0x0800dbb8
 8003ac0:	200024e4 	.word	0x200024e4
 8003ac4:	20000068 	.word	0x20000068
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	0800d984 	.word	0x0800d984
 8003ad0:	200014c8 	.word	0x200014c8
 8003ad4:	20001ce0 	.word	0x20001ce0
 8003ad8:	20000084 	.word	0x20000084
 8003adc:	200014b0 	.word	0x200014b0
 8003ae0:	200014ac 	.word	0x200014ac
 8003ae4:	0800dbcc 	.word	0x0800dbcc
 8003ae8:	200014e0 	.word	0x200014e0
 8003aec:	20000488 	.word	0x20000488
 8003af0:	0800dc00 	.word	0x0800dc00
 8003af4:	10624dd3 	.word	0x10624dd3
 8003af8:	0800dc04 	.word	0x0800dc04
 8003afc:	20000000 	.word	0x20000000
 8003b00:	0800fe10 	.word	0x0800fe10
 8003b04:	0800dc1c 	.word	0x0800dc1c

08003b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d102      	bne.n	8003b20 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003b1a:	f000 ff87 	bl	8004a2c <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003b1e:	e016      	b.n	8003b4e <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d111      	bne.n	8003b4e <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003b2a:	f7fe fc3f 	bl	80023ac <get_msCounter>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	f002 0403 	and.w	r4, r2, #3
 8003b36:	2500      	movs	r5, #0
 8003b38:	1ee3      	subs	r3, r4, #3
 8003b3a:	432b      	orrs	r3, r5
 8003b3c:	d105      	bne.n	8003b4a <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003b3e:	f7fe fc27 	bl	8002390 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	4805      	ldr	r0, [pc, #20]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003b46:	f001 fe4e 	bl	80057e6 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003b4a:	f7fe fc3d 	bl	80023c8 <inc_msCounter>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bdb0      	pop	{r4, r5, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40020800 	.word	0x40020800

08003b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <Error_Handler+0x4c>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <Error_Handler+0x4c>)
 8003b72:	801a      	strh	r2, [r3, #0]

	int8_t cnt = 10;
 8003b74:	230a      	movs	r3, #10
 8003b76:	71fb      	strb	r3, [r7, #7]
	while (--cnt) {
 8003b78:	e008      	b.n	8003b8c <Error_Handler+0x2c>
		errLedOn(true);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f7fe fbe0 	bl	8002340 <errLedOn>
		errLedOn(false);
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7fe fbdd 	bl	8002340 <errLedOn>
		HAL_Delay(150);
 8003b86:	2096      	movs	r0, #150	; 0x96
 8003b88:	f000 ff70 	bl	8004a6c <HAL_Delay>
	while (--cnt) {
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	71fb      	strb	r3, [r7, #7]
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ee      	bne.n	8003b7a <Error_Handler+0x1a>
	}
	errLedOn(true);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7fe fbcf 	bl	8002340 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000488 	.word	0x20000488

08003bb0 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <ST7789_WriteCommand+0x40>)
 8003bc0:	f001 fdf8 	bl	80057b4 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <ST7789_WriteCommand+0x44>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	2396      	movs	r3, #150	; 0x96
 8003bca:	1df9      	adds	r1, r7, #7
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f003 f8e0 	bl	8006d92 <HAL_SPI_Transmit>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <ST7789_WriteCommand+0x36>
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <ST7789_WriteCommand+0x48>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f043 0310 	orr.w	r3, r3, #16
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <ST7789_WriteCommand+0x48>)
 8003be4:	801a      	strh	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	2000006c 	.word	0x2000006c
 8003bf8:	20000488 	.word	0x20000488

08003bfc <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003c06:	2200      	movs	r2, #0
 8003c08:	2104      	movs	r1, #4
 8003c0a:	480e      	ldr	r0, [pc, #56]	; (8003c44 <ST7789_WriteCommands+0x48>)
 8003c0c:	f001 fdd2 	bl	80057b4 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <ST7789_WriteCommands+0x4c>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	2196      	movs	r1, #150	; 0x96
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	f003 f8b5 	bl	8006d92 <HAL_SPI_Transmit>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <ST7789_WriteCommands+0x40>
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <ST7789_WriteCommands+0x50>)
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	f043 0310 	orr.w	r3, r3, #16
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <ST7789_WriteCommands+0x50>)
 8003c3a:	801a      	strh	r2, [r3, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40020000 	.word	0x40020000
 8003c48:	2000006c 	.word	0x2000006c
 8003c4c:	20000488 	.word	0x20000488

08003c50 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003c5e:	2201      	movs	r2, #1
 8003c60:	2104      	movs	r1, #4
 8003c62:	481f      	ldr	r0, [pc, #124]	; (8003ce0 <ST7789_WriteData+0x90>)
 8003c64:	f001 fda6 	bl	80057b4 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003c68:	e028      	b.n	8003cbc <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf28      	it	cs
 8003c74:	4613      	movcs	r3, r2
 8003c76:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <ST7789_WriteData+0x94>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <ST7789_WriteData+0x98>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	89ba      	ldrh	r2, [r7, #12]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f003 f9c0 	bl	800700c <HAL_SPI_Transmit_DMA>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003c96:	e002      	b.n	8003c9e <ST7789_WriteData+0x4e>
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f000 fee7 	bl	8004a6c <HAL_Delay>
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <ST7789_WriteData+0x94>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	f083 0301 	eor.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f5      	bne.n	8003c98 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003cac:	89bb      	ldrh	r3, [r7, #12]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003cb4:	89bb      	ldrh	r3, [r7, #12]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d3      	bne.n	8003c6a <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d006      	beq.n	8003cd6 <ST7789_WriteData+0x86>
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <ST7789_WriteData+0x9c>)
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	f043 0310 	orr.w	r3, r3, #16
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <ST7789_WriteData+0x9c>)
 8003cd4:	801a      	strh	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	20000061 	.word	0x20000061
 8003ce8:	2000006c 	.word	0x2000006c
 8003cec:	20000488 	.word	0x20000488

08003cf0 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003cfe:	2201      	movs	r2, #1
 8003d00:	2104      	movs	r1, #4
 8003d02:	4814      	ldr	r0, [pc, #80]	; (8003d54 <ST7789_WriteDataLine+0x64>)
 8003d04:	f001 fd56 	bl	80057b4 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003d08:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <ST7789_WriteDataLine+0x68>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <ST7789_WriteDataLine+0x6c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	b292      	uxth	r2, r2
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 f977 	bl	800700c <HAL_SPI_Transmit_DMA>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003d22:	e002      	b.n	8003d2a <ST7789_WriteDataLine+0x3a>
 8003d24:	2001      	movs	r0, #1
 8003d26:	f000 fea1 	bl	8004a6c <HAL_Delay>
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <ST7789_WriteDataLine+0x68>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f5      	bne.n	8003d24 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <ST7789_WriteDataLine+0x5c>
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <ST7789_WriteDataLine+0x70>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	f043 0310 	orr.w	r3, r3, #16
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <ST7789_WriteDataLine+0x70>)
 8003d4a:	801a      	strh	r2, [r3, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40020000 	.word	0x40020000
 8003d58:	20000061 	.word	0x20000061
 8003d5c:	2000006c 	.word	0x2000006c
 8003d60:	20000488 	.word	0x20000488

08003d64 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2104      	movs	r1, #4
 8003d72:	480c      	ldr	r0, [pc, #48]	; (8003da4 <ST7789_WriteSmallData+0x40>)
 8003d74:	f001 fd1e 	bl	80057b4 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <ST7789_WriteSmallData+0x44>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	2396      	movs	r3, #150	; 0x96
 8003d7e:	1df9      	adds	r1, r7, #7
 8003d80:	2201      	movs	r2, #1
 8003d82:	f003 f806 	bl	8006d92 <HAL_SPI_Transmit>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <ST7789_WriteSmallData+0x36>
 8003d8c:	4b07      	ldr	r3, [pc, #28]	; (8003dac <ST7789_WriteSmallData+0x48>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f043 0310 	orr.w	r3, r3, #16
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <ST7789_WriteSmallData+0x48>)
 8003d98:	801a      	strh	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40020000 	.word	0x40020000
 8003da8:	2000006c 	.word	0x2000006c
 8003dac:	20000488 	.word	0x20000488

08003db0 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <ipsOn+0x18>
 8003dc0:	2029      	movs	r0, #41	; 0x29
 8003dc2:	f7ff fef5 	bl	8003bb0 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003dc6:	e002      	b.n	8003dce <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003dc8:	2028      	movs	r0, #40	; 0x28
 8003dca:	f7ff fef1 	bl	8003bb0 <ST7789_WriteCommand>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003de2:	2036      	movs	r0, #54	; 0x36
 8003de4:	f7ff fee4 	bl	8003bb0 <ST7789_WriteCommand>
	switch (m) {
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d81a      	bhi.n	8003e24 <ST7789_SetRotation+0x4c>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <ST7789_SetRotation+0x1c>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e05 	.word	0x08003e05
 8003df8:	08003e0d 	.word	0x08003e0d
 8003dfc:	08003e15 	.word	0x08003e15
 8003e00:	08003e1d 	.word	0x08003e1d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003e04:	20c0      	movs	r0, #192	; 0xc0
 8003e06:	f7ff ffad 	bl	8003d64 <ST7789_WriteSmallData>
		break;
 8003e0a:	e00c      	b.n	8003e26 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003e0c:	20a0      	movs	r0, #160	; 0xa0
 8003e0e:	f7ff ffa9 	bl	8003d64 <ST7789_WriteSmallData>
		break;
 8003e12:	e008      	b.n	8003e26 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7ff ffa5 	bl	8003d64 <ST7789_WriteSmallData>
		break;
 8003e1a:	e004      	b.n	8003e26 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003e1c:	2060      	movs	r0, #96	; 0x60
 8003e1e:	f7ff ffa1 	bl	8003d64 <ST7789_WriteSmallData>
		break;
 8003e22:	e000      	b.n	8003e26 <ST7789_SetRotation+0x4e>
	default:
		break;
 8003e24:	bf00      	nop
	}
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop

08003e30 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	80fb      	strh	r3, [r7, #6]
 8003e42:	4603      	mov	r3, r0
 8003e44:	80bb      	strh	r3, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	82fb      	strh	r3, [r7, #22]
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003e56:	88bb      	ldrh	r3, [r7, #4]
 8003e58:	827b      	strh	r3, [r7, #18]
 8003e5a:	883b      	ldrh	r3, [r7, #0]
 8003e5c:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003e5e:	202a      	movs	r0, #42	; 0x2a
 8003e60:	f7ff fea6 	bl	8003bb0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003e64:	8afb      	ldrh	r3, [r7, #22]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	733b      	strb	r3, [r7, #12]
 8003e6e:	8afb      	ldrh	r3, [r7, #22]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	737b      	strb	r3, [r7, #13]
 8003e74:	8abb      	ldrh	r3, [r7, #20]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	73bb      	strb	r3, [r7, #14]
 8003e7e:	8abb      	ldrh	r3, [r7, #20]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	2104      	movs	r1, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fee0 	bl	8003c50 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003e90:	202b      	movs	r0, #43	; 0x2b
 8003e92:	f7ff fe8d 	bl	8003bb0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003e96:	8a7b      	ldrh	r3, [r7, #18]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	723b      	strb	r3, [r7, #8]
 8003ea0:	8a7b      	ldrh	r3, [r7, #18]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	727b      	strb	r3, [r7, #9]
 8003ea6:	8a3b      	ldrh	r3, [r7, #16]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	72bb      	strb	r3, [r7, #10]
 8003eb0:	8a3b      	ldrh	r3, [r7, #16]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	2104      	movs	r1, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fec7 	bl	8003c50 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003ec2:	202c      	movs	r0, #44	; 0x2c
 8003ec4:	f7ff fe74 	bl	8003bb0 <ST7789_WriteCommand>
}
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd90      	pop	{r4, r7, pc}

08003ed0 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003ed4:	2014      	movs	r0, #20
 8003ed6:	f000 fdc9 	bl	8004a6c <HAL_Delay>
    ST7789_RST_Clr();
 8003eda:	2200      	movs	r2, #0
 8003edc:	2102      	movs	r1, #2
 8003ede:	4808      	ldr	r0, [pc, #32]	; (8003f00 <ST7789_Reset+0x30>)
 8003ee0:	f001 fc68 	bl	80057b4 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003ee4:	200a      	movs	r0, #10
 8003ee6:	f000 fdc1 	bl	8004a6c <HAL_Delay>
    ST7789_RST_Set();
 8003eea:	2201      	movs	r2, #1
 8003eec:	2102      	movs	r1, #2
 8003eee:	4804      	ldr	r0, [pc, #16]	; (8003f00 <ST7789_Reset+0x30>)
 8003ef0:	f001 fc60 	bl	80057b4 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003ef4:	2014      	movs	r0, #20
 8003ef6:	f000 fdb9 	bl	8004a6c <HAL_Delay>
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40020000 	.word	0x40020000

08003f04 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b08f      	sub	sp, #60	; 0x3c
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003f0e:	203a      	movs	r0, #58	; 0x3a
 8003f10:	f7ff fe4e 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003f14:	2055      	movs	r0, #85	; 0x55
 8003f16:	f7ff ff25 	bl	8003d64 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003f1a:	20b2      	movs	r0, #178	; 0xb2
 8003f1c:	f7ff fe48 	bl	8003bb0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003f20:	4a3a      	ldr	r2, [pc, #232]	; (800400c <ST7789_Init+0x108>)
 8003f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f2a:	6018      	str	r0, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f34:	2105      	movs	r1, #5
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fe8a 	bl	8003c50 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003f3c:	2003      	movs	r0, #3
 8003f3e:	f7ff ff4b 	bl	8003dd8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003f42:	20b7      	movs	r0, #183	; 0xb7
 8003f44:	f7ff fe34 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003f48:	2035      	movs	r0, #53	; 0x35
 8003f4a:	f7ff ff0b 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003f4e:	20bb      	movs	r0, #187	; 0xbb
 8003f50:	f7ff fe2e 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003f54:	2019      	movs	r0, #25
 8003f56:	f7ff ff05 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003f5a:	20c0      	movs	r0, #192	; 0xc0
 8003f5c:	f7ff fe28 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003f60:	202c      	movs	r0, #44	; 0x2c
 8003f62:	f7ff feff 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8003f66:	20c2      	movs	r0, #194	; 0xc2
 8003f68:	f7ff fe22 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7ff fef9 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003f72:	20ff      	movs	r0, #255	; 0xff
 8003f74:	f7ff fef6 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8003f78:	20c3      	movs	r0, #195	; 0xc3
 8003f7a:	f7ff fe19 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003f7e:	2012      	movs	r0, #18
 8003f80:	f7ff fef0 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003f84:	20c4      	movs	r0, #196	; 0xc4
 8003f86:	f7ff fe13 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8003f8a:	2020      	movs	r0, #32
 8003f8c:	f7ff feea 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003f90:	20c6      	movs	r0, #198	; 0xc6
 8003f92:	f7ff fe0d 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8003f96:	200f      	movs	r0, #15
 8003f98:	f7ff fee4 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003f9c:	20d0      	movs	r0, #208	; 0xd0
 8003f9e:	f7ff fe07 	bl	8003bb0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003fa2:	20a4      	movs	r0, #164	; 0xa4
 8003fa4:	f7ff fede 	bl	8003d64 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8003fa8:	20a1      	movs	r0, #161	; 0xa1
 8003faa:	f7ff fedb 	bl	8003d64 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003fae:	20e0      	movs	r0, #224	; 0xe0
 8003fb0:	f7ff fdfe 	bl	8003bb0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <ST7789_Init+0x10c>)
 8003fb6:	f107 041c 	add.w	r4, r7, #28
 8003fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fbc:	c407      	stmia	r4!, {r0, r1, r2}
 8003fbe:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003fc0:	f107 031c 	add.w	r3, r7, #28
 8003fc4:	210e      	movs	r1, #14
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fe42 	bl	8003c50 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003fcc:	20e1      	movs	r0, #225	; 0xe1
 8003fce:	f7ff fdef 	bl	8003bb0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <ST7789_Init+0x110>)
 8003fd4:	f107 040c 	add.w	r4, r7, #12
 8003fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fda:	c407      	stmia	r4!, {r0, r1, r2}
 8003fdc:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003fde:	f107 030c 	add.w	r3, r7, #12
 8003fe2:	210e      	movs	r1, #14
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fe33 	bl	8003c50 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <ST7789_Init+0x114>)
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8003fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fe01 	bl	8003bfc <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f80d 	bl	800401c <ST7789_Fill_Color>
}
 8004002:	bf00      	nop
 8004004:	373c      	adds	r7, #60	; 0x3c
 8004006:	46bd      	mov	sp, r7
 8004008:	bd90      	pop	{r4, r7, pc}
 800400a:	bf00      	nop
 800400c:	0800dc48 	.word	0x0800dc48
 8004010:	0800dc50 	.word	0x0800dc50
 8004014:	0800dc60 	.word	0x0800dc60
 8004018:	28131121 	.word	0x28131121

0800401c <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b0fc      	sub	sp, #496	; 0x1f0
 8004020:	af00      	add	r7, sp, #0
 8004022:	4602      	mov	r2, r0
 8004024:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004028:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800402c:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800402e:	23ef      	movs	r3, #239	; 0xef
 8004030:	22ef      	movs	r2, #239	; 0xef
 8004032:	2100      	movs	r1, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f7ff fefb 	bl	8003e30 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 800403a:	2300      	movs	r3, #0
 800403c:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004040:	2300      	movs	r3, #0
 8004042:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004046:	e024      	b.n	8004092 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8004048:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800404c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	b29b      	uxth	r3, r3
 8004056:	b21a      	sxth	r2, r3
 8004058:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800405c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	b21b      	sxth	r3, r3
 8004066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800406a:	b21b      	sxth	r3, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	b219      	sxth	r1, r3
 8004070:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004074:	f107 020c 	add.w	r2, r7, #12
 8004078:	4413      	add	r3, r2
 800407a:	b28a      	uxth	r2, r1
 800407c:	801a      	strh	r2, [r3, #0]
		i += 2;
 800407e:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004082:	3302      	adds	r3, #2
 8004084:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004088:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800408c:	3301      	adds	r3, #1
 800408e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004092:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004096:	2bef      	cmp	r3, #239	; 0xef
 8004098:	d9d6      	bls.n	8004048 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800409a:	2300      	movs	r3, #0
 800409c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80040a0:	e00b      	b.n	80040ba <ST7789_Fill_Color+0x9e>
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fe20 	bl	8003cf0 <ST7789_WriteDataLine>
 80040b0:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80040b4:	3301      	adds	r3, #1
 80040b6:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80040ba:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80040be:	2bef      	cmp	r3, #239	; 0xef
 80040c0:	d9ef      	bls.n	80040a2 <ST7789_Fill_Color+0x86>

//#endif
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4604      	mov	r4, r0
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	80fb      	strh	r3, [r7, #6]
 80040e0:	4603      	mov	r3, r0
 80040e2:	80bb      	strh	r3, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
 80040e8:	4613      	mov	r3, r2
 80040ea:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	2bef      	cmp	r3, #239	; 0xef
 80040f0:	d82b      	bhi.n	800414a <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	2bef      	cmp	r3, #239	; 0xef
 80040f6:	d828      	bhi.n	800414a <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80040f8:	8c3b      	ldrh	r3, [r7, #32]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	723b      	strb	r3, [r7, #8]
 8004102:	8c3b      	ldrh	r3, [r7, #32]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8004108:	883b      	ldrh	r3, [r7, #0]
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	88b9      	ldrh	r1, [r7, #4]
 800410e:	88f8      	ldrh	r0, [r7, #6]
 8004110:	f7ff fe8e 	bl	8003e30 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8004114:	88bb      	ldrh	r3, [r7, #4]
 8004116:	81fb      	strh	r3, [r7, #14]
 8004118:	e012      	b.n	8004140 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	81bb      	strh	r3, [r7, #12]
 800411e:	e008      	b.n	8004132 <ST7789_Fill+0x64>
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fd92 	bl	8003c50 <ST7789_WriteData>
 800412c:	89bb      	ldrh	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	81bb      	strh	r3, [r7, #12]
 8004132:	89ba      	ldrh	r2, [r7, #12]
 8004134:	887b      	ldrh	r3, [r7, #2]
 8004136:	429a      	cmp	r2, r3
 8004138:	d9f2      	bls.n	8004120 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	3301      	adds	r3, #1
 800413e:	81fb      	strh	r3, [r7, #14]
 8004140:	89fa      	ldrh	r2, [r7, #14]
 8004142:	883b      	ldrh	r3, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d9e8      	bls.n	800411a <ST7789_Fill+0x4c>
 8004148:	e000      	b.n	800414c <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800414a:	bf00      	nop
	}
}
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bd90      	pop	{r4, r7, pc}

08004152 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004152:	b082      	sub	sp, #8
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
 800415c:	4603      	mov	r3, r0
 800415e:	80fb      	strh	r3, [r7, #6]
 8004160:	460b      	mov	r3, r1
 8004162:	80bb      	strh	r3, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004168:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800416c:	b29a      	uxth	r2, r3
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	4413      	add	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29c      	uxth	r4, r3
 8004178:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800417c:	b29a      	uxth	r2, r3
 800417e:	88bb      	ldrh	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29b      	uxth	r3, r3
 8004188:	88b9      	ldrh	r1, [r7, #4]
 800418a:	88f8      	ldrh	r0, [r7, #6]
 800418c:	4622      	mov	r2, r4
 800418e:	f7ff fe4f 	bl	8003e30 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	b29b      	uxth	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	733b      	strb	r3, [r7, #12]
 800419c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 80041a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	723b      	strb	r3, [r7, #8]
 80041ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e02f      	b.n	8004220 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 80041c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	3b20      	subs	r3, #32
 80041c6:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4619      	mov	r1, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	440b      	add	r3, r1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e015      	b.n	800420e <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <ST7789_WriteChar+0xa8>
				uk = cdata;
 80041f2:	f107 030c 	add.w	r3, r7, #12
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e002      	b.n	8004200 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8004200:	2102      	movs	r1, #2
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f7ff fd24 	bl	8003c50 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	3301      	adds	r3, #1
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004212:	461a      	mov	r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	4293      	cmp	r3, r2
 8004218:	d3e3      	bcc.n	80041e2 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004224:	461a      	mov	r2, r3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4293      	cmp	r3, r2
 800422a:	d3c9      	bcc.n	80041c0 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004238:	b002      	add	sp, #8
 800423a:	4770      	bx	lr

0800423c <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800423c:	b082      	sub	sp, #8
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af04      	add	r7, sp, #16
 8004244:	603a      	str	r2, [r7, #0]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	4603      	mov	r3, r0
 800424a:	80fb      	strh	r3, [r7, #6]
 800424c:	460b      	mov	r3, r1
 800424e:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03f      	beq.n	80042d6 <ST7789_WriteString+0x9a>

	while (*str) {
 8004256:	e039      	b.n	80042cc <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	7d3a      	ldrb	r2, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	2bef      	cmp	r3, #239	; 0xef
 8004260:	dd13      	ble.n	800428a <ST7789_WriteString+0x4e>
			x = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004266:	7d7b      	ldrb	r3, [r7, #21]
 8004268:	b29a      	uxth	r2, r3
 800426a:	88bb      	ldrh	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004270:	88bb      	ldrh	r3, [r7, #4]
 8004272:	7d7a      	ldrb	r2, [r7, #21]
 8004274:	4413      	add	r3, r2
 8004276:	2bef      	cmp	r3, #239	; 0xef
 8004278:	dc2f      	bgt.n	80042da <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b20      	cmp	r3, #32
 8004280:	d103      	bne.n	800428a <ST7789_WriteString+0x4e>
				str++;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	603b      	str	r3, [r7, #0]
				continue;
 8004288:	e020      	b.n	80042cc <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b0a      	cmp	r3, #10
 8004290:	d012      	beq.n	80042b8 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	88b9      	ldrh	r1, [r7, #4]
 8004298:	88f8      	ldrh	r0, [r7, #6]
 800429a:	8c3b      	ldrh	r3, [r7, #32]
 800429c:	9302      	str	r3, [sp, #8]
 800429e:	8bbb      	ldrh	r3, [r7, #28]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f7ff ff53 	bl	8004152 <ST7789_WriteChar>
			x += font.width;
 80042ac:	7d3b      	ldrb	r3, [r7, #20]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	4413      	add	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
 80042b6:	e006      	b.n	80042c6 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80042bc:	7d7b      	ldrb	r3, [r7, #21]
 80042be:	b29a      	uxth	r2, r3
 80042c0:	88bb      	ldrh	r3, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	603b      	str	r3, [r7, #0]
	while (*str) {
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1c1      	bne.n	8004258 <ST7789_WriteString+0x1c>
 80042d4:	e002      	b.n	80042dc <ST7789_WriteString+0xa0>
	if (!str) return;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80042da:	bf00      	nop
	}
}
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042e4:	b002      	add	sp, #8
 80042e6:	4770      	bx	lr

080042e8 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0a4      	sub	sp, #144	; 0x90
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	227c      	movs	r2, #124	; 0x7c
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f008 fb51 	bl	800c9a8 <memset>

	memset(st, 0x20, 127);
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	227f      	movs	r2, #127	; 0x7f
 800430c:	2120      	movs	r1, #32
 800430e:	4618      	mov	r0, r3
 8004310:	f008 fb4a 	bl	800c9a8 <memset>
	int8_t k = strlen(str);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fb ff5b 	bl	80001d0 <strlen>
 800431a:	4603      	mov	r3, r0
 800431c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8004320:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004324:	887b      	ldrh	r3, [r7, #2]
 8004326:	429a      	cmp	r2, r3
 8004328:	da25      	bge.n	8004376 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	0fda      	lsrs	r2, r3, #31
 8004334:	4413      	add	r3, r2
 8004336:	105b      	asrs	r3, r3, #1
 8004338:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 800433c:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004340:	f107 020c 	add.w	r2, r7, #12
 8004344:	4413      	add	r3, r2
 8004346:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	f008 fb1d 	bl	800c98c <memcpy>
		st[k + n*2 + 1] = '\0';
 8004352:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004356:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	3301      	adds	r3, #1
 8004360:	3390      	adds	r3, #144	; 0x90
 8004362:	443b      	add	r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f008 fc6b 	bl	800cc4c <strcpy>
	}

	return str;
 8004376:	687b      	ldr	r3, [r7, #4]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3790      	adds	r7, #144	; 0x90
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_MspInit+0x74>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_MspInit+0x74>)
 8004390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004394:	6453      	str	r3, [r2, #68]	; 0x44
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <HAL_MspInit+0x74>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_MspInit+0x74>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <HAL_MspInit+0x74>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_MspInit+0x74>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043be:	2200      	movs	r2, #0
 80043c0:	210f      	movs	r1, #15
 80043c2:	f06f 0001 	mvn.w	r0, #1
 80043c6:	f000 fc2d 	bl	8004c24 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2105      	movs	r1, #5
 80043ce:	2005      	movs	r0, #5
 80043d0:	f000 fc28 	bl	8004c24 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043d4:	2005      	movs	r0, #5
 80043d6:	f000 fc41 	bl	8004c5c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2105      	movs	r1, #5
 80043de:	2005      	movs	r0, #5
 80043e0:	f000 fc20 	bl	8004c24 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043e4:	2005      	movs	r0, #5
 80043e6:	f000 fc39 	bl	8004c5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_RTC_MspInit+0x4c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d110      	bne.n	800443a <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004418:	2302      	movs	r3, #2
 800441a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_RTC_MspInit+0x50>)
 800441e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	4618      	mov	r0, r3
 8004426:	f002 f84b 	bl	80064c0 <HAL_RCCEx_PeriphCLKConfig>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004430:	f7ff fb96 	bl	8003b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RTC_MspInit+0x54>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40002800 	.word	0x40002800
 8004448:	00190300 	.word	0x00190300
 800444c:	42470e3c 	.word	0x42470e3c

08004450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a39      	ldr	r2, [pc, #228]	; (8004554 <HAL_SPI_MspInit+0x104>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d16b      	bne.n	800454a <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_SPI_MspInit+0x108>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	4a37      	ldr	r2, [pc, #220]	; (8004558 <HAL_SPI_MspInit+0x108>)
 800447c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	4b35      	ldr	r3, [pc, #212]	; (8004558 <HAL_SPI_MspInit+0x108>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_SPI_MspInit+0x108>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_SPI_MspInit+0x108>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6313      	str	r3, [r2, #48]	; 0x30
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_SPI_MspInit+0x108>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80044aa:	23a0      	movs	r3, #160	; 0xa0
 80044ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044ba:	2305      	movs	r3, #5
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	4619      	mov	r1, r3
 80044c4:	4825      	ldr	r0, [pc, #148]	; (800455c <HAL_SPI_MspInit+0x10c>)
 80044c6:	f000 ffd9 	bl	800547c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044cc:	4a25      	ldr	r2, [pc, #148]	; (8004564 <HAL_SPI_MspInit+0x114>)
 80044ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80044d0:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044d2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80044d6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044da:	2240      	movs	r2, #64	; 0x40
 80044dc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_SPI_MspInit+0x110>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_SPI_MspInit+0x110>)
 8004500:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004504:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_SPI_MspInit+0x110>)
 8004508:	2204      	movs	r2, #4
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <HAL_SPI_MspInit+0x110>)
 800450e:	2203      	movs	r2, #3
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_SPI_MspInit+0x110>)
 8004514:	2200      	movs	r2, #0
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_SPI_MspInit+0x110>)
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800451e:	4810      	ldr	r0, [pc, #64]	; (8004560 <HAL_SPI_MspInit+0x110>)
 8004520:	f000 fbaa 	bl	8004c78 <HAL_DMA_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800452a:	f7ff fb19 	bl	8003b60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <HAL_SPI_MspInit+0x110>)
 8004532:	649a      	str	r2, [r3, #72]	; 0x48
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_SPI_MspInit+0x110>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800453a:	2200      	movs	r2, #0
 800453c:	2102      	movs	r1, #2
 800453e:	2023      	movs	r0, #35	; 0x23
 8004540:	f000 fb70 	bl	8004c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004544:	2023      	movs	r0, #35	; 0x23
 8004546:	f000 fb89 	bl	8004c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800454a:	bf00      	nop
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40013000 	.word	0x40013000
 8004558:	40023800 	.word	0x40023800
 800455c:	40020000 	.word	0x40020000
 8004560:	200002f0 	.word	0x200002f0
 8004564:	40026458 	.word	0x40026458

08004568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d115      	bne.n	80045a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_TIM_Base_MspInit+0x48>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_TIM_Base_MspInit+0x48>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <HAL_TIM_Base_MspInit+0x48>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2101      	movs	r1, #1
 800459a:	201c      	movs	r0, #28
 800459c:	f000 fb42 	bl	8004c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045a0:	201c      	movs	r0, #28
 80045a2:	f000 fb5b 	bl	8004c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800

080045b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a35      	ldr	r2, [pc, #212]	; (80046a8 <HAL_UART_MspInit+0xf4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d163      	bne.n	800469e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	4b34      	ldr	r3, [pc, #208]	; (80046ac <HAL_UART_MspInit+0xf8>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a33      	ldr	r2, [pc, #204]	; (80046ac <HAL_UART_MspInit+0xf8>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_UART_MspInit+0xf8>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_UART_MspInit+0xf8>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <HAL_UART_MspInit+0xf8>)
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	6313      	str	r3, [r2, #48]	; 0x30
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <HAL_UART_MspInit+0xf8>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800460e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004620:	2307      	movs	r3, #7
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	4619      	mov	r1, r3
 800462a:	4821      	ldr	r0, [pc, #132]	; (80046b0 <HAL_UART_MspInit+0xfc>)
 800462c:	f000 ff26 	bl	800547c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004630:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <HAL_UART_MspInit+0x104>)
 8004634:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004636:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800463c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004644:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004646:	2200      	movs	r2, #0
 8004648:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800464a:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <HAL_UART_MspInit+0x100>)
 800464c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004650:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004654:	2200      	movs	r2, #0
 8004656:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_UART_MspInit+0x100>)
 800465a:	2200      	movs	r2, #0
 800465c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004660:	2200      	movs	r2, #0
 8004662:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800466a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_UART_MspInit+0x100>)
 800466e:	2200      	movs	r2, #0
 8004670:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004672:	4810      	ldr	r0, [pc, #64]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004674:	f000 fb00 	bl	8004c78 <HAL_DMA_Init>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800467e:	f7ff fa6f 	bl	8003b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <HAL_UART_MspInit+0x100>)
 8004686:	635a      	str	r2, [r3, #52]	; 0x34
 8004688:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_UART_MspInit+0x100>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	2105      	movs	r1, #5
 8004692:	2027      	movs	r0, #39	; 0x27
 8004694:	f000 fac6 	bl	8004c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004698:	2027      	movs	r0, #39	; 0x27
 800469a:	f000 fadf 	bl	8004c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800469e:	bf00      	nop
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40004800 	.word	0x40004800
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020400 	.word	0x40020400
 80046b4:	200003dc 	.word	0x200003dc
 80046b8:	40026058 	.word	0x40026058

080046bc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80046c2:	1d3b      	adds	r3, r7, #4
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80046d0:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_FSMC_MspInit+0x98>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d139      	bne.n	800474c <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_FSMC_MspInit+0x98>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_FSMC_MspInit+0x9c>)
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_FSMC_MspInit+0x9c>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6393      	str	r3, [r2, #56]	; 0x38
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_FSMC_MspInit+0x9c>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80046fa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80046fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004708:	2303      	movs	r3, #3
 800470a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800470c:	230c      	movs	r3, #12
 800470e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4811      	ldr	r0, [pc, #68]	; (800475c <HAL_FSMC_MspInit+0xa0>)
 8004716:	f000 feb1 	bl	800547c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 800471a:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800471e:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004728:	2303      	movs	r3, #3
 800472a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800472c:	230c      	movs	r3, #12
 800472e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	4619      	mov	r1, r3
 8004734:	480a      	ldr	r0, [pc, #40]	; (8004760 <HAL_FSMC_MspInit+0xa4>)
 8004736:	f000 fea1 	bl	800547c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2105      	movs	r1, #5
 800473e:	2030      	movs	r0, #48	; 0x30
 8004740:	f000 fa70 	bl	8004c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004744:	2030      	movs	r0, #48	; 0x30
 8004746:	f000 fa89 	bl	8004c5c <HAL_NVIC_EnableIRQ>
 800474a:	e000      	b.n	800474e <HAL_FSMC_MspInit+0x92>
    return;
 800474c:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20002ce4 	.word	0x20002ce4
 8004758:	40023800 	.word	0x40023800
 800475c:	40021000 	.word	0x40021000
 8004760:	40020c00 	.word	0x40020c00

08004764 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 800476c:	f7ff ffa6 	bl	80046bc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	; 0x30
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004788:	2200      	movs	r2, #0
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	2019      	movs	r0, #25
 800478e:	f000 fa49 	bl	8004c24 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004792:	2019      	movs	r0, #25
 8004794:	f000 fa62 	bl	8004c5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	4b1f      	ldr	r3, [pc, #124]	; (800481c <HAL_InitTick+0xa4>)
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_InitTick+0xa4>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6453      	str	r3, [r2, #68]	; 0x44
 80047a8:	4b1c      	ldr	r3, [pc, #112]	; (800481c <HAL_InitTick+0xa4>)
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047b4:	f107 0210 	add.w	r2, r7, #16
 80047b8:	f107 0314 	add.w	r3, r7, #20
 80047bc:	4611      	mov	r1, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fe4c 	bl	800645c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80047c4:	f001 fe36 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 80047c8:	4603      	mov	r3, r0
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <HAL_InitTick+0xa8>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0c9b      	lsrs	r3, r3, #18
 80047d8:	3b01      	subs	r3, #1
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_InitTick+0xac>)
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <HAL_InitTick+0xb0>)
 80047e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <HAL_InitTick+0xac>)
 80047e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <HAL_InitTick+0xac>)
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_InitTick+0xac>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_InitTick+0xac>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80047fc:	4809      	ldr	r0, [pc, #36]	; (8004824 <HAL_InitTick+0xac>)
 80047fe:	f002 ff2f 	bl	8007660 <HAL_TIM_Base_Init>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004808:	4806      	ldr	r0, [pc, #24]	; (8004824 <HAL_InitTick+0xac>)
 800480a:	f002 ff79 	bl	8007700 <HAL_TIM_Base_Start_IT>
 800480e:	4603      	mov	r3, r0
 8004810:	e000      	b.n	8004814 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
}
 8004814:	4618      	mov	r0, r3
 8004816:	3730      	adds	r7, #48	; 0x30
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	431bde83 	.word	0x431bde83
 8004824:	20002ce8 	.word	0x20002ce8
 8004828:	40010000 	.word	0x40010000

0800482c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800483e:	e7fe      	b.n	800483e <HardFault_Handler+0x4>

08004840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004844:	e7fe      	b.n	8004844 <MemManage_Handler+0x4>

08004846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800484a:	e7fe      	b.n	800484a <BusFault_Handler+0x4>

0800484c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004850:	e7fe      	b.n	8004850 <UsageFault_Handler+0x4>

08004852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004874:	4802      	ldr	r0, [pc, #8]	; (8004880 <DMA1_Stream3_IRQHandler+0x10>)
 8004876:	f000 fb97 	bl	8004fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200003dc 	.word	0x200003dc

08004884 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004888:	4802      	ldr	r0, [pc, #8]	; (8004894 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800488a:	f002 ffa9 	bl	80077e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20002ce8 	.word	0x20002ce8

08004898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800489c:	4802      	ldr	r0, [pc, #8]	; (80048a8 <TIM2_IRQHandler+0x10>)
 800489e:	f002 ff9f 	bl	80077e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000350 	.word	0x20000350

080048ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <SPI1_IRQHandler+0x10>)
 80048b2:	f002 fc61 	bl	8007178 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000298 	.word	0x20000298

080048c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <USART3_IRQHandler+0x10>)
 80048c6:	f003 fc49 	bl	800815c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000398 	.word	0x20000398

080048d4 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <FSMC_IRQHandler+0x10>)
 80048da:	f000 ffec 	bl	80058b6 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000043c 	.word	0x2000043c

080048e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80048ec:	4802      	ldr	r0, [pc, #8]	; (80048f8 <DMA2_Stream3_IRQHandler+0x10>)
 80048ee:	f000 fb5b 	bl	8004fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200002f0 	.word	0x200002f0

080048fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <_sbrk+0x5c>)
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <_sbrk+0x60>)
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <_sbrk+0x64>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <_sbrk+0x64>)
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <_sbrk+0x68>)
 800491c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <_sbrk+0x64>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d207      	bcs.n	800493c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800492c:	f007 ff56 	bl	800c7dc <__errno>
 8004930:	4603      	mov	r3, r0
 8004932:	220c      	movs	r2, #12
 8004934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800493a:	e009      	b.n	8004950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <_sbrk+0x64>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <_sbrk+0x64>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	4a05      	ldr	r2, [pc, #20]	; (8004960 <_sbrk+0x64>)
 800494c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20020000 	.word	0x20020000
 800495c:	00002000 	.word	0x00002000
 8004960:	20002d30 	.word	0x20002d30
 8004964:	20008b98 	.word	0x20008b98

08004968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800496c:	4b08      	ldr	r3, [pc, #32]	; (8004990 <SystemInit+0x28>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <SystemInit+0x28>)
 8004974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <SystemInit+0x28>)
 800497e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004982:	609a      	str	r2, [r3, #8]
#endif
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004998:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800499a:	e003      	b.n	80049a4 <LoopCopyDataInit>

0800499c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800499e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049a2:	3104      	adds	r1, #4

080049a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049a4:	480b      	ldr	r0, [pc, #44]	; (80049d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049ac:	d3f6      	bcc.n	800499c <CopyDataInit>
  ldr  r2, =_sbss
 80049ae:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80049b0:	e002      	b.n	80049b8 <LoopFillZerobss>

080049b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049b4:	f842 3b04 	str.w	r3, [r2], #4

080049b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049bc:	d3f9      	bcc.n	80049b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049be:	f7ff ffd3 	bl	8004968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049c2:	f007 ffbd 	bl	800c940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049c6:	f7fc fffb 	bl	80019c0 <main>
  bx  lr    
 80049ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80049cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80049d0:	0800fff8 	.word	0x0800fff8
  ldr  r0, =_sdata
 80049d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80049d8:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 80049dc:	20000138 	.word	0x20000138
  ldr  r3, = _ebss
 80049e0:	20008b94 	.word	0x20008b94

080049e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049e4:	e7fe      	b.n	80049e4 <ADC_IRQHandler>
	...

080049e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_Init+0x40>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_Init+0x40>)
 80049f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_Init+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_Init+0x40>)
 80049fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_Init+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_Init+0x40>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a10:	2003      	movs	r0, #3
 8004a12:	f000 f8fc 	bl	8004c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a16:	200f      	movs	r0, #15
 8004a18:	f7ff feae 	bl	8004778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a1c:	f7ff fcb0 	bl	8004380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023c00 	.word	0x40023c00

08004a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_IncTick+0x20>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_IncTick+0x24>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <HAL_IncTick+0x24>)
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	200000a4 	.word	0x200000a4
 8004a50:	20002d34 	.word	0x20002d34

08004a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return uwTick;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_GetTick+0x14>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20002d34 	.word	0x20002d34

08004a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7ff ffee 	bl	8004a54 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a84:	d005      	beq.n	8004a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_Delay+0x44>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a92:	bf00      	nop
 8004a94:	f7ff ffde 	bl	8004a54 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d8f7      	bhi.n	8004a94 <HAL_Delay+0x28>
  {
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200000a4 	.word	0x200000a4

08004ab4 <__NVIC_SetPriorityGrouping>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ae6:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	60d3      	str	r3, [r2, #12]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_GetPriorityGrouping>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <__NVIC_GetPriorityGrouping+0x18>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f003 0307 	and.w	r3, r3, #7
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <__NVIC_EnableIRQ>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	db0b      	blt.n	8004b42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4907      	ldr	r1, [pc, #28]	; (8004b50 <__NVIC_EnableIRQ+0x38>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2001      	movs	r0, #1
 8004b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000e100 	.word	0xe000e100

08004b54 <__NVIC_SetPriority>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db0a      	blt.n	8004b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	490c      	ldr	r1, [pc, #48]	; (8004ba0 <__NVIC_SetPriority+0x4c>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	440b      	add	r3, r1
 8004b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b7c:	e00a      	b.n	8004b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4908      	ldr	r1, [pc, #32]	; (8004ba4 <__NVIC_SetPriority+0x50>)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	0112      	lsls	r2, r2, #4
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	440b      	add	r3, r1
 8004b92:	761a      	strb	r2, [r3, #24]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <NVIC_EncodePriority>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f1c3 0307 	rsb	r3, r3, #7
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	bf28      	it	cs
 8004bc6:	2304      	movcs	r3, #4
 8004bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d902      	bls.n	8004bd8 <NVIC_EncodePriority+0x30>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3b03      	subs	r3, #3
 8004bd6:	e000      	b.n	8004bda <NVIC_EncodePriority+0x32>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	401a      	ands	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	43d9      	mvns	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c00:	4313      	orrs	r3, r2
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3724      	adds	r7, #36	; 0x24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ff4c 	bl	8004ab4 <__NVIC_SetPriorityGrouping>
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c36:	f7ff ff61 	bl	8004afc <__NVIC_GetPriorityGrouping>
 8004c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	6978      	ldr	r0, [r7, #20]
 8004c42:	f7ff ffb1 	bl	8004ba8 <NVIC_EncodePriority>
 8004c46:	4602      	mov	r2, r0
 8004c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ff80 	bl	8004b54 <__NVIC_SetPriority>
}
 8004c54:	bf00      	nop
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff54 	bl	8004b18 <__NVIC_EnableIRQ>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c84:	f7ff fee6 	bl	8004a54 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e099      	b.n	8004dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb4:	e00f      	b.n	8004cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cb6:	f7ff fecd 	bl	8004a54 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b05      	cmp	r3, #5
 8004cc2:	d908      	bls.n	8004cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2203      	movs	r2, #3
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e078      	b.n	8004dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e8      	bne.n	8004cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_DMA_Init+0x158>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d107      	bne.n	8004d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d117      	bne.n	8004d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00e      	beq.n	8004d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fb01 	bl	8005384 <DMA_CheckFifoParam>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d96:	2301      	movs	r3, #1
 8004d98:	e016      	b.n	8004dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fab8 	bl	8005318 <DMA_CalcBaseAndBitshift>
 8004da8:	4603      	mov	r3, r0
 8004daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	223f      	movs	r2, #63	; 0x3f
 8004db2:	409a      	lsls	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	f010803f 	.word	0xf010803f

08004dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_DMA_Start_IT+0x26>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e040      	b.n	8004e7c <HAL_DMA_Start_IT+0xa8>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d12f      	bne.n	8004e6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fa4a 	bl	80052bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	223f      	movs	r2, #63	; 0x3f
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0216 	orr.w	r2, r2, #22
 8004e42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e005      	b.n	8004e7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
 8004e78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e92:	f7ff fddf 	bl	8004a54 <HAL_GetTick>
 8004e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d008      	beq.n	8004eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e052      	b.n	8004f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0216 	bic.w	r2, r2, #22
 8004ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_DMA_Abort+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0208 	bic.w	r2, r2, #8
 8004ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f06:	e013      	b.n	8004f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f08:	f7ff fda4 	bl	8004a54 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d90c      	bls.n	8004f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e015      	b.n	8004f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e4      	bne.n	8004f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	223f      	movs	r2, #63	; 0x3f
 8004f44:	409a      	lsls	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2280      	movs	r2, #128	; 0x80
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e00c      	b.n	8004f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2205      	movs	r2, #5
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fb4:	4b8e      	ldr	r3, [pc, #568]	; (80051f0 <HAL_DMA_IRQHandler+0x248>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a8e      	ldr	r2, [pc, #568]	; (80051f4 <HAL_DMA_IRQHandler+0x24c>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0a9b      	lsrs	r3, r3, #10
 8004fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01a      	beq.n	8005014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	2208      	movs	r2, #8
 8005002:	409a      	lsls	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	2201      	movs	r2, #1
 8005038:	409a      	lsls	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f043 0202 	orr.w	r2, r3, #2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2204      	movs	r2, #4
 8005050:	409a      	lsls	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	2204      	movs	r2, #4
 800506e:	409a      	lsls	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f043 0204 	orr.w	r2, r3, #4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2210      	movs	r2, #16
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d043      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d03c      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	2210      	movs	r2, #16
 80050a4:	409a      	lsls	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d024      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
 80050d6:	e01f      	b.n	8005118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
 80050e8:	e016      	b.n	8005118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0208 	bic.w	r2, r2, #8
 8005106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2220      	movs	r2, #32
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 808f 	beq.w	8005248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8087 	beq.w	8005248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513e:	2220      	movs	r2, #32
 8005140:	409a      	lsls	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b05      	cmp	r3, #5
 8005150:	d136      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0216 	bic.w	r2, r2, #22
 8005160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <HAL_DMA_IRQHandler+0x1da>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0208 	bic.w	r2, r2, #8
 8005190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	223f      	movs	r2, #63	; 0x3f
 8005198:	409a      	lsls	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d07e      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
        }
        return;
 80051be:	e079      	b.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01d      	beq.n	800520a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10d      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d031      	beq.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
 80051ec:	e02c      	b.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
 80051ee:	bf00      	nop
 80051f0:	2000009c 	.word	0x2000009c
 80051f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d023      	beq.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	e01e      	b.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0210 	bic.w	r2, r2, #16
 8005226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	2b00      	cmp	r3, #0
 800524e:	d032      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2205      	movs	r2, #5
 8005260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3301      	adds	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d307      	bcc.n	8005290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f2      	bne.n	8005274 <HAL_DMA_IRQHandler+0x2cc>
 800528e:	e000      	b.n	8005292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
 80052b2:	e000      	b.n	80052b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80052b4:	bf00      	nop
    }
  }
}
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d108      	bne.n	80052fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052fa:	e007      	b.n	800530c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	60da      	str	r2, [r3, #12]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3b10      	subs	r3, #16
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <DMA_CalcBaseAndBitshift+0x64>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <DMA_CalcBaseAndBitshift+0x68>)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d909      	bls.n	800535a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	659a      	str	r2, [r3, #88]	; 0x58
 8005358:	e007      	b.n	800536a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	aaaaaaab 	.word	0xaaaaaaab
 8005380:	0800fe34 	.word	0x0800fe34

08005384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11f      	bne.n	80053de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d856      	bhi.n	8005452 <DMA_CheckFifoParam+0xce>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <DMA_CheckFifoParam+0x28>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053cf 	.word	0x080053cf
 80053b4:	080053bd 	.word	0x080053bd
 80053b8:	08005453 	.word	0x08005453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d046      	beq.n	8005456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053cc:	e043      	b.n	8005456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053d6:	d140      	bne.n	800545a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053dc:	e03d      	b.n	800545a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e6:	d121      	bne.n	800542c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d837      	bhi.n	800545e <DMA_CheckFifoParam+0xda>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <DMA_CheckFifoParam+0x70>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005405 	.word	0x08005405
 80053f8:	0800540b 	.word	0x0800540b
 80053fc:	08005405 	.word	0x08005405
 8005400:	0800541d 	.word	0x0800541d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e030      	b.n	800546c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d025      	beq.n	8005462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541a:	e022      	b.n	8005462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005424:	d11f      	bne.n	8005466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800542a:	e01c      	b.n	8005466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d903      	bls.n	800543a <DMA_CheckFifoParam+0xb6>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d003      	beq.n	8005440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005438:	e018      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      break;
 800543e:	e015      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00e      	beq.n	800546a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e00b      	b.n	800546a <DMA_CheckFifoParam+0xe6>
      break;
 8005452:	bf00      	nop
 8005454:	e00a      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 8005456:	bf00      	nop
 8005458:	e008      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800545a:	bf00      	nop
 800545c:	e006      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;   
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800546a:	bf00      	nop
    }
  } 
  
  return status; 
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop

0800547c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	e16b      	b.n	8005770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005498:	2201      	movs	r2, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	f040 815a 	bne.w	800576a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d005      	beq.n	80054ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d130      	bne.n	8005530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2203      	movs	r2, #3
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005504:	2201      	movs	r2, #1
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 0201 	and.w	r2, r3, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d017      	beq.n	800556c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	2203      	movs	r2, #3
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d123      	bne.n	80055c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	08da      	lsrs	r2, r3, #3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3208      	adds	r2, #8
 8005580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	220f      	movs	r2, #15
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	08da      	lsrs	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3208      	adds	r2, #8
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	2203      	movs	r2, #3
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0203 	and.w	r2, r3, #3
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b4 	beq.w	800576a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b60      	ldr	r3, [pc, #384]	; (8005788 <HAL_GPIO_Init+0x30c>)
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	4a5f      	ldr	r2, [pc, #380]	; (8005788 <HAL_GPIO_Init+0x30c>)
 800560c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005610:	6453      	str	r3, [r2, #68]	; 0x44
 8005612:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_GPIO_Init+0x30c>)
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800561e:	4a5b      	ldr	r2, [pc, #364]	; (800578c <HAL_GPIO_Init+0x310>)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	3302      	adds	r3, #2
 8005626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	220f      	movs	r2, #15
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a52      	ldr	r2, [pc, #328]	; (8005790 <HAL_GPIO_Init+0x314>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02b      	beq.n	80056a2 <HAL_GPIO_Init+0x226>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a51      	ldr	r2, [pc, #324]	; (8005794 <HAL_GPIO_Init+0x318>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d025      	beq.n	800569e <HAL_GPIO_Init+0x222>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a50      	ldr	r2, [pc, #320]	; (8005798 <HAL_GPIO_Init+0x31c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01f      	beq.n	800569a <HAL_GPIO_Init+0x21e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a4f      	ldr	r2, [pc, #316]	; (800579c <HAL_GPIO_Init+0x320>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d019      	beq.n	8005696 <HAL_GPIO_Init+0x21a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_GPIO_Init+0x216>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a4d      	ldr	r2, [pc, #308]	; (80057a4 <HAL_GPIO_Init+0x328>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00d      	beq.n	800568e <HAL_GPIO_Init+0x212>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4c      	ldr	r2, [pc, #304]	; (80057a8 <HAL_GPIO_Init+0x32c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <HAL_GPIO_Init+0x20e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4b      	ldr	r2, [pc, #300]	; (80057ac <HAL_GPIO_Init+0x330>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d101      	bne.n	8005686 <HAL_GPIO_Init+0x20a>
 8005682:	2307      	movs	r3, #7
 8005684:	e00e      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005686:	2308      	movs	r3, #8
 8005688:	e00c      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800568a:	2306      	movs	r3, #6
 800568c:	e00a      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800568e:	2305      	movs	r3, #5
 8005690:	e008      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005692:	2304      	movs	r3, #4
 8005694:	e006      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005696:	2303      	movs	r3, #3
 8005698:	e004      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800569a:	2302      	movs	r3, #2
 800569c:	e002      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 80056a2:	2300      	movs	r3, #0
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	f002 0203 	and.w	r2, r2, #3
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	4093      	lsls	r3, r2
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056b4:	4935      	ldr	r1, [pc, #212]	; (800578c <HAL_GPIO_Init+0x310>)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	3302      	adds	r3, #2
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056c2:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056e6:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005710:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <HAL_GPIO_Init+0x334>)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005764:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	f67f ae90 	bls.w	8005498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	40013800 	.word	0x40013800
 8005790:	40020000 	.word	0x40020000
 8005794:	40020400 	.word	0x40020400
 8005798:	40020800 	.word	0x40020800
 800579c:	40020c00 	.word	0x40020c00
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40021400 	.word	0x40021400
 80057a8:	40021800 	.word	0x40021800
 80057ac:	40021c00 	.word	0x40021c00
 80057b0:	40013c00 	.word	0x40013c00

080057b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057c4:	787b      	ldrb	r3, [r7, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057d0:	e003      	b.n	80057da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	041a      	lsls	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	619a      	str	r2, [r3, #24]
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057f8:	887a      	ldrh	r2, [r7, #2]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4013      	ands	r3, r2
 80057fe:	041a      	lsls	r2, r3, #16
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	43d9      	mvns	r1, r3
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	400b      	ands	r3, r1
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	619a      	str	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e03e      	b.n	80058ae <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d106      	bne.n	800584a <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7fe ff8d 	bl	8004764 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f003 fc49 	bl	80090ec <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	461a      	mov	r2, r3
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	f003 fc8d 	bl	8009184 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	461a      	mov	r2, r3
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	f003 fcba 	bl	80091ee <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b10      	cmp	r3, #16
 8005880:	d108      	bne.n	8005894 <HAL_NAND_Init+0x7a>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0204 	orr.w	r2, r2, #4
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e007      	b.n	80058a4 <HAL_NAND_Init+0x8a>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0204 	orr.w	r2, r2, #4
 80058a2:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d10a      	bne.n	80058dc <HAL_NAND_IRQHandler+0x26>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	bf0c      	ite	eq
 80058d4:	2301      	moveq	r3, #1
 80058d6:	2300      	movne	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	e009      	b.n	80058f0 <HAL_NAND_IRQHandler+0x3a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d017      	beq.n	8005924 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f8b2 	bl	8005a5e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d108      	bne.n	8005914 <HAL_NAND_IRQHandler+0x5e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0201 	bic.w	r2, r2, #1
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	e007      	b.n	8005924 <HAL_NAND_IRQHandler+0x6e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d10a      	bne.n	8005942 <HAL_NAND_IRQHandler+0x8c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b02      	cmp	r3, #2
 8005938:	bf0c      	ite	eq
 800593a:	2301      	moveq	r3, #1
 800593c:	2300      	movne	r3, #0
 800593e:	b2db      	uxtb	r3, r3
 8005940:	e009      	b.n	8005956 <HAL_NAND_IRQHandler+0xa0>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f87f 	bl	8005a5e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b10      	cmp	r3, #16
 8005966:	d108      	bne.n	800597a <HAL_NAND_IRQHandler+0xc4>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0202 	bic.w	r2, r2, #2
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	e007      	b.n	800598a <HAL_NAND_IRQHandler+0xd4>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0202 	bic.w	r2, r2, #2
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b10      	cmp	r3, #16
 8005990:	d10a      	bne.n	80059a8 <HAL_NAND_IRQHandler+0xf2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b04      	cmp	r3, #4
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e009      	b.n	80059bc <HAL_NAND_IRQHandler+0x106>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f84c 	bl	8005a5e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d108      	bne.n	80059e0 <HAL_NAND_IRQHandler+0x12a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0204 	bic.w	r2, r2, #4
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	e007      	b.n	80059f0 <HAL_NAND_IRQHandler+0x13a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0204 	bic.w	r2, r2, #4
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d10a      	bne.n	8005a0e <HAL_NAND_IRQHandler+0x158>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e009      	b.n	8005a22 <HAL_NAND_IRQHandler+0x16c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2301      	moveq	r3, #1
 8005a1e:	2300      	movne	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f819 	bl	8005a5e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d108      	bne.n	8005a46 <HAL_NAND_IRQHandler+0x190>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a42:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005a44:	e007      	b.n	8005a56 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d101      	bne.n	8005a8a <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
 8005a88:	e018      	b.n	8005abc <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d111      	bne.n	8005aba <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f003 fbd5 	bl	8009258 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ad2:	b2db      	uxtb	r3, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005ae8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005aec:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af4:	2270      	movs	r2, #112	; 0x70
 8005af6:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e007      	b.n	8005b1e <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	e000      	b.n	8005b1e <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005b1c:	2300      	movs	r3, #0
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e267      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d075      	beq.n	8005c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b4a:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d00c      	beq.n	8005b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b56:	4b85      	ldr	r3, [pc, #532]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d112      	bne.n	8005b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b62:	4b82      	ldr	r3, [pc, #520]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b6e:	d10b      	bne.n	8005b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	4b7e      	ldr	r3, [pc, #504]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d05b      	beq.n	8005c34 <HAL_RCC_OscConfig+0x108>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d157      	bne.n	8005c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e242      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x74>
 8005b92:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a75      	ldr	r2, [pc, #468]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e01d      	b.n	8005bdc <HAL_RCC_OscConfig+0xb0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x98>
 8005baa:	4b70      	ldr	r3, [pc, #448]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6f      	ldr	r2, [pc, #444]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b6d      	ldr	r3, [pc, #436]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a6c      	ldr	r2, [pc, #432]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0xb0>
 8005bc4:	4b69      	ldr	r3, [pc, #420]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a68      	ldr	r2, [pc, #416]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d013      	beq.n	8005c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fe ff36 	bl	8004a54 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fe ff32 	bl	8004a54 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	; 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e207      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfe:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0xc0>
 8005c0a:	e014      	b.n	8005c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fe ff22 	bl	8004a54 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fe ff1e 	bl	8004a54 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1f3      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c26:	4b51      	ldr	r3, [pc, #324]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0xe8>
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d063      	beq.n	8005d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c42:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d11c      	bne.n	8005c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5a:	4b44      	ldr	r3, [pc, #272]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d116      	bne.n	8005c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCC_OscConfig+0x152>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d001      	beq.n	8005c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e1c7      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4937      	ldr	r1, [pc, #220]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c92:	e03a      	b.n	8005d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c9c:	4b34      	ldr	r3, [pc, #208]	; (8005d70 <HAL_RCC_OscConfig+0x244>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fe fed7 	bl	8004a54 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fe fed3 	bl	8004a54 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e1a8      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4925      	ldr	r1, [pc, #148]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <HAL_RCC_OscConfig+0x244>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fe feb6 	bl	8004a54 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fe feb2 	bl	8004a54 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e187      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d036      	beq.n	8005d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d016      	beq.n	8005d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <HAL_RCC_OscConfig+0x248>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fe fe96 	bl	8004a54 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fe fe92 	bl	8004a54 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e167      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x200>
 8005d4a:	e01b      	b.n	8005d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <HAL_RCC_OscConfig+0x248>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d52:	f7fe fe7f 	bl	8004a54 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d58:	e00e      	b.n	8005d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d5a:	f7fe fe7b 	bl	8004a54 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d907      	bls.n	8005d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e150      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	42470000 	.word	0x42470000
 8005d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d78:	4b88      	ldr	r3, [pc, #544]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ea      	bne.n	8005d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8097 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b81      	ldr	r3, [pc, #516]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10f      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	4b7d      	ldr	r3, [pc, #500]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	4a7c      	ldr	r2, [pc, #496]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6413      	str	r3, [r2, #64]	; 0x40
 8005db2:	4b7a      	ldr	r3, [pc, #488]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	4b77      	ldr	r3, [pc, #476]	; (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d118      	bne.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dce:	4b74      	ldr	r3, [pc, #464]	; (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a73      	ldr	r2, [pc, #460]	; (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dda:	f7fe fe3b 	bl	8004a54 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de2:	f7fe fe37 	bl	8004a54 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e10c      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df4:	4b6a      	ldr	r3, [pc, #424]	; (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x2ea>
 8005e08:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0c:	4a63      	ldr	r2, [pc, #396]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6713      	str	r3, [r2, #112]	; 0x70
 8005e14:	e01c      	b.n	8005e50 <HAL_RCC_OscConfig+0x324>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x30c>
 8005e1e:	4b5f      	ldr	r3, [pc, #380]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	4a5e      	ldr	r2, [pc, #376]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e24:	f043 0304 	orr.w	r3, r3, #4
 8005e28:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2a:	4b5c      	ldr	r3, [pc, #368]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	4a5b      	ldr	r2, [pc, #364]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6713      	str	r3, [r2, #112]	; 0x70
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0x324>
 8005e38:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	4a57      	ldr	r2, [pc, #348]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	6713      	str	r3, [r2, #112]	; 0x70
 8005e44:	4b55      	ldr	r3, [pc, #340]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	4a54      	ldr	r2, [pc, #336]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e4a:	f023 0304 	bic.w	r3, r3, #4
 8005e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fe fdfc 	bl	8004a54 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fe fdf8 	bl	8004a54 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0cb      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	4b49      	ldr	r3, [pc, #292]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ee      	beq.n	8005e60 <HAL_RCC_OscConfig+0x334>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e84:	f7fe fde6 	bl	8004a54 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fe fde2 	bl	8004a54 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e0b5      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea2:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ee      	bne.n	8005e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb4:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	4a38      	ldr	r2, [pc, #224]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a1 	beq.w	800600c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eca:	4b34      	ldr	r3, [pc, #208]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d05c      	beq.n	8005f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d141      	bne.n	8005f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b31      	ldr	r3, [pc, #196]	; (8005fa4 <HAL_RCC_OscConfig+0x478>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fe fdb6 	bl	8004a54 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fe fdb2 	bl	8004a54 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e087      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	4b27      	ldr	r3, [pc, #156]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	3b01      	subs	r3, #1
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	491b      	ldr	r1, [pc, #108]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <HAL_RCC_OscConfig+0x478>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7fe fd8b 	bl	8004a54 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fe fd87 	bl	8004a54 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e05c      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f54:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x416>
 8005f60:	e054      	b.n	800600c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <HAL_RCC_OscConfig+0x478>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fe fd74 	bl	8004a54 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f70:	f7fe fd70 	bl	8004a54 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e045      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x444>
 8005f8e:	e03d      	b.n	800600c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e038      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_RCC_OscConfig+0x4ec>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d028      	beq.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d121      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d11a      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d111      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800

0800601c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0cc      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006030:	4b68      	ldr	r3, [pc, #416]	; (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d90c      	bls.n	8006058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	4b65      	ldr	r3, [pc, #404]	; (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b63      	ldr	r3, [pc, #396]	; (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0b8      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d020      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006070:	4b59      	ldr	r3, [pc, #356]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	4a58      	ldr	r2, [pc, #352]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800607a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006088:	4b53      	ldr	r3, [pc, #332]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a52      	ldr	r2, [pc, #328]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006094:	4b50      	ldr	r3, [pc, #320]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	494d      	ldr	r1, [pc, #308]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d044      	beq.n	800613c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	4b47      	ldr	r3, [pc, #284]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d119      	bne.n	80060fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e07f      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d003      	beq.n	80060da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d107      	bne.n	80060ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060da:	4b3f      	ldr	r3, [pc, #252]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e06f      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ea:	4b3b      	ldr	r3, [pc, #236]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e067      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060fa:	4b37      	ldr	r3, [pc, #220]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f023 0203 	bic.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4934      	ldr	r1, [pc, #208]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	4313      	orrs	r3, r2
 800610a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800610c:	f7fe fca2 	bl	8004a54 <HAL_GetTick>
 8006110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006112:	e00a      	b.n	800612a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006114:	f7fe fc9e 	bl	8004a54 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e04f      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612a:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 020c 	and.w	r2, r3, #12
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	429a      	cmp	r2, r3
 800613a:	d1eb      	bne.n	8006114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d20c      	bcs.n	8006164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614a:	4b22      	ldr	r3, [pc, #136]	; (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006152:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e032      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006170:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4916      	ldr	r1, [pc, #88]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	490e      	ldr	r1, [pc, #56]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061a2:	f000 f821 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	490a      	ldr	r1, [pc, #40]	; (80061dc <HAL_RCC_ClockConfig+0x1c0>)
 80061b4:	5ccb      	ldrb	r3, [r1, r3]
 80061b6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ba:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <HAL_RCC_ClockConfig+0x1c4>)
 80061bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_RCC_ClockConfig+0x1c8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fad8 	bl	8004778 <HAL_InitTick>

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40023c00 	.word	0x40023c00
 80061d8:	40023800 	.word	0x40023800
 80061dc:	0800fe1c 	.word	0x0800fe1c
 80061e0:	2000009c 	.word	0x2000009c
 80061e4:	200000a0 	.word	0x200000a0

080061e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ec:	b094      	sub	sp, #80	; 0x50
 80061ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	647b      	str	r3, [r7, #68]	; 0x44
 80061f4:	2300      	movs	r3, #0
 80061f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f8:	2300      	movs	r3, #0
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006200:	4b79      	ldr	r3, [pc, #484]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 030c 	and.w	r3, r3, #12
 8006208:	2b08      	cmp	r3, #8
 800620a:	d00d      	beq.n	8006228 <HAL_RCC_GetSysClockFreq+0x40>
 800620c:	2b08      	cmp	r3, #8
 800620e:	f200 80e1 	bhi.w	80063d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x34>
 8006216:	2b04      	cmp	r3, #4
 8006218:	d003      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0x3a>
 800621a:	e0db      	b.n	80063d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800621c:	4b73      	ldr	r3, [pc, #460]	; (80063ec <HAL_RCC_GetSysClockFreq+0x204>)
 800621e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006220:	e0db      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006222:	4b73      	ldr	r3, [pc, #460]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006226:	e0d8      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006228:	4b6f      	ldr	r3, [pc, #444]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006230:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006232:	4b6d      	ldr	r3, [pc, #436]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d063      	beq.n	8006306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800623e:	4b6a      	ldr	r3, [pc, #424]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	2200      	movs	r2, #0
 8006246:	63bb      	str	r3, [r7, #56]	; 0x38
 8006248:	63fa      	str	r2, [r7, #60]	; 0x3c
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
 8006252:	2300      	movs	r3, #0
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
 8006256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	f04f 0000 	mov.w	r0, #0
 8006262:	f04f 0100 	mov.w	r1, #0
 8006266:	0159      	lsls	r1, r3, #5
 8006268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800626c:	0150      	lsls	r0, r2, #5
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4621      	mov	r1, r4
 8006274:	1a51      	subs	r1, r2, r1
 8006276:	6139      	str	r1, [r7, #16]
 8006278:	4629      	mov	r1, r5
 800627a:	eb63 0301 	sbc.w	r3, r3, r1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800628c:	4659      	mov	r1, fp
 800628e:	018b      	lsls	r3, r1, #6
 8006290:	4651      	mov	r1, sl
 8006292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006296:	4651      	mov	r1, sl
 8006298:	018a      	lsls	r2, r1, #6
 800629a:	4651      	mov	r1, sl
 800629c:	ebb2 0801 	subs.w	r8, r2, r1
 80062a0:	4659      	mov	r1, fp
 80062a2:	eb63 0901 	sbc.w	r9, r3, r1
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ba:	4690      	mov	r8, r2
 80062bc:	4699      	mov	r9, r3
 80062be:	4623      	mov	r3, r4
 80062c0:	eb18 0303 	adds.w	r3, r8, r3
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	462b      	mov	r3, r5
 80062c8:	eb49 0303 	adc.w	r3, r9, r3
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062da:	4629      	mov	r1, r5
 80062dc:	024b      	lsls	r3, r1, #9
 80062de:	4621      	mov	r1, r4
 80062e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062e4:	4621      	mov	r1, r4
 80062e6:	024a      	lsls	r2, r1, #9
 80062e8:	4610      	mov	r0, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ee:	2200      	movs	r2, #0
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062f8:	f7fa fb18 	bl	800092c <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4613      	mov	r3, r2
 8006302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006304:	e058      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006306:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	099b      	lsrs	r3, r3, #6
 800630c:	2200      	movs	r2, #0
 800630e:	4618      	mov	r0, r3
 8006310:	4611      	mov	r1, r2
 8006312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	2300      	movs	r3, #0
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
 800631c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	0159      	lsls	r1, r3, #5
 800632e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006332:	0150      	lsls	r0, r2, #5
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4641      	mov	r1, r8
 800633a:	ebb2 0a01 	subs.w	sl, r2, r1
 800633e:	4649      	mov	r1, r9
 8006340:	eb63 0b01 	sbc.w	fp, r3, r1
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006358:	ebb2 040a 	subs.w	r4, r2, sl
 800635c:	eb63 050b 	sbc.w	r5, r3, fp
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	00eb      	lsls	r3, r5, #3
 800636a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800636e:	00e2      	lsls	r2, r4, #3
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	4643      	mov	r3, r8
 8006376:	18e3      	adds	r3, r4, r3
 8006378:	603b      	str	r3, [r7, #0]
 800637a:	464b      	mov	r3, r9
 800637c:	eb45 0303 	adc.w	r3, r5, r3
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800638e:	4629      	mov	r1, r5
 8006390:	028b      	lsls	r3, r1, #10
 8006392:	4621      	mov	r1, r4
 8006394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006398:	4621      	mov	r1, r4
 800639a:	028a      	lsls	r2, r1, #10
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a2:	2200      	movs	r2, #0
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	61fa      	str	r2, [r7, #28]
 80063a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ac:	f7fa fabe 	bl	800092c <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4613      	mov	r3, r2
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	3301      	adds	r3, #1
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_RCC_GetSysClockFreq+0x204>)
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3750      	adds	r7, #80	; 0x50
 80063e0:	46bd      	mov	sp, r7
 80063e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800
 80063ec:	00f42400 	.word	0x00f42400
 80063f0:	007a1200 	.word	0x007a1200

080063f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <HAL_RCC_GetHCLKFreq+0x14>)
 80063fa:	681b      	ldr	r3, [r3, #0]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	2000009c 	.word	0x2000009c

0800640c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006410:	f7ff fff0 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0a9b      	lsrs	r3, r3, #10
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	; (8006430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	0800fe2c 	.word	0x0800fe2c

08006434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006438:	f7ff ffdc 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b05      	ldr	r3, [pc, #20]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0b5b      	lsrs	r3, r3, #13
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4903      	ldr	r1, [pc, #12]	; (8006458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40023800 	.word	0x40023800
 8006458:	0800fe2c 	.word	0x0800fe2c

0800645c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	220f      	movs	r2, #15
 800646a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 0203 	and.w	r2, r3, #3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	08db      	lsrs	r3, r3, #3
 8006496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <HAL_RCC_GetClockConfig+0x60>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0207 	and.w	r2, r3, #7
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800
 80064bc:	40023c00 	.word	0x40023c00

080064c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d035      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064e8:	4b62      	ldr	r3, [pc, #392]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ee:	f7fe fab1 	bl	8004a54 <HAL_GetTick>
 80064f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064f4:	e008      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064f6:	f7fe faad 	bl	8004a54 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d901      	bls.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e0b0      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006508:	4b5b      	ldr	r3, [pc, #364]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f0      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	019a      	lsls	r2, r3, #6
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	071b      	lsls	r3, r3, #28
 8006520:	4955      	ldr	r1, [pc, #340]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006528:	4b52      	ldr	r3, [pc, #328]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800652a:	2201      	movs	r2, #1
 800652c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800652e:	f7fe fa91 	bl	8004a54 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006534:	e008      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006536:	f7fe fa8d 	bl	8004a54 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e090      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006548:	4b4b      	ldr	r3, [pc, #300]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8083 	beq.w	8006668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	4b44      	ldr	r3, [pc, #272]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	4a43      	ldr	r2, [pc, #268]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006570:	6413      	str	r3, [r2, #64]	; 0x40
 8006572:	4b41      	ldr	r3, [pc, #260]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800657e:	4b3f      	ldr	r3, [pc, #252]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3e      	ldr	r2, [pc, #248]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800658a:	f7fe fa63 	bl	8004a54 <HAL_GetTick>
 800658e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006592:	f7fe fa5f 	bl	8004a54 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e062      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065a4:	4b35      	ldr	r3, [pc, #212]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065b0:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d02f      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d028      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ce:	4b2a      	ldr	r3, [pc, #168]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065d8:	4b29      	ldr	r3, [pc, #164]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065de:	4b28      	ldr	r3, [pc, #160]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065e4:	4a24      	ldr	r2, [pc, #144]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d114      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065f6:	f7fe fa2d 	bl	8004a54 <HAL_GetTick>
 80065fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fc:	e00a      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7fe fa29 	bl	8004a54 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e02a      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006614:	4b18      	ldr	r3, [pc, #96]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ee      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800662c:	d10d      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	490d      	ldr	r1, [pc, #52]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006644:	4313      	orrs	r3, r2
 8006646:	608b      	str	r3, [r1, #8]
 8006648:	e005      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800664a:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006650:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006654:	6093      	str	r3, [r2, #8]
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006662:	4905      	ldr	r1, [pc, #20]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006664:	4313      	orrs	r3, r2
 8006666:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	42470068 	.word	0x42470068
 8006678:	40023800 	.word	0x40023800
 800667c:	40007000 	.word	0x40007000
 8006680:	42470e40 	.word	0x42470e40

08006684 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e066      	b.n	8006768 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7f5b      	ldrb	r3, [r3, #29]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fd fea4 	bl	80043f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	22ca      	movs	r2, #202	; 0xca
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2253      	movs	r2, #83	; 0x53
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa45 	bl	8006b56 <RTC_EnterInitMode>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d12c      	bne.n	8006730 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6899      	ldr	r1, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68d2      	ldr	r2, [r2, #12]
 8006710:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6919      	ldr	r1, [r3, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	041a      	lsls	r2, r3, #16
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa4c 	bl	8006bc4 <RTC_ExitInitMode>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d113      	bne.n	800675e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	22ff      	movs	r2, #255	; 0xff
 8006764:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	7f1b      	ldrb	r3, [r3, #28]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_RTC_SetTime+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e087      	b.n	800689c <HAL_RTC_SetTime+0x12c>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2202      	movs	r2, #2
 8006796:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d126      	bne.n	80067ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fa29 	bl	8006c0e <RTC_ByteToBcd2>
 80067bc:	4603      	mov	r3, r0
 80067be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fa22 	bl	8006c0e <RTC_ByteToBcd2>
 80067ca:	4603      	mov	r3, r0
 80067cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	789b      	ldrb	r3, [r3, #2]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fa1a 	bl	8006c0e <RTC_ByteToBcd2>
 80067da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	78db      	ldrb	r3, [r3, #3]
 80067e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e018      	b.n	800681e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800680c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006812:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	78db      	ldrb	r3, [r3, #3]
 8006818:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	22ca      	movs	r2, #202	; 0xca
 8006824:	625a      	str	r2, [r3, #36]	; 0x24
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2253      	movs	r2, #83	; 0x53
 800682c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f991 	bl	8006b56 <RTC_EnterInitMode>
 8006834:	4603      	mov	r3, r0
 8006836:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006838:	7cfb      	ldrb	r3, [r7, #19]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d120      	bne.n	8006880 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006848:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800684c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800685c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6899      	ldr	r1, [r3, #8]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f9a4 	bl	8006bc4 <RTC_ExitInitMode>
 800687c:	4603      	mov	r3, r0
 800687e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	771a      	strb	r2, [r3, #28]

  return status;
 800689a:	7cfb      	ldrb	r3, [r7, #19]
}
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd90      	pop	{r4, r7, pc}

080068a4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80068d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	0d9b      	lsrs	r3, r3, #22
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	b2da      	uxtb	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11a      	bne.n	8006956 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 f98f 	bl	8006c48 <RTC_Bcd2ToByte>
 800692a:	4603      	mov	r3, r0
 800692c:	461a      	mov	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f986 	bl	8006c48 <RTC_Bcd2ToByte>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	789b      	ldrb	r3, [r3, #2]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f97d 	bl	8006c48 <RTC_Bcd2ToByte>
 800694e:	4603      	mov	r3, r0
 8006950:	461a      	mov	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	7f1b      	ldrb	r3, [r3, #28]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_RTC_SetDate+0x1c>
 8006978:	2302      	movs	r3, #2
 800697a:	e071      	b.n	8006a60 <HAL_RTC_SetDate+0x100>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2202      	movs	r2, #2
 8006986:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10e      	bne.n	80069ac <HAL_RTC_SetDate+0x4c>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	f023 0310 	bic.w	r3, r3, #16
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	330a      	adds	r3, #10
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d11c      	bne.n	80069ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	78db      	ldrb	r3, [r3, #3]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f929 	bl	8006c0e <RTC_ByteToBcd2>
 80069bc:	4603      	mov	r3, r0
 80069be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f922 	bl	8006c0e <RTC_ByteToBcd2>
 80069ca:	4603      	mov	r3, r0
 80069cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f91a 	bl	8006c0e <RTC_ByteToBcd2>
 80069da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e00e      	b.n	8006a0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	78db      	ldrb	r3, [r3, #3]
 80069f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069f8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	22ca      	movs	r2, #202	; 0xca
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2253      	movs	r2, #83	; 0x53
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f89b 	bl	8006b56 <RTC_EnterInitMode>
 8006a20:	4603      	mov	r3, r0
 8006a22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a24:	7cfb      	ldrb	r3, [r7, #19]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10c      	bne.n	8006a44 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f8c2 	bl	8006bc4 <RTC_ExitInitMode>
 8006a40:	4603      	mov	r3, r0
 8006a42:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	22ff      	movs	r2, #255	; 0xff
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	771a      	strb	r2, [r3, #28]

  return status;
 8006a5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd90      	pop	{r4, r7, pc}

08006a68 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	0b5b      	lsrs	r3, r3, #13
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d11a      	bne.n	8006afc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 f8bc 	bl	8006c48 <RTC_Bcd2ToByte>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 f8b3 	bl	8006c48 <RTC_Bcd2ToByte>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	789b      	ldrb	r3, [r3, #2]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f8aa 	bl	8006c48 <RTC_Bcd2ToByte>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b20:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b22:	f7fd ff97 	bl	8004a54 <HAL_GetTick>
 8006b26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b28:	e009      	b.n	8006b3e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b2a:	f7fd ff93 	bl	8004a54 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b38:	d901      	bls.n	8006b3e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e007      	b.n	8006b4e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0ee      	beq.n	8006b2a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d122      	bne.n	8006bba <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b84:	f7fd ff66 	bl	8004a54 <HAL_GetTick>
 8006b88:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b8a:	e00c      	b.n	8006ba6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b8c:	f7fd ff62 	bl	8004a54 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b9a:	d904      	bls.n	8006ba6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <RTC_EnterInitMode+0x64>
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d1e8      	bne.n	8006b8c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bde:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ff89 	bl	8006b06 <HAL_RTC_WaitForSynchro>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	4603      	mov	r3, r0
 8006c16:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006c1c:	e005      	b.n	8006c2a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	3301      	adds	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	3b0a      	subs	r3, #10
 8006c28:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	2b09      	cmp	r3, #9
 8006c2e:	d8f6      	bhi.n	8006c1e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	b2db      	uxtb	r3, r3
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	4413      	add	r3, r2
 8006c72:	b2db      	uxtb	r3, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e07b      	b.n	8006d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d108      	bne.n	8006cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca2:	d009      	beq.n	8006cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	61da      	str	r2, [r3, #28]
 8006caa:	e005      	b.n	8006cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fd fbbc 	bl	8004450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	ea42 0103 	orr.w	r1, r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	0c1b      	lsrs	r3, r3, #16
 8006d56:	f003 0104 	and.w	r1, r3, #4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0210 	and.w	r2, r3, #16
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b088      	sub	sp, #32
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_SPI_Transmit+0x22>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e126      	b.n	8007002 <HAL_SPI_Transmit+0x270>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dbc:	f7fd fe4a 	bl	8004a54 <HAL_GetTick>
 8006dc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d002      	beq.n	8006dd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dd6:	e10b      	b.n	8006ff0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SPI_Transmit+0x52>
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006de8:	e102      	b.n	8006ff0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2203      	movs	r2, #3
 8006dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	88fa      	ldrh	r2, [r7, #6]
 8006e02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e30:	d10f      	bne.n	8006e52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d007      	beq.n	8006e70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e78:	d14b      	bne.n	8006f12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_SPI_Transmit+0xf6>
 8006e82:	8afb      	ldrh	r3, [r7, #22]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d13e      	bne.n	8006f06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	881a      	ldrh	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	1c9a      	adds	r2, r3, #2
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006eac:	e02b      	b.n	8006f06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d112      	bne.n	8006ee2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ee0:	e011      	b.n	8006f06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee2:	f7fd fdb7 	bl	8004a54 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d803      	bhi.n	8006efa <HAL_SPI_Transmit+0x168>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef8:	d102      	bne.n	8006f00 <HAL_SPI_Transmit+0x16e>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f04:	e074      	b.n	8006ff0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1ce      	bne.n	8006eae <HAL_SPI_Transmit+0x11c>
 8006f10:	e04c      	b.n	8006fac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_SPI_Transmit+0x18e>
 8006f1a:	8afb      	ldrh	r3, [r7, #22]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d140      	bne.n	8006fa2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	7812      	ldrb	r2, [r2, #0]
 8006f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f46:	e02c      	b.n	8006fa2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d113      	bne.n	8006f7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f7c:	e011      	b.n	8006fa2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f7e:	f7fd fd69 	bl	8004a54 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d803      	bhi.n	8006f96 <HAL_SPI_Transmit+0x204>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f94:	d102      	bne.n	8006f9c <HAL_SPI_Transmit+0x20a>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fa0:	e026      	b.n	8006ff0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1cd      	bne.n	8006f48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fb13 	bl	80075dc <SPI_EndRxTxTransaction>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e000      	b.n	8006ff0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007000:	7ffb      	ldrb	r3, [r7, #31]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_Transmit_DMA+0x20>
 8007028:	2302      	movs	r3, #2
 800702a:	e09b      	b.n	8007164 <HAL_SPI_Transmit_DMA+0x158>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d002      	beq.n	8007046 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007040:	2302      	movs	r3, #2
 8007042:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007044:	e089      	b.n	800715a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <HAL_SPI_Transmit_DMA+0x46>
 800704c:	88fb      	ldrh	r3, [r7, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007056:	e080      	b.n	800715a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2203      	movs	r2, #3
 800705c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	88fa      	ldrh	r2, [r7, #6]
 8007076:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709e:	d10f      	bne.n	80070c0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c4:	4a29      	ldr	r2, [pc, #164]	; (800716c <HAL_SPI_Transmit_DMA+0x160>)
 80070c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070cc:	4a28      	ldr	r2, [pc, #160]	; (8007170 <HAL_SPI_Transmit_DMA+0x164>)
 80070ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d4:	4a27      	ldr	r2, [pc, #156]	; (8007174 <HAL_SPI_Transmit_DMA+0x168>)
 80070d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070dc:	2200      	movs	r2, #0
 80070de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	4619      	mov	r1, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	330c      	adds	r3, #12
 80070f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070f8:	f7fd fe6c 	bl	8004dd4 <HAL_DMA_Start_IT>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00c      	beq.n	800711c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	f043 0210 	orr.w	r2, r3, #16
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800711a:	e01e      	b.n	800715a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d007      	beq.n	800713a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007138:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0220 	orr.w	r2, r2, #32
 8007148:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0202 	orr.w	r2, r2, #2
 8007158:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	08007449 	.word	0x08007449
 8007170:	080073a1 	.word	0x080073a1
 8007174:	08007465 	.word	0x08007465

08007178 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	099b      	lsrs	r3, r3, #6
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10f      	bne.n	80071bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	099b      	lsrs	r3, r3, #6
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
    return;
 80071ba:	e0d7      	b.n	800736c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_SPI_IRQHandler+0x66>
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	09db      	lsrs	r3, r3, #7
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
    return;
 80071dc:	e0c6      	b.n	800736c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <HAL_SPI_IRQHandler+0x8c>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	099b      	lsrs	r3, r3, #6
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	0a1b      	lsrs	r3, r3, #8
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80b4 	beq.w	800736c <HAL_SPI_IRQHandler+0x1f4>
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	095b      	lsrs	r3, r3, #5
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80ad 	beq.w	800736c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d023      	beq.n	8007266 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d011      	beq.n	800724e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	f043 0204 	orr.w	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	e00b      	b.n	8007266 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800724e:	2300      	movs	r3, #0
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	693b      	ldr	r3, [r7, #16]
        return;
 8007264:	e082      	b.n	800736c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d014      	beq.n	800729c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f043 0201 	orr.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f043 0208 	orr.w	r2, r3, #8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072b4:	2300      	movs	r3, #0
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d04f      	beq.n	800736a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <HAL_SPI_IRQHandler+0x17e>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d034      	beq.n	8007360 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0203 	bic.w	r2, r2, #3
 8007304:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d011      	beq.n	8007332 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007312:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_SPI_IRQHandler+0x1fc>)
 8007314:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731a:	4618      	mov	r0, r3
 800731c:	f7fd fe22 	bl	8004f64 <HAL_DMA_Abort_IT>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007336:	2b00      	cmp	r3, #0
 8007338:	d016      	beq.n	8007368 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <HAL_SPI_IRQHandler+0x1fc>)
 8007340:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007346:	4618      	mov	r0, r3
 8007348:	f7fd fe0c 	bl	8004f64 <HAL_DMA_Abort_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800735e:	e003      	b.n	8007368 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f813 	bl	800738c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007366:	e000      	b.n	800736a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007368:	bf00      	nop
    return;
 800736a:	bf00      	nop
  }
}
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	080074a5 	.word	0x080074a5

08007378 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ae:	f7fd fb51 	bl	8004a54 <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	d03b      	beq.n	800743c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0220 	bic.w	r2, r2, #32
 80073d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0202 	bic.w	r2, r2, #2
 80073e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	2164      	movs	r1, #100	; 0x64
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f000 f8f7 	bl	80075dc <SPI_EndRxTxTransaction>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f8:	f043 0220 	orr.w	r2, r3, #32
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2200      	movs	r2, #0
 8007422:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007434:	6978      	ldr	r0, [r7, #20]
 8007436:	f7ff ffa9 	bl	800738c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800743a:	e002      	b.n	8007442 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800743c:	6978      	ldr	r0, [r7, #20]
 800743e:	f7fb fc0f 	bl	8002c60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff ff8e 	bl	8007378 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0203 	bic.w	r2, r2, #3
 8007480:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f043 0210 	orr.w	r2, r3, #16
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff ff78 	bl	800738c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff ff64 	bl	800738c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074dc:	f7fd faba 	bl	8004a54 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4413      	add	r3, r2
 80074ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074ec:	f7fd fab2 	bl	8004a54 <HAL_GetTick>
 80074f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074f2:	4b39      	ldr	r3, [pc, #228]	; (80075d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	015b      	lsls	r3, r3, #5
 80074f8:	0d1b      	lsrs	r3, r3, #20
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007502:	e054      	b.n	80075ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800750a:	d050      	beq.n	80075ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800750c:	f7fd faa2 	bl	8004a54 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	429a      	cmp	r2, r3
 800751a:	d902      	bls.n	8007522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d13d      	bne.n	800759e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800753a:	d111      	bne.n	8007560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007544:	d004      	beq.n	8007550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754e:	d107      	bne.n	8007560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007568:	d10f      	bne.n	800758a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e017      	b.n	80075ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4013      	ands	r3, r2
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d19b      	bne.n	8007504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	2000009c 	.word	0x2000009c

080075dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075e8:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <SPI_EndRxTxTransaction+0x7c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1b      	ldr	r2, [pc, #108]	; (800765c <SPI_EndRxTxTransaction+0x80>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	0d5b      	lsrs	r3, r3, #21
 80075f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007606:	d112      	bne.n	800762e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	2180      	movs	r1, #128	; 0x80
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff ff5a 	bl	80074cc <SPI_WaitFlagStateUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00f      	b.n	800764e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	3b01      	subs	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d0f2      	beq.n	800762e <SPI_EndRxTxTransaction+0x52>
 8007648:	e000      	b.n	800764c <SPI_EndRxTxTransaction+0x70>
        break;
 800764a:	bf00      	nop
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	2000009c 	.word	0x2000009c
 800765c:	165e9f81 	.word	0x165e9f81

08007660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e041      	b.n	80076f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fc ff6e 	bl	8004568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f000 fa96 	bl	8007bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b01      	cmp	r3, #1
 8007712:	d001      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e04e      	b.n	80077b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007742:	d01d      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1f      	ldr	r2, [pc, #124]	; (80077c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1e      	ldr	r2, [pc, #120]	; (80077cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1c      	ldr	r2, [pc, #112]	; (80077d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1b      	ldr	r2, [pc, #108]	; (80077d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <HAL_TIM_Base_Start_IT+0xdc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d111      	bne.n	80077a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b06      	cmp	r3, #6
 8007790:	d010      	beq.n	80077b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	e007      	b.n	80077b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40010400 	.word	0x40010400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40001800 	.word	0x40001800

080077e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b02      	cmp	r3, #2
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0202 	mvn.w	r2, #2
 800780c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9b5 	bl	8007b92 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9a7 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9b8 	bl	8007ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b04      	cmp	r3, #4
 8007848:	d122      	bne.n	8007890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b04      	cmp	r3, #4
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0204 	mvn.w	r2, #4
 8007860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f98b 	bl	8007b92 <HAL_TIM_IC_CaptureCallback>
 800787c:	e005      	b.n	800788a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f97d 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f98e 	bl	8007ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b08      	cmp	r3, #8
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0208 	mvn.w	r2, #8
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f961 	bl	8007b92 <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f953 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f964 	bl	8007ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b10      	cmp	r3, #16
 80078f0:	d122      	bne.n	8007938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b10      	cmp	r3, #16
 80078fe:	d11b      	bne.n	8007938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0210 	mvn.w	r2, #16
 8007908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2208      	movs	r2, #8
 800790e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f937 	bl	8007b92 <HAL_TIM_IC_CaptureCallback>
 8007924:	e005      	b.n	8007932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f929 	bl	8007b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f93a 	bl	8007ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b01      	cmp	r3, #1
 8007944:	d10e      	bne.n	8007964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	d107      	bne.n	8007964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f06f 0201 	mvn.w	r2, #1
 800795c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fc f8d2 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796e:	2b80      	cmp	r3, #128	; 0x80
 8007970:	d10e      	bne.n	8007990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d107      	bne.n	8007990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fae0 	bl	8007f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d10e      	bne.n	80079bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	d107      	bne.n	80079bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f8ff 	bl	8007bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d10e      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0220 	mvn.w	r2, #32
 80079e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 faaa 	bl	8007f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_TIM_ConfigClockSource+0x1c>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e0b4      	b.n	8007b76 <HAL_TIM_ConfigClockSource+0x186>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a44:	d03e      	beq.n	8007ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8007a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a4a:	f200 8087 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a52:	f000 8086 	beq.w	8007b62 <HAL_TIM_ConfigClockSource+0x172>
 8007a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5a:	d87f      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a5c:	2b70      	cmp	r3, #112	; 0x70
 8007a5e:	d01a      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0xa6>
 8007a60:	2b70      	cmp	r3, #112	; 0x70
 8007a62:	d87b      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a64:	2b60      	cmp	r3, #96	; 0x60
 8007a66:	d050      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x11a>
 8007a68:	2b60      	cmp	r3, #96	; 0x60
 8007a6a:	d877      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a6c:	2b50      	cmp	r3, #80	; 0x50
 8007a6e:	d03c      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0xfa>
 8007a70:	2b50      	cmp	r3, #80	; 0x50
 8007a72:	d873      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d058      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x13a>
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	d86f      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a7c:	2b30      	cmp	r3, #48	; 0x30
 8007a7e:	d064      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x15a>
 8007a80:	2b30      	cmp	r3, #48	; 0x30
 8007a82:	d86b      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d060      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x15a>
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d867      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d05c      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x15a>
 8007a90:	2b10      	cmp	r3, #16
 8007a92:	d05a      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x15a>
 8007a94:	e062      	b.n	8007b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6899      	ldr	r1, [r3, #8]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f000 f9ad 	bl	8007e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	609a      	str	r2, [r3, #8]
      break;
 8007ac2:	e04f      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6899      	ldr	r1, [r3, #8]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f000 f996 	bl	8007e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ae6:	609a      	str	r2, [r3, #8]
      break;
 8007ae8:	e03c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f000 f90a 	bl	8007d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2150      	movs	r1, #80	; 0x50
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f963 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007b08:	e02c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6859      	ldr	r1, [r3, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f000 f929 	bl	8007d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2160      	movs	r1, #96	; 0x60
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f953 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007b28:	e01c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 f8ea 	bl	8007d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2140      	movs	r1, #64	; 0x40
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f943 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007b48:	e00c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f000 f93a 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007b5a:	e003      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b60:	e000      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a40      	ldr	r2, [pc, #256]	; (8007ce4 <TIM_Base_SetConfig+0x114>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d013      	beq.n	8007c10 <TIM_Base_SetConfig+0x40>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d00f      	beq.n	8007c10 <TIM_Base_SetConfig+0x40>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a3d      	ldr	r2, [pc, #244]	; (8007ce8 <TIM_Base_SetConfig+0x118>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <TIM_Base_SetConfig+0x40>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a3c      	ldr	r2, [pc, #240]	; (8007cec <TIM_Base_SetConfig+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d007      	beq.n	8007c10 <TIM_Base_SetConfig+0x40>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a3b      	ldr	r2, [pc, #236]	; (8007cf0 <TIM_Base_SetConfig+0x120>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_Base_SetConfig+0x40>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a3a      	ldr	r2, [pc, #232]	; (8007cf4 <TIM_Base_SetConfig+0x124>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d108      	bne.n	8007c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2f      	ldr	r2, [pc, #188]	; (8007ce4 <TIM_Base_SetConfig+0x114>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d02b      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c30:	d027      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2c      	ldr	r2, [pc, #176]	; (8007ce8 <TIM_Base_SetConfig+0x118>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d023      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a2b      	ldr	r2, [pc, #172]	; (8007cec <TIM_Base_SetConfig+0x11c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d01f      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a2a      	ldr	r2, [pc, #168]	; (8007cf0 <TIM_Base_SetConfig+0x120>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d01b      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a29      	ldr	r2, [pc, #164]	; (8007cf4 <TIM_Base_SetConfig+0x124>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d017      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a28      	ldr	r2, [pc, #160]	; (8007cf8 <TIM_Base_SetConfig+0x128>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a27      	ldr	r2, [pc, #156]	; (8007cfc <TIM_Base_SetConfig+0x12c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00f      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a26      	ldr	r2, [pc, #152]	; (8007d00 <TIM_Base_SetConfig+0x130>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a25      	ldr	r2, [pc, #148]	; (8007d04 <TIM_Base_SetConfig+0x134>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a24      	ldr	r2, [pc, #144]	; (8007d08 <TIM_Base_SetConfig+0x138>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a23      	ldr	r2, [pc, #140]	; (8007d0c <TIM_Base_SetConfig+0x13c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d108      	bne.n	8007c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <TIM_Base_SetConfig+0x114>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0xf8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a0c      	ldr	r2, [pc, #48]	; (8007cf4 <TIM_Base_SetConfig+0x124>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d103      	bne.n	8007cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	615a      	str	r2, [r3, #20]
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40010000 	.word	0x40010000
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40000c00 	.word	0x40000c00
 8007cf4:	40010400 	.word	0x40010400
 8007cf8:	40014000 	.word	0x40014000
 8007cfc:	40014400 	.word	0x40014400
 8007d00:	40014800 	.word	0x40014800
 8007d04:	40001800 	.word	0x40001800
 8007d08:	40001c00 	.word	0x40001c00
 8007d0c:	40002000 	.word	0x40002000

08007d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 030a 	bic.w	r3, r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0210 	bic.w	r2, r3, #16
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f043 0307 	orr.w	r3, r3, #7
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	609a      	str	r2, [r3, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e05a      	b.n	8007f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a21      	ldr	r2, [pc, #132]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1a      	ldr	r2, [pc, #104]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a17      	ldr	r2, [pc, #92]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d10c      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40000400 	.word	0x40000400
 8007f28:	40000800 	.word	0x40000800
 8007f2c:	40000c00 	.word	0x40000c00
 8007f30:	40010400 	.word	0x40010400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40001800 	.word	0x40001800

08007f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e03f      	b.n	8007ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fc fb12 	bl	80045b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2224      	movs	r2, #36	; 0x24
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fe2b 	bl	8008c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	4613      	mov	r3, r2
 800800a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b20      	cmp	r3, #32
 8008016:	d11d      	bne.n	8008054 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_UART_Receive_IT+0x26>
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e016      	b.n	8008056 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_UART_Receive_IT+0x38>
 8008032:	2302      	movs	r3, #2
 8008034:	e00f      	b.n	8008056 <HAL_UART_Receive_IT+0x58>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	461a      	mov	r2, r3
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fbd9 	bl	8008802 <UART_Start_Receive_IT>
 8008050:	4603      	mov	r3, r0
 8008052:	e000      	b.n	8008056 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b20      	cmp	r3, #32
 8008078:	d165      	bne.n	8008146 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <HAL_UART_Transmit_DMA+0x26>
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e05e      	b.n	8008148 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_UART_Transmit_DMA+0x38>
 8008094:	2302      	movs	r3, #2
 8008096:	e057      	b.n	8008148 <HAL_UART_Transmit_DMA+0xe8>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	88fa      	ldrh	r2, [r7, #6]
 80080aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2221      	movs	r2, #33	; 0x21
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c4:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_UART_Transmit_DMA+0xf0>)
 80080c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080cc:	4a21      	ldr	r2, [pc, #132]	; (8008154 <HAL_UART_Transmit_DMA+0xf4>)
 80080ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d4:	4a20      	ldr	r2, [pc, #128]	; (8008158 <HAL_UART_Transmit_DMA+0xf8>)
 80080d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080dc:	2200      	movs	r2, #0
 80080de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80080e0:	f107 0308 	add.w	r3, r7, #8
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3304      	adds	r3, #4
 80080f4:	461a      	mov	r2, r3
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	f7fc fe6c 	bl	8004dd4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008104:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3314      	adds	r3, #20
 8008114:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	617b      	str	r3, [r7, #20]
   return(result);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800812e:	627a      	str	r2, [r7, #36]	; 0x24
 8008130:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6a39      	ldr	r1, [r7, #32]
 8008134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	61fb      	str	r3, [r7, #28]
   return(result);
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e5      	bne.n	800810e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3730      	adds	r7, #48	; 0x30
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	080086b9 	.word	0x080086b9
 8008154:	08008753 	.word	0x08008753
 8008158:	0800876f 	.word	0x0800876f

0800815c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b0ba      	sub	sp, #232	; 0xe8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008182:	2300      	movs	r3, #0
 8008184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008188:	2300      	movs	r3, #0
 800818a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800819a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10f      	bne.n	80081c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <HAL_UART_IRQHandler+0x66>
 80081ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fc66 	bl	8008a8c <UART_Receive_IT>
      return;
 80081c0:	e256      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80de 	beq.w	8008388 <HAL_UART_IRQHandler+0x22c>
 80081cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80d1 	beq.w	8008388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <HAL_UART_IRQHandler+0xae>
 80081f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	f043 0201 	orr.w	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <HAL_UART_IRQHandler+0xd2>
 8008216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	f043 0202 	orr.w	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800822e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <HAL_UART_IRQHandler+0xf6>
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f043 0204 	orr.w	r2, r3, #4
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d011      	beq.n	8008282 <HAL_UART_IRQHandler+0x126>
 800825e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f043 0208 	orr.w	r2, r3, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 81ed 	beq.w	8008666 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_UART_IRQHandler+0x14e>
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fbf1 	bl	8008a8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <HAL_UART_IRQHandler+0x17a>
 80082ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d04f      	beq.n	8008376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 faf9 	bl	80088ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d141      	bne.n	800836e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3314      	adds	r3, #20
 80082f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3314      	adds	r3, #20
 8008312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800831a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800832e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1d9      	bne.n	80082ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	4a7d      	ldr	r2, [pc, #500]	; (8008538 <HAL_UART_IRQHandler+0x3dc>)
 8008344:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	4618      	mov	r0, r3
 800834c:	f7fc fe0a 	bl	8004f64 <HAL_DMA_Abort_IT>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d016      	beq.n	8008384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00e      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f990 	bl	800868c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e00a      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f98c 	bl	800868c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e006      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f988 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008382:	e170      	b.n	8008666 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	bf00      	nop
    return;
 8008386:	e16e      	b.n	8008666 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	2b01      	cmp	r3, #1
 800838e:	f040 814a 	bne.w	8008626 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8143 	beq.w	8008626 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 813c 	beq.w	8008626 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	f040 80b4 	bne.w	800853c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8140 	beq.w	800866a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f080 8139 	bcs.w	800866a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840a:	f000 8088 	beq.w	800851e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	330c      	adds	r3, #12
 8008414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800842c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800843a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800843e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1d9      	bne.n	800840e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3314      	adds	r3, #20
 8008460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800846a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800847e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3314      	adds	r3, #20
 800849c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3314      	adds	r3, #20
 80084b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ee:	f023 0310 	bic.w	r3, r3, #16
 80084f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	330c      	adds	r3, #12
 80084fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008500:	65ba      	str	r2, [r7, #88]	; 0x58
 8008502:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008506:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800850e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e3      	bne.n	80084dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	4618      	mov	r0, r3
 800851a:	f7fc fcb3 	bl	8004e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008526:	b29b      	uxth	r3, r3
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	b29b      	uxth	r3, r3
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f8b6 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008534:	e099      	b.n	800866a <HAL_UART_IRQHandler+0x50e>
 8008536:	bf00      	nop
 8008538:	08008995 	.word	0x08008995
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008544:	b29b      	uxth	r3, r3
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 808b 	beq.w	800866e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8086 	beq.w	800866e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	330c      	adds	r3, #12
 8008568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	330c      	adds	r3, #12
 8008582:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008586:	647a      	str	r2, [r7, #68]	; 0x44
 8008588:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800858c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e3      	bne.n	8008562 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3314      	adds	r3, #20
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	623b      	str	r3, [r7, #32]
   return(result);
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3314      	adds	r3, #20
 80085ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085be:	633a      	str	r2, [r7, #48]	; 0x30
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e3      	bne.n	800859a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330c      	adds	r3, #12
 80085e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0310 	bic.w	r3, r3, #16
 80085f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008604:	61fa      	str	r2, [r7, #28]
 8008606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	69b9      	ldr	r1, [r7, #24]
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	617b      	str	r3, [r7, #20]
   return(result);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e3      	bne.n	80085e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f83e 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008624:	e023      	b.n	800866e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <HAL_UART_IRQHandler+0x4ea>
 8008632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f9bc 	bl	80089bc <UART_Transmit_IT>
    return;
 8008644:	e014      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <HAL_UART_IRQHandler+0x514>
 8008652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d008      	beq.n	8008670 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9fc 	bl	8008a5c <UART_EndTransmit_IT>
    return;
 8008664:	e004      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
    return;
 8008666:	bf00      	nop
 8008668:	e002      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
      return;
 800866a:	bf00      	nop
 800866c:	e000      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
      return;
 800866e:	bf00      	nop
  }
}
 8008670:	37e8      	adds	r7, #232	; 0xe8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop

08008678 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b090      	sub	sp, #64	; 0x40
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d137      	bne.n	8008744 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80086d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d6:	2200      	movs	r2, #0
 80086d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3314      	adds	r3, #20
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3314      	adds	r3, #20
 80086f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086fa:	633a      	str	r2, [r7, #48]	; 0x30
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e5      	bne.n	80086da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	60fb      	str	r3, [r7, #12]
   return(result);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
 8008726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800872e:	61fa      	str	r2, [r7, #28]
 8008730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	69b9      	ldr	r1, [r7, #24]
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	617b      	str	r3, [r7, #20]
   return(result);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008742:	e002      	b.n	800874a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008744:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008746:	f7fa fa75 	bl	8002c34 <HAL_UART_TxCpltCallback>
}
 800874a:	bf00      	nop
 800874c:	3740      	adds	r7, #64	; 0x40
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff ff89 	bl	8008678 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878a:	2b80      	cmp	r3, #128	; 0x80
 800878c:	bf0c      	ite	eq
 800878e:	2301      	moveq	r3, #1
 8008790:	2300      	movne	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b21      	cmp	r3, #33	; 0x21
 80087a0:	d108      	bne.n	80087b4 <UART_DMAError+0x46>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2200      	movs	r2, #0
 80087ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80087ae:	68b8      	ldr	r0, [r7, #8]
 80087b0:	f000 f865 	bl	800887e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	bf0c      	ite	eq
 80087c2:	2301      	moveq	r3, #1
 80087c4:	2300      	movne	r3, #0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b22      	cmp	r3, #34	; 0x22
 80087d4:	d108      	bne.n	80087e8 <UART_DMAError+0x7a>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2200      	movs	r2, #0
 80087e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80087e2:	68b8      	ldr	r0, [r7, #8]
 80087e4:	f000 f873 	bl	80088ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	f043 0210 	orr.w	r2, r3, #16
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087f4:	68b8      	ldr	r0, [r7, #8]
 80087f6:	f7ff ff49 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	4613      	mov	r3, r2
 800880e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	88fa      	ldrh	r2, [r7, #6]
 8008820:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2222      	movs	r2, #34	; 0x22
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800884e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0201 	orr.w	r2, r2, #1
 800885e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0220 	orr.w	r2, r2, #32
 800886e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800887e:	b480      	push	{r7}
 8008880:	b089      	sub	sp, #36	; 0x24
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	330c      	adds	r3, #12
 800888c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	60bb      	str	r3, [r7, #8]
   return(result);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	330c      	adds	r3, #12
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	61ba      	str	r2, [r7, #24]
 80088a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6979      	ldr	r1, [r7, #20]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	613b      	str	r3, [r7, #16]
   return(result);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e5      	bne.n	8008886 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80088c2:	bf00      	nop
 80088c4:	3724      	adds	r7, #36	; 0x24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b095      	sub	sp, #84	; 0x54
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	330c      	adds	r3, #12
 80088f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088f6:	643a      	str	r2, [r7, #64]	; 0x40
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e5      	bne.n	80088d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3314      	adds	r3, #20
 8008910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	61fb      	str	r3, [r7, #28]
   return(result);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	64bb      	str	r3, [r7, #72]	; 0x48
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3314      	adds	r3, #20
 8008928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800892a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e5      	bne.n	800890a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	2b01      	cmp	r3, #1
 8008944:	d119      	bne.n	800897a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	330c      	adds	r3, #12
 800894c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	60bb      	str	r3, [r7, #8]
   return(result);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f023 0310 	bic.w	r3, r3, #16
 800895c:	647b      	str	r3, [r7, #68]	; 0x44
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	330c      	adds	r3, #12
 8008964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008966:	61ba      	str	r2, [r7, #24]
 8008968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6979      	ldr	r1, [r7, #20]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	613b      	str	r3, [r7, #16]
   return(result);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e5      	bne.n	8008946 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008988:	bf00      	nop
 800898a:	3754      	adds	r7, #84	; 0x54
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7ff fe6c 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b21      	cmp	r3, #33	; 0x21
 80089ce:	d13e      	bne.n	8008a4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d8:	d114      	bne.n	8008a04 <UART_Transmit_IT+0x48>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d110      	bne.n	8008a04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	1c9a      	adds	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	621a      	str	r2, [r3, #32]
 8008a02:	e008      	b.n	8008a16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	1c59      	adds	r1, r3, #1
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6211      	str	r1, [r2, #32]
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4619      	mov	r1, r3
 8008a24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10f      	bne.n	8008a4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e000      	b.n	8008a50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a4e:	2302      	movs	r3, #2
  }
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7fa f8d9 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08c      	sub	sp, #48	; 0x30
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b22      	cmp	r3, #34	; 0x22
 8008a9e:	f040 80ab 	bne.w	8008bf8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aaa:	d117      	bne.n	8008adc <UART_Receive_IT+0x50>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d113      	bne.n	8008adc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	1c9a      	adds	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8008ada:	e026      	b.n	8008b2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aee:	d007      	beq.n	8008b00 <UART_Receive_IT+0x74>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <UART_Receive_IT+0x82>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	e008      	b.n	8008b20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	4619      	mov	r1, r3
 8008b38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d15a      	bne.n	8008bf4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0220 	bic.w	r2, r2, #32
 8008b4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	695a      	ldr	r2, [r3, #20]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d135      	bne.n	8008bea <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	613b      	str	r3, [r7, #16]
   return(result);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba4:	623a      	str	r2, [r7, #32]
 8008ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	69f9      	ldr	r1, [r7, #28]
 8008baa:	6a3a      	ldr	r2, [r7, #32]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e5      	bne.n	8008b84 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d10a      	bne.n	8008bdc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fd5c 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
 8008be8:	e002      	b.n	8008bf0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7f9 fd7a 	bl	80026e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e002      	b.n	8008bfa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e000      	b.n	8008bfa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bf8:	2302      	movs	r3, #2
  }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3730      	adds	r7, #48	; 0x30
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c08:	b0c0      	sub	sp, #256	; 0x100
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c20:	68d9      	ldr	r1, [r3, #12]
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	ea40 0301 	orr.w	r3, r0, r1
 8008c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c5c:	f021 010c 	bic.w	r1, r1, #12
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7e:	6999      	ldr	r1, [r3, #24]
 8008c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	ea40 0301 	orr.w	r3, r0, r1
 8008c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	4b8f      	ldr	r3, [pc, #572]	; (8008ed0 <UART_SetConfig+0x2cc>)
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d005      	beq.n	8008ca4 <UART_SetConfig+0xa0>
 8008c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b8d      	ldr	r3, [pc, #564]	; (8008ed4 <UART_SetConfig+0x2d0>)
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d104      	bne.n	8008cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ca4:	f7fd fbc6 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 8008ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cac:	e003      	b.n	8008cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cae:	f7fd fbad 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 8008cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc0:	f040 810c 	bne.w	8008edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	462b      	mov	r3, r5
 8008cda:	1891      	adds	r1, r2, r2
 8008cdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cde:	415b      	adcs	r3, r3
 8008ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	eb12 0801 	adds.w	r8, r2, r1
 8008cec:	4629      	mov	r1, r5
 8008cee:	eb43 0901 	adc.w	r9, r3, r1
 8008cf2:	f04f 0200 	mov.w	r2, #0
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d06:	4690      	mov	r8, r2
 8008d08:	4699      	mov	r9, r3
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	eb18 0303 	adds.w	r3, r8, r3
 8008d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d14:	462b      	mov	r3, r5
 8008d16:	eb49 0303 	adc.w	r3, r9, r3
 8008d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d32:	460b      	mov	r3, r1
 8008d34:	18db      	adds	r3, r3, r3
 8008d36:	653b      	str	r3, [r7, #80]	; 0x50
 8008d38:	4613      	mov	r3, r2
 8008d3a:	eb42 0303 	adc.w	r3, r2, r3
 8008d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d48:	f7f7 fdf0 	bl	800092c <__aeabi_uldivmod>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <UART_SetConfig+0x2d4>)
 8008d52:	fba3 2302 	umull	r2, r3, r3, r2
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	011c      	lsls	r4, r3, #4
 8008d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	464b      	mov	r3, r9
 8008d70:	1891      	adds	r1, r2, r2
 8008d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d74:	415b      	adcs	r3, r3
 8008d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d7c:	4641      	mov	r1, r8
 8008d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8008d82:	4649      	mov	r1, r9
 8008d84:	eb43 0b01 	adc.w	fp, r3, r1
 8008d88:	f04f 0200 	mov.w	r2, #0
 8008d8c:	f04f 0300 	mov.w	r3, #0
 8008d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d9c:	4692      	mov	sl, r2
 8008d9e:	469b      	mov	fp, r3
 8008da0:	4643      	mov	r3, r8
 8008da2:	eb1a 0303 	adds.w	r3, sl, r3
 8008da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008daa:	464b      	mov	r3, r9
 8008dac:	eb4b 0303 	adc.w	r3, fp, r3
 8008db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	18db      	adds	r3, r3, r3
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dce:	4613      	mov	r3, r2
 8008dd0:	eb42 0303 	adc.w	r3, r2, r3
 8008dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008dde:	f7f7 fda5 	bl	800092c <__aeabi_uldivmod>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	4b3b      	ldr	r3, [pc, #236]	; (8008ed8 <UART_SetConfig+0x2d4>)
 8008dea:	fba3 2301 	umull	r2, r3, r3, r1
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	2264      	movs	r2, #100	; 0x64
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	1acb      	subs	r3, r1, r3
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dfe:	4b36      	ldr	r3, [pc, #216]	; (8008ed8 <UART_SetConfig+0x2d4>)
 8008e00:	fba3 2302 	umull	r2, r3, r3, r2
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e0c:	441c      	add	r4, r3
 8008e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	1891      	adds	r1, r2, r2
 8008e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e28:	415b      	adcs	r3, r3
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e30:	4641      	mov	r1, r8
 8008e32:	1851      	adds	r1, r2, r1
 8008e34:	6339      	str	r1, [r7, #48]	; 0x30
 8008e36:	4649      	mov	r1, r9
 8008e38:	414b      	adcs	r3, r1
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e48:	4659      	mov	r1, fp
 8008e4a:	00cb      	lsls	r3, r1, #3
 8008e4c:	4651      	mov	r1, sl
 8008e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e52:	4651      	mov	r1, sl
 8008e54:	00ca      	lsls	r2, r1, #3
 8008e56:	4610      	mov	r0, r2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	4642      	mov	r2, r8
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e64:	464b      	mov	r3, r9
 8008e66:	460a      	mov	r2, r1
 8008e68:	eb42 0303 	adc.w	r3, r2, r3
 8008e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e84:	460b      	mov	r3, r1
 8008e86:	18db      	adds	r3, r3, r3
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	eb42 0303 	adc.w	r3, r2, r3
 8008e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e9a:	f7f7 fd47 	bl	800092c <__aeabi_uldivmod>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <UART_SetConfig+0x2d4>)
 8008ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	2164      	movs	r1, #100	; 0x64
 8008eac:	fb01 f303 	mul.w	r3, r1, r3
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	3332      	adds	r3, #50	; 0x32
 8008eb6:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <UART_SetConfig+0x2d4>)
 8008eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ebc:	095b      	lsrs	r3, r3, #5
 8008ebe:	f003 0207 	and.w	r2, r3, #7
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4422      	add	r2, r4
 8008eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ecc:	e105      	b.n	80090da <UART_SetConfig+0x4d6>
 8008ece:	bf00      	nop
 8008ed0:	40011000 	.word	0x40011000
 8008ed4:	40011400 	.word	0x40011400
 8008ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008eee:	4642      	mov	r2, r8
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	1891      	adds	r1, r2, r2
 8008ef4:	6239      	str	r1, [r7, #32]
 8008ef6:	415b      	adcs	r3, r3
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8008efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008efe:	4641      	mov	r1, r8
 8008f00:	1854      	adds	r4, r2, r1
 8008f02:	4649      	mov	r1, r9
 8008f04:	eb43 0501 	adc.w	r5, r3, r1
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	00eb      	lsls	r3, r5, #3
 8008f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f16:	00e2      	lsls	r2, r4, #3
 8008f18:	4614      	mov	r4, r2
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	18e3      	adds	r3, r4, r3
 8008f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f24:	464b      	mov	r3, r9
 8008f26:	eb45 0303 	adc.w	r3, r5, r3
 8008f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f3e:	f04f 0200 	mov.w	r2, #0
 8008f42:	f04f 0300 	mov.w	r3, #0
 8008f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	008b      	lsls	r3, r1, #2
 8008f4e:	4621      	mov	r1, r4
 8008f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f54:	4621      	mov	r1, r4
 8008f56:	008a      	lsls	r2, r1, #2
 8008f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f5c:	f7f7 fce6 	bl	800092c <__aeabi_uldivmod>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4b60      	ldr	r3, [pc, #384]	; (80090e8 <UART_SetConfig+0x4e4>)
 8008f66:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	011c      	lsls	r4, r3, #4
 8008f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	1891      	adds	r1, r2, r2
 8008f86:	61b9      	str	r1, [r7, #24]
 8008f88:	415b      	adcs	r3, r3
 8008f8a:	61fb      	str	r3, [r7, #28]
 8008f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f90:	4641      	mov	r1, r8
 8008f92:	1851      	adds	r1, r2, r1
 8008f94:	6139      	str	r1, [r7, #16]
 8008f96:	4649      	mov	r1, r9
 8008f98:	414b      	adcs	r3, r1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fa8:	4659      	mov	r1, fp
 8008faa:	00cb      	lsls	r3, r1, #3
 8008fac:	4651      	mov	r1, sl
 8008fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fb2:	4651      	mov	r1, sl
 8008fb4:	00ca      	lsls	r2, r1, #3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4642      	mov	r2, r8
 8008fbe:	189b      	adds	r3, r3, r2
 8008fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	eb42 0303 	adc.w	r3, r2, r3
 8008fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fe8:	4649      	mov	r1, r9
 8008fea:	008b      	lsls	r3, r1, #2
 8008fec:	4641      	mov	r1, r8
 8008fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	008a      	lsls	r2, r1, #2
 8008ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ffa:	f7f7 fc97 	bl	800092c <__aeabi_uldivmod>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4b39      	ldr	r3, [pc, #228]	; (80090e8 <UART_SetConfig+0x4e4>)
 8009004:	fba3 1302 	umull	r1, r3, r3, r2
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	2164      	movs	r1, #100	; 0x64
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	3332      	adds	r3, #50	; 0x32
 8009016:	4a34      	ldr	r2, [pc, #208]	; (80090e8 <UART_SetConfig+0x4e4>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009022:	441c      	add	r4, r3
 8009024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009028:	2200      	movs	r2, #0
 800902a:	673b      	str	r3, [r7, #112]	; 0x70
 800902c:	677a      	str	r2, [r7, #116]	; 0x74
 800902e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009032:	4642      	mov	r2, r8
 8009034:	464b      	mov	r3, r9
 8009036:	1891      	adds	r1, r2, r2
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	415b      	adcs	r3, r3
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009042:	4641      	mov	r1, r8
 8009044:	1851      	adds	r1, r2, r1
 8009046:	6039      	str	r1, [r7, #0]
 8009048:	4649      	mov	r1, r9
 800904a:	414b      	adcs	r3, r1
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800905a:	4659      	mov	r1, fp
 800905c:	00cb      	lsls	r3, r1, #3
 800905e:	4651      	mov	r1, sl
 8009060:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009064:	4651      	mov	r1, sl
 8009066:	00ca      	lsls	r2, r1, #3
 8009068:	4610      	mov	r0, r2
 800906a:	4619      	mov	r1, r3
 800906c:	4603      	mov	r3, r0
 800906e:	4642      	mov	r2, r8
 8009070:	189b      	adds	r3, r3, r2
 8009072:	66bb      	str	r3, [r7, #104]	; 0x68
 8009074:	464b      	mov	r3, r9
 8009076:	460a      	mov	r2, r1
 8009078:	eb42 0303 	adc.w	r3, r2, r3
 800907c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	663b      	str	r3, [r7, #96]	; 0x60
 8009088:	667a      	str	r2, [r7, #100]	; 0x64
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009096:	4649      	mov	r1, r9
 8009098:	008b      	lsls	r3, r1, #2
 800909a:	4641      	mov	r1, r8
 800909c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090a0:	4641      	mov	r1, r8
 80090a2:	008a      	lsls	r2, r1, #2
 80090a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090a8:	f7f7 fc40 	bl	800092c <__aeabi_uldivmod>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <UART_SetConfig+0x4e4>)
 80090b2:	fba3 1302 	umull	r1, r3, r3, r2
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2164      	movs	r1, #100	; 0x64
 80090ba:	fb01 f303 	mul.w	r3, r1, r3
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	3332      	adds	r3, #50	; 0x32
 80090c4:	4a08      	ldr	r2, [pc, #32]	; (80090e8 <UART_SetConfig+0x4e4>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f003 020f 	and.w	r2, r3, #15
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4422      	add	r2, r4
 80090d8:	609a      	str	r2, [r3, #8]
}
 80090da:	bf00      	nop
 80090dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090e0:	46bd      	mov	sp, r7
 80090e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090e6:	bf00      	nop
 80090e8:	51eb851f 	.word	0x51eb851f

080090ec <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b10      	cmp	r3, #16
 80090fc:	d11c      	bne.n	8009138 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b1f      	ldr	r3, [pc, #124]	; (8009180 <FSMC_NAND_Init+0x94>)
 8009104:	4013      	ands	r3, r2
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	6851      	ldr	r1, [r2, #4]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	6892      	ldr	r2, [r2, #8]
 800910e:	4311      	orrs	r1, r2
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	68d2      	ldr	r2, [r2, #12]
 8009114:	4311      	orrs	r1, r2
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	6912      	ldr	r2, [r2, #16]
 800911a:	4311      	orrs	r1, r2
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	6952      	ldr	r2, [r2, #20]
 8009120:	0252      	lsls	r2, r2, #9
 8009122:	4311      	orrs	r1, r2
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	6992      	ldr	r2, [r2, #24]
 8009128:	0352      	lsls	r2, r2, #13
 800912a:	430a      	orrs	r2, r1
 800912c:	4313      	orrs	r3, r2
 800912e:	f043 0208 	orr.w	r2, r3, #8
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e01b      	b.n	8009170 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1a      	ldr	r2, [r3, #32]
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <FSMC_NAND_Init+0x94>)
 800913e:	4013      	ands	r3, r2
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	6851      	ldr	r1, [r2, #4]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	6892      	ldr	r2, [r2, #8]
 8009148:	4311      	orrs	r1, r2
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	68d2      	ldr	r2, [r2, #12]
 800914e:	4311      	orrs	r1, r2
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	6912      	ldr	r2, [r2, #16]
 8009154:	4311      	orrs	r1, r2
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	6952      	ldr	r2, [r2, #20]
 800915a:	0252      	lsls	r2, r2, #9
 800915c:	4311      	orrs	r1, r2
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	6992      	ldr	r2, [r2, #24]
 8009162:	0352      	lsls	r2, r2, #13
 8009164:	430a      	orrs	r2, r1
 8009166:	4313      	orrs	r3, r2
 8009168:	f043 0208 	orr.w	r2, r3, #8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	fff00181 	.word	0xfff00181

08009184 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b10      	cmp	r3, #16
 8009194:	d112      	bne.n	80091bc <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	431a      	orrs	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	431a      	orrs	r2, r3
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	061b      	lsls	r3, r3, #24
 80091b4:	431a      	orrs	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	e011      	b.n	80091e0 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	431a      	orrs	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	041b      	lsls	r3, r3, #16
 80091d2:	431a      	orrs	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	061b      	lsls	r3, r3, #24
 80091da:	431a      	orrs	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d112      	bne.n	8009226 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	431a      	orrs	r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	431a      	orrs	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	061b      	lsls	r3, r3, #24
 800921e:	431a      	orrs	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	60da      	str	r2, [r3, #12]
 8009224:	e011      	b.n	800924a <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	431a      	orrs	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	041b      	lsls	r3, r3, #16
 800923c:	431a      	orrs	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	061b      	lsls	r3, r3, #24
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b10      	cmp	r3, #16
 8009266:	d106      	bne.n	8009276 <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e005      	b.n	8009282 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009294:	4904      	ldr	r1, [pc, #16]	; (80092a8 <MX_FATFS_Init+0x18>)
 8009296:	4805      	ldr	r0, [pc, #20]	; (80092ac <MX_FATFS_Init+0x1c>)
 8009298:	f000 f952 	bl	8009540 <FATFS_LinkDriver>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <MX_FATFS_Init+0x20>)
 80092a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092a4:	bf00      	nop
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20002d3c 	.word	0x20002d3c
 80092ac:	200000a8 	.word	0x200000a8
 80092b0:	20002d38 	.word	0x20002d38

080092b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <USER_initialize+0x34>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 80092c4:	4b08      	ldr	r3, [pc, #32]	; (80092e8 <USER_initialize+0x34>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	f023 0301 	bic.w	r3, r3, #1
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <USER_initialize+0x34>)
 80092d2:	701a      	strb	r2, [r3, #0]

    return Stat;
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <USER_initialize+0x34>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	200000a5 	.word	0x200000a5

080092ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <USER_status+0x34>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 80092fc:	4b08      	ldr	r3, [pc, #32]	; (8009320 <USER_status+0x34>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	f023 0301 	bic.w	r3, r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <USER_status+0x34>)
 800930a:	701a      	strb	r2, [r3, #0]

    return Stat;
 800930c:	4b04      	ldr	r3, [pc, #16]	; (8009320 <USER_status+0x34>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009312:	4618      	mov	r0, r3
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	200000a5 	.word	0x200000a5

08009324 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08c      	sub	sp, #48	; 0x30
 8009328:	af04      	add	r7, sp, #16
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	/**/
	DRESULT ret = RES_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	76fb      	strb	r3, [r7, #27]
	uint32_t ss = io_nand_get_page_size();
 8009338:	f7f7 fd08 	bl	8000d4c <io_nand_get_page_size>
 800933c:	6178      	str	r0, [r7, #20]
	int i = -1;
 800933e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009342:	61fb      	str	r3, [r7, #28]
	while (++i < count) {
 8009344:	e018      	b.n	8009378 <USER_read+0x54>
		if (dbg > logOff) Report(1, "[%s] Dev:%u page:%u(%u) count:%u\r\n", __func__, pdrv, sector, ss, count);
 8009346:	4b12      	ldr	r3, [pc, #72]	; (8009390 <USER_read+0x6c>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <USER_read+0x44>
 800934e:	7bfa      	ldrb	r2, [r7, #15]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	9302      	str	r3, [sp, #8]
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	4a0d      	ldr	r2, [pc, #52]	; (8009394 <USER_read+0x70>)
 8009360:	490d      	ldr	r1, [pc, #52]	; (8009398 <USER_read+0x74>)
 8009362:	2001      	movs	r0, #1
 8009364:	f7f9 f95a 	bl	800261c <Report>
		//ret |= nand_ReadPage(sector++, (BYTE *)buff);
		io_nand_read(sector++, (BYTE *)buff, ss, 0);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	607b      	str	r3, [r7, #4]
 800936e:	2300      	movs	r3, #0
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	f7f8 fab2 	bl	80018dc <io_nand_read>
	while (++i < count) {
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	3301      	adds	r3, #1
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d8df      	bhi.n	8009346 <USER_read+0x22>
	}
	/**/

    return ret;
 8009386:	7efb      	ldrb	r3, [r7, #27]
  /* USER CODE END READ */
}
 8009388:	4618      	mov	r0, r3
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000068 	.word	0x20000068
 8009394:	0800fe3c 	.word	0x0800fe3c
 8009398:	0800dc70 	.word	0x0800dc70

0800939c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08c      	sub	sp, #48	; 0x30
 80093a0:	af04      	add	r7, sp, #16
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	/**/
	DRESULT ret = RES_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	76fb      	strb	r3, [r7, #27]
	uint32_t ss = io_nand_get_page_size();
 80093b0:	f7f7 fccc 	bl	8000d4c <io_nand_get_page_size>
 80093b4:	6178      	str	r0, [r7, #20]
	int i = -1;
 80093b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093ba:	61fb      	str	r3, [r7, #28]
	while (++i < count) {
 80093bc:	e018      	b.n	80093f0 <USER_write+0x54>
		if (dbg > logOff) Report(1, "[%s] Dev:%u sector:%u(%u) count:%u\r\n", __func__, pdrv, sector, ss, count);
 80093be:	4b12      	ldr	r3, [pc, #72]	; (8009408 <USER_write+0x6c>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00c      	beq.n	80093e0 <USER_write+0x44>
 80093c6:	7bfa      	ldrb	r2, [r7, #15]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	4613      	mov	r3, r2
 80093d6:	4a0d      	ldr	r2, [pc, #52]	; (800940c <USER_write+0x70>)
 80093d8:	490d      	ldr	r1, [pc, #52]	; (8009410 <USER_write+0x74>)
 80093da:	2001      	movs	r0, #1
 80093dc:	f7f9 f91e 	bl	800261c <Report>
		//if (!pageIsEmpty(sector)) nand_EraseBlock(nand_PageToBlock(sector));
		//ret |= nand_WritePage(sector++, (BYTE *)buff);
		io_nand_write(sector++, (BYTE *)buff, ss, 0);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	2300      	movs	r3, #0
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	f7f8 fa94 	bl	8001918 <io_nand_write>
	while (++i < count) {
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	3301      	adds	r3, #1
 80093f4:	61fb      	str	r3, [r7, #28]
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d8df      	bhi.n	80093be <USER_write+0x22>
	}
	/**/

    return ret;
 80093fe:	7efb      	ldrb	r3, [r7, #27]
  /* USER CODE END WRITE */
}
 8009400:	4618      	mov	r0, r3
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000068 	.word	0x20000068
 800940c:	0800fe48 	.word	0x0800fe48
 8009410:	0800dc94 	.word	0x0800dc94

08009414 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009414:	b590      	push	{r4, r7, lr}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	603a      	str	r2, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
 8009420:	460b      	mov	r3, r1
 8009422:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
        /**/
        switch (cmd) {
 8009428:	79bb      	ldrb	r3, [r7, #6]
 800942a:	2b03      	cmp	r3, #3
 800942c:	d82f      	bhi.n	800948e <USER_ioctl+0x7a>
 800942e:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <USER_ioctl+0x20>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	08009445 	.word	0x08009445
 8009438:	0800944b 	.word	0x0800944b
 800943c:	08009465 	.word	0x08009465
 8009440:	08009475 	.word	0x08009475
        	case CTRL_SYNC:
        		res = RES_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
        	break;
 8009448:	e023      	b.n	8009492 <USER_ioctl+0x7e>
        	case GET_SECTOR_COUNT:
        		*(DWORD *)buff = io_nand_get_block_size() * io_nand_get_block_number();//nand_getPageCount();//W25qxx_getSectorCount();
 800944a:	f7f7 fc97 	bl	8000d7c <io_nand_get_block_size>
 800944e:	4604      	mov	r4, r0
 8009450:	f7f7 fc88 	bl	8000d64 <io_nand_get_block_number>
 8009454:	4603      	mov	r3, r0
 8009456:	fb03 f204 	mul.w	r2, r3, r4
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]
        	break;
 8009462:	e016      	b.n	8009492 <USER_ioctl+0x7e>
        	case GET_SECTOR_SIZE:
        		*(DWORD *)buff = io_nand_get_page_size();//nand_getPageSize();//W25qxx_getSectorSize();
 8009464:	f7f7 fc72 	bl	8000d4c <io_nand_get_page_size>
 8009468:	4602      	mov	r2, r0
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]
        	break;
 8009472:	e00e      	b.n	8009492 <USER_ioctl+0x7e>
        	case GET_BLOCK_SIZE:
        		*(DWORD *)buff = io_nand_get_block_size() * io_nand_get_page_size();//nand_getBlockSize();//W25qxx_getBlockSize();
 8009474:	f7f7 fc82 	bl	8000d7c <io_nand_get_block_size>
 8009478:	4604      	mov	r4, r0
 800947a:	f7f7 fc67 	bl	8000d4c <io_nand_get_page_size>
 800947e:	4603      	mov	r3, r0
 8009480:	fb03 f204 	mul.w	r2, r3, r4
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
        	break;
 800948c:	e001      	b.n	8009492 <USER_ioctl+0x7e>
            	default :
            		res = RES_PARERR;
 800948e:	2304      	movs	r3, #4
 8009490:	73fb      	strb	r3, [r7, #15]
        }
        /**/


    return res;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	bd90      	pop	{r4, r7, pc}

0800949c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80094aa:	2301      	movs	r3, #1
 80094ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80094b2:	4b22      	ldr	r3, [pc, #136]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b07      	cmp	r3, #7
 80094bc:	d837      	bhi.n	800952e <FATFS_LinkDriverEx+0x92>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094be:	4b1f      	ldr	r3, [pc, #124]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	4b1c      	ldr	r3, [pc, #112]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094ca:	2100      	movs	r1, #0
 80094cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4919      	ldr	r1, [pc, #100]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094d8:	3302      	adds	r3, #2
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    disk.lun[disk.nbr] = lun;
 80094e0:	4b16      	ldr	r3, [pc, #88]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094ec:	4413      	add	r3, r2
 80094ee:	79fa      	ldrb	r2, [r7, #7]
 80094f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    DiskNum = disk.nbr++;
 80094f4:	4b11      	ldr	r3, [pc, #68]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 80094f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	b2d1      	uxtb	r1, r2
 8009500:	4a0e      	ldr	r2, [pc, #56]	; (800953c <FATFS_LinkDriverEx+0xa0>)
 8009502:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8009506:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009508:	7dbb      	ldrb	r3, [r7, #22]
 800950a:	3330      	adds	r3, #48	; 0x30
 800950c:	b2da      	uxtb	r2, r3
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	3301      	adds	r3, #1
 8009516:	223a      	movs	r2, #58	; 0x3a
 8009518:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	3302      	adds	r3, #2
 800951e:	222f      	movs	r2, #47	; 0x2f
 8009520:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	3303      	adds	r3, #3
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	20002d40 	.word	0x20002d40

08009540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800954a:	2200      	movs	r2, #0
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff ffa4 	bl	800949c <FATFS_LinkDriverEx>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <__NVIC_SetPriority>:
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800956c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db0a      	blt.n	800958a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	b2da      	uxtb	r2, r3
 8009578:	490c      	ldr	r1, [pc, #48]	; (80095ac <__NVIC_SetPriority+0x4c>)
 800957a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957e:	0112      	lsls	r2, r2, #4
 8009580:	b2d2      	uxtb	r2, r2
 8009582:	440b      	add	r3, r1
 8009584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009588:	e00a      	b.n	80095a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4908      	ldr	r1, [pc, #32]	; (80095b0 <__NVIC_SetPriority+0x50>)
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	3b04      	subs	r3, #4
 8009598:	0112      	lsls	r2, r2, #4
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	440b      	add	r3, r1
 800959e:	761a      	strb	r2, [r3, #24]
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	e000e100 	.word	0xe000e100
 80095b0:	e000ed00 	.word	0xe000ed00

080095b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <SysTick_Handler+0x1c>)
 80095ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80095bc:	f002 f856 	bl	800b66c <xTaskGetSchedulerState>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d001      	beq.n	80095ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095c6:	f002 fe3f 	bl	800c248 <xPortSysTickHandler>
  }
}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	e000e010 	.word	0xe000e010

080095d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095d8:	2100      	movs	r1, #0
 80095da:	f06f 0004 	mvn.w	r0, #4
 80095de:	f7ff ffbf 	bl	8009560 <__NVIC_SetPriority>
#endif
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	603b      	str	r3, [r7, #0]
  return(result);
 80095f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095fa:	f06f 0305 	mvn.w	r3, #5
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	e00f      	b.n	8009622 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009602:	4b0a      	ldr	r3, [pc, #40]	; (800962c <osKernelInitialize+0x44>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d108      	bne.n	800961c <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800960a:	4809      	ldr	r0, [pc, #36]	; (8009630 <osKernelInitialize+0x48>)
 800960c:	f003 f818 	bl	800c640 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <osKernelInitialize+0x44>)
 8009612:	2201      	movs	r2, #1
 8009614:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
 800961a:	e002      	b.n	8009622 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800961c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009620:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009622:	687b      	ldr	r3, [r7, #4]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20002d74 	.word	0x20002d74
 8009630:	200000bc 	.word	0x200000bc

08009634 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800963a:	f3ef 8305 	mrs	r3, IPSR
 800963e:	603b      	str	r3, [r7, #0]
  return(result);
 8009640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009646:	f06f 0305 	mvn.w	r3, #5
 800964a:	607b      	str	r3, [r7, #4]
 800964c:	e010      	b.n	8009670 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800964e:	4b0b      	ldr	r3, [pc, #44]	; (800967c <osKernelStart+0x48>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d109      	bne.n	800966a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009656:	f7ff ffbd 	bl	80095d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800965a:	4b08      	ldr	r3, [pc, #32]	; (800967c <osKernelStart+0x48>)
 800965c:	2202      	movs	r2, #2
 800965e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009660:	f001 fba8 	bl	800adb4 <vTaskStartScheduler>
      stat = osOK;
 8009664:	2300      	movs	r3, #0
 8009666:	607b      	str	r3, [r7, #4]
 8009668:	e002      	b.n	8009670 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800966a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800966e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009670:	687b      	ldr	r3, [r7, #4]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20002d74 	.word	0x20002d74

08009680 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b08e      	sub	sp, #56	; 0x38
 8009684:	af04      	add	r7, sp, #16
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800968c:	2300      	movs	r3, #0
 800968e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009690:	f3ef 8305 	mrs	r3, IPSR
 8009694:	617b      	str	r3, [r7, #20]
  return(result);
 8009696:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009698:	2b00      	cmp	r3, #0
 800969a:	d17e      	bne.n	800979a <osThreadNew+0x11a>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d07b      	beq.n	800979a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096a2:	2380      	movs	r3, #128	; 0x80
 80096a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096a6:	2318      	movs	r3, #24
 80096a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d045      	beq.n	8009746 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <osThreadNew+0x48>
        name = attr->name;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d008      	beq.n	80096ee <osThreadNew+0x6e>
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	2b38      	cmp	r3, #56	; 0x38
 80096e0:	d805      	bhi.n	80096ee <osThreadNew+0x6e>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <osThreadNew+0x72>
        return (NULL);
 80096ee:	2300      	movs	r3, #0
 80096f0:	e054      	b.n	800979c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	089b      	lsrs	r3, r3, #2
 8009700:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00e      	beq.n	8009728 <osThreadNew+0xa8>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	2bbb      	cmp	r3, #187	; 0xbb
 8009710:	d90a      	bls.n	8009728 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009716:	2b00      	cmp	r3, #0
 8009718:	d006      	beq.n	8009728 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <osThreadNew+0xa8>
        mem = 1;
 8009722:	2301      	movs	r3, #1
 8009724:	61bb      	str	r3, [r7, #24]
 8009726:	e010      	b.n	800974a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10c      	bne.n	800974a <osThreadNew+0xca>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d108      	bne.n	800974a <osThreadNew+0xca>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <osThreadNew+0xca>
          mem = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	61bb      	str	r3, [r7, #24]
 8009744:	e001      	b.n	800974a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d110      	bne.n	8009772 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009758:	9202      	str	r2, [sp, #8]
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	6a3a      	ldr	r2, [r7, #32]
 8009764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f001 f938 	bl	800a9dc <xTaskCreateStatic>
 800976c:	4603      	mov	r3, r0
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	e013      	b.n	800979a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d110      	bne.n	800979a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	b29a      	uxth	r2, r3
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f001 f983 	bl	800aa96 <xTaskCreate>
 8009790:	4603      	mov	r3, r0
 8009792:	2b01      	cmp	r3, #1
 8009794:	d001      	beq.n	800979a <osThreadNew+0x11a>
            hTask = NULL;
 8009796:	2300      	movs	r3, #0
 8009798:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800979a:	693b      	ldr	r3, [r7, #16]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	; 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ac:	f3ef 8305 	mrs	r3, IPSR
 80097b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80097b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <osDelay+0x1c>
    stat = osErrorISR;
 80097b8:	f06f 0305 	mvn.w	r3, #5
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	e007      	b.n	80097d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fabe 	bl	800ad4c <vTaskDelay>
    }
  }

  return (stat);
 80097d0:	68fb      	ldr	r3, [r7, #12]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80097da:	b580      	push	{r7, lr}
 80097dc:	b08a      	sub	sp, #40	; 0x28
 80097de:	af02      	add	r7, sp, #8
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ea:	f3ef 8305 	mrs	r3, IPSR
 80097ee:	613b      	str	r3, [r7, #16]
  return(result);
 80097f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d175      	bne.n	80098e2 <osSemaphoreNew+0x108>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d072      	beq.n	80098e2 <osSemaphoreNew+0x108>
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	429a      	cmp	r2, r3
 8009802:	d86e      	bhi.n	80098e2 <osSemaphoreNew+0x108>
    mem = -1;
 8009804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009808:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <osSemaphoreNew+0x4c>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	2b4f      	cmp	r3, #79	; 0x4f
 800981e:	d902      	bls.n	8009826 <osSemaphoreNew+0x4c>
        mem = 1;
 8009820:	2301      	movs	r3, #1
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e00c      	b.n	8009840 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d108      	bne.n	8009840 <osSemaphoreNew+0x66>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <osSemaphoreNew+0x66>
          mem = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e001      	b.n	8009840 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009846:	d04c      	beq.n	80098e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d128      	bne.n	80098a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d10a      	bne.n	800986a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	2203      	movs	r2, #3
 800985a:	9200      	str	r2, [sp, #0]
 800985c:	2200      	movs	r2, #0
 800985e:	2100      	movs	r1, #0
 8009860:	2001      	movs	r0, #1
 8009862:	f000 fac5 	bl	8009df0 <xQueueGenericCreateStatic>
 8009866:	61f8      	str	r0, [r7, #28]
 8009868:	e005      	b.n	8009876 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800986a:	2203      	movs	r2, #3
 800986c:	2100      	movs	r1, #0
 800986e:	2001      	movs	r0, #1
 8009870:	f000 fb36 	bl	8009ee0 <xQueueGenericCreate>
 8009874:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d022      	beq.n	80098c2 <osSemaphoreNew+0xe8>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01f      	beq.n	80098c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009882:	2300      	movs	r3, #0
 8009884:	2200      	movs	r2, #0
 8009886:	2100      	movs	r1, #0
 8009888:	69f8      	ldr	r0, [r7, #28]
 800988a:	f000 fbf1 	bl	800a070 <xQueueGenericSend>
 800988e:	4603      	mov	r3, r0
 8009890:	2b01      	cmp	r3, #1
 8009892:	d016      	beq.n	80098c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009894:	69f8      	ldr	r0, [r7, #28]
 8009896:	f000 fee5 	bl	800a664 <vQueueDelete>
            hSemaphore = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
 800989e:	e010      	b.n	80098c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d108      	bne.n	80098b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	461a      	mov	r2, r3
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fb73 	bl	8009f9a <xQueueCreateCountingSemaphoreStatic>
 80098b4:	61f8      	str	r0, [r7, #28]
 80098b6:	e004      	b.n	80098c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fba4 	bl	800a008 <xQueueCreateCountingSemaphore>
 80098c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00c      	beq.n	80098e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	e001      	b.n	80098da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80098da:	6979      	ldr	r1, [r7, #20]
 80098dc:	69f8      	ldr	r0, [r7, #28]
 80098de:	f000 fff5 	bl	800a8cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80098e2:	69fb      	ldr	r3, [r7, #28]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	; 0x28
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098fc:	f3ef 8305 	mrs	r3, IPSR
 8009900:	613b      	str	r3, [r7, #16]
  return(result);
 8009902:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009904:	2b00      	cmp	r3, #0
 8009906:	d15f      	bne.n	80099c8 <osMessageQueueNew+0xdc>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d05c      	beq.n	80099c8 <osMessageQueueNew+0xdc>
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d059      	beq.n	80099c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009918:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d029      	beq.n	8009974 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d012      	beq.n	800994e <osMessageQueueNew+0x62>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b4f      	cmp	r3, #79	; 0x4f
 800992e:	d90e      	bls.n	800994e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00a      	beq.n	800994e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	695a      	ldr	r2, [r3, #20]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	fb01 f303 	mul.w	r3, r1, r3
 8009944:	429a      	cmp	r2, r3
 8009946:	d302      	bcc.n	800994e <osMessageQueueNew+0x62>
        mem = 1;
 8009948:	2301      	movs	r3, #1
 800994a:	61bb      	str	r3, [r7, #24]
 800994c:	e014      	b.n	8009978 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d110      	bne.n	8009978 <osMessageQueueNew+0x8c>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10c      	bne.n	8009978 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009962:	2b00      	cmp	r3, #0
 8009964:	d108      	bne.n	8009978 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <osMessageQueueNew+0x8c>
          mem = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	e001      	b.n	8009978 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d10b      	bne.n	8009996 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691a      	ldr	r2, [r3, #16]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	2100      	movs	r1, #0
 8009988:	9100      	str	r1, [sp, #0]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 fa2f 	bl	8009df0 <xQueueGenericCreateStatic>
 8009992:	61f8      	str	r0, [r7, #28]
 8009994:	e008      	b.n	80099a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d105      	bne.n	80099a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800999c:	2200      	movs	r2, #0
 800999e:	68b9      	ldr	r1, [r7, #8]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fa9d 	bl	8009ee0 <xQueueGenericCreate>
 80099a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00c      	beq.n	80099c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e001      	b.n	80099c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	69f8      	ldr	r0, [r7, #28]
 80099c4:	f000 ff82 	bl	800a8cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80099c8:	69fb      	ldr	r3, [r7, #28]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	4613      	mov	r3, r2
 80099e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099ec:	f3ef 8305 	mrs	r3, IPSR
 80099f0:	617b      	str	r3, [r7, #20]
  return(result);
 80099f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d028      	beq.n	8009a4a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <osMessageQueuePut+0x36>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <osMessageQueuePut+0x36>
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009a0a:	f06f 0303 	mvn.w	r3, #3
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e038      	b.n	8009a84 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009a16:	f107 0210 	add.w	r2, r7, #16
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	69b8      	ldr	r0, [r7, #24]
 8009a20:	f000 fc24 	bl	800a26c <xQueueGenericSendFromISR>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d003      	beq.n	8009a32 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009a2a:	f06f 0302 	mvn.w	r3, #2
 8009a2e:	61fb      	str	r3, [r7, #28]
 8009a30:	e028      	b.n	8009a84 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d025      	beq.n	8009a84 <osMessageQueuePut+0xb0>
 8009a38:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <osMessageQueuePut+0xbc>)
 8009a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	e01c      	b.n	8009a84 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <osMessageQueuePut+0x82>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009a56:	f06f 0303 	mvn.w	r3, #3
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e012      	b.n	8009a84 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a5e:	2300      	movs	r3, #0
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	69b8      	ldr	r0, [r7, #24]
 8009a66:	f000 fb03 	bl	800a070 <xQueueGenericSend>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d009      	beq.n	8009a84 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009a76:	f06f 0301 	mvn.w	r3, #1
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	e002      	b.n	8009a84 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009a7e:	f06f 0302 	mvn.w	r3, #2
 8009a82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a84:	69fb      	ldr	r3, [r7, #28]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aaa:	f3ef 8305 	mrs	r3, IPSR
 8009aae:	617b      	str	r3, [r7, #20]
  return(result);
 8009ab0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d028      	beq.n	8009b08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d005      	beq.n	8009ac8 <osMessageQueueGet+0x34>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <osMessageQueueGet+0x34>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009ac8:	f06f 0303 	mvn.w	r3, #3
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	e037      	b.n	8009b40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009ad4:	f107 0310 	add.w	r3, r7, #16
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	69b8      	ldr	r0, [r7, #24]
 8009ade:	f000 fd41 	bl	800a564 <xQueueReceiveFromISR>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d003      	beq.n	8009af0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009ae8:	f06f 0302 	mvn.w	r3, #2
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	e027      	b.n	8009b40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d024      	beq.n	8009b40 <osMessageQueueGet+0xac>
 8009af6:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <osMessageQueueGet+0xb8>)
 8009af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	e01b      	b.n	8009b40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <osMessageQueueGet+0x80>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d103      	bne.n	8009b1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009b14:	f06f 0303 	mvn.w	r3, #3
 8009b18:	61fb      	str	r3, [r7, #28]
 8009b1a:	e011      	b.n	8009b40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	69b8      	ldr	r0, [r7, #24]
 8009b22:	f000 fc3f 	bl	800a3a4 <xQueueReceive>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d009      	beq.n	8009b40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009b32:	f06f 0301 	mvn.w	r3, #1
 8009b36:	61fb      	str	r3, [r7, #28]
 8009b38:	e002      	b.n	8009b40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009b3a:	f06f 0302 	mvn.w	r3, #2
 8009b3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b40:	69fb      	ldr	r3, [r7, #28]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3720      	adds	r7, #32
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8009b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vApplicationGetIdleTaskMemory+0x30>)
 8009b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2280      	movs	r2, #128	; 0x80
 8009b6c:	601a      	str	r2, [r3, #0]
}
 8009b6e:	bf00      	nop
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	20007d78 	.word	0x20007d78
 8009b80:	20007e34 	.word	0x20007e34

08009b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	4a06      	ldr	r2, [pc, #24]	; (8009bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8009b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	20008034 	.word	0x20008034
 8009bb4:	200080f0 	.word	0x200080f0

08009bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f103 0208 	add.w	r2, r3, #8
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f103 0208 	add.w	r2, r3, #8
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f103 0208 	add.w	r2, r3, #8
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c12:	b480      	push	{r7}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c70:	d103      	bne.n	8009c7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	e00c      	b.n	8009c94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e002      	b.n	8009c88 <vListInsert+0x2e>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d2f6      	bcs.n	8009c82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	601a      	str	r2, [r3, #0]
}
 8009cc0:	bf00      	nop
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6892      	ldr	r2, [r2, #8]
 8009ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6852      	ldr	r2, [r2, #4]
 8009cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d103      	bne.n	8009d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	1e5a      	subs	r2, r3, #1
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d4a:	f002 f9eb 	bl	800c124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d5a:	fb01 f303 	mul.w	r3, r1, r3
 8009d5e:	441a      	add	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	68f9      	ldr	r1, [r7, #12]
 8009d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d80:	fb01 f303 	mul.w	r3, r1, r3
 8009d84:	441a      	add	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	22ff      	movs	r2, #255	; 0xff
 8009d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d114      	bne.n	8009dca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01a      	beq.n	8009dde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3310      	adds	r3, #16
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 fa9b 	bl	800b2e8 <xTaskRemoveFromEventList>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d012      	beq.n	8009dde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <xQueueGenericReset+0xcc>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	e009      	b.n	8009dde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3310      	adds	r3, #16
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fef2 	bl	8009bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3324      	adds	r3, #36	; 0x24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff feed 	bl	8009bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dde:	f002 f9d1 	bl	800c184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009de2:	2301      	movs	r3, #1
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08e      	sub	sp, #56	; 0x38
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <xQueueGenericCreateStatic+0x52>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <xQueueGenericCreateStatic+0x56>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <xQueueGenericCreateStatic+0x58>
 8009e46:	2300      	movs	r3, #0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	623b      	str	r3, [r7, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	e7fe      	b.n	8009e60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <xQueueGenericCreateStatic+0x7e>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <xQueueGenericCreateStatic+0x82>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e000      	b.n	8009e74 <xQueueGenericCreateStatic+0x84>
 8009e72:	2300      	movs	r3, #0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	61fb      	str	r3, [r7, #28]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e8e:	2350      	movs	r3, #80	; 0x50
 8009e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b50      	cmp	r3, #80	; 0x50
 8009e96:	d00a      	beq.n	8009eae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	61bb      	str	r3, [r7, #24]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009eae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00d      	beq.n	8009ed6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ec2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	68b9      	ldr	r1, [r7, #8]
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f000 f83f 	bl	8009f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3730      	adds	r7, #48	; 0x30
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	4613      	mov	r3, r2
 8009eec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	613b      	str	r3, [r7, #16]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3350      	adds	r3, #80	; 0x50
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 fa25 	bl	800c368 <pvPortMalloc>
 8009f1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	3350      	adds	r3, #80	; 0x50
 8009f2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f805 	bl	8009f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	e002      	b.n	8009f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f82:	2101      	movs	r1, #1
 8009f84:	69b8      	ldr	r0, [r7, #24]
 8009f86:	f7ff fecb 	bl	8009d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b08a      	sub	sp, #40	; 0x28
 8009f9e:	af02      	add	r7, sp, #8
 8009fa0:	60f8      	str	r0, [r7, #12]
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	61bb      	str	r3, [r7, #24]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d90a      	bls.n	8009fe0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	617b      	str	r3, [r7, #20]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff ff00 	bl	8009df0 <xQueueGenericCreateStatic>
 8009ff0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ffe:	69fb      	ldr	r3, [r7, #28]
	}
 800a000:	4618      	mov	r0, r3
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	613b      	str	r3, [r7, #16]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d90a      	bls.n	800a04c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60fb      	str	r3, [r7, #12]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a04c:	2202      	movs	r2, #2
 800a04e:	2100      	movs	r1, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ff45 	bl	8009ee0 <xQueueGenericCreate>
 800a056:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a064:	697b      	ldr	r3, [r7, #20]
	}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08e      	sub	sp, #56	; 0x38
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericSend+0x32>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <xQueueGenericSend+0x40>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <xQueueGenericSend+0x44>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <xQueueGenericSend+0x46>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <xQueueGenericSend+0x60>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSend+0x6e>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSend+0x72>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSend+0x74>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xQueueGenericSend+0x8e>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0fe:	f001 fab5 	bl	800b66c <xTaskGetSchedulerState>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <xQueueGenericSend+0x9e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <xQueueGenericSend+0xa2>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueGenericSend+0xa4>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <xQueueGenericSend+0xbe>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	61fb      	str	r3, [r7, #28]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a12e:	f001 fff9 	bl	800c124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d302      	bcc.n	800a144 <xQueueGenericSend+0xd4>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d129      	bne.n	800a198 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14a:	f000 faae 	bl	800a6aa <prvCopyDataToQueue>
 800a14e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d010      	beq.n	800a17a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 f8c3 	bl	800b2e8 <xTaskRemoveFromEventList>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d013      	beq.n	800a190 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a168:	4b3f      	ldr	r3, [pc, #252]	; (800a268 <xQueueGenericSend+0x1f8>)
 800a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	e00a      	b.n	800a190 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a180:	4b39      	ldr	r3, [pc, #228]	; (800a268 <xQueueGenericSend+0x1f8>)
 800a182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a190:	f001 fff8 	bl	800c184 <vPortExitCritical>
				return pdPASS;
 800a194:	2301      	movs	r3, #1
 800a196:	e063      	b.n	800a260 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a19e:	f001 fff1 	bl	800c184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e05c      	b.n	800a260 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1ac:	f107 0314 	add.w	r3, r7, #20
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 f8fd 	bl	800b3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ba:	f001 ffe3 	bl	800c184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1be:	f000 fe69 	bl	800ae94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1c2:	f001 ffaf 	bl	800c124 <vPortEnterCritical>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1d2:	d103      	bne.n	800a1dc <xQueueGenericSend+0x16c>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e2:	b25b      	sxtb	r3, r3
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1e8:	d103      	bne.n	800a1f2 <xQueueGenericSend+0x182>
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f2:	f001 ffc7 	bl	800c184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1f6:	1d3a      	adds	r2, r7, #4
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 f8ec 	bl	800b3dc <xTaskCheckForTimeOut>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d124      	bne.n	800a254 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a20a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a20c:	f000 fb45 	bl	800a89a <prvIsQueueFull>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d018      	beq.n	800a248 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	3310      	adds	r3, #16
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f812 	bl	800b248 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a226:	f000 fad0 	bl	800a7ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a22a:	f000 fe41 	bl	800aeb0 <xTaskResumeAll>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	f47f af7c 	bne.w	800a12e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a236:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <xQueueGenericSend+0x1f8>)
 800a238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	e772      	b.n	800a12e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24a:	f000 fabe 	bl	800a7ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a24e:	f000 fe2f 	bl	800aeb0 <xTaskResumeAll>
 800a252:	e76c      	b.n	800a12e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a256:	f000 fab8 	bl	800a7ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a25a:	f000 fe29 	bl	800aeb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a25e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a260:	4618      	mov	r0, r3
 800a262:	3738      	adds	r7, #56	; 0x38
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b090      	sub	sp, #64	; 0x40
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d103      	bne.n	800a2a8 <xQueueGenericSendFromISR+0x3c>
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <xQueueGenericSendFromISR+0x40>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <xQueueGenericSendFromISR+0x42>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSendFromISR+0x6a>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericSendFromISR+0x6e>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericSendFromISR+0x70>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2f6:	f001 fff7 	bl	800c2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	61fa      	str	r2, [r7, #28]
 800a310:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a312:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a314:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31e:	429a      	cmp	r2, r3
 800a320:	d302      	bcc.n	800a328 <xQueueGenericSendFromISR+0xbc>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d12f      	bne.n	800a388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a33e:	f000 f9b4 	bl	800a6aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34a:	d112      	bne.n	800a372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d016      	beq.n	800a382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	3324      	adds	r3, #36	; 0x24
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 ffc5 	bl	800b2e8 <xTaskRemoveFromEventList>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00e      	beq.n	800a382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00b      	beq.n	800a382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	e007      	b.n	800a382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a376:	3301      	adds	r3, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	b25a      	sxtb	r2, r3
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a382:	2301      	movs	r3, #1
 800a384:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a386:	e001      	b.n	800a38c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3740      	adds	r7, #64	; 0x40
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08c      	sub	sp, #48	; 0x30
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <xQueueReceive+0x30>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	623b      	str	r3, [r7, #32]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d103      	bne.n	800a3e2 <xQueueReceive+0x3e>
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <xQueueReceive+0x42>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <xQueueReceive+0x44>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xQueueReceive+0x5e>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	61fb      	str	r3, [r7, #28]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a402:	f001 f933 	bl	800b66c <xTaskGetSchedulerState>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <xQueueReceive+0x6e>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <xQueueReceive+0x72>
 800a412:	2301      	movs	r3, #1
 800a414:	e000      	b.n	800a418 <xQueueReceive+0x74>
 800a416:	2300      	movs	r3, #0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <xQueueReceive+0x8e>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	61bb      	str	r3, [r7, #24]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a432:	f001 fe77 	bl	800c124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d01f      	beq.n	800a482 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a446:	f000 f99a 	bl	800a77e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	1e5a      	subs	r2, r3, #1
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00f      	beq.n	800a47a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	3310      	adds	r3, #16
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 ff42 	bl	800b2e8 <xTaskRemoveFromEventList>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d007      	beq.n	800a47a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a46a:	4b3d      	ldr	r3, [pc, #244]	; (800a560 <xQueueReceive+0x1bc>)
 800a46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a47a:	f001 fe83 	bl	800c184 <vPortExitCritical>
				return pdPASS;
 800a47e:	2301      	movs	r3, #1
 800a480:	e069      	b.n	800a556 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d103      	bne.n	800a490 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a488:	f001 fe7c 	bl	800c184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e062      	b.n	800a556 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a496:	f107 0310 	add.w	r3, r7, #16
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 ff88 	bl	800b3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4a4:	f001 fe6e 	bl	800c184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4a8:	f000 fcf4 	bl	800ae94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ac:	f001 fe3a 	bl	800c124 <vPortEnterCritical>
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4b6:	b25b      	sxtb	r3, r3
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4bc:	d103      	bne.n	800a4c6 <xQueueReceive+0x122>
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4cc:	b25b      	sxtb	r3, r3
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4d2:	d103      	bne.n	800a4dc <xQueueReceive+0x138>
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4dc:	f001 fe52 	bl	800c184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4e0:	1d3a      	adds	r2, r7, #4
 800a4e2:	f107 0310 	add.w	r3, r7, #16
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 ff77 	bl	800b3dc <xTaskCheckForTimeOut>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d123      	bne.n	800a53c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f6:	f000 f9ba 	bl	800a86e <prvIsQueueEmpty>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d017      	beq.n	800a530 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fe9d 	bl	800b248 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a510:	f000 f95b 	bl	800a7ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a514:	f000 fccc 	bl	800aeb0 <xTaskResumeAll>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d189      	bne.n	800a432 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a51e:	4b10      	ldr	r3, [pc, #64]	; (800a560 <xQueueReceive+0x1bc>)
 800a520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	e780      	b.n	800a432 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a532:	f000 f94a 	bl	800a7ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a536:	f000 fcbb 	bl	800aeb0 <xTaskResumeAll>
 800a53a:	e77a      	b.n	800a432 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a53e:	f000 f944 	bl	800a7ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a542:	f000 fcb5 	bl	800aeb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a548:	f000 f991 	bl	800a86e <prvIsQueueEmpty>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f af6f 	beq.w	800a432 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a554:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a556:	4618      	mov	r0, r3
 800a558:	3730      	adds	r7, #48	; 0x30
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	e000ed04 	.word	0xe000ed04

0800a564 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08e      	sub	sp, #56	; 0x38
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	623b      	str	r3, [r7, #32]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <xQueueReceiveFromISR+0x3a>
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <xQueueReceiveFromISR+0x3e>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <xQueueReceiveFromISR+0x40>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	61fb      	str	r3, [r7, #28]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5be:	f001 fe93 	bl	800c2e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a5c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	61ba      	str	r2, [r7, #24]
 800a5d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a5da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d02f      	beq.n	800a64a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f8:	f000 f8c1 	bl	800a77e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	1e5a      	subs	r2, r3, #1
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a60c:	d112      	bne.n	800a634 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d016      	beq.n	800a644 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	3310      	adds	r3, #16
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fe64 	bl	800b2e8 <xTaskRemoveFromEventList>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00e      	beq.n	800a644 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	e007      	b.n	800a644 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a638:	3301      	adds	r3, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	b25a      	sxtb	r2, r3
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a644:	2301      	movs	r3, #1
 800a646:	637b      	str	r3, [r7, #52]	; 0x34
 800a648:	e001      	b.n	800a64e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	637b      	str	r3, [r7, #52]	; 0x34
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f383 8811 	msr	BASEPRI, r3
}
 800a658:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3738      	adds	r7, #56	; 0x38
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <vQueueDelete+0x28>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60bb      	str	r3, [r7, #8]
}
 800a688:	bf00      	nop
 800a68a:	e7fe      	b.n	800a68a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 f947 	bl	800a920 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f001 ff07 	bl	800c4b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10d      	bne.n	800a6e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d14d      	bne.n	800a76c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 ffe7 	bl	800b6a8 <xTaskPriorityDisinherit>
 800a6da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	609a      	str	r2, [r3, #8]
 800a6e2:	e043      	b.n	800a76c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d119      	bne.n	800a71e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6858      	ldr	r0, [r3, #4]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	f002 f949 	bl	800c98c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	441a      	add	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d32b      	bcc.n	800a76c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	605a      	str	r2, [r3, #4]
 800a71c:	e026      	b.n	800a76c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	68d8      	ldr	r0, [r3, #12]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	461a      	mov	r2, r3
 800a728:	68b9      	ldr	r1, [r7, #8]
 800a72a:	f002 f92f 	bl	800c98c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	425b      	negs	r3, r3
 800a738:	441a      	add	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d207      	bcs.n	800a75a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	689a      	ldr	r2, [r3, #8]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	425b      	negs	r3, r3
 800a754:	441a      	add	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d105      	bne.n	800a76c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3b01      	subs	r3, #1
 800a76a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a774:	697b      	ldr	r3, [r7, #20]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d018      	beq.n	800a7c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a798:	441a      	add	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68da      	ldr	r2, [r3, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d303      	bcc.n	800a7b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68d9      	ldr	r1, [r3, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6838      	ldr	r0, [r7, #0]
 800a7be:	f002 f8e5 	bl	800c98c <memcpy>
	}
}
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7d2:	f001 fca7 	bl	800c124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7de:	e011      	b.n	800a804 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d012      	beq.n	800a80e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3324      	adds	r3, #36	; 0x24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 fd7b 	bl	800b2e8 <xTaskRemoveFromEventList>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7f8:	f000 fe52 	bl	800b4a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b2db      	uxtb	r3, r3
 800a802:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dce9      	bgt.n	800a7e0 <prvUnlockQueue+0x16>
 800a80c:	e000      	b.n	800a810 <prvUnlockQueue+0x46>
					break;
 800a80e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	22ff      	movs	r2, #255	; 0xff
 800a814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a818:	f001 fcb4 	bl	800c184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a81c:	f001 fc82 	bl	800c124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a826:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a828:	e011      	b.n	800a84e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d012      	beq.n	800a858 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3310      	adds	r3, #16
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fd56 	bl	800b2e8 <xTaskRemoveFromEventList>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a842:	f000 fe2d 	bl	800b4a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	3b01      	subs	r3, #1
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a84e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dce9      	bgt.n	800a82a <prvUnlockQueue+0x60>
 800a856:	e000      	b.n	800a85a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a858:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	22ff      	movs	r2, #255	; 0xff
 800a85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a862:	f001 fc8f 	bl	800c184 <vPortExitCritical>
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a876:	f001 fc55 	bl	800c124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d102      	bne.n	800a888 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a882:	2301      	movs	r3, #1
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	e001      	b.n	800a88c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a88c:	f001 fc7a 	bl	800c184 <vPortExitCritical>

	return xReturn;
 800a890:	68fb      	ldr	r3, [r7, #12]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b084      	sub	sp, #16
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8a2:	f001 fc3f 	bl	800c124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d102      	bne.n	800a8b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	e001      	b.n	800a8bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8bc:	f001 fc62 	bl	800c184 <vPortExitCritical>

	return xReturn;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	e014      	b.n	800a906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8dc:	4a0f      	ldr	r2, [pc, #60]	; (800a91c <vQueueAddToRegistry+0x50>)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10b      	bne.n	800a900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8e8:	490c      	ldr	r1, [pc, #48]	; (800a91c <vQueueAddToRegistry+0x50>)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8f2:	4a0a      	ldr	r2, [pc, #40]	; (800a91c <vQueueAddToRegistry+0x50>)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	00db      	lsls	r3, r3, #3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8fe:	e006      	b.n	800a90e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	3301      	adds	r3, #1
 800a904:	60fb      	str	r3, [r7, #12]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2b07      	cmp	r3, #7
 800a90a:	d9e7      	bls.n	800a8dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a90c:	bf00      	nop
 800a90e:	bf00      	nop
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	200084f0 	.word	0x200084f0

0800a920 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a928:	2300      	movs	r3, #0
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e016      	b.n	800a95c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a92e:	4a10      	ldr	r2, [pc, #64]	; (800a970 <vQueueUnregisterQueue+0x50>)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	4413      	add	r3, r2
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d10b      	bne.n	800a956 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a93e:	4a0c      	ldr	r2, [pc, #48]	; (800a970 <vQueueUnregisterQueue+0x50>)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2100      	movs	r1, #0
 800a944:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <vQueueUnregisterQueue+0x50>)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	4413      	add	r3, r2
 800a950:	2200      	movs	r2, #0
 800a952:	605a      	str	r2, [r3, #4]
				break;
 800a954:	e006      	b.n	800a964 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3301      	adds	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b07      	cmp	r3, #7
 800a960:	d9e5      	bls.n	800a92e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a962:	bf00      	nop
 800a964:	bf00      	nop
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	200084f0 	.word	0x200084f0

0800a974 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a984:	f001 fbce 	bl	800c124 <vPortEnterCritical>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a994:	d103      	bne.n	800a99e <vQueueWaitForMessageRestricted+0x2a>
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9a4:	b25b      	sxtb	r3, r3
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9aa:	d103      	bne.n	800a9b4 <vQueueWaitForMessageRestricted+0x40>
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9b4:	f001 fbe6 	bl	800c184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	3324      	adds	r3, #36	; 0x24
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	68b9      	ldr	r1, [r7, #8]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fc61 	bl	800b290 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9ce:	6978      	ldr	r0, [r7, #20]
 800a9d0:	f7ff fefb 	bl	800a7ca <prvUnlockQueue>
	}
 800a9d4:	bf00      	nop
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08e      	sub	sp, #56	; 0x38
 800a9e0:	af04      	add	r7, sp, #16
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	623b      	str	r3, [r7, #32]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xTaskCreateStatic+0x46>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	61fb      	str	r3, [r7, #28]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa22:	23bc      	movs	r3, #188	; 0xbc
 800aa24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	2bbc      	cmp	r3, #188	; 0xbc
 800aa2a:	d00a      	beq.n	800aa42 <xTaskCreateStatic+0x66>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	61bb      	str	r3, [r7, #24]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d01e      	beq.n	800aa88 <xTaskCreateStatic+0xac>
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01b      	beq.n	800aa88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa62:	2300      	movs	r3, #0
 800aa64:	9303      	str	r3, [sp, #12]
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	9302      	str	r3, [sp, #8]
 800aa6a:	f107 0314 	add.w	r3, r7, #20
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 f850 	bl	800ab20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa82:	f000 f8f3 	bl	800ac6c <prvAddNewTaskToReadyList>
 800aa86:	e001      	b.n	800aa8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa8c:	697b      	ldr	r3, [r7, #20]
	}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3728      	adds	r7, #40	; 0x28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b08c      	sub	sp, #48	; 0x30
 800aa9a:	af04      	add	r7, sp, #16
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	603b      	str	r3, [r7, #0]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aaa6:	88fb      	ldrh	r3, [r7, #6]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f001 fc5c 	bl	800c368 <pvPortMalloc>
 800aab0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00e      	beq.n	800aad6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aab8:	20bc      	movs	r0, #188	; 0xbc
 800aaba:	f001 fc55 	bl	800c368 <pvPortMalloc>
 800aabe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	631a      	str	r2, [r3, #48]	; 0x30
 800aacc:	e005      	b.n	800aada <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	f001 fcee 	bl	800c4b0 <vPortFree>
 800aad4:	e001      	b.n	800aada <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d017      	beq.n	800ab10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aae8:	88fa      	ldrh	r2, [r7, #6]
 800aaea:	2300      	movs	r3, #0
 800aaec:	9303      	str	r3, [sp, #12]
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	9302      	str	r3, [sp, #8]
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	68b9      	ldr	r1, [r7, #8]
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f80e 	bl	800ab20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab04:	69f8      	ldr	r0, [r7, #28]
 800ab06:	f000 f8b1 	bl	800ac6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	61bb      	str	r3, [r7, #24]
 800ab0e:	e002      	b.n	800ab16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab16:	69bb      	ldr	r3, [r7, #24]
	}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3720      	adds	r7, #32
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	461a      	mov	r2, r3
 800ab38:	21a5      	movs	r1, #165	; 0xa5
 800ab3a:	f001 ff35 	bl	800c9a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	f023 0307 	bic.w	r3, r3, #7
 800ab56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	617b      	str	r3, [r7, #20]
}
 800ab74:	bf00      	nop
 800ab76:	e7fe      	b.n	800ab76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01f      	beq.n	800abbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab7e:	2300      	movs	r3, #0
 800ab80:	61fb      	str	r3, [r7, #28]
 800ab82:	e012      	b.n	800abaa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	7819      	ldrb	r1, [r3, #0]
 800ab8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	4413      	add	r3, r2
 800ab92:	3334      	adds	r3, #52	; 0x34
 800ab94:	460a      	mov	r2, r1
 800ab96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	3301      	adds	r3, #1
 800aba8:	61fb      	str	r3, [r7, #28]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	2b0f      	cmp	r3, #15
 800abae:	d9e9      	bls.n	800ab84 <prvInitialiseNewTask+0x64>
 800abb0:	e000      	b.n	800abb4 <prvInitialiseNewTask+0x94>
			{
				break;
 800abb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abbc:	e003      	b.n	800abc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	2b37      	cmp	r3, #55	; 0x37
 800abca:	d901      	bls.n	800abd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abcc:	2337      	movs	r3, #55	; 0x37
 800abce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	2200      	movs	r2, #0
 800abe0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	3304      	adds	r3, #4
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff f806 	bl	8009bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	3318      	adds	r3, #24
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff f801 	bl	8009bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	3354      	adds	r3, #84	; 0x54
 800ac20:	2260      	movs	r2, #96	; 0x60
 800ac22:	2100      	movs	r1, #0
 800ac24:	4618      	mov	r0, r3
 800ac26:	f001 febf 	bl	800c9a8 <memset>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	4a0c      	ldr	r2, [pc, #48]	; (800ac60 <prvInitialiseNewTask+0x140>)
 800ac2e:	659a      	str	r2, [r3, #88]	; 0x58
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	4a0c      	ldr	r2, [pc, #48]	; (800ac64 <prvInitialiseNewTask+0x144>)
 800ac34:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	4a0b      	ldr	r2, [pc, #44]	; (800ac68 <prvInitialiseNewTask+0x148>)
 800ac3a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	69b8      	ldr	r0, [r7, #24]
 800ac42:	f001 f941 	bl	800bec8 <pxPortInitialiseStack>
 800ac46:	4602      	mov	r2, r0
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac58:	bf00      	nop
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	0800fe74 	.word	0x0800fe74
 800ac64:	0800fe94 	.word	0x0800fe94
 800ac68:	0800fe54 	.word	0x0800fe54

0800ac6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac74:	f001 fa56 	bl	800c124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac78:	4b2d      	ldr	r3, [pc, #180]	; (800ad30 <prvAddNewTaskToReadyList+0xc4>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	4a2c      	ldr	r2, [pc, #176]	; (800ad30 <prvAddNewTaskToReadyList+0xc4>)
 800ac80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac82:	4b2c      	ldr	r3, [pc, #176]	; (800ad34 <prvAddNewTaskToReadyList+0xc8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac8a:	4a2a      	ldr	r2, [pc, #168]	; (800ad34 <prvAddNewTaskToReadyList+0xc8>)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac90:	4b27      	ldr	r3, [pc, #156]	; (800ad30 <prvAddNewTaskToReadyList+0xc4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d110      	bne.n	800acba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac98:	f000 fc26 	bl	800b4e8 <prvInitialiseTaskLists>
 800ac9c:	e00d      	b.n	800acba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac9e:	4b26      	ldr	r3, [pc, #152]	; (800ad38 <prvAddNewTaskToReadyList+0xcc>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d109      	bne.n	800acba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aca6:	4b23      	ldr	r3, [pc, #140]	; (800ad34 <prvAddNewTaskToReadyList+0xc8>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d802      	bhi.n	800acba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acb4:	4a1f      	ldr	r2, [pc, #124]	; (800ad34 <prvAddNewTaskToReadyList+0xc8>)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acba:	4b20      	ldr	r3, [pc, #128]	; (800ad3c <prvAddNewTaskToReadyList+0xd0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3301      	adds	r3, #1
 800acc0:	4a1e      	ldr	r2, [pc, #120]	; (800ad3c <prvAddNewTaskToReadyList+0xd0>)
 800acc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800acc4:	4b1d      	ldr	r3, [pc, #116]	; (800ad3c <prvAddNewTaskToReadyList+0xd0>)
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd0:	4b1b      	ldr	r3, [pc, #108]	; (800ad40 <prvAddNewTaskToReadyList+0xd4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d903      	bls.n	800ace0 <prvAddNewTaskToReadyList+0x74>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	4a18      	ldr	r2, [pc, #96]	; (800ad40 <prvAddNewTaskToReadyList+0xd4>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4a15      	ldr	r2, [pc, #84]	; (800ad44 <prvAddNewTaskToReadyList+0xd8>)
 800acee:	441a      	add	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fe ff8b 	bl	8009c12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acfc:	f001 fa42 	bl	800c184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <prvAddNewTaskToReadyList+0xcc>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00e      	beq.n	800ad26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad08:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <prvAddNewTaskToReadyList+0xc8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d207      	bcs.n	800ad26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad16:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <prvAddNewTaskToReadyList+0xdc>)
 800ad18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20008a04 	.word	0x20008a04
 800ad34:	20008530 	.word	0x20008530
 800ad38:	20008a10 	.word	0x20008a10
 800ad3c:	20008a20 	.word	0x20008a20
 800ad40:	20008a0c 	.word	0x20008a0c
 800ad44:	20008534 	.word	0x20008534
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d017      	beq.n	800ad8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad5e:	4b13      	ldr	r3, [pc, #76]	; (800adac <vTaskDelay+0x60>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <vTaskDelay+0x30>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	60bb      	str	r3, [r7, #8]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad7c:	f000 f88a 	bl	800ae94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad80:	2100      	movs	r1, #0
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fcfe 	bl	800b784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad88:	f000 f892 	bl	800aeb0 <xTaskResumeAll>
 800ad8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d107      	bne.n	800ada4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad94:	4b06      	ldr	r3, [pc, #24]	; (800adb0 <vTaskDelay+0x64>)
 800ad96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ada4:	bf00      	nop
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20008a2c 	.word	0x20008a2c
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adc2:	463a      	mov	r2, r7
 800adc4:	1d39      	adds	r1, r7, #4
 800adc6:	f107 0308 	add.w	r3, r7, #8
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fec0 	bl	8009b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	9202      	str	r2, [sp, #8]
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	2300      	movs	r3, #0
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	2300      	movs	r3, #0
 800ade0:	460a      	mov	r2, r1
 800ade2:	4924      	ldr	r1, [pc, #144]	; (800ae74 <vTaskStartScheduler+0xc0>)
 800ade4:	4824      	ldr	r0, [pc, #144]	; (800ae78 <vTaskStartScheduler+0xc4>)
 800ade6:	f7ff fdf9 	bl	800a9dc <xTaskCreateStatic>
 800adea:	4603      	mov	r3, r0
 800adec:	4a23      	ldr	r2, [pc, #140]	; (800ae7c <vTaskStartScheduler+0xc8>)
 800adee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adf0:	4b22      	ldr	r3, [pc, #136]	; (800ae7c <vTaskStartScheduler+0xc8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adf8:	2301      	movs	r3, #1
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	e001      	b.n	800ae02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d102      	bne.n	800ae0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae08:	f000 fd10 	bl	800b82c <xTimerCreateTimerTask>
 800ae0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d11b      	bne.n	800ae4c <vTaskStartScheduler+0x98>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	613b      	str	r3, [r7, #16]
}
 800ae26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae28:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <vTaskStartScheduler+0xcc>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3354      	adds	r3, #84	; 0x54
 800ae2e:	4a15      	ldr	r2, [pc, #84]	; (800ae84 <vTaskStartScheduler+0xd0>)
 800ae30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae32:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <vTaskStartScheduler+0xd4>)
 800ae34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae3a:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <vTaskStartScheduler+0xd8>)
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae40:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <vTaskStartScheduler+0xdc>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae46:	f001 f8cb 	bl	800bfe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae4a:	e00e      	b.n	800ae6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae52:	d10a      	bne.n	800ae6a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	60fb      	str	r3, [r7, #12]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <vTaskStartScheduler+0xb4>
}
 800ae6a:	bf00      	nop
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	0800dcbc 	.word	0x0800dcbc
 800ae78:	0800b4b9 	.word	0x0800b4b9
 800ae7c:	20008a28 	.word	0x20008a28
 800ae80:	20008530 	.word	0x20008530
 800ae84:	200000d0 	.word	0x200000d0
 800ae88:	20008a24 	.word	0x20008a24
 800ae8c:	20008a10 	.word	0x20008a10
 800ae90:	20008a08 	.word	0x20008a08

0800ae94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae94:	b480      	push	{r7}
 800ae96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae98:	4b04      	ldr	r3, [pc, #16]	; (800aeac <vTaskSuspendAll+0x18>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	4a03      	ldr	r2, [pc, #12]	; (800aeac <vTaskSuspendAll+0x18>)
 800aea0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aea2:	bf00      	nop
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	20008a2c 	.word	0x20008a2c

0800aeb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aebe:	4b42      	ldr	r3, [pc, #264]	; (800afc8 <xTaskResumeAll+0x118>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <xTaskResumeAll+0x2c>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	603b      	str	r3, [r7, #0]
}
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aedc:	f001 f922 	bl	800c124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aee0:	4b39      	ldr	r3, [pc, #228]	; (800afc8 <xTaskResumeAll+0x118>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	4a38      	ldr	r2, [pc, #224]	; (800afc8 <xTaskResumeAll+0x118>)
 800aee8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeea:	4b37      	ldr	r3, [pc, #220]	; (800afc8 <xTaskResumeAll+0x118>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d162      	bne.n	800afb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aef2:	4b36      	ldr	r3, [pc, #216]	; (800afcc <xTaskResumeAll+0x11c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d05e      	beq.n	800afb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aefa:	e02f      	b.n	800af5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefc:	4b34      	ldr	r3, [pc, #208]	; (800afd0 <xTaskResumeAll+0x120>)
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3318      	adds	r3, #24
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fedf 	bl	8009ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3304      	adds	r3, #4
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe feda 	bl	8009ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	4b2d      	ldr	r3, [pc, #180]	; (800afd4 <xTaskResumeAll+0x124>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <xTaskResumeAll+0x7c>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a2a      	ldr	r2, [pc, #168]	; (800afd4 <xTaskResumeAll+0x124>)
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4a27      	ldr	r2, [pc, #156]	; (800afd8 <xTaskResumeAll+0x128>)
 800af3a:	441a      	add	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fe fe65 	bl	8009c12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4c:	4b23      	ldr	r3, [pc, #140]	; (800afdc <xTaskResumeAll+0x12c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	429a      	cmp	r2, r3
 800af54:	d302      	bcc.n	800af5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af56:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <xTaskResumeAll+0x130>)
 800af58:	2201      	movs	r2, #1
 800af5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af5c:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <xTaskResumeAll+0x120>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1cb      	bne.n	800aefc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af6a:	f000 fb5f 	bl	800b62c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af6e:	4b1d      	ldr	r3, [pc, #116]	; (800afe4 <xTaskResumeAll+0x134>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d010      	beq.n	800af9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af7a:	f000 f847 	bl	800b00c <xTaskIncrementTick>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af84:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <xTaskResumeAll+0x130>)
 800af86:	2201      	movs	r2, #1
 800af88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1f1      	bne.n	800af7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af96:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <xTaskResumeAll+0x134>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af9c:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <xTaskResumeAll+0x130>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d009      	beq.n	800afb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afa8:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <xTaskResumeAll+0x138>)
 800afaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afb8:	f001 f8e4 	bl	800c184 <vPortExitCritical>

	return xAlreadyYielded;
 800afbc:	68bb      	ldr	r3, [r7, #8]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20008a2c 	.word	0x20008a2c
 800afcc:	20008a04 	.word	0x20008a04
 800afd0:	200089c4 	.word	0x200089c4
 800afd4:	20008a0c 	.word	0x20008a0c
 800afd8:	20008534 	.word	0x20008534
 800afdc:	20008530 	.word	0x20008530
 800afe0:	20008a18 	.word	0x20008a18
 800afe4:	20008a14 	.word	0x20008a14
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <xTaskGetTickCount+0x1c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aff8:	687b      	ldr	r3, [r7, #4]
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	20008a08 	.word	0x20008a08

0800b00c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b016:	4b4f      	ldr	r3, [pc, #316]	; (800b154 <xTaskIncrementTick+0x148>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f040 808f 	bne.w	800b13e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b020:	4b4d      	ldr	r3, [pc, #308]	; (800b158 <xTaskIncrementTick+0x14c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3301      	adds	r3, #1
 800b026:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b028:	4a4b      	ldr	r2, [pc, #300]	; (800b158 <xTaskIncrementTick+0x14c>)
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d120      	bne.n	800b076 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b034:	4b49      	ldr	r3, [pc, #292]	; (800b15c <xTaskIncrementTick+0x150>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <xTaskIncrementTick+0x48>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	603b      	str	r3, [r7, #0]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <xTaskIncrementTick+0x46>
 800b054:	4b41      	ldr	r3, [pc, #260]	; (800b15c <xTaskIncrementTick+0x150>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	4b41      	ldr	r3, [pc, #260]	; (800b160 <xTaskIncrementTick+0x154>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a3f      	ldr	r2, [pc, #252]	; (800b15c <xTaskIncrementTick+0x150>)
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	4a3f      	ldr	r2, [pc, #252]	; (800b160 <xTaskIncrementTick+0x154>)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	4b3e      	ldr	r3, [pc, #248]	; (800b164 <xTaskIncrementTick+0x158>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3301      	adds	r3, #1
 800b06e:	4a3d      	ldr	r2, [pc, #244]	; (800b164 <xTaskIncrementTick+0x158>)
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	f000 fadb 	bl	800b62c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b076:	4b3c      	ldr	r3, [pc, #240]	; (800b168 <xTaskIncrementTick+0x15c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d349      	bcc.n	800b114 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b080:	4b36      	ldr	r3, [pc, #216]	; (800b15c <xTaskIncrementTick+0x150>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d104      	bne.n	800b094 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b08a:	4b37      	ldr	r3, [pc, #220]	; (800b168 <xTaskIncrementTick+0x15c>)
 800b08c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b090:	601a      	str	r2, [r3, #0]
					break;
 800b092:	e03f      	b.n	800b114 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b094:	4b31      	ldr	r3, [pc, #196]	; (800b15c <xTaskIncrementTick+0x150>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d203      	bcs.n	800b0b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0ac:	4a2e      	ldr	r2, [pc, #184]	; (800b168 <xTaskIncrementTick+0x15c>)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0b2:	e02f      	b.n	800b114 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fe fe07 	bl	8009ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	3318      	adds	r3, #24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe fdfe 	bl	8009ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d4:	4b25      	ldr	r3, [pc, #148]	; (800b16c <xTaskIncrementTick+0x160>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d903      	bls.n	800b0e4 <xTaskIncrementTick+0xd8>
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	4a22      	ldr	r2, [pc, #136]	; (800b16c <xTaskIncrementTick+0x160>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a1f      	ldr	r2, [pc, #124]	; (800b170 <xTaskIncrementTick+0x164>)
 800b0f2:	441a      	add	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe fd89 	bl	8009c12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <xTaskIncrementTick+0x168>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d3b8      	bcc.n	800b080 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b10e:	2301      	movs	r3, #1
 800b110:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b112:	e7b5      	b.n	800b080 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b114:	4b17      	ldr	r3, [pc, #92]	; (800b174 <xTaskIncrementTick+0x168>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11a:	4915      	ldr	r1, [pc, #84]	; (800b170 <xTaskIncrementTick+0x164>)
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d901      	bls.n	800b130 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b12c:	2301      	movs	r3, #1
 800b12e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b130:	4b11      	ldr	r3, [pc, #68]	; (800b178 <xTaskIncrementTick+0x16c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d007      	beq.n	800b148 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	e004      	b.n	800b148 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <xTaskIncrementTick+0x170>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a0d      	ldr	r2, [pc, #52]	; (800b17c <xTaskIncrementTick+0x170>)
 800b146:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b148:	697b      	ldr	r3, [r7, #20]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20008a2c 	.word	0x20008a2c
 800b158:	20008a08 	.word	0x20008a08
 800b15c:	200089bc 	.word	0x200089bc
 800b160:	200089c0 	.word	0x200089c0
 800b164:	20008a1c 	.word	0x20008a1c
 800b168:	20008a24 	.word	0x20008a24
 800b16c:	20008a0c 	.word	0x20008a0c
 800b170:	20008534 	.word	0x20008534
 800b174:	20008530 	.word	0x20008530
 800b178:	20008a18 	.word	0x20008a18
 800b17c:	20008a14 	.word	0x20008a14

0800b180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b186:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <vTaskSwitchContext+0xb0>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b18e:	4b29      	ldr	r3, [pc, #164]	; (800b234 <vTaskSwitchContext+0xb4>)
 800b190:	2201      	movs	r2, #1
 800b192:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b194:	e046      	b.n	800b224 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b196:	4b27      	ldr	r3, [pc, #156]	; (800b234 <vTaskSwitchContext+0xb4>)
 800b198:	2200      	movs	r2, #0
 800b19a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b19c:	4b26      	ldr	r3, [pc, #152]	; (800b238 <vTaskSwitchContext+0xb8>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	e010      	b.n	800b1c6 <vTaskSwitchContext+0x46>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10a      	bne.n	800b1c0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ae:	f383 8811 	msr	BASEPRI, r3
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	607b      	str	r3, [r7, #4]
}
 800b1bc:	bf00      	nop
 800b1be:	e7fe      	b.n	800b1be <vTaskSwitchContext+0x3e>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	491d      	ldr	r1, [pc, #116]	; (800b23c <vTaskSwitchContext+0xbc>)
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	440b      	add	r3, r1
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0e4      	beq.n	800b1a4 <vTaskSwitchContext+0x24>
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4a15      	ldr	r2, [pc, #84]	; (800b23c <vTaskSwitchContext+0xbc>)
 800b1e6:	4413      	add	r3, r2
 800b1e8:	60bb      	str	r3, [r7, #8]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	605a      	str	r2, [r3, #4]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d104      	bne.n	800b20a <vTaskSwitchContext+0x8a>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	605a      	str	r2, [r3, #4]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	4a0b      	ldr	r2, [pc, #44]	; (800b240 <vTaskSwitchContext+0xc0>)
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4a08      	ldr	r2, [pc, #32]	; (800b238 <vTaskSwitchContext+0xb8>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b21a:	4b09      	ldr	r3, [pc, #36]	; (800b240 <vTaskSwitchContext+0xc0>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3354      	adds	r3, #84	; 0x54
 800b220:	4a08      	ldr	r2, [pc, #32]	; (800b244 <vTaskSwitchContext+0xc4>)
 800b222:	6013      	str	r3, [r2, #0]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20008a2c 	.word	0x20008a2c
 800b234:	20008a18 	.word	0x20008a18
 800b238:	20008a0c 	.word	0x20008a0c
 800b23c:	20008534 	.word	0x20008534
 800b240:	20008530 	.word	0x20008530
 800b244:	200000d0 	.word	0x200000d0

0800b248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10a      	bne.n	800b26e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	60fb      	str	r3, [r7, #12]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b26e:	4b07      	ldr	r3, [pc, #28]	; (800b28c <vTaskPlaceOnEventList+0x44>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3318      	adds	r3, #24
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7fe fcef 	bl	8009c5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b27c:	2101      	movs	r1, #1
 800b27e:	6838      	ldr	r0, [r7, #0]
 800b280:	f000 fa80 	bl	800b784 <prvAddCurrentTaskToDelayedList>
}
 800b284:	bf00      	nop
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	20008530 	.word	0x20008530

0800b290 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10a      	bne.n	800b2b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	617b      	str	r3, [r7, #20]
}
 800b2b4:	bf00      	nop
 800b2b6:	e7fe      	b.n	800b2b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3318      	adds	r3, #24
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7fe fca6 	bl	8009c12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	68b8      	ldr	r0, [r7, #8]
 800b2d6:	f000 fa55 	bl	800b784 <prvAddCurrentTaskToDelayedList>
	}
 800b2da:	bf00      	nop
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20008530 	.word	0x20008530

0800b2e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10a      	bne.n	800b314 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60fb      	str	r3, [r7, #12]
}
 800b310:	bf00      	nop
 800b312:	e7fe      	b.n	800b312 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	3318      	adds	r3, #24
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fcd7 	bl	8009ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b31e:	4b1e      	ldr	r3, [pc, #120]	; (800b398 <xTaskRemoveFromEventList+0xb0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d11d      	bne.n	800b362 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	3304      	adds	r3, #4
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fcce 	bl	8009ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b334:	4b19      	ldr	r3, [pc, #100]	; (800b39c <xTaskRemoveFromEventList+0xb4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d903      	bls.n	800b344 <xTaskRemoveFromEventList+0x5c>
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	4a16      	ldr	r2, [pc, #88]	; (800b39c <xTaskRemoveFromEventList+0xb4>)
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4a13      	ldr	r2, [pc, #76]	; (800b3a0 <xTaskRemoveFromEventList+0xb8>)
 800b352:	441a      	add	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3304      	adds	r3, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	4610      	mov	r0, r2
 800b35c:	f7fe fc59 	bl	8009c12 <vListInsertEnd>
 800b360:	e005      	b.n	800b36e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	3318      	adds	r3, #24
 800b366:	4619      	mov	r1, r3
 800b368:	480e      	ldr	r0, [pc, #56]	; (800b3a4 <xTaskRemoveFromEventList+0xbc>)
 800b36a:	f7fe fc52 	bl	8009c12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b372:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <xTaskRemoveFromEventList+0xc0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	429a      	cmp	r2, r3
 800b37a:	d905      	bls.n	800b388 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b37c:	2301      	movs	r3, #1
 800b37e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <xTaskRemoveFromEventList+0xc4>)
 800b382:	2201      	movs	r2, #1
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	e001      	b.n	800b38c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b38c:	697b      	ldr	r3, [r7, #20]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20008a2c 	.word	0x20008a2c
 800b39c:	20008a0c 	.word	0x20008a0c
 800b3a0:	20008534 	.word	0x20008534
 800b3a4:	200089c4 	.word	0x200089c4
 800b3a8:	20008530 	.word	0x20008530
 800b3ac:	20008a18 	.word	0x20008a18

0800b3b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <vTaskInternalSetTimeOutState+0x24>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3c0:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <vTaskInternalSetTimeOutState+0x28>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20008a1c 	.word	0x20008a1c
 800b3d8:	20008a08 	.word	0x20008a08

0800b3dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	613b      	str	r3, [r7, #16]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	60fb      	str	r3, [r7, #12]
}
 800b41a:	bf00      	nop
 800b41c:	e7fe      	b.n	800b41c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b41e:	f000 fe81 	bl	800c124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b422:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <xTaskCheckForTimeOut+0xbc>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b43a:	d102      	bne.n	800b442 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	61fb      	str	r3, [r7, #28]
 800b440:	e023      	b.n	800b48a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	4b15      	ldr	r3, [pc, #84]	; (800b49c <xTaskCheckForTimeOut+0xc0>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d007      	beq.n	800b45e <xTaskCheckForTimeOut+0x82>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	69ba      	ldr	r2, [r7, #24]
 800b454:	429a      	cmp	r2, r3
 800b456:	d302      	bcc.n	800b45e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b458:	2301      	movs	r3, #1
 800b45a:	61fb      	str	r3, [r7, #28]
 800b45c:	e015      	b.n	800b48a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	429a      	cmp	r2, r3
 800b466:	d20b      	bcs.n	800b480 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff ff9b 	bl	800b3b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	e004      	b.n	800b48a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b486:	2301      	movs	r3, #1
 800b488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b48a:	f000 fe7b 	bl	800c184 <vPortExitCritical>

	return xReturn;
 800b48e:	69fb      	ldr	r3, [r7, #28]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3720      	adds	r7, #32
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20008a08 	.word	0x20008a08
 800b49c:	20008a1c 	.word	0x20008a1c

0800b4a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4a4:	4b03      	ldr	r3, [pc, #12]	; (800b4b4 <vTaskMissedYield+0x14>)
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]
}
 800b4aa:	bf00      	nop
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	20008a18 	.word	0x20008a18

0800b4b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4c0:	f000 f852 	bl	800b568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <prvIdleTask+0x28>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d9f9      	bls.n	800b4c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4cc:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <prvIdleTask+0x2c>)
 800b4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4dc:	e7f0      	b.n	800b4c0 <prvIdleTask+0x8>
 800b4de:	bf00      	nop
 800b4e0:	20008534 	.word	0x20008534
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	607b      	str	r3, [r7, #4]
 800b4f2:	e00c      	b.n	800b50e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4a12      	ldr	r2, [pc, #72]	; (800b548 <prvInitialiseTaskLists+0x60>)
 800b500:	4413      	add	r3, r2
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fb58 	bl	8009bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3301      	adds	r3, #1
 800b50c:	607b      	str	r3, [r7, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b37      	cmp	r3, #55	; 0x37
 800b512:	d9ef      	bls.n	800b4f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b514:	480d      	ldr	r0, [pc, #52]	; (800b54c <prvInitialiseTaskLists+0x64>)
 800b516:	f7fe fb4f 	bl	8009bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b51a:	480d      	ldr	r0, [pc, #52]	; (800b550 <prvInitialiseTaskLists+0x68>)
 800b51c:	f7fe fb4c 	bl	8009bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b520:	480c      	ldr	r0, [pc, #48]	; (800b554 <prvInitialiseTaskLists+0x6c>)
 800b522:	f7fe fb49 	bl	8009bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b526:	480c      	ldr	r0, [pc, #48]	; (800b558 <prvInitialiseTaskLists+0x70>)
 800b528:	f7fe fb46 	bl	8009bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b52c:	480b      	ldr	r0, [pc, #44]	; (800b55c <prvInitialiseTaskLists+0x74>)
 800b52e:	f7fe fb43 	bl	8009bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b532:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <prvInitialiseTaskLists+0x78>)
 800b534:	4a05      	ldr	r2, [pc, #20]	; (800b54c <prvInitialiseTaskLists+0x64>)
 800b536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <prvInitialiseTaskLists+0x7c>)
 800b53a:	4a05      	ldr	r2, [pc, #20]	; (800b550 <prvInitialiseTaskLists+0x68>)
 800b53c:	601a      	str	r2, [r3, #0]
}
 800b53e:	bf00      	nop
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20008534 	.word	0x20008534
 800b54c:	20008994 	.word	0x20008994
 800b550:	200089a8 	.word	0x200089a8
 800b554:	200089c4 	.word	0x200089c4
 800b558:	200089d8 	.word	0x200089d8
 800b55c:	200089f0 	.word	0x200089f0
 800b560:	200089bc 	.word	0x200089bc
 800b564:	200089c0 	.word	0x200089c0

0800b568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b56e:	e019      	b.n	800b5a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b570:	f000 fdd8 	bl	800c124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b574:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <prvCheckTasksWaitingTermination+0x50>)
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3304      	adds	r3, #4
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fba3 	bl	8009ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b586:	4b0d      	ldr	r3, [pc, #52]	; (800b5bc <prvCheckTasksWaitingTermination+0x54>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	4a0b      	ldr	r2, [pc, #44]	; (800b5bc <prvCheckTasksWaitingTermination+0x54>)
 800b58e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b590:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <prvCheckTasksWaitingTermination+0x58>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3b01      	subs	r3, #1
 800b596:	4a0a      	ldr	r2, [pc, #40]	; (800b5c0 <prvCheckTasksWaitingTermination+0x58>)
 800b598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b59a:	f000 fdf3 	bl	800c184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f810 	bl	800b5c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5a4:	4b06      	ldr	r3, [pc, #24]	; (800b5c0 <prvCheckTasksWaitingTermination+0x58>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e1      	bne.n	800b570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200089d8 	.word	0x200089d8
 800b5bc:	20008a04 	.word	0x20008a04
 800b5c0:	200089ec 	.word	0x200089ec

0800b5c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3354      	adds	r3, #84	; 0x54
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f001 fa93 	bl	800cafc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d108      	bne.n	800b5f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 ff63 	bl	800c4b0 <vPortFree>
				vPortFree( pxTCB );
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 ff60 	bl	800c4b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5f0:	e018      	b.n	800b624 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d103      	bne.n	800b604 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 ff57 	bl	800c4b0 <vPortFree>
	}
 800b602:	e00f      	b.n	800b624 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d00a      	beq.n	800b624 <prvDeleteTCB+0x60>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	60fb      	str	r3, [r7, #12]
}
 800b620:	bf00      	nop
 800b622:	e7fe      	b.n	800b622 <prvDeleteTCB+0x5e>
	}
 800b624:	bf00      	nop
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b632:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <prvResetNextTaskUnblockTime+0x38>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d104      	bne.n	800b646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b63c:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <prvResetNextTaskUnblockTime+0x3c>)
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b644:	e008      	b.n	800b658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b646:	4b07      	ldr	r3, [pc, #28]	; (800b664 <prvResetNextTaskUnblockTime+0x38>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	4a04      	ldr	r2, [pc, #16]	; (800b668 <prvResetNextTaskUnblockTime+0x3c>)
 800b656:	6013      	str	r3, [r2, #0]
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	200089bc 	.word	0x200089bc
 800b668:	20008a24 	.word	0x20008a24

0800b66c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b672:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <xTaskGetSchedulerState+0x34>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d102      	bne.n	800b680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b67a:	2301      	movs	r3, #1
 800b67c:	607b      	str	r3, [r7, #4]
 800b67e:	e008      	b.n	800b692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b680:	4b08      	ldr	r3, [pc, #32]	; (800b6a4 <xTaskGetSchedulerState+0x38>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d102      	bne.n	800b68e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b688:	2302      	movs	r3, #2
 800b68a:	607b      	str	r3, [r7, #4]
 800b68c:	e001      	b.n	800b692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b68e:	2300      	movs	r3, #0
 800b690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b692:	687b      	ldr	r3, [r7, #4]
	}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20008a10 	.word	0x20008a10
 800b6a4:	20008a2c 	.word	0x20008a2c

0800b6a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d056      	beq.n	800b76c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6be:	4b2e      	ldr	r3, [pc, #184]	; (800b778 <xTaskPriorityDisinherit+0xd0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d00a      	beq.n	800b6de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	60fb      	str	r3, [r7, #12]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	60bb      	str	r3, [r7, #8]
}
 800b6f8:	bf00      	nop
 800b6fa:	e7fe      	b.n	800b6fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b700:	1e5a      	subs	r2, r3, #1
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b70e:	429a      	cmp	r2, r3
 800b710:	d02c      	beq.n	800b76c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b716:	2b00      	cmp	r3, #0
 800b718:	d128      	bne.n	800b76c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	3304      	adds	r3, #4
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe fad4 	bl	8009ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73c:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <xTaskPriorityDisinherit+0xd4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <xTaskPriorityDisinherit+0xa4>
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a0c      	ldr	r2, [pc, #48]	; (800b77c <xTaskPriorityDisinherit+0xd4>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4a09      	ldr	r2, [pc, #36]	; (800b780 <xTaskPriorityDisinherit+0xd8>)
 800b75a:	441a      	add	r2, r3
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	3304      	adds	r3, #4
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f7fe fa55 	bl	8009c12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b76c:	697b      	ldr	r3, [r7, #20]
	}
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20008530 	.word	0x20008530
 800b77c:	20008a0c 	.word	0x20008a0c
 800b780:	20008534 	.word	0x20008534

0800b784 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b78e:	4b21      	ldr	r3, [pc, #132]	; (800b814 <prvAddCurrentTaskToDelayedList+0x90>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b794:	4b20      	ldr	r3, [pc, #128]	; (800b818 <prvAddCurrentTaskToDelayedList+0x94>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3304      	adds	r3, #4
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe fa96 	bl	8009ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7a6:	d10a      	bne.n	800b7be <prvAddCurrentTaskToDelayedList+0x3a>
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d007      	beq.n	800b7be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ae:	4b1a      	ldr	r3, [pc, #104]	; (800b818 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4819      	ldr	r0, [pc, #100]	; (800b81c <prvAddCurrentTaskToDelayedList+0x98>)
 800b7b8:	f7fe fa2b 	bl	8009c12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7bc:	e026      	b.n	800b80c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7c6:	4b14      	ldr	r3, [pc, #80]	; (800b818 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d209      	bcs.n	800b7ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7d6:	4b12      	ldr	r3, [pc, #72]	; (800b820 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fe fa39 	bl	8009c5a <vListInsert>
}
 800b7e8:	e010      	b.n	800b80c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ea:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	f7fe fa2f 	bl	8009c5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7fc:	4b0a      	ldr	r3, [pc, #40]	; (800b828 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	429a      	cmp	r2, r3
 800b804:	d202      	bcs.n	800b80c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b806:	4a08      	ldr	r2, [pc, #32]	; (800b828 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	6013      	str	r3, [r2, #0]
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20008a08 	.word	0x20008a08
 800b818:	20008530 	.word	0x20008530
 800b81c:	200089f0 	.word	0x200089f0
 800b820:	200089c0 	.word	0x200089c0
 800b824:	200089bc 	.word	0x200089bc
 800b828:	20008a24 	.word	0x20008a24

0800b82c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08a      	sub	sp, #40	; 0x28
 800b830:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b836:	f000 fb07 	bl	800be48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b83a:	4b1c      	ldr	r3, [pc, #112]	; (800b8ac <xTimerCreateTimerTask+0x80>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d021      	beq.n	800b886 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b84a:	1d3a      	adds	r2, r7, #4
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	f107 030c 	add.w	r3, r7, #12
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe f995 	bl	8009b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	9202      	str	r2, [sp, #8]
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	2302      	movs	r3, #2
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	2300      	movs	r3, #0
 800b86a:	460a      	mov	r2, r1
 800b86c:	4910      	ldr	r1, [pc, #64]	; (800b8b0 <xTimerCreateTimerTask+0x84>)
 800b86e:	4811      	ldr	r0, [pc, #68]	; (800b8b4 <xTimerCreateTimerTask+0x88>)
 800b870:	f7ff f8b4 	bl	800a9dc <xTaskCreateStatic>
 800b874:	4603      	mov	r3, r0
 800b876:	4a10      	ldr	r2, [pc, #64]	; (800b8b8 <xTimerCreateTimerTask+0x8c>)
 800b878:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b87a:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <xTimerCreateTimerTask+0x8c>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b882:	2301      	movs	r3, #1
 800b884:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	613b      	str	r3, [r7, #16]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8a2:	697b      	ldr	r3, [r7, #20]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	20008a60 	.word	0x20008a60
 800b8b0:	0800dcc4 	.word	0x0800dcc4
 800b8b4:	0800b9f1 	.word	0x0800b9f1
 800b8b8:	20008a64 	.word	0x20008a64

0800b8bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	623b      	str	r3, [r7, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b8ea:	4b1a      	ldr	r3, [pc, #104]	; (800b954 <xTimerGenericCommand+0x98>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d02a      	beq.n	800b948 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b05      	cmp	r3, #5
 800b902:	dc18      	bgt.n	800b936 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b904:	f7ff feb2 	bl	800b66c <xTaskGetSchedulerState>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d109      	bne.n	800b922 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b90e:	4b11      	ldr	r3, [pc, #68]	; (800b954 <xTimerGenericCommand+0x98>)
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	f107 0110 	add.w	r1, r7, #16
 800b916:	2300      	movs	r3, #0
 800b918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91a:	f7fe fba9 	bl	800a070 <xQueueGenericSend>
 800b91e:	6278      	str	r0, [r7, #36]	; 0x24
 800b920:	e012      	b.n	800b948 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b922:	4b0c      	ldr	r3, [pc, #48]	; (800b954 <xTimerGenericCommand+0x98>)
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	f107 0110 	add.w	r1, r7, #16
 800b92a:	2300      	movs	r3, #0
 800b92c:	2200      	movs	r2, #0
 800b92e:	f7fe fb9f 	bl	800a070 <xQueueGenericSend>
 800b932:	6278      	str	r0, [r7, #36]	; 0x24
 800b934:	e008      	b.n	800b948 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b936:	4b07      	ldr	r3, [pc, #28]	; (800b954 <xTimerGenericCommand+0x98>)
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	f107 0110 	add.w	r1, r7, #16
 800b93e:	2300      	movs	r3, #0
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	f7fe fc93 	bl	800a26c <xQueueGenericSendFromISR>
 800b946:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3728      	adds	r7, #40	; 0x28
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20008a60 	.word	0x20008a60

0800b958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b962:	4b22      	ldr	r3, [pc, #136]	; (800b9ec <prvProcessExpiredTimer+0x94>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	3304      	adds	r3, #4
 800b970:	4618      	mov	r0, r3
 800b972:	f7fe f9ab 	bl	8009ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d022      	beq.n	800b9ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	699a      	ldr	r2, [r3, #24]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	18d1      	adds	r1, r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	6978      	ldr	r0, [r7, #20]
 800b992:	f000 f8d1 	bl	800bb38 <prvInsertTimerInActiveList>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01f      	beq.n	800b9dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b99c:	2300      	movs	r3, #0
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	6978      	ldr	r0, [r7, #20]
 800b9a8:	f7ff ff88 	bl	800b8bc <xTimerGenericCommand>
 800b9ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d113      	bne.n	800b9dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	60fb      	str	r3, [r7, #12]
}
 800b9c6:	bf00      	nop
 800b9c8:	e7fe      	b.n	800b9c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	6978      	ldr	r0, [r7, #20]
 800b9e2:	4798      	blx	r3
}
 800b9e4:	bf00      	nop
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20008a58 	.word	0x20008a58

0800b9f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9f8:	f107 0308 	add.w	r3, r7, #8
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 f857 	bl	800bab0 <prvGetNextExpireTime>
 800ba02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	4619      	mov	r1, r3
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f803 	bl	800ba14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba0e:	f000 f8d5 	bl	800bbbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba12:	e7f1      	b.n	800b9f8 <prvTimerTask+0x8>

0800ba14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba1e:	f7ff fa39 	bl	800ae94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba22:	f107 0308 	add.w	r3, r7, #8
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 f866 	bl	800baf8 <prvSampleTimeNow>
 800ba2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d130      	bne.n	800ba96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <prvProcessTimerOrBlockTask+0x3c>
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d806      	bhi.n	800ba50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba42:	f7ff fa35 	bl	800aeb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff ff85 	bl	800b958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba4e:	e024      	b.n	800ba9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d008      	beq.n	800ba68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba56:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <prvProcessTimerOrBlockTask+0x90>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <prvProcessTimerOrBlockTask+0x50>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e000      	b.n	800ba66 <prvProcessTimerOrBlockTask+0x52>
 800ba64:	2300      	movs	r3, #0
 800ba66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba68:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <prvProcessTimerOrBlockTask+0x94>)
 800ba6a:	6818      	ldr	r0, [r3, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	4619      	mov	r1, r3
 800ba76:	f7fe ff7d 	bl	800a974 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba7a:	f7ff fa19 	bl	800aeb0 <xTaskResumeAll>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba84:	4b09      	ldr	r3, [pc, #36]	; (800baac <prvProcessTimerOrBlockTask+0x98>)
 800ba86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	f3bf 8f6f 	isb	sy
}
 800ba94:	e001      	b.n	800ba9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba96:	f7ff fa0b 	bl	800aeb0 <xTaskResumeAll>
}
 800ba9a:	bf00      	nop
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20008a5c 	.word	0x20008a5c
 800baa8:	20008a60 	.word	0x20008a60
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bab8:	4b0e      	ldr	r3, [pc, #56]	; (800baf4 <prvGetNextExpireTime+0x44>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <prvGetNextExpireTime+0x16>
 800bac2:	2201      	movs	r2, #1
 800bac4:	e000      	b.n	800bac8 <prvGetNextExpireTime+0x18>
 800bac6:	2200      	movs	r2, #0
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d105      	bne.n	800bae0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <prvGetNextExpireTime+0x44>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	e001      	b.n	800bae4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bae0:	2300      	movs	r3, #0
 800bae2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bae4:	68fb      	ldr	r3, [r7, #12]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20008a58 	.word	0x20008a58

0800baf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb00:	f7ff fa74 	bl	800afec <xTaskGetTickCount>
 800bb04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb06:	4b0b      	ldr	r3, [pc, #44]	; (800bb34 <prvSampleTimeNow+0x3c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d205      	bcs.n	800bb1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb10:	f000 f936 	bl	800bd80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	e002      	b.n	800bb22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb22:	4a04      	ldr	r2, [pc, #16]	; (800bb34 <prvSampleTimeNow+0x3c>)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb28:	68fb      	ldr	r3, [r7, #12]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20008a68 	.word	0x20008a68

0800bb38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d812      	bhi.n	800bb84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	1ad2      	subs	r2, r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d302      	bcc.n	800bb72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	617b      	str	r3, [r7, #20]
 800bb70:	e01b      	b.n	800bbaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb72:	4b10      	ldr	r3, [pc, #64]	; (800bbb4 <prvInsertTimerInActiveList+0x7c>)
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fe f86c 	bl	8009c5a <vListInsert>
 800bb82:	e012      	b.n	800bbaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d206      	bcs.n	800bb9a <prvInsertTimerInActiveList+0x62>
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d302      	bcc.n	800bb9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb94:	2301      	movs	r3, #1
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	e007      	b.n	800bbaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <prvInsertTimerInActiveList+0x80>)
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7fe f858 	bl	8009c5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbaa:	697b      	ldr	r3, [r7, #20]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20008a5c 	.word	0x20008a5c
 800bbb8:	20008a58 	.word	0x20008a58

0800bbbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08e      	sub	sp, #56	; 0x38
 800bbc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbc2:	e0ca      	b.n	800bd5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da18      	bge.n	800bbfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbca:	1d3b      	adds	r3, r7, #4
 800bbcc:	3304      	adds	r3, #4
 800bbce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10a      	bne.n	800bbec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	61fb      	str	r3, [r7, #28]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf2:	6850      	ldr	r0, [r2, #4]
 800bbf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf6:	6892      	ldr	r2, [r2, #8]
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f2c0 80aa 	blt.w	800bd58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	3304      	adds	r3, #4
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe f859 	bl	8009ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc1a:	463b      	mov	r3, r7
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff ff6b 	bl	800baf8 <prvSampleTimeNow>
 800bc22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b09      	cmp	r3, #9
 800bc28:	f200 8097 	bhi.w	800bd5a <prvProcessReceivedCommands+0x19e>
 800bc2c:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <prvProcessReceivedCommands+0x78>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bc5d 	.word	0x0800bc5d
 800bc38:	0800bc5d 	.word	0x0800bc5d
 800bc3c:	0800bc5d 	.word	0x0800bc5d
 800bc40:	0800bcd1 	.word	0x0800bcd1
 800bc44:	0800bce5 	.word	0x0800bce5
 800bc48:	0800bd2f 	.word	0x0800bd2f
 800bc4c:	0800bc5d 	.word	0x0800bc5d
 800bc50:	0800bc5d 	.word	0x0800bc5d
 800bc54:	0800bcd1 	.word	0x0800bcd1
 800bc58:	0800bce5 	.word	0x0800bce5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc62:	f043 0301 	orr.w	r3, r3, #1
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	18d1      	adds	r1, r2, r3
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc7c:	f7ff ff5c 	bl	800bb38 <prvInsertTimerInActiveList>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d069      	beq.n	800bd5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d05e      	beq.n	800bd5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	441a      	add	r2, r3
 800bca4:	2300      	movs	r3, #0
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcae:	f7ff fe05 	bl	800b8bc <xTimerGenericCommand>
 800bcb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d14f      	bne.n	800bd5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	61bb      	str	r3, [r7, #24]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd6:	f023 0301 	bic.w	r3, r3, #1
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bce2:	e03a      	b.n	800bd5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcea:	f043 0301 	orr.w	r3, r3, #1
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	617b      	str	r3, [r7, #20]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	699a      	ldr	r2, [r3, #24]
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	18d1      	adds	r1, r2, r3
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd28:	f7ff ff06 	bl	800bb38 <prvInsertTimerInActiveList>
					break;
 800bd2c:	e015      	b.n	800bd5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd34:	f003 0302 	and.w	r3, r3, #2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd3e:	f000 fbb7 	bl	800c4b0 <vPortFree>
 800bd42:	e00a      	b.n	800bd5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd4a:	f023 0301 	bic.w	r3, r3, #1
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd56:	e000      	b.n	800bd5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd5a:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <prvProcessReceivedCommands+0x1c0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	1d39      	adds	r1, r7, #4
 800bd60:	2200      	movs	r2, #0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fb1e 	bl	800a3a4 <xQueueReceive>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f47f af2a 	bne.w	800bbc4 <prvProcessReceivedCommands+0x8>
	}
}
 800bd70:	bf00      	nop
 800bd72:	bf00      	nop
 800bd74:	3730      	adds	r7, #48	; 0x30
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20008a60 	.word	0x20008a60

0800bd80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd86:	e048      	b.n	800be1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd88:	4b2d      	ldr	r3, [pc, #180]	; (800be40 <prvSwitchTimerLists+0xc0>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd92:	4b2b      	ldr	r3, [pc, #172]	; (800be40 <prvSwitchTimerLists+0xc0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fd ff93 	bl	8009ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdb4:	f003 0304 	and.w	r3, r3, #4
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d02e      	beq.n	800be1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d90e      	bls.n	800bdec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdda:	4b19      	ldr	r3, [pc, #100]	; (800be40 <prvSwitchTimerLists+0xc0>)
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3304      	adds	r3, #4
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f7fd ff38 	bl	8009c5a <vListInsert>
 800bdea:	e016      	b.n	800be1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdec:	2300      	movs	r3, #0
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7ff fd60 	bl	800b8bc <xTimerGenericCommand>
 800bdfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10a      	bne.n	800be1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	603b      	str	r3, [r7, #0]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be1a:	4b09      	ldr	r3, [pc, #36]	; (800be40 <prvSwitchTimerLists+0xc0>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1b1      	bne.n	800bd88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be24:	4b06      	ldr	r3, [pc, #24]	; (800be40 <prvSwitchTimerLists+0xc0>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be2a:	4b06      	ldr	r3, [pc, #24]	; (800be44 <prvSwitchTimerLists+0xc4>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a04      	ldr	r2, [pc, #16]	; (800be40 <prvSwitchTimerLists+0xc0>)
 800be30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be32:	4a04      	ldr	r2, [pc, #16]	; (800be44 <prvSwitchTimerLists+0xc4>)
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	6013      	str	r3, [r2, #0]
}
 800be38:	bf00      	nop
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20008a58 	.word	0x20008a58
 800be44:	20008a5c 	.word	0x20008a5c

0800be48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be4e:	f000 f969 	bl	800c124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be52:	4b15      	ldr	r3, [pc, #84]	; (800bea8 <prvCheckForValidListAndQueue+0x60>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d120      	bne.n	800be9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be5a:	4814      	ldr	r0, [pc, #80]	; (800beac <prvCheckForValidListAndQueue+0x64>)
 800be5c:	f7fd feac 	bl	8009bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be60:	4813      	ldr	r0, [pc, #76]	; (800beb0 <prvCheckForValidListAndQueue+0x68>)
 800be62:	f7fd fea9 	bl	8009bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <prvCheckForValidListAndQueue+0x6c>)
 800be68:	4a10      	ldr	r2, [pc, #64]	; (800beac <prvCheckForValidListAndQueue+0x64>)
 800be6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be6c:	4b12      	ldr	r3, [pc, #72]	; (800beb8 <prvCheckForValidListAndQueue+0x70>)
 800be6e:	4a10      	ldr	r2, [pc, #64]	; (800beb0 <prvCheckForValidListAndQueue+0x68>)
 800be70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be72:	2300      	movs	r3, #0
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	4b11      	ldr	r3, [pc, #68]	; (800bebc <prvCheckForValidListAndQueue+0x74>)
 800be78:	4a11      	ldr	r2, [pc, #68]	; (800bec0 <prvCheckForValidListAndQueue+0x78>)
 800be7a:	2110      	movs	r1, #16
 800be7c:	200a      	movs	r0, #10
 800be7e:	f7fd ffb7 	bl	8009df0 <xQueueGenericCreateStatic>
 800be82:	4603      	mov	r3, r0
 800be84:	4a08      	ldr	r2, [pc, #32]	; (800bea8 <prvCheckForValidListAndQueue+0x60>)
 800be86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be88:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <prvCheckForValidListAndQueue+0x60>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d005      	beq.n	800be9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be90:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <prvCheckForValidListAndQueue+0x60>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	490b      	ldr	r1, [pc, #44]	; (800bec4 <prvCheckForValidListAndQueue+0x7c>)
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe fd18 	bl	800a8cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be9c:	f000 f972 	bl	800c184 <vPortExitCritical>
}
 800bea0:	bf00      	nop
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20008a60 	.word	0x20008a60
 800beac:	20008a30 	.word	0x20008a30
 800beb0:	20008a44 	.word	0x20008a44
 800beb4:	20008a58 	.word	0x20008a58
 800beb8:	20008a5c 	.word	0x20008a5c
 800bebc:	20008b0c 	.word	0x20008b0c
 800bec0:	20008a6c 	.word	0x20008a6c
 800bec4:	0800dccc 	.word	0x0800dccc

0800bec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3b04      	subs	r3, #4
 800bed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3b04      	subs	r3, #4
 800bee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	f023 0201 	bic.w	r2, r3, #1
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3b04      	subs	r3, #4
 800bef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bef8:	4a0c      	ldr	r2, [pc, #48]	; (800bf2c <pxPortInitialiseStack+0x64>)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3b14      	subs	r3, #20
 800bf02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3b04      	subs	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f06f 0202 	mvn.w	r2, #2
 800bf16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	3b20      	subs	r3, #32
 800bf1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	0800bf31 	.word	0x0800bf31

0800bf30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf3a:	4b12      	ldr	r3, [pc, #72]	; (800bf84 <prvTaskExitError+0x54>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf42:	d00a      	beq.n	800bf5a <prvTaskExitError+0x2a>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	60fb      	str	r3, [r7, #12]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <prvTaskExitError+0x28>
	__asm volatile
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	60bb      	str	r3, [r7, #8]
}
 800bf6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf6e:	bf00      	nop
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0fc      	beq.n	800bf70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf76:	bf00      	nop
 800bf78:	bf00      	nop
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	200000cc 	.word	0x200000cc
	...

0800bf90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <pxCurrentTCBConst2>)
 800bf92:	6819      	ldr	r1, [r3, #0]
 800bf94:	6808      	ldr	r0, [r1, #0]
 800bf96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9a:	f380 8809 	msr	PSP, r0
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f04f 0000 	mov.w	r0, #0
 800bfa6:	f380 8811 	msr	BASEPRI, r0
 800bfaa:	4770      	bx	lr
 800bfac:	f3af 8000 	nop.w

0800bfb0 <pxCurrentTCBConst2>:
 800bfb0:	20008530 	.word	0x20008530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfb8:	4808      	ldr	r0, [pc, #32]	; (800bfdc <prvPortStartFirstTask+0x24>)
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	6800      	ldr	r0, [r0, #0]
 800bfbe:	f380 8808 	msr	MSP, r0
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8814 	msr	CONTROL, r0
 800bfca:	b662      	cpsie	i
 800bfcc:	b661      	cpsie	f
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	df00      	svc	0
 800bfd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfda:	bf00      	nop
 800bfdc:	e000ed08 	.word	0xe000ed08

0800bfe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bfe6:	4b46      	ldr	r3, [pc, #280]	; (800c100 <xPortStartScheduler+0x120>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a46      	ldr	r2, [pc, #280]	; (800c104 <xPortStartScheduler+0x124>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d10a      	bne.n	800c006 <xPortStartScheduler+0x26>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	613b      	str	r3, [r7, #16]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c006:	4b3e      	ldr	r3, [pc, #248]	; (800c100 <xPortStartScheduler+0x120>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a3f      	ldr	r2, [pc, #252]	; (800c108 <xPortStartScheduler+0x128>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10a      	bne.n	800c026 <xPortStartScheduler+0x46>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	60fb      	str	r3, [r7, #12]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c026:	4b39      	ldr	r3, [pc, #228]	; (800c10c <xPortStartScheduler+0x12c>)
 800c028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	22ff      	movs	r2, #255	; 0xff
 800c036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	b2db      	uxtb	r3, r3
 800c044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c048:	b2da      	uxtb	r2, r3
 800c04a:	4b31      	ldr	r3, [pc, #196]	; (800c110 <xPortStartScheduler+0x130>)
 800c04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c04e:	4b31      	ldr	r3, [pc, #196]	; (800c114 <xPortStartScheduler+0x134>)
 800c050:	2207      	movs	r2, #7
 800c052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c054:	e009      	b.n	800c06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c056:	4b2f      	ldr	r3, [pc, #188]	; (800c114 <xPortStartScheduler+0x134>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	4a2d      	ldr	r2, [pc, #180]	; (800c114 <xPortStartScheduler+0x134>)
 800c05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	b2db      	uxtb	r3, r3
 800c068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c072:	2b80      	cmp	r3, #128	; 0x80
 800c074:	d0ef      	beq.n	800c056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c076:	4b27      	ldr	r3, [pc, #156]	; (800c114 <xPortStartScheduler+0x134>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f1c3 0307 	rsb	r3, r3, #7
 800c07e:	2b04      	cmp	r3, #4
 800c080:	d00a      	beq.n	800c098 <xPortStartScheduler+0xb8>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	60bb      	str	r3, [r7, #8]
}
 800c094:	bf00      	nop
 800c096:	e7fe      	b.n	800c096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c098:	4b1e      	ldr	r3, [pc, #120]	; (800c114 <xPortStartScheduler+0x134>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	021b      	lsls	r3, r3, #8
 800c09e:	4a1d      	ldr	r2, [pc, #116]	; (800c114 <xPortStartScheduler+0x134>)
 800c0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0a2:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <xPortStartScheduler+0x134>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0aa:	4a1a      	ldr	r2, [pc, #104]	; (800c114 <xPortStartScheduler+0x134>)
 800c0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	b2da      	uxtb	r2, r3
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0b6:	4b18      	ldr	r3, [pc, #96]	; (800c118 <xPortStartScheduler+0x138>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a17      	ldr	r2, [pc, #92]	; (800c118 <xPortStartScheduler+0x138>)
 800c0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0c2:	4b15      	ldr	r3, [pc, #84]	; (800c118 <xPortStartScheduler+0x138>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a14      	ldr	r2, [pc, #80]	; (800c118 <xPortStartScheduler+0x138>)
 800c0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0ce:	f000 f8dd 	bl	800c28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0d2:	4b12      	ldr	r3, [pc, #72]	; (800c11c <xPortStartScheduler+0x13c>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0d8:	f000 f8fc 	bl	800c2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0dc:	4b10      	ldr	r3, [pc, #64]	; (800c120 <xPortStartScheduler+0x140>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a0f      	ldr	r2, [pc, #60]	; (800c120 <xPortStartScheduler+0x140>)
 800c0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0e8:	f7ff ff66 	bl	800bfb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0ec:	f7ff f848 	bl	800b180 <vTaskSwitchContext>
	prvTaskExitError();
 800c0f0:	f7ff ff1e 	bl	800bf30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	e000ed00 	.word	0xe000ed00
 800c104:	410fc271 	.word	0x410fc271
 800c108:	410fc270 	.word	0x410fc270
 800c10c:	e000e400 	.word	0xe000e400
 800c110:	20008b5c 	.word	0x20008b5c
 800c114:	20008b60 	.word	0x20008b60
 800c118:	e000ed20 	.word	0xe000ed20
 800c11c:	200000cc 	.word	0x200000cc
 800c120:	e000ef34 	.word	0xe000ef34

0800c124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	607b      	str	r3, [r7, #4]
}
 800c13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c13e:	4b0f      	ldr	r3, [pc, #60]	; (800c17c <vPortEnterCritical+0x58>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3301      	adds	r3, #1
 800c144:	4a0d      	ldr	r2, [pc, #52]	; (800c17c <vPortEnterCritical+0x58>)
 800c146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c148:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <vPortEnterCritical+0x58>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d10f      	bne.n	800c170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c150:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <vPortEnterCritical+0x5c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00a      	beq.n	800c170 <vPortEnterCritical+0x4c>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	603b      	str	r3, [r7, #0]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <vPortEnterCritical+0x4a>
	}
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	200000cc 	.word	0x200000cc
 800c180:	e000ed04 	.word	0xe000ed04

0800c184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c18a:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <vPortExitCritical+0x50>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10a      	bne.n	800c1a8 <vPortExitCritical+0x24>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	607b      	str	r3, [r7, #4]
}
 800c1a4:	bf00      	nop
 800c1a6:	e7fe      	b.n	800c1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	; (800c1d4 <vPortExitCritical+0x50>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	4a09      	ldr	r2, [pc, #36]	; (800c1d4 <vPortExitCritical+0x50>)
 800c1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1b2:	4b08      	ldr	r3, [pc, #32]	; (800c1d4 <vPortExitCritical+0x50>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d105      	bne.n	800c1c6 <vPortExitCritical+0x42>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	f383 8811 	msr	BASEPRI, r3
}
 800c1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1c6:	bf00      	nop
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	200000cc 	.word	0x200000cc
	...

0800c1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1e0:	f3ef 8009 	mrs	r0, PSP
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4b15      	ldr	r3, [pc, #84]	; (800c240 <pxCurrentTCBConst>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	f01e 0f10 	tst.w	lr, #16
 800c1f0:	bf08      	it	eq
 800c1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fa:	6010      	str	r0, [r2, #0]
 800c1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c204:	f380 8811 	msr	BASEPRI, r0
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f7fe ffb6 	bl	800b180 <vTaskSwitchContext>
 800c214:	f04f 0000 	mov.w	r0, #0
 800c218:	f380 8811 	msr	BASEPRI, r0
 800c21c:	bc09      	pop	{r0, r3}
 800c21e:	6819      	ldr	r1, [r3, #0]
 800c220:	6808      	ldr	r0, [r1, #0]
 800c222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c226:	f01e 0f10 	tst.w	lr, #16
 800c22a:	bf08      	it	eq
 800c22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c230:	f380 8809 	msr	PSP, r0
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	f3af 8000 	nop.w

0800c240 <pxCurrentTCBConst>:
 800c240:	20008530 	.word	0x20008530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	607b      	str	r3, [r7, #4]
}
 800c260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c262:	f7fe fed3 	bl	800b00c <xTaskIncrementTick>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c26c:	4b06      	ldr	r3, [pc, #24]	; (800c288 <xPortSysTickHandler+0x40>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	f383 8811 	msr	BASEPRI, r3
}
 800c27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c290:	4b0b      	ldr	r3, [pc, #44]	; (800c2c0 <vPortSetupTimerInterrupt+0x34>)
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <vPortSetupTimerInterrupt+0x38>)
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <vPortSetupTimerInterrupt+0x3c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <vPortSetupTimerInterrupt+0x40>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	099b      	lsrs	r3, r3, #6
 800c2a8:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <vPortSetupTimerInterrupt+0x44>)
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ae:	4b04      	ldr	r3, [pc, #16]	; (800c2c0 <vPortSetupTimerInterrupt+0x34>)
 800c2b0:	2207      	movs	r2, #7
 800c2b2:	601a      	str	r2, [r3, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	e000e010 	.word	0xe000e010
 800c2c4:	e000e018 	.word	0xe000e018
 800c2c8:	2000009c 	.word	0x2000009c
 800c2cc:	10624dd3 	.word	0x10624dd3
 800c2d0:	e000e014 	.word	0xe000e014

0800c2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c2e4 <vPortEnableVFP+0x10>
 800c2d8:	6801      	ldr	r1, [r0, #0]
 800c2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2de:	6001      	str	r1, [r0, #0]
 800c2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2e2:	bf00      	nop
 800c2e4:	e000ed88 	.word	0xe000ed88

0800c2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2ee:	f3ef 8305 	mrs	r3, IPSR
 800c2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b0f      	cmp	r3, #15
 800c2f8:	d914      	bls.n	800c324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2fa:	4a17      	ldr	r2, [pc, #92]	; (800c358 <vPortValidateInterruptPriority+0x70>)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4413      	add	r3, r2
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c304:	4b15      	ldr	r3, [pc, #84]	; (800c35c <vPortValidateInterruptPriority+0x74>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	7afa      	ldrb	r2, [r7, #11]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d20a      	bcs.n	800c324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	607b      	str	r3, [r7, #4]
}
 800c320:	bf00      	nop
 800c322:	e7fe      	b.n	800c322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c324:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <vPortValidateInterruptPriority+0x78>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c32c:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <vPortValidateInterruptPriority+0x7c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	429a      	cmp	r2, r3
 800c332:	d90a      	bls.n	800c34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	603b      	str	r3, [r7, #0]
}
 800c346:	bf00      	nop
 800c348:	e7fe      	b.n	800c348 <vPortValidateInterruptPriority+0x60>
	}
 800c34a:	bf00      	nop
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	e000e3f0 	.word	0xe000e3f0
 800c35c:	20008b5c 	.word	0x20008b5c
 800c360:	e000ed0c 	.word	0xe000ed0c
 800c364:	20008b60 	.word	0x20008b60

0800c368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800c374:	4b48      	ldr	r3, [pc, #288]	; (800c498 <pvPortMalloc+0x130>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <pvPortMalloc+0x2a>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60fb      	str	r3, [r7, #12]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800c392:	f7fe fd7f 	bl	800ae94 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c396:	4b41      	ldr	r3, [pc, #260]	; (800c49c <pvPortMalloc+0x134>)
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4013      	ands	r3, r2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d172      	bne.n	800c488 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00d      	beq.n	800c3c4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c3a8:	2208      	movs	r2, #8
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f023 0307 	bic.w	r3, r3, #7
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d05e      	beq.n	800c488 <pvPortMalloc+0x120>
 800c3ca:	4b35      	ldr	r3, [pc, #212]	; (800c4a0 <pvPortMalloc+0x138>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d859      	bhi.n	800c488 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3d4:	4b33      	ldr	r3, [pc, #204]	; (800c4a4 <pvPortMalloc+0x13c>)
 800c3d6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800c3d8:	4b32      	ldr	r3, [pc, #200]	; (800c4a4 <pvPortMalloc+0x13c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3de:	e004      	b.n	800c3ea <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d903      	bls.n	800c3fc <pvPortMalloc+0x94>
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1f1      	bne.n	800c3e0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3fc:	4b26      	ldr	r3, [pc, #152]	; (800c498 <pvPortMalloc+0x130>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	429a      	cmp	r2, r3
 800c404:	d040      	beq.n	800c488 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2208      	movs	r2, #8
 800c40c:	4413      	add	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	1ad2      	subs	r2, r2, r3
 800c420:	2308      	movs	r3, #8
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	429a      	cmp	r2, r3
 800c426:	d90f      	bls.n	800c448 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4413      	add	r3, r2
 800c42e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	685a      	ldr	r2, [r3, #4]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	1ad2      	subs	r2, r2, r3
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c442:	6938      	ldr	r0, [r7, #16]
 800c444:	f000 f8a2 	bl	800c58c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c448:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <pvPortMalloc+0x138>)
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	4a13      	ldr	r2, [pc, #76]	; (800c4a0 <pvPortMalloc+0x138>)
 800c454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c456:	4b12      	ldr	r3, [pc, #72]	; (800c4a0 <pvPortMalloc+0x138>)
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	4b13      	ldr	r3, [pc, #76]	; (800c4a8 <pvPortMalloc+0x140>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d203      	bcs.n	800c46a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c462:	4b0f      	ldr	r3, [pc, #60]	; (800c4a0 <pvPortMalloc+0x138>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a10      	ldr	r2, [pc, #64]	; (800c4a8 <pvPortMalloc+0x140>)
 800c468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <pvPortMalloc+0x134>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	431a      	orrs	r2, r3
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c47e:	4b0b      	ldr	r3, [pc, #44]	; (800c4ac <pvPortMalloc+0x144>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3301      	adds	r3, #1
 800c484:	4a09      	ldr	r2, [pc, #36]	; (800c4ac <pvPortMalloc+0x144>)
 800c486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c488:	f7fe fd12 	bl	800aeb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c48c:	697b      	ldr	r3, [r7, #20]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3720      	adds	r7, #32
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20008b6c 	.word	0x20008b6c
 800c49c:	20008b80 	.word	0x20008b80
 800c4a0:	20008b70 	.word	0x20008b70
 800c4a4:	20008b64 	.word	0x20008b64
 800c4a8:	20008b74 	.word	0x20008b74
 800c4ac:	20008b78 	.word	0x20008b78

0800c4b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d04d      	beq.n	800c55e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4c2:	2308      	movs	r3, #8
 800c4c4:	425b      	negs	r3, r3
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	4b24      	ldr	r3, [pc, #144]	; (800c568 <vPortFree+0xb8>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4013      	ands	r3, r2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10a      	bne.n	800c4f4 <vPortFree+0x44>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	60fb      	str	r3, [r7, #12]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00a      	beq.n	800c512 <vPortFree+0x62>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	60bb      	str	r3, [r7, #8]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	4b14      	ldr	r3, [pc, #80]	; (800c568 <vPortFree+0xb8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01e      	beq.n	800c55e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d11a      	bne.n	800c55e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	4b0e      	ldr	r3, [pc, #56]	; (800c568 <vPortFree+0xb8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	43db      	mvns	r3, r3
 800c532:	401a      	ands	r2, r3
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c538:	f7fe fcac 	bl	800ae94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	4b0a      	ldr	r3, [pc, #40]	; (800c56c <vPortFree+0xbc>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4413      	add	r3, r2
 800c546:	4a09      	ldr	r2, [pc, #36]	; (800c56c <vPortFree+0xbc>)
 800c548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f000 f81e 	bl	800c58c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c550:	4b07      	ldr	r3, [pc, #28]	; (800c570 <vPortFree+0xc0>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	4a06      	ldr	r2, [pc, #24]	; (800c570 <vPortFree+0xc0>)
 800c558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c55a:	f7fe fca9 	bl	800aeb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c55e:	bf00      	nop
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20008b80 	.word	0x20008b80
 800c56c:	20008b70 	.word	0x20008b70
 800c570:	20008b7c 	.word	0x20008b7c

0800c574 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c574:	b480      	push	{r7}
 800c576:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c578:	4b03      	ldr	r3, [pc, #12]	; (800c588 <xPortGetFreeHeapSize+0x14>)
 800c57a:	681b      	ldr	r3, [r3, #0]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	20008b70 	.word	0x20008b70

0800c58c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c594:	4b28      	ldr	r3, [pc, #160]	; (800c638 <prvInsertBlockIntoFreeList+0xac>)
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	e002      	b.n	800c5a0 <prvInsertBlockIntoFreeList+0x14>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d8f7      	bhi.n	800c59a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d108      	bne.n	800c5ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	441a      	add	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d118      	bne.n	800c614 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	4b15      	ldr	r3, [pc, #84]	; (800c63c <prvInsertBlockIntoFreeList+0xb0>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d00d      	beq.n	800c60a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	441a      	add	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	e008      	b.n	800c61c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c60a:	4b0c      	ldr	r3, [pc, #48]	; (800c63c <prvInsertBlockIntoFreeList+0xb0>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	e003      	b.n	800c61c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	429a      	cmp	r2, r3
 800c622:	d002      	beq.n	800c62a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c62a:	bf00      	nop
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20008b64 	.word	0x20008b64
 800c63c:	20008b6c 	.word	0x20008b6c

0800c640 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c640:	b480      	push	{r7}
 800c642:	b08f      	sub	sp, #60	; 0x3c
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c648:	2300      	movs	r3, #0
 800c64a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c654:	4b5a      	ldr	r3, [pc, #360]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00a      	beq.n	800c672 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	617b      	str	r3, [r7, #20]
}
 800c66e:	bf00      	nop
 800c670:	e7fe      	b.n	800c670 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	4413      	add	r3, r2
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c67c:	e07d      	b.n	800c77a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00e      	beq.n	800c6b2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	3307      	adds	r3, #7
 800c698:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69c:	f023 0307 	bic.w	r3, r3, #7
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6ae:	4413      	add	r3, r2
 800c6b0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	4a41      	ldr	r2, [pc, #260]	; (800c7c4 <vPortDefineHeapRegions+0x184>)
 800c6c0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c6c2:	4b40      	ldr	r3, [pc, #256]	; (800c7c4 <vPortDefineHeapRegions+0x184>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	605a      	str	r2, [r3, #4]
 800c6c8:	e01f      	b.n	800c70a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c6ca:	4b3d      	ldr	r3, [pc, #244]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10a      	bne.n	800c6e8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	613b      	str	r3, [r7, #16]
}
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c6e8:	4b35      	ldr	r3, [pc, #212]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d80a      	bhi.n	800c70a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	60fb      	str	r3, [r7, #12]
}
 800c706:	bf00      	nop
 800c708:	e7fe      	b.n	800c708 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c70a:	4b2d      	ldr	r3, [pc, #180]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c710:	69fa      	ldr	r2, [r7, #28]
 800c712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c714:	4413      	add	r3, r2
 800c716:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c718:	2208      	movs	r2, #8
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	1a9b      	subs	r3, r3, r2
 800c71e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	f023 0307 	bic.w	r3, r3, #7
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	4a25      	ldr	r2, [pc, #148]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c72c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c72e:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2200      	movs	r2, #0
 800c734:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c736:	4b22      	ldr	r3, [pc, #136]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c746:	1ad2      	subs	r2, r2, r3
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c74c:	4b1c      	ldr	r3, [pc, #112]	; (800c7c0 <vPortDefineHeapRegions+0x180>)
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	6a3b      	ldr	r3, [r7, #32]
 800c752:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	6a3a      	ldr	r2, [r7, #32]
 800c75e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c766:	4413      	add	r3, r2
 800c768:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	3301      	adds	r3, #1
 800c76e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	4413      	add	r3, r2
 800c778:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f47f af7d 	bne.w	800c67e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c784:	4a10      	ldr	r2, [pc, #64]	; (800c7c8 <vPortDefineHeapRegions+0x188>)
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c78a:	4a10      	ldr	r2, [pc, #64]	; (800c7cc <vPortDefineHeapRegions+0x18c>)
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	2b00      	cmp	r3, #0
 800c794:	d10a      	bne.n	800c7ac <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79a:	f383 8811 	msr	BASEPRI, r3
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	60bb      	str	r3, [r7, #8]
}
 800c7a8:	bf00      	nop
 800c7aa:	e7fe      	b.n	800c7aa <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7ac:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <vPortDefineHeapRegions+0x190>)
 800c7ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7b2:	601a      	str	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	373c      	adds	r7, #60	; 0x3c
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	20008b6c 	.word	0x20008b6c
 800c7c4:	20008b64 	.word	0x20008b64
 800c7c8:	20008b74 	.word	0x20008b74
 800c7cc:	20008b70 	.word	0x20008b70
 800c7d0:	20008b80 	.word	0x20008b80

0800c7d4 <atol>:
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	f000 baec 	b.w	800cdb4 <strtol>

0800c7dc <__errno>:
 800c7dc:	4b01      	ldr	r3, [pc, #4]	; (800c7e4 <__errno+0x8>)
 800c7de:	6818      	ldr	r0, [r3, #0]
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	200000d0 	.word	0x200000d0

0800c7e8 <gmtime_r>:
 800c7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	4a4f      	ldr	r2, [pc, #316]	; (800c930 <gmtime_r+0x148>)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	4639      	mov	r1, r7
 800c7fa:	f7f4 f847 	bl	800088c <__aeabi_ldivmod>
 800c7fe:	4639      	mov	r1, r7
 800c800:	4605      	mov	r5, r0
 800c802:	4a4b      	ldr	r2, [pc, #300]	; (800c930 <gmtime_r+0x148>)
 800c804:	4630      	mov	r0, r6
 800c806:	2300      	movs	r3, #0
 800c808:	f7f4 f840 	bl	800088c <__aeabi_ldivmod>
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c812:	bfb7      	itett	lt
 800c814:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c818:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c81c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c820:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c824:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c828:	fbb2 f1f0 	udiv	r1, r2, r0
 800c82c:	fb00 2211 	mls	r2, r0, r1, r2
 800c830:	203c      	movs	r0, #60	; 0x3c
 800c832:	60a1      	str	r1, [r4, #8]
 800c834:	fbb2 f1f0 	udiv	r1, r2, r0
 800c838:	fb00 2211 	mls	r2, r0, r1, r2
 800c83c:	6061      	str	r1, [r4, #4]
 800c83e:	6022      	str	r2, [r4, #0]
 800c840:	2107      	movs	r1, #7
 800c842:	1cda      	adds	r2, r3, #3
 800c844:	fb92 f1f1 	sdiv	r1, r2, r1
 800c848:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c84c:	1a52      	subs	r2, r2, r1
 800c84e:	bf48      	it	mi
 800c850:	3207      	addmi	r2, #7
 800c852:	4d38      	ldr	r5, [pc, #224]	; (800c934 <gmtime_r+0x14c>)
 800c854:	4838      	ldr	r0, [pc, #224]	; (800c938 <gmtime_r+0x150>)
 800c856:	61a2      	str	r2, [r4, #24]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bfb7      	itett	lt
 800c85c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c860:	fb93 f5f5 	sdivge	r5, r3, r5
 800c864:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c868:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c86c:	fb00 3005 	mla	r0, r0, r5, r3
 800c870:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c874:	fbb0 f2f2 	udiv	r2, r0, r2
 800c878:	4402      	add	r2, r0
 800c87a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c87e:	fbb0 f1f3 	udiv	r1, r0, r3
 800c882:	1a52      	subs	r2, r2, r1
 800c884:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c888:	492c      	ldr	r1, [pc, #176]	; (800c93c <gmtime_r+0x154>)
 800c88a:	fbb0 f1f1 	udiv	r1, r0, r1
 800c88e:	2764      	movs	r7, #100	; 0x64
 800c890:	1a52      	subs	r2, r2, r1
 800c892:	fbb2 f1fc 	udiv	r1, r2, ip
 800c896:	fbb2 f3f3 	udiv	r3, r2, r3
 800c89a:	fbb1 f6f7 	udiv	r6, r1, r7
 800c89e:	1af3      	subs	r3, r6, r3
 800c8a0:	4403      	add	r3, r0
 800c8a2:	fb0c 3311 	mls	r3, ip, r1, r3
 800c8a6:	2299      	movs	r2, #153	; 0x99
 800c8a8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c8ac:	f10e 0e02 	add.w	lr, lr, #2
 800c8b0:	f103 0c01 	add.w	ip, r3, #1
 800c8b4:	fbbe f0f2 	udiv	r0, lr, r2
 800c8b8:	4342      	muls	r2, r0
 800c8ba:	3202      	adds	r2, #2
 800c8bc:	f04f 0805 	mov.w	r8, #5
 800c8c0:	fbb2 f2f8 	udiv	r2, r2, r8
 800c8c4:	ebac 0c02 	sub.w	ip, ip, r2
 800c8c8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c8cc:	4596      	cmp	lr, r2
 800c8ce:	bf94      	ite	ls
 800c8d0:	2202      	movls	r2, #2
 800c8d2:	f06f 0209 	mvnhi.w	r2, #9
 800c8d6:	4410      	add	r0, r2
 800c8d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c8dc:	fb02 1505 	mla	r5, r2, r5, r1
 800c8e0:	2801      	cmp	r0, #1
 800c8e2:	bf98      	it	ls
 800c8e4:	3501      	addls	r5, #1
 800c8e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c8ea:	d30d      	bcc.n	800c908 <gmtime_r+0x120>
 800c8ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c8f0:	61e3      	str	r3, [r4, #28]
 800c8f2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c8fc:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c900:	6223      	str	r3, [r4, #32]
 800c902:	4620      	mov	r0, r4
 800c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c908:	078a      	lsls	r2, r1, #30
 800c90a:	d102      	bne.n	800c912 <gmtime_r+0x12a>
 800c90c:	fb07 1616 	mls	r6, r7, r6, r1
 800c910:	b95e      	cbnz	r6, 800c92a <gmtime_r+0x142>
 800c912:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c916:	fbb1 f6f2 	udiv	r6, r1, r2
 800c91a:	fb02 1216 	mls	r2, r2, r6, r1
 800c91e:	fab2 f282 	clz	r2, r2
 800c922:	0952      	lsrs	r2, r2, #5
 800c924:	333b      	adds	r3, #59	; 0x3b
 800c926:	4413      	add	r3, r2
 800c928:	e7e2      	b.n	800c8f0 <gmtime_r+0x108>
 800c92a:	2201      	movs	r2, #1
 800c92c:	e7fa      	b.n	800c924 <gmtime_r+0x13c>
 800c92e:	bf00      	nop
 800c930:	00015180 	.word	0x00015180
 800c934:	00023ab1 	.word	0x00023ab1
 800c938:	fffdc54f 	.word	0xfffdc54f
 800c93c:	00023ab0 	.word	0x00023ab0

0800c940 <__libc_init_array>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4d0d      	ldr	r5, [pc, #52]	; (800c978 <__libc_init_array+0x38>)
 800c944:	4c0d      	ldr	r4, [pc, #52]	; (800c97c <__libc_init_array+0x3c>)
 800c946:	1b64      	subs	r4, r4, r5
 800c948:	10a4      	asrs	r4, r4, #2
 800c94a:	2600      	movs	r6, #0
 800c94c:	42a6      	cmp	r6, r4
 800c94e:	d109      	bne.n	800c964 <__libc_init_array+0x24>
 800c950:	4d0b      	ldr	r5, [pc, #44]	; (800c980 <__libc_init_array+0x40>)
 800c952:	4c0c      	ldr	r4, [pc, #48]	; (800c984 <__libc_init_array+0x44>)
 800c954:	f000 fe0c 	bl	800d570 <_init>
 800c958:	1b64      	subs	r4, r4, r5
 800c95a:	10a4      	asrs	r4, r4, #2
 800c95c:	2600      	movs	r6, #0
 800c95e:	42a6      	cmp	r6, r4
 800c960:	d105      	bne.n	800c96e <__libc_init_array+0x2e>
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	f855 3b04 	ldr.w	r3, [r5], #4
 800c968:	4798      	blx	r3
 800c96a:	3601      	adds	r6, #1
 800c96c:	e7ee      	b.n	800c94c <__libc_init_array+0xc>
 800c96e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c972:	4798      	blx	r3
 800c974:	3601      	adds	r6, #1
 800c976:	e7f2      	b.n	800c95e <__libc_init_array+0x1e>
 800c978:	0800fff0 	.word	0x0800fff0
 800c97c:	0800fff0 	.word	0x0800fff0
 800c980:	0800fff0 	.word	0x0800fff0
 800c984:	0800fff4 	.word	0x0800fff4

0800c988 <__retarget_lock_acquire_recursive>:
 800c988:	4770      	bx	lr

0800c98a <__retarget_lock_release_recursive>:
 800c98a:	4770      	bx	lr

0800c98c <memcpy>:
 800c98c:	440a      	add	r2, r1
 800c98e:	4291      	cmp	r1, r2
 800c990:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c994:	d100      	bne.n	800c998 <memcpy+0xc>
 800c996:	4770      	bx	lr
 800c998:	b510      	push	{r4, lr}
 800c99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9a2:	4291      	cmp	r1, r2
 800c9a4:	d1f9      	bne.n	800c99a <memcpy+0xe>
 800c9a6:	bd10      	pop	{r4, pc}

0800c9a8 <memset>:
 800c9a8:	4402      	add	r2, r0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d100      	bne.n	800c9b2 <memset+0xa>
 800c9b0:	4770      	bx	lr
 800c9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9b6:	e7f9      	b.n	800c9ac <memset+0x4>

0800c9b8 <sbrk_aligned>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4e0e      	ldr	r6, [pc, #56]	; (800c9f4 <sbrk_aligned+0x3c>)
 800c9bc:	460c      	mov	r4, r1
 800c9be:	6831      	ldr	r1, [r6, #0]
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	b911      	cbnz	r1, 800c9ca <sbrk_aligned+0x12>
 800c9c4:	f000 f8f6 	bl	800cbb4 <_sbrk_r>
 800c9c8:	6030      	str	r0, [r6, #0]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f000 f8f1 	bl	800cbb4 <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d00a      	beq.n	800c9ec <sbrk_aligned+0x34>
 800c9d6:	1cc4      	adds	r4, r0, #3
 800c9d8:	f024 0403 	bic.w	r4, r4, #3
 800c9dc:	42a0      	cmp	r0, r4
 800c9de:	d007      	beq.n	800c9f0 <sbrk_aligned+0x38>
 800c9e0:	1a21      	subs	r1, r4, r0
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	f000 f8e6 	bl	800cbb4 <_sbrk_r>
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d101      	bne.n	800c9f0 <sbrk_aligned+0x38>
 800c9ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	20008b8c 	.word	0x20008b8c

0800c9f8 <_malloc_r>:
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	1ccd      	adds	r5, r1, #3
 800c9fe:	f025 0503 	bic.w	r5, r5, #3
 800ca02:	3508      	adds	r5, #8
 800ca04:	2d0c      	cmp	r5, #12
 800ca06:	bf38      	it	cc
 800ca08:	250c      	movcc	r5, #12
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	db01      	blt.n	800ca14 <_malloc_r+0x1c>
 800ca10:	42a9      	cmp	r1, r5
 800ca12:	d905      	bls.n	800ca20 <_malloc_r+0x28>
 800ca14:	230c      	movs	r3, #12
 800ca16:	603b      	str	r3, [r7, #0]
 800ca18:	2600      	movs	r6, #0
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca20:	4e2e      	ldr	r6, [pc, #184]	; (800cadc <_malloc_r+0xe4>)
 800ca22:	f000 fa0b 	bl	800ce3c <__malloc_lock>
 800ca26:	6833      	ldr	r3, [r6, #0]
 800ca28:	461c      	mov	r4, r3
 800ca2a:	bb34      	cbnz	r4, 800ca7a <_malloc_r+0x82>
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4638      	mov	r0, r7
 800ca30:	f7ff ffc2 	bl	800c9b8 <sbrk_aligned>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	4604      	mov	r4, r0
 800ca38:	d14d      	bne.n	800cad6 <_malloc_r+0xde>
 800ca3a:	6834      	ldr	r4, [r6, #0]
 800ca3c:	4626      	mov	r6, r4
 800ca3e:	2e00      	cmp	r6, #0
 800ca40:	d140      	bne.n	800cac4 <_malloc_r+0xcc>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	4631      	mov	r1, r6
 800ca46:	4638      	mov	r0, r7
 800ca48:	eb04 0803 	add.w	r8, r4, r3
 800ca4c:	f000 f8b2 	bl	800cbb4 <_sbrk_r>
 800ca50:	4580      	cmp	r8, r0
 800ca52:	d13a      	bne.n	800caca <_malloc_r+0xd2>
 800ca54:	6821      	ldr	r1, [r4, #0]
 800ca56:	3503      	adds	r5, #3
 800ca58:	1a6d      	subs	r5, r5, r1
 800ca5a:	f025 0503 	bic.w	r5, r5, #3
 800ca5e:	3508      	adds	r5, #8
 800ca60:	2d0c      	cmp	r5, #12
 800ca62:	bf38      	it	cc
 800ca64:	250c      	movcc	r5, #12
 800ca66:	4629      	mov	r1, r5
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff ffa5 	bl	800c9b8 <sbrk_aligned>
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d02b      	beq.n	800caca <_malloc_r+0xd2>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	442b      	add	r3, r5
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	e00e      	b.n	800ca98 <_malloc_r+0xa0>
 800ca7a:	6822      	ldr	r2, [r4, #0]
 800ca7c:	1b52      	subs	r2, r2, r5
 800ca7e:	d41e      	bmi.n	800cabe <_malloc_r+0xc6>
 800ca80:	2a0b      	cmp	r2, #11
 800ca82:	d916      	bls.n	800cab2 <_malloc_r+0xba>
 800ca84:	1961      	adds	r1, r4, r5
 800ca86:	42a3      	cmp	r3, r4
 800ca88:	6025      	str	r5, [r4, #0]
 800ca8a:	bf18      	it	ne
 800ca8c:	6059      	strne	r1, [r3, #4]
 800ca8e:	6863      	ldr	r3, [r4, #4]
 800ca90:	bf08      	it	eq
 800ca92:	6031      	streq	r1, [r6, #0]
 800ca94:	5162      	str	r2, [r4, r5]
 800ca96:	604b      	str	r3, [r1, #4]
 800ca98:	4638      	mov	r0, r7
 800ca9a:	f104 060b 	add.w	r6, r4, #11
 800ca9e:	f000 f9d3 	bl	800ce48 <__malloc_unlock>
 800caa2:	f026 0607 	bic.w	r6, r6, #7
 800caa6:	1d23      	adds	r3, r4, #4
 800caa8:	1af2      	subs	r2, r6, r3
 800caaa:	d0b6      	beq.n	800ca1a <_malloc_r+0x22>
 800caac:	1b9b      	subs	r3, r3, r6
 800caae:	50a3      	str	r3, [r4, r2]
 800cab0:	e7b3      	b.n	800ca1a <_malloc_r+0x22>
 800cab2:	6862      	ldr	r2, [r4, #4]
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	bf0c      	ite	eq
 800cab8:	6032      	streq	r2, [r6, #0]
 800caba:	605a      	strne	r2, [r3, #4]
 800cabc:	e7ec      	b.n	800ca98 <_malloc_r+0xa0>
 800cabe:	4623      	mov	r3, r4
 800cac0:	6864      	ldr	r4, [r4, #4]
 800cac2:	e7b2      	b.n	800ca2a <_malloc_r+0x32>
 800cac4:	4634      	mov	r4, r6
 800cac6:	6876      	ldr	r6, [r6, #4]
 800cac8:	e7b9      	b.n	800ca3e <_malloc_r+0x46>
 800caca:	230c      	movs	r3, #12
 800cacc:	603b      	str	r3, [r7, #0]
 800cace:	4638      	mov	r0, r7
 800cad0:	f000 f9ba 	bl	800ce48 <__malloc_unlock>
 800cad4:	e7a1      	b.n	800ca1a <_malloc_r+0x22>
 800cad6:	6025      	str	r5, [r4, #0]
 800cad8:	e7de      	b.n	800ca98 <_malloc_r+0xa0>
 800cada:	bf00      	nop
 800cadc:	20008b88 	.word	0x20008b88

0800cae0 <cleanup_glue>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	460c      	mov	r4, r1
 800cae4:	6809      	ldr	r1, [r1, #0]
 800cae6:	4605      	mov	r5, r0
 800cae8:	b109      	cbz	r1, 800caee <cleanup_glue+0xe>
 800caea:	f7ff fff9 	bl	800cae0 <cleanup_glue>
 800caee:	4621      	mov	r1, r4
 800caf0:	4628      	mov	r0, r5
 800caf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf6:	f000 b9ad 	b.w	800ce54 <_free_r>
	...

0800cafc <_reclaim_reent>:
 800cafc:	4b2c      	ldr	r3, [pc, #176]	; (800cbb0 <_reclaim_reent+0xb4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4283      	cmp	r3, r0
 800cb02:	b570      	push	{r4, r5, r6, lr}
 800cb04:	4604      	mov	r4, r0
 800cb06:	d051      	beq.n	800cbac <_reclaim_reent+0xb0>
 800cb08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb0a:	b143      	cbz	r3, 800cb1e <_reclaim_reent+0x22>
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d14a      	bne.n	800cba8 <_reclaim_reent+0xac>
 800cb12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb14:	6819      	ldr	r1, [r3, #0]
 800cb16:	b111      	cbz	r1, 800cb1e <_reclaim_reent+0x22>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f000 f99b 	bl	800ce54 <_free_r>
 800cb1e:	6961      	ldr	r1, [r4, #20]
 800cb20:	b111      	cbz	r1, 800cb28 <_reclaim_reent+0x2c>
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 f996 	bl	800ce54 <_free_r>
 800cb28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb2a:	b111      	cbz	r1, 800cb32 <_reclaim_reent+0x36>
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 f991 	bl	800ce54 <_free_r>
 800cb32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb34:	b111      	cbz	r1, 800cb3c <_reclaim_reent+0x40>
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 f98c 	bl	800ce54 <_free_r>
 800cb3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb3e:	b111      	cbz	r1, 800cb46 <_reclaim_reent+0x4a>
 800cb40:	4620      	mov	r0, r4
 800cb42:	f000 f987 	bl	800ce54 <_free_r>
 800cb46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb48:	b111      	cbz	r1, 800cb50 <_reclaim_reent+0x54>
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f982 	bl	800ce54 <_free_r>
 800cb50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb52:	b111      	cbz	r1, 800cb5a <_reclaim_reent+0x5e>
 800cb54:	4620      	mov	r0, r4
 800cb56:	f000 f97d 	bl	800ce54 <_free_r>
 800cb5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb5c:	b111      	cbz	r1, 800cb64 <_reclaim_reent+0x68>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 f978 	bl	800ce54 <_free_r>
 800cb64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb66:	b111      	cbz	r1, 800cb6e <_reclaim_reent+0x72>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 f973 	bl	800ce54 <_free_r>
 800cb6e:	69a3      	ldr	r3, [r4, #24]
 800cb70:	b1e3      	cbz	r3, 800cbac <_reclaim_reent+0xb0>
 800cb72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb74:	4620      	mov	r0, r4
 800cb76:	4798      	blx	r3
 800cb78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb7a:	b1b9      	cbz	r1, 800cbac <_reclaim_reent+0xb0>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb82:	f7ff bfad 	b.w	800cae0 <cleanup_glue>
 800cb86:	5949      	ldr	r1, [r1, r5]
 800cb88:	b941      	cbnz	r1, 800cb9c <_reclaim_reent+0xa0>
 800cb8a:	3504      	adds	r5, #4
 800cb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb8e:	2d80      	cmp	r5, #128	; 0x80
 800cb90:	68d9      	ldr	r1, [r3, #12]
 800cb92:	d1f8      	bne.n	800cb86 <_reclaim_reent+0x8a>
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 f95d 	bl	800ce54 <_free_r>
 800cb9a:	e7ba      	b.n	800cb12 <_reclaim_reent+0x16>
 800cb9c:	680e      	ldr	r6, [r1, #0]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 f958 	bl	800ce54 <_free_r>
 800cba4:	4631      	mov	r1, r6
 800cba6:	e7ef      	b.n	800cb88 <_reclaim_reent+0x8c>
 800cba8:	2500      	movs	r5, #0
 800cbaa:	e7ef      	b.n	800cb8c <_reclaim_reent+0x90>
 800cbac:	bd70      	pop	{r4, r5, r6, pc}
 800cbae:	bf00      	nop
 800cbb0:	200000d0 	.word	0x200000d0

0800cbb4 <_sbrk_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d06      	ldr	r5, [pc, #24]	; (800cbd0 <_sbrk_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	f7f7 fe9c 	bl	80048fc <_sbrk>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_sbrk_r+0x1a>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_sbrk_r+0x1a>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	20008b90 	.word	0x20008b90

0800cbd4 <siprintf>:
 800cbd4:	b40e      	push	{r1, r2, r3}
 800cbd6:	b500      	push	{lr}
 800cbd8:	b09c      	sub	sp, #112	; 0x70
 800cbda:	ab1d      	add	r3, sp, #116	; 0x74
 800cbdc:	9002      	str	r0, [sp, #8]
 800cbde:	9006      	str	r0, [sp, #24]
 800cbe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbe4:	4809      	ldr	r0, [pc, #36]	; (800cc0c <siprintf+0x38>)
 800cbe6:	9107      	str	r1, [sp, #28]
 800cbe8:	9104      	str	r1, [sp, #16]
 800cbea:	4909      	ldr	r1, [pc, #36]	; (800cc10 <siprintf+0x3c>)
 800cbec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf0:	9105      	str	r1, [sp, #20]
 800cbf2:	6800      	ldr	r0, [r0, #0]
 800cbf4:	9301      	str	r3, [sp, #4]
 800cbf6:	a902      	add	r1, sp, #8
 800cbf8:	f000 f9d4 	bl	800cfa4 <_svfiprintf_r>
 800cbfc:	9b02      	ldr	r3, [sp, #8]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	701a      	strb	r2, [r3, #0]
 800cc02:	b01c      	add	sp, #112	; 0x70
 800cc04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc08:	b003      	add	sp, #12
 800cc0a:	4770      	bx	lr
 800cc0c:	200000d0 	.word	0x200000d0
 800cc10:	ffff0208 	.word	0xffff0208

0800cc14 <strcat>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	4602      	mov	r2, r0
 800cc18:	7814      	ldrb	r4, [r2, #0]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	3201      	adds	r2, #1
 800cc1e:	2c00      	cmp	r4, #0
 800cc20:	d1fa      	bne.n	800cc18 <strcat+0x4>
 800cc22:	3b01      	subs	r3, #1
 800cc24:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc28:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc2c:	2a00      	cmp	r2, #0
 800cc2e:	d1f9      	bne.n	800cc24 <strcat+0x10>
 800cc30:	bd10      	pop	{r4, pc}

0800cc32 <strchr>:
 800cc32:	b2c9      	uxtb	r1, r1
 800cc34:	4603      	mov	r3, r0
 800cc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc3a:	b11a      	cbz	r2, 800cc44 <strchr+0x12>
 800cc3c:	428a      	cmp	r2, r1
 800cc3e:	d1f9      	bne.n	800cc34 <strchr+0x2>
 800cc40:	4618      	mov	r0, r3
 800cc42:	4770      	bx	lr
 800cc44:	2900      	cmp	r1, #0
 800cc46:	bf18      	it	ne
 800cc48:	2300      	movne	r3, #0
 800cc4a:	e7f9      	b.n	800cc40 <strchr+0xe>

0800cc4c <strcpy>:
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc52:	f803 2b01 	strb.w	r2, [r3], #1
 800cc56:	2a00      	cmp	r2, #0
 800cc58:	d1f9      	bne.n	800cc4e <strcpy+0x2>
 800cc5a:	4770      	bx	lr

0800cc5c <strncpy>:
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	3901      	subs	r1, #1
 800cc60:	4603      	mov	r3, r0
 800cc62:	b132      	cbz	r2, 800cc72 <strncpy+0x16>
 800cc64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc68:	f803 4b01 	strb.w	r4, [r3], #1
 800cc6c:	3a01      	subs	r2, #1
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d1f7      	bne.n	800cc62 <strncpy+0x6>
 800cc72:	441a      	add	r2, r3
 800cc74:	2100      	movs	r1, #0
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d100      	bne.n	800cc7c <strncpy+0x20>
 800cc7a:	bd10      	pop	{r4, pc}
 800cc7c:	f803 1b01 	strb.w	r1, [r3], #1
 800cc80:	e7f9      	b.n	800cc76 <strncpy+0x1a>

0800cc82 <strstr>:
 800cc82:	780a      	ldrb	r2, [r1, #0]
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	b96a      	cbnz	r2, 800cca4 <strstr+0x22>
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d109      	bne.n	800cca2 <strstr+0x20>
 800cc8e:	460c      	mov	r4, r1
 800cc90:	4605      	mov	r5, r0
 800cc92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0f6      	beq.n	800cc88 <strstr+0x6>
 800cc9a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cc9e:	429e      	cmp	r6, r3
 800cca0:	d0f7      	beq.n	800cc92 <strstr+0x10>
 800cca2:	3001      	adds	r0, #1
 800cca4:	7803      	ldrb	r3, [r0, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1ef      	bne.n	800cc8a <strstr+0x8>
 800ccaa:	4618      	mov	r0, r3
 800ccac:	e7ec      	b.n	800cc88 <strstr+0x6>
	...

0800ccb0 <_strtol_l.constprop.0>:
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb6:	d001      	beq.n	800ccbc <_strtol_l.constprop.0+0xc>
 800ccb8:	2b24      	cmp	r3, #36	; 0x24
 800ccba:	d906      	bls.n	800ccca <_strtol_l.constprop.0+0x1a>
 800ccbc:	f7ff fd8e 	bl	800c7dc <__errno>
 800ccc0:	2316      	movs	r3, #22
 800ccc2:	6003      	str	r3, [r0, #0]
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cdb0 <_strtol_l.constprop.0+0x100>
 800ccce:	460d      	mov	r5, r1
 800ccd0:	462e      	mov	r6, r5
 800ccd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ccda:	f017 0708 	ands.w	r7, r7, #8
 800ccde:	d1f7      	bne.n	800ccd0 <_strtol_l.constprop.0+0x20>
 800cce0:	2c2d      	cmp	r4, #45	; 0x2d
 800cce2:	d132      	bne.n	800cd4a <_strtol_l.constprop.0+0x9a>
 800cce4:	782c      	ldrb	r4, [r5, #0]
 800cce6:	2701      	movs	r7, #1
 800cce8:	1cb5      	adds	r5, r6, #2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d05b      	beq.n	800cda6 <_strtol_l.constprop.0+0xf6>
 800ccee:	2b10      	cmp	r3, #16
 800ccf0:	d109      	bne.n	800cd06 <_strtol_l.constprop.0+0x56>
 800ccf2:	2c30      	cmp	r4, #48	; 0x30
 800ccf4:	d107      	bne.n	800cd06 <_strtol_l.constprop.0+0x56>
 800ccf6:	782c      	ldrb	r4, [r5, #0]
 800ccf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ccfc:	2c58      	cmp	r4, #88	; 0x58
 800ccfe:	d14d      	bne.n	800cd9c <_strtol_l.constprop.0+0xec>
 800cd00:	786c      	ldrb	r4, [r5, #1]
 800cd02:	2310      	movs	r3, #16
 800cd04:	3502      	adds	r5, #2
 800cd06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cd0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cd0e:	f04f 0c00 	mov.w	ip, #0
 800cd12:	fbb8 f9f3 	udiv	r9, r8, r3
 800cd16:	4666      	mov	r6, ip
 800cd18:	fb03 8a19 	mls	sl, r3, r9, r8
 800cd1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cd20:	f1be 0f09 	cmp.w	lr, #9
 800cd24:	d816      	bhi.n	800cd54 <_strtol_l.constprop.0+0xa4>
 800cd26:	4674      	mov	r4, lr
 800cd28:	42a3      	cmp	r3, r4
 800cd2a:	dd24      	ble.n	800cd76 <_strtol_l.constprop.0+0xc6>
 800cd2c:	f1bc 0f00 	cmp.w	ip, #0
 800cd30:	db1e      	blt.n	800cd70 <_strtol_l.constprop.0+0xc0>
 800cd32:	45b1      	cmp	r9, r6
 800cd34:	d31c      	bcc.n	800cd70 <_strtol_l.constprop.0+0xc0>
 800cd36:	d101      	bne.n	800cd3c <_strtol_l.constprop.0+0x8c>
 800cd38:	45a2      	cmp	sl, r4
 800cd3a:	db19      	blt.n	800cd70 <_strtol_l.constprop.0+0xc0>
 800cd3c:	fb06 4603 	mla	r6, r6, r3, r4
 800cd40:	f04f 0c01 	mov.w	ip, #1
 800cd44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd48:	e7e8      	b.n	800cd1c <_strtol_l.constprop.0+0x6c>
 800cd4a:	2c2b      	cmp	r4, #43	; 0x2b
 800cd4c:	bf04      	itt	eq
 800cd4e:	782c      	ldrbeq	r4, [r5, #0]
 800cd50:	1cb5      	addeq	r5, r6, #2
 800cd52:	e7ca      	b.n	800ccea <_strtol_l.constprop.0+0x3a>
 800cd54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cd58:	f1be 0f19 	cmp.w	lr, #25
 800cd5c:	d801      	bhi.n	800cd62 <_strtol_l.constprop.0+0xb2>
 800cd5e:	3c37      	subs	r4, #55	; 0x37
 800cd60:	e7e2      	b.n	800cd28 <_strtol_l.constprop.0+0x78>
 800cd62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cd66:	f1be 0f19 	cmp.w	lr, #25
 800cd6a:	d804      	bhi.n	800cd76 <_strtol_l.constprop.0+0xc6>
 800cd6c:	3c57      	subs	r4, #87	; 0x57
 800cd6e:	e7db      	b.n	800cd28 <_strtol_l.constprop.0+0x78>
 800cd70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cd74:	e7e6      	b.n	800cd44 <_strtol_l.constprop.0+0x94>
 800cd76:	f1bc 0f00 	cmp.w	ip, #0
 800cd7a:	da05      	bge.n	800cd88 <_strtol_l.constprop.0+0xd8>
 800cd7c:	2322      	movs	r3, #34	; 0x22
 800cd7e:	6003      	str	r3, [r0, #0]
 800cd80:	4646      	mov	r6, r8
 800cd82:	b942      	cbnz	r2, 800cd96 <_strtol_l.constprop.0+0xe6>
 800cd84:	4630      	mov	r0, r6
 800cd86:	e79e      	b.n	800ccc6 <_strtol_l.constprop.0+0x16>
 800cd88:	b107      	cbz	r7, 800cd8c <_strtol_l.constprop.0+0xdc>
 800cd8a:	4276      	negs	r6, r6
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d0f9      	beq.n	800cd84 <_strtol_l.constprop.0+0xd4>
 800cd90:	f1bc 0f00 	cmp.w	ip, #0
 800cd94:	d000      	beq.n	800cd98 <_strtol_l.constprop.0+0xe8>
 800cd96:	1e69      	subs	r1, r5, #1
 800cd98:	6011      	str	r1, [r2, #0]
 800cd9a:	e7f3      	b.n	800cd84 <_strtol_l.constprop.0+0xd4>
 800cd9c:	2430      	movs	r4, #48	; 0x30
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1b1      	bne.n	800cd06 <_strtol_l.constprop.0+0x56>
 800cda2:	2308      	movs	r3, #8
 800cda4:	e7af      	b.n	800cd06 <_strtol_l.constprop.0+0x56>
 800cda6:	2c30      	cmp	r4, #48	; 0x30
 800cda8:	d0a5      	beq.n	800ccf6 <_strtol_l.constprop.0+0x46>
 800cdaa:	230a      	movs	r3, #10
 800cdac:	e7ab      	b.n	800cd06 <_strtol_l.constprop.0+0x56>
 800cdae:	bf00      	nop
 800cdb0:	0800feb5 	.word	0x0800feb5

0800cdb4 <strtol>:
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	460a      	mov	r2, r1
 800cdb8:	4601      	mov	r1, r0
 800cdba:	4802      	ldr	r0, [pc, #8]	; (800cdc4 <strtol+0x10>)
 800cdbc:	6800      	ldr	r0, [r0, #0]
 800cdbe:	f7ff bf77 	b.w	800ccb0 <_strtol_l.constprop.0>
 800cdc2:	bf00      	nop
 800cdc4:	200000d0 	.word	0x200000d0

0800cdc8 <_vsniprintf_r>:
 800cdc8:	b530      	push	{r4, r5, lr}
 800cdca:	4614      	mov	r4, r2
 800cdcc:	2c00      	cmp	r4, #0
 800cdce:	b09b      	sub	sp, #108	; 0x6c
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	da05      	bge.n	800cde2 <_vsniprintf_r+0x1a>
 800cdd6:	238b      	movs	r3, #139	; 0x8b
 800cdd8:	6003      	str	r3, [r0, #0]
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdde:	b01b      	add	sp, #108	; 0x6c
 800cde0:	bd30      	pop	{r4, r5, pc}
 800cde2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cde6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cdea:	bf14      	ite	ne
 800cdec:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cdf0:	4623      	moveq	r3, r4
 800cdf2:	9302      	str	r3, [sp, #8]
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdfa:	9100      	str	r1, [sp, #0]
 800cdfc:	9104      	str	r1, [sp, #16]
 800cdfe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce02:	4669      	mov	r1, sp
 800ce04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce06:	f000 f8cd 	bl	800cfa4 <_svfiprintf_r>
 800ce0a:	1c43      	adds	r3, r0, #1
 800ce0c:	bfbc      	itt	lt
 800ce0e:	238b      	movlt	r3, #139	; 0x8b
 800ce10:	602b      	strlt	r3, [r5, #0]
 800ce12:	2c00      	cmp	r4, #0
 800ce14:	d0e3      	beq.n	800cdde <_vsniprintf_r+0x16>
 800ce16:	9b00      	ldr	r3, [sp, #0]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	701a      	strb	r2, [r3, #0]
 800ce1c:	e7df      	b.n	800cdde <_vsniprintf_r+0x16>
	...

0800ce20 <vsniprintf>:
 800ce20:	b507      	push	{r0, r1, r2, lr}
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	4613      	mov	r3, r2
 800ce26:	460a      	mov	r2, r1
 800ce28:	4601      	mov	r1, r0
 800ce2a:	4803      	ldr	r0, [pc, #12]	; (800ce38 <vsniprintf+0x18>)
 800ce2c:	6800      	ldr	r0, [r0, #0]
 800ce2e:	f7ff ffcb 	bl	800cdc8 <_vsniprintf_r>
 800ce32:	b003      	add	sp, #12
 800ce34:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce38:	200000d0 	.word	0x200000d0

0800ce3c <__malloc_lock>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__malloc_lock+0x8>)
 800ce3e:	f7ff bda3 	b.w	800c988 <__retarget_lock_acquire_recursive>
 800ce42:	bf00      	nop
 800ce44:	20008b84 	.word	0x20008b84

0800ce48 <__malloc_unlock>:
 800ce48:	4801      	ldr	r0, [pc, #4]	; (800ce50 <__malloc_unlock+0x8>)
 800ce4a:	f7ff bd9e 	b.w	800c98a <__retarget_lock_release_recursive>
 800ce4e:	bf00      	nop
 800ce50:	20008b84 	.word	0x20008b84

0800ce54 <_free_r>:
 800ce54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce56:	2900      	cmp	r1, #0
 800ce58:	d044      	beq.n	800cee4 <_free_r+0x90>
 800ce5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce5e:	9001      	str	r0, [sp, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f1a1 0404 	sub.w	r4, r1, #4
 800ce66:	bfb8      	it	lt
 800ce68:	18e4      	addlt	r4, r4, r3
 800ce6a:	f7ff ffe7 	bl	800ce3c <__malloc_lock>
 800ce6e:	4a1e      	ldr	r2, [pc, #120]	; (800cee8 <_free_r+0x94>)
 800ce70:	9801      	ldr	r0, [sp, #4]
 800ce72:	6813      	ldr	r3, [r2, #0]
 800ce74:	b933      	cbnz	r3, 800ce84 <_free_r+0x30>
 800ce76:	6063      	str	r3, [r4, #4]
 800ce78:	6014      	str	r4, [r2, #0]
 800ce7a:	b003      	add	sp, #12
 800ce7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce80:	f7ff bfe2 	b.w	800ce48 <__malloc_unlock>
 800ce84:	42a3      	cmp	r3, r4
 800ce86:	d908      	bls.n	800ce9a <_free_r+0x46>
 800ce88:	6825      	ldr	r5, [r4, #0]
 800ce8a:	1961      	adds	r1, r4, r5
 800ce8c:	428b      	cmp	r3, r1
 800ce8e:	bf01      	itttt	eq
 800ce90:	6819      	ldreq	r1, [r3, #0]
 800ce92:	685b      	ldreq	r3, [r3, #4]
 800ce94:	1949      	addeq	r1, r1, r5
 800ce96:	6021      	streq	r1, [r4, #0]
 800ce98:	e7ed      	b.n	800ce76 <_free_r+0x22>
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	b10b      	cbz	r3, 800cea4 <_free_r+0x50>
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	d9fa      	bls.n	800ce9a <_free_r+0x46>
 800cea4:	6811      	ldr	r1, [r2, #0]
 800cea6:	1855      	adds	r5, r2, r1
 800cea8:	42a5      	cmp	r5, r4
 800ceaa:	d10b      	bne.n	800cec4 <_free_r+0x70>
 800ceac:	6824      	ldr	r4, [r4, #0]
 800ceae:	4421      	add	r1, r4
 800ceb0:	1854      	adds	r4, r2, r1
 800ceb2:	42a3      	cmp	r3, r4
 800ceb4:	6011      	str	r1, [r2, #0]
 800ceb6:	d1e0      	bne.n	800ce7a <_free_r+0x26>
 800ceb8:	681c      	ldr	r4, [r3, #0]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	6053      	str	r3, [r2, #4]
 800cebe:	4421      	add	r1, r4
 800cec0:	6011      	str	r1, [r2, #0]
 800cec2:	e7da      	b.n	800ce7a <_free_r+0x26>
 800cec4:	d902      	bls.n	800cecc <_free_r+0x78>
 800cec6:	230c      	movs	r3, #12
 800cec8:	6003      	str	r3, [r0, #0]
 800ceca:	e7d6      	b.n	800ce7a <_free_r+0x26>
 800cecc:	6825      	ldr	r5, [r4, #0]
 800cece:	1961      	adds	r1, r4, r5
 800ced0:	428b      	cmp	r3, r1
 800ced2:	bf04      	itt	eq
 800ced4:	6819      	ldreq	r1, [r3, #0]
 800ced6:	685b      	ldreq	r3, [r3, #4]
 800ced8:	6063      	str	r3, [r4, #4]
 800ceda:	bf04      	itt	eq
 800cedc:	1949      	addeq	r1, r1, r5
 800cede:	6021      	streq	r1, [r4, #0]
 800cee0:	6054      	str	r4, [r2, #4]
 800cee2:	e7ca      	b.n	800ce7a <_free_r+0x26>
 800cee4:	b003      	add	sp, #12
 800cee6:	bd30      	pop	{r4, r5, pc}
 800cee8:	20008b88 	.word	0x20008b88

0800ceec <__ssputs_r>:
 800ceec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef0:	688e      	ldr	r6, [r1, #8]
 800cef2:	429e      	cmp	r6, r3
 800cef4:	4682      	mov	sl, r0
 800cef6:	460c      	mov	r4, r1
 800cef8:	4690      	mov	r8, r2
 800cefa:	461f      	mov	r7, r3
 800cefc:	d838      	bhi.n	800cf70 <__ssputs_r+0x84>
 800cefe:	898a      	ldrh	r2, [r1, #12]
 800cf00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf04:	d032      	beq.n	800cf6c <__ssputs_r+0x80>
 800cf06:	6825      	ldr	r5, [r4, #0]
 800cf08:	6909      	ldr	r1, [r1, #16]
 800cf0a:	eba5 0901 	sub.w	r9, r5, r1
 800cf0e:	6965      	ldr	r5, [r4, #20]
 800cf10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf18:	3301      	adds	r3, #1
 800cf1a:	444b      	add	r3, r9
 800cf1c:	106d      	asrs	r5, r5, #1
 800cf1e:	429d      	cmp	r5, r3
 800cf20:	bf38      	it	cc
 800cf22:	461d      	movcc	r5, r3
 800cf24:	0553      	lsls	r3, r2, #21
 800cf26:	d531      	bpl.n	800cf8c <__ssputs_r+0xa0>
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7ff fd65 	bl	800c9f8 <_malloc_r>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	b950      	cbnz	r0, 800cf48 <__ssputs_r+0x5c>
 800cf32:	230c      	movs	r3, #12
 800cf34:	f8ca 3000 	str.w	r3, [sl]
 800cf38:	89a3      	ldrh	r3, [r4, #12]
 800cf3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf48:	6921      	ldr	r1, [r4, #16]
 800cf4a:	464a      	mov	r2, r9
 800cf4c:	f7ff fd1e 	bl	800c98c <memcpy>
 800cf50:	89a3      	ldrh	r3, [r4, #12]
 800cf52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf5a:	81a3      	strh	r3, [r4, #12]
 800cf5c:	6126      	str	r6, [r4, #16]
 800cf5e:	6165      	str	r5, [r4, #20]
 800cf60:	444e      	add	r6, r9
 800cf62:	eba5 0509 	sub.w	r5, r5, r9
 800cf66:	6026      	str	r6, [r4, #0]
 800cf68:	60a5      	str	r5, [r4, #8]
 800cf6a:	463e      	mov	r6, r7
 800cf6c:	42be      	cmp	r6, r7
 800cf6e:	d900      	bls.n	800cf72 <__ssputs_r+0x86>
 800cf70:	463e      	mov	r6, r7
 800cf72:	6820      	ldr	r0, [r4, #0]
 800cf74:	4632      	mov	r2, r6
 800cf76:	4641      	mov	r1, r8
 800cf78:	f000 faa8 	bl	800d4cc <memmove>
 800cf7c:	68a3      	ldr	r3, [r4, #8]
 800cf7e:	1b9b      	subs	r3, r3, r6
 800cf80:	60a3      	str	r3, [r4, #8]
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	4433      	add	r3, r6
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	2000      	movs	r0, #0
 800cf8a:	e7db      	b.n	800cf44 <__ssputs_r+0x58>
 800cf8c:	462a      	mov	r2, r5
 800cf8e:	f000 fab7 	bl	800d500 <_realloc_r>
 800cf92:	4606      	mov	r6, r0
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d1e1      	bne.n	800cf5c <__ssputs_r+0x70>
 800cf98:	6921      	ldr	r1, [r4, #16]
 800cf9a:	4650      	mov	r0, sl
 800cf9c:	f7ff ff5a 	bl	800ce54 <_free_r>
 800cfa0:	e7c7      	b.n	800cf32 <__ssputs_r+0x46>
	...

0800cfa4 <_svfiprintf_r>:
 800cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	4698      	mov	r8, r3
 800cfaa:	898b      	ldrh	r3, [r1, #12]
 800cfac:	061b      	lsls	r3, r3, #24
 800cfae:	b09d      	sub	sp, #116	; 0x74
 800cfb0:	4607      	mov	r7, r0
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	d50e      	bpl.n	800cfd6 <_svfiprintf_r+0x32>
 800cfb8:	690b      	ldr	r3, [r1, #16]
 800cfba:	b963      	cbnz	r3, 800cfd6 <_svfiprintf_r+0x32>
 800cfbc:	2140      	movs	r1, #64	; 0x40
 800cfbe:	f7ff fd1b 	bl	800c9f8 <_malloc_r>
 800cfc2:	6028      	str	r0, [r5, #0]
 800cfc4:	6128      	str	r0, [r5, #16]
 800cfc6:	b920      	cbnz	r0, 800cfd2 <_svfiprintf_r+0x2e>
 800cfc8:	230c      	movs	r3, #12
 800cfca:	603b      	str	r3, [r7, #0]
 800cfcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfd0:	e0d1      	b.n	800d176 <_svfiprintf_r+0x1d2>
 800cfd2:	2340      	movs	r3, #64	; 0x40
 800cfd4:	616b      	str	r3, [r5, #20]
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfda:	2320      	movs	r3, #32
 800cfdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe4:	2330      	movs	r3, #48	; 0x30
 800cfe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d190 <_svfiprintf_r+0x1ec>
 800cfea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfee:	f04f 0901 	mov.w	r9, #1
 800cff2:	4623      	mov	r3, r4
 800cff4:	469a      	mov	sl, r3
 800cff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cffa:	b10a      	cbz	r2, 800d000 <_svfiprintf_r+0x5c>
 800cffc:	2a25      	cmp	r2, #37	; 0x25
 800cffe:	d1f9      	bne.n	800cff4 <_svfiprintf_r+0x50>
 800d000:	ebba 0b04 	subs.w	fp, sl, r4
 800d004:	d00b      	beq.n	800d01e <_svfiprintf_r+0x7a>
 800d006:	465b      	mov	r3, fp
 800d008:	4622      	mov	r2, r4
 800d00a:	4629      	mov	r1, r5
 800d00c:	4638      	mov	r0, r7
 800d00e:	f7ff ff6d 	bl	800ceec <__ssputs_r>
 800d012:	3001      	adds	r0, #1
 800d014:	f000 80aa 	beq.w	800d16c <_svfiprintf_r+0x1c8>
 800d018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d01a:	445a      	add	r2, fp
 800d01c:	9209      	str	r2, [sp, #36]	; 0x24
 800d01e:	f89a 3000 	ldrb.w	r3, [sl]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80a2 	beq.w	800d16c <_svfiprintf_r+0x1c8>
 800d028:	2300      	movs	r3, #0
 800d02a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d032:	f10a 0a01 	add.w	sl, sl, #1
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	9307      	str	r3, [sp, #28]
 800d03a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d03e:	931a      	str	r3, [sp, #104]	; 0x68
 800d040:	4654      	mov	r4, sl
 800d042:	2205      	movs	r2, #5
 800d044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d048:	4851      	ldr	r0, [pc, #324]	; (800d190 <_svfiprintf_r+0x1ec>)
 800d04a:	f7f3 f8c9 	bl	80001e0 <memchr>
 800d04e:	9a04      	ldr	r2, [sp, #16]
 800d050:	b9d8      	cbnz	r0, 800d08a <_svfiprintf_r+0xe6>
 800d052:	06d0      	lsls	r0, r2, #27
 800d054:	bf44      	itt	mi
 800d056:	2320      	movmi	r3, #32
 800d058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d05c:	0711      	lsls	r1, r2, #28
 800d05e:	bf44      	itt	mi
 800d060:	232b      	movmi	r3, #43	; 0x2b
 800d062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d066:	f89a 3000 	ldrb.w	r3, [sl]
 800d06a:	2b2a      	cmp	r3, #42	; 0x2a
 800d06c:	d015      	beq.n	800d09a <_svfiprintf_r+0xf6>
 800d06e:	9a07      	ldr	r2, [sp, #28]
 800d070:	4654      	mov	r4, sl
 800d072:	2000      	movs	r0, #0
 800d074:	f04f 0c0a 	mov.w	ip, #10
 800d078:	4621      	mov	r1, r4
 800d07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d07e:	3b30      	subs	r3, #48	; 0x30
 800d080:	2b09      	cmp	r3, #9
 800d082:	d94e      	bls.n	800d122 <_svfiprintf_r+0x17e>
 800d084:	b1b0      	cbz	r0, 800d0b4 <_svfiprintf_r+0x110>
 800d086:	9207      	str	r2, [sp, #28]
 800d088:	e014      	b.n	800d0b4 <_svfiprintf_r+0x110>
 800d08a:	eba0 0308 	sub.w	r3, r0, r8
 800d08e:	fa09 f303 	lsl.w	r3, r9, r3
 800d092:	4313      	orrs	r3, r2
 800d094:	9304      	str	r3, [sp, #16]
 800d096:	46a2      	mov	sl, r4
 800d098:	e7d2      	b.n	800d040 <_svfiprintf_r+0x9c>
 800d09a:	9b03      	ldr	r3, [sp, #12]
 800d09c:	1d19      	adds	r1, r3, #4
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	9103      	str	r1, [sp, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bfbb      	ittet	lt
 800d0a6:	425b      	neglt	r3, r3
 800d0a8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ac:	9307      	strge	r3, [sp, #28]
 800d0ae:	9307      	strlt	r3, [sp, #28]
 800d0b0:	bfb8      	it	lt
 800d0b2:	9204      	strlt	r2, [sp, #16]
 800d0b4:	7823      	ldrb	r3, [r4, #0]
 800d0b6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0b8:	d10c      	bne.n	800d0d4 <_svfiprintf_r+0x130>
 800d0ba:	7863      	ldrb	r3, [r4, #1]
 800d0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0be:	d135      	bne.n	800d12c <_svfiprintf_r+0x188>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	1d1a      	adds	r2, r3, #4
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	9203      	str	r2, [sp, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	bfb8      	it	lt
 800d0cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0d0:	3402      	adds	r4, #2
 800d0d2:	9305      	str	r3, [sp, #20]
 800d0d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1a0 <_svfiprintf_r+0x1fc>
 800d0d8:	7821      	ldrb	r1, [r4, #0]
 800d0da:	2203      	movs	r2, #3
 800d0dc:	4650      	mov	r0, sl
 800d0de:	f7f3 f87f 	bl	80001e0 <memchr>
 800d0e2:	b140      	cbz	r0, 800d0f6 <_svfiprintf_r+0x152>
 800d0e4:	2340      	movs	r3, #64	; 0x40
 800d0e6:	eba0 000a 	sub.w	r0, r0, sl
 800d0ea:	fa03 f000 	lsl.w	r0, r3, r0
 800d0ee:	9b04      	ldr	r3, [sp, #16]
 800d0f0:	4303      	orrs	r3, r0
 800d0f2:	3401      	adds	r4, #1
 800d0f4:	9304      	str	r3, [sp, #16]
 800d0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fa:	4826      	ldr	r0, [pc, #152]	; (800d194 <_svfiprintf_r+0x1f0>)
 800d0fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d100:	2206      	movs	r2, #6
 800d102:	f7f3 f86d 	bl	80001e0 <memchr>
 800d106:	2800      	cmp	r0, #0
 800d108:	d038      	beq.n	800d17c <_svfiprintf_r+0x1d8>
 800d10a:	4b23      	ldr	r3, [pc, #140]	; (800d198 <_svfiprintf_r+0x1f4>)
 800d10c:	bb1b      	cbnz	r3, 800d156 <_svfiprintf_r+0x1b2>
 800d10e:	9b03      	ldr	r3, [sp, #12]
 800d110:	3307      	adds	r3, #7
 800d112:	f023 0307 	bic.w	r3, r3, #7
 800d116:	3308      	adds	r3, #8
 800d118:	9303      	str	r3, [sp, #12]
 800d11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11c:	4433      	add	r3, r6
 800d11e:	9309      	str	r3, [sp, #36]	; 0x24
 800d120:	e767      	b.n	800cff2 <_svfiprintf_r+0x4e>
 800d122:	fb0c 3202 	mla	r2, ip, r2, r3
 800d126:	460c      	mov	r4, r1
 800d128:	2001      	movs	r0, #1
 800d12a:	e7a5      	b.n	800d078 <_svfiprintf_r+0xd4>
 800d12c:	2300      	movs	r3, #0
 800d12e:	3401      	adds	r4, #1
 800d130:	9305      	str	r3, [sp, #20]
 800d132:	4619      	mov	r1, r3
 800d134:	f04f 0c0a 	mov.w	ip, #10
 800d138:	4620      	mov	r0, r4
 800d13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d13e:	3a30      	subs	r2, #48	; 0x30
 800d140:	2a09      	cmp	r2, #9
 800d142:	d903      	bls.n	800d14c <_svfiprintf_r+0x1a8>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0c5      	beq.n	800d0d4 <_svfiprintf_r+0x130>
 800d148:	9105      	str	r1, [sp, #20]
 800d14a:	e7c3      	b.n	800d0d4 <_svfiprintf_r+0x130>
 800d14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d150:	4604      	mov	r4, r0
 800d152:	2301      	movs	r3, #1
 800d154:	e7f0      	b.n	800d138 <_svfiprintf_r+0x194>
 800d156:	ab03      	add	r3, sp, #12
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	462a      	mov	r2, r5
 800d15c:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <_svfiprintf_r+0x1f8>)
 800d15e:	a904      	add	r1, sp, #16
 800d160:	4638      	mov	r0, r7
 800d162:	f3af 8000 	nop.w
 800d166:	1c42      	adds	r2, r0, #1
 800d168:	4606      	mov	r6, r0
 800d16a:	d1d6      	bne.n	800d11a <_svfiprintf_r+0x176>
 800d16c:	89ab      	ldrh	r3, [r5, #12]
 800d16e:	065b      	lsls	r3, r3, #25
 800d170:	f53f af2c 	bmi.w	800cfcc <_svfiprintf_r+0x28>
 800d174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d176:	b01d      	add	sp, #116	; 0x74
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17c:	ab03      	add	r3, sp, #12
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	462a      	mov	r2, r5
 800d182:	4b06      	ldr	r3, [pc, #24]	; (800d19c <_svfiprintf_r+0x1f8>)
 800d184:	a904      	add	r1, sp, #16
 800d186:	4638      	mov	r0, r7
 800d188:	f000 f87a 	bl	800d280 <_printf_i>
 800d18c:	e7eb      	b.n	800d166 <_svfiprintf_r+0x1c2>
 800d18e:	bf00      	nop
 800d190:	0800ffb5 	.word	0x0800ffb5
 800d194:	0800ffbf 	.word	0x0800ffbf
 800d198:	00000000 	.word	0x00000000
 800d19c:	0800ceed 	.word	0x0800ceed
 800d1a0:	0800ffbb 	.word	0x0800ffbb

0800d1a4 <_printf_common>:
 800d1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	4616      	mov	r6, r2
 800d1aa:	4699      	mov	r9, r3
 800d1ac:	688a      	ldr	r2, [r1, #8]
 800d1ae:	690b      	ldr	r3, [r1, #16]
 800d1b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	bfb8      	it	lt
 800d1b8:	4613      	movlt	r3, r2
 800d1ba:	6033      	str	r3, [r6, #0]
 800d1bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	b10a      	cbz	r2, 800d1ca <_printf_common+0x26>
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	6033      	str	r3, [r6, #0]
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	0699      	lsls	r1, r3, #26
 800d1ce:	bf42      	ittt	mi
 800d1d0:	6833      	ldrmi	r3, [r6, #0]
 800d1d2:	3302      	addmi	r3, #2
 800d1d4:	6033      	strmi	r3, [r6, #0]
 800d1d6:	6825      	ldr	r5, [r4, #0]
 800d1d8:	f015 0506 	ands.w	r5, r5, #6
 800d1dc:	d106      	bne.n	800d1ec <_printf_common+0x48>
 800d1de:	f104 0a19 	add.w	sl, r4, #25
 800d1e2:	68e3      	ldr	r3, [r4, #12]
 800d1e4:	6832      	ldr	r2, [r6, #0]
 800d1e6:	1a9b      	subs	r3, r3, r2
 800d1e8:	42ab      	cmp	r3, r5
 800d1ea:	dc26      	bgt.n	800d23a <_printf_common+0x96>
 800d1ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1f0:	1e13      	subs	r3, r2, #0
 800d1f2:	6822      	ldr	r2, [r4, #0]
 800d1f4:	bf18      	it	ne
 800d1f6:	2301      	movne	r3, #1
 800d1f8:	0692      	lsls	r2, r2, #26
 800d1fa:	d42b      	bmi.n	800d254 <_printf_common+0xb0>
 800d1fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d200:	4649      	mov	r1, r9
 800d202:	4638      	mov	r0, r7
 800d204:	47c0      	blx	r8
 800d206:	3001      	adds	r0, #1
 800d208:	d01e      	beq.n	800d248 <_printf_common+0xa4>
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	68e5      	ldr	r5, [r4, #12]
 800d20e:	6832      	ldr	r2, [r6, #0]
 800d210:	f003 0306 	and.w	r3, r3, #6
 800d214:	2b04      	cmp	r3, #4
 800d216:	bf08      	it	eq
 800d218:	1aad      	subeq	r5, r5, r2
 800d21a:	68a3      	ldr	r3, [r4, #8]
 800d21c:	6922      	ldr	r2, [r4, #16]
 800d21e:	bf0c      	ite	eq
 800d220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d224:	2500      	movne	r5, #0
 800d226:	4293      	cmp	r3, r2
 800d228:	bfc4      	itt	gt
 800d22a:	1a9b      	subgt	r3, r3, r2
 800d22c:	18ed      	addgt	r5, r5, r3
 800d22e:	2600      	movs	r6, #0
 800d230:	341a      	adds	r4, #26
 800d232:	42b5      	cmp	r5, r6
 800d234:	d11a      	bne.n	800d26c <_printf_common+0xc8>
 800d236:	2000      	movs	r0, #0
 800d238:	e008      	b.n	800d24c <_printf_common+0xa8>
 800d23a:	2301      	movs	r3, #1
 800d23c:	4652      	mov	r2, sl
 800d23e:	4649      	mov	r1, r9
 800d240:	4638      	mov	r0, r7
 800d242:	47c0      	blx	r8
 800d244:	3001      	adds	r0, #1
 800d246:	d103      	bne.n	800d250 <_printf_common+0xac>
 800d248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d250:	3501      	adds	r5, #1
 800d252:	e7c6      	b.n	800d1e2 <_printf_common+0x3e>
 800d254:	18e1      	adds	r1, r4, r3
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	2030      	movs	r0, #48	; 0x30
 800d25a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d25e:	4422      	add	r2, r4
 800d260:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d268:	3302      	adds	r3, #2
 800d26a:	e7c7      	b.n	800d1fc <_printf_common+0x58>
 800d26c:	2301      	movs	r3, #1
 800d26e:	4622      	mov	r2, r4
 800d270:	4649      	mov	r1, r9
 800d272:	4638      	mov	r0, r7
 800d274:	47c0      	blx	r8
 800d276:	3001      	adds	r0, #1
 800d278:	d0e6      	beq.n	800d248 <_printf_common+0xa4>
 800d27a:	3601      	adds	r6, #1
 800d27c:	e7d9      	b.n	800d232 <_printf_common+0x8e>
	...

0800d280 <_printf_i>:
 800d280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d284:	7e0f      	ldrb	r7, [r1, #24]
 800d286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d288:	2f78      	cmp	r7, #120	; 0x78
 800d28a:	4691      	mov	r9, r2
 800d28c:	4680      	mov	r8, r0
 800d28e:	460c      	mov	r4, r1
 800d290:	469a      	mov	sl, r3
 800d292:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d296:	d807      	bhi.n	800d2a8 <_printf_i+0x28>
 800d298:	2f62      	cmp	r7, #98	; 0x62
 800d29a:	d80a      	bhi.n	800d2b2 <_printf_i+0x32>
 800d29c:	2f00      	cmp	r7, #0
 800d29e:	f000 80d8 	beq.w	800d452 <_printf_i+0x1d2>
 800d2a2:	2f58      	cmp	r7, #88	; 0x58
 800d2a4:	f000 80a3 	beq.w	800d3ee <_printf_i+0x16e>
 800d2a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2b0:	e03a      	b.n	800d328 <_printf_i+0xa8>
 800d2b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2b6:	2b15      	cmp	r3, #21
 800d2b8:	d8f6      	bhi.n	800d2a8 <_printf_i+0x28>
 800d2ba:	a101      	add	r1, pc, #4	; (adr r1, 800d2c0 <_printf_i+0x40>)
 800d2bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2c0:	0800d319 	.word	0x0800d319
 800d2c4:	0800d32d 	.word	0x0800d32d
 800d2c8:	0800d2a9 	.word	0x0800d2a9
 800d2cc:	0800d2a9 	.word	0x0800d2a9
 800d2d0:	0800d2a9 	.word	0x0800d2a9
 800d2d4:	0800d2a9 	.word	0x0800d2a9
 800d2d8:	0800d32d 	.word	0x0800d32d
 800d2dc:	0800d2a9 	.word	0x0800d2a9
 800d2e0:	0800d2a9 	.word	0x0800d2a9
 800d2e4:	0800d2a9 	.word	0x0800d2a9
 800d2e8:	0800d2a9 	.word	0x0800d2a9
 800d2ec:	0800d439 	.word	0x0800d439
 800d2f0:	0800d35d 	.word	0x0800d35d
 800d2f4:	0800d41b 	.word	0x0800d41b
 800d2f8:	0800d2a9 	.word	0x0800d2a9
 800d2fc:	0800d2a9 	.word	0x0800d2a9
 800d300:	0800d45b 	.word	0x0800d45b
 800d304:	0800d2a9 	.word	0x0800d2a9
 800d308:	0800d35d 	.word	0x0800d35d
 800d30c:	0800d2a9 	.word	0x0800d2a9
 800d310:	0800d2a9 	.word	0x0800d2a9
 800d314:	0800d423 	.word	0x0800d423
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	1d1a      	adds	r2, r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	602a      	str	r2, [r5, #0]
 800d320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d328:	2301      	movs	r3, #1
 800d32a:	e0a3      	b.n	800d474 <_printf_i+0x1f4>
 800d32c:	6820      	ldr	r0, [r4, #0]
 800d32e:	6829      	ldr	r1, [r5, #0]
 800d330:	0606      	lsls	r6, r0, #24
 800d332:	f101 0304 	add.w	r3, r1, #4
 800d336:	d50a      	bpl.n	800d34e <_printf_i+0xce>
 800d338:	680e      	ldr	r6, [r1, #0]
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	da03      	bge.n	800d348 <_printf_i+0xc8>
 800d340:	232d      	movs	r3, #45	; 0x2d
 800d342:	4276      	negs	r6, r6
 800d344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d348:	485e      	ldr	r0, [pc, #376]	; (800d4c4 <_printf_i+0x244>)
 800d34a:	230a      	movs	r3, #10
 800d34c:	e019      	b.n	800d382 <_printf_i+0x102>
 800d34e:	680e      	ldr	r6, [r1, #0]
 800d350:	602b      	str	r3, [r5, #0]
 800d352:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d356:	bf18      	it	ne
 800d358:	b236      	sxthne	r6, r6
 800d35a:	e7ef      	b.n	800d33c <_printf_i+0xbc>
 800d35c:	682b      	ldr	r3, [r5, #0]
 800d35e:	6820      	ldr	r0, [r4, #0]
 800d360:	1d19      	adds	r1, r3, #4
 800d362:	6029      	str	r1, [r5, #0]
 800d364:	0601      	lsls	r1, r0, #24
 800d366:	d501      	bpl.n	800d36c <_printf_i+0xec>
 800d368:	681e      	ldr	r6, [r3, #0]
 800d36a:	e002      	b.n	800d372 <_printf_i+0xf2>
 800d36c:	0646      	lsls	r6, r0, #25
 800d36e:	d5fb      	bpl.n	800d368 <_printf_i+0xe8>
 800d370:	881e      	ldrh	r6, [r3, #0]
 800d372:	4854      	ldr	r0, [pc, #336]	; (800d4c4 <_printf_i+0x244>)
 800d374:	2f6f      	cmp	r7, #111	; 0x6f
 800d376:	bf0c      	ite	eq
 800d378:	2308      	moveq	r3, #8
 800d37a:	230a      	movne	r3, #10
 800d37c:	2100      	movs	r1, #0
 800d37e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d382:	6865      	ldr	r5, [r4, #4]
 800d384:	60a5      	str	r5, [r4, #8]
 800d386:	2d00      	cmp	r5, #0
 800d388:	bfa2      	ittt	ge
 800d38a:	6821      	ldrge	r1, [r4, #0]
 800d38c:	f021 0104 	bicge.w	r1, r1, #4
 800d390:	6021      	strge	r1, [r4, #0]
 800d392:	b90e      	cbnz	r6, 800d398 <_printf_i+0x118>
 800d394:	2d00      	cmp	r5, #0
 800d396:	d04d      	beq.n	800d434 <_printf_i+0x1b4>
 800d398:	4615      	mov	r5, r2
 800d39a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d39e:	fb03 6711 	mls	r7, r3, r1, r6
 800d3a2:	5dc7      	ldrb	r7, [r0, r7]
 800d3a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3a8:	4637      	mov	r7, r6
 800d3aa:	42bb      	cmp	r3, r7
 800d3ac:	460e      	mov	r6, r1
 800d3ae:	d9f4      	bls.n	800d39a <_printf_i+0x11a>
 800d3b0:	2b08      	cmp	r3, #8
 800d3b2:	d10b      	bne.n	800d3cc <_printf_i+0x14c>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	07de      	lsls	r6, r3, #31
 800d3b8:	d508      	bpl.n	800d3cc <_printf_i+0x14c>
 800d3ba:	6923      	ldr	r3, [r4, #16]
 800d3bc:	6861      	ldr	r1, [r4, #4]
 800d3be:	4299      	cmp	r1, r3
 800d3c0:	bfde      	ittt	le
 800d3c2:	2330      	movle	r3, #48	; 0x30
 800d3c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3cc:	1b52      	subs	r2, r2, r5
 800d3ce:	6122      	str	r2, [r4, #16]
 800d3d0:	f8cd a000 	str.w	sl, [sp]
 800d3d4:	464b      	mov	r3, r9
 800d3d6:	aa03      	add	r2, sp, #12
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4640      	mov	r0, r8
 800d3dc:	f7ff fee2 	bl	800d1a4 <_printf_common>
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d14c      	bne.n	800d47e <_printf_i+0x1fe>
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3e8:	b004      	add	sp, #16
 800d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ee:	4835      	ldr	r0, [pc, #212]	; (800d4c4 <_printf_i+0x244>)
 800d3f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3f4:	6829      	ldr	r1, [r5, #0]
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3fc:	6029      	str	r1, [r5, #0]
 800d3fe:	061d      	lsls	r5, r3, #24
 800d400:	d514      	bpl.n	800d42c <_printf_i+0x1ac>
 800d402:	07df      	lsls	r7, r3, #31
 800d404:	bf44      	itt	mi
 800d406:	f043 0320 	orrmi.w	r3, r3, #32
 800d40a:	6023      	strmi	r3, [r4, #0]
 800d40c:	b91e      	cbnz	r6, 800d416 <_printf_i+0x196>
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	f023 0320 	bic.w	r3, r3, #32
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	2310      	movs	r3, #16
 800d418:	e7b0      	b.n	800d37c <_printf_i+0xfc>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f043 0320 	orr.w	r3, r3, #32
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	2378      	movs	r3, #120	; 0x78
 800d424:	4828      	ldr	r0, [pc, #160]	; (800d4c8 <_printf_i+0x248>)
 800d426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d42a:	e7e3      	b.n	800d3f4 <_printf_i+0x174>
 800d42c:	0659      	lsls	r1, r3, #25
 800d42e:	bf48      	it	mi
 800d430:	b2b6      	uxthmi	r6, r6
 800d432:	e7e6      	b.n	800d402 <_printf_i+0x182>
 800d434:	4615      	mov	r5, r2
 800d436:	e7bb      	b.n	800d3b0 <_printf_i+0x130>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	6826      	ldr	r6, [r4, #0]
 800d43c:	6961      	ldr	r1, [r4, #20]
 800d43e:	1d18      	adds	r0, r3, #4
 800d440:	6028      	str	r0, [r5, #0]
 800d442:	0635      	lsls	r5, r6, #24
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	d501      	bpl.n	800d44c <_printf_i+0x1cc>
 800d448:	6019      	str	r1, [r3, #0]
 800d44a:	e002      	b.n	800d452 <_printf_i+0x1d2>
 800d44c:	0670      	lsls	r0, r6, #25
 800d44e:	d5fb      	bpl.n	800d448 <_printf_i+0x1c8>
 800d450:	8019      	strh	r1, [r3, #0]
 800d452:	2300      	movs	r3, #0
 800d454:	6123      	str	r3, [r4, #16]
 800d456:	4615      	mov	r5, r2
 800d458:	e7ba      	b.n	800d3d0 <_printf_i+0x150>
 800d45a:	682b      	ldr	r3, [r5, #0]
 800d45c:	1d1a      	adds	r2, r3, #4
 800d45e:	602a      	str	r2, [r5, #0]
 800d460:	681d      	ldr	r5, [r3, #0]
 800d462:	6862      	ldr	r2, [r4, #4]
 800d464:	2100      	movs	r1, #0
 800d466:	4628      	mov	r0, r5
 800d468:	f7f2 feba 	bl	80001e0 <memchr>
 800d46c:	b108      	cbz	r0, 800d472 <_printf_i+0x1f2>
 800d46e:	1b40      	subs	r0, r0, r5
 800d470:	6060      	str	r0, [r4, #4]
 800d472:	6863      	ldr	r3, [r4, #4]
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	2300      	movs	r3, #0
 800d478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d47c:	e7a8      	b.n	800d3d0 <_printf_i+0x150>
 800d47e:	6923      	ldr	r3, [r4, #16]
 800d480:	462a      	mov	r2, r5
 800d482:	4649      	mov	r1, r9
 800d484:	4640      	mov	r0, r8
 800d486:	47d0      	blx	sl
 800d488:	3001      	adds	r0, #1
 800d48a:	d0ab      	beq.n	800d3e4 <_printf_i+0x164>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	079b      	lsls	r3, r3, #30
 800d490:	d413      	bmi.n	800d4ba <_printf_i+0x23a>
 800d492:	68e0      	ldr	r0, [r4, #12]
 800d494:	9b03      	ldr	r3, [sp, #12]
 800d496:	4298      	cmp	r0, r3
 800d498:	bfb8      	it	lt
 800d49a:	4618      	movlt	r0, r3
 800d49c:	e7a4      	b.n	800d3e8 <_printf_i+0x168>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	4632      	mov	r2, r6
 800d4a2:	4649      	mov	r1, r9
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	47d0      	blx	sl
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d09b      	beq.n	800d3e4 <_printf_i+0x164>
 800d4ac:	3501      	adds	r5, #1
 800d4ae:	68e3      	ldr	r3, [r4, #12]
 800d4b0:	9903      	ldr	r1, [sp, #12]
 800d4b2:	1a5b      	subs	r3, r3, r1
 800d4b4:	42ab      	cmp	r3, r5
 800d4b6:	dcf2      	bgt.n	800d49e <_printf_i+0x21e>
 800d4b8:	e7eb      	b.n	800d492 <_printf_i+0x212>
 800d4ba:	2500      	movs	r5, #0
 800d4bc:	f104 0619 	add.w	r6, r4, #25
 800d4c0:	e7f5      	b.n	800d4ae <_printf_i+0x22e>
 800d4c2:	bf00      	nop
 800d4c4:	0800ffc6 	.word	0x0800ffc6
 800d4c8:	0800ffd7 	.word	0x0800ffd7

0800d4cc <memmove>:
 800d4cc:	4288      	cmp	r0, r1
 800d4ce:	b510      	push	{r4, lr}
 800d4d0:	eb01 0402 	add.w	r4, r1, r2
 800d4d4:	d902      	bls.n	800d4dc <memmove+0x10>
 800d4d6:	4284      	cmp	r4, r0
 800d4d8:	4623      	mov	r3, r4
 800d4da:	d807      	bhi.n	800d4ec <memmove+0x20>
 800d4dc:	1e43      	subs	r3, r0, #1
 800d4de:	42a1      	cmp	r1, r4
 800d4e0:	d008      	beq.n	800d4f4 <memmove+0x28>
 800d4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4ea:	e7f8      	b.n	800d4de <memmove+0x12>
 800d4ec:	4402      	add	r2, r0
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	428a      	cmp	r2, r1
 800d4f2:	d100      	bne.n	800d4f6 <memmove+0x2a>
 800d4f4:	bd10      	pop	{r4, pc}
 800d4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4fe:	e7f7      	b.n	800d4f0 <memmove+0x24>

0800d500 <_realloc_r>:
 800d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d504:	4680      	mov	r8, r0
 800d506:	4614      	mov	r4, r2
 800d508:	460e      	mov	r6, r1
 800d50a:	b921      	cbnz	r1, 800d516 <_realloc_r+0x16>
 800d50c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d510:	4611      	mov	r1, r2
 800d512:	f7ff ba71 	b.w	800c9f8 <_malloc_r>
 800d516:	b92a      	cbnz	r2, 800d524 <_realloc_r+0x24>
 800d518:	f7ff fc9c 	bl	800ce54 <_free_r>
 800d51c:	4625      	mov	r5, r4
 800d51e:	4628      	mov	r0, r5
 800d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d524:	f000 f81b 	bl	800d55e <_malloc_usable_size_r>
 800d528:	4284      	cmp	r4, r0
 800d52a:	4607      	mov	r7, r0
 800d52c:	d802      	bhi.n	800d534 <_realloc_r+0x34>
 800d52e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d532:	d812      	bhi.n	800d55a <_realloc_r+0x5a>
 800d534:	4621      	mov	r1, r4
 800d536:	4640      	mov	r0, r8
 800d538:	f7ff fa5e 	bl	800c9f8 <_malloc_r>
 800d53c:	4605      	mov	r5, r0
 800d53e:	2800      	cmp	r0, #0
 800d540:	d0ed      	beq.n	800d51e <_realloc_r+0x1e>
 800d542:	42bc      	cmp	r4, r7
 800d544:	4622      	mov	r2, r4
 800d546:	4631      	mov	r1, r6
 800d548:	bf28      	it	cs
 800d54a:	463a      	movcs	r2, r7
 800d54c:	f7ff fa1e 	bl	800c98c <memcpy>
 800d550:	4631      	mov	r1, r6
 800d552:	4640      	mov	r0, r8
 800d554:	f7ff fc7e 	bl	800ce54 <_free_r>
 800d558:	e7e1      	b.n	800d51e <_realloc_r+0x1e>
 800d55a:	4635      	mov	r5, r6
 800d55c:	e7df      	b.n	800d51e <_realloc_r+0x1e>

0800d55e <_malloc_usable_size_r>:
 800d55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d562:	1f18      	subs	r0, r3, #4
 800d564:	2b00      	cmp	r3, #0
 800d566:	bfbc      	itt	lt
 800d568:	580b      	ldrlt	r3, [r1, r0]
 800d56a:	18c0      	addlt	r0, r0, r3
 800d56c:	4770      	bx	lr
	...

0800d570 <_init>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	bf00      	nop
 800d574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d576:	bc08      	pop	{r3}
 800d578:	469e      	mov	lr, r3
 800d57a:	4770      	bx	lr

0800d57c <_fini>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	bf00      	nop
 800d580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d582:	bc08      	pop	{r3}
 800d584:	469e      	mov	lr, r3
 800d586:	4770      	bx	lr
