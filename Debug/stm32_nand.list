
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c124  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026a8  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e95c  0800e95c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e95c  0800e95c  0001e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e964  0800e964  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e964  0800e964  0001e964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e968  0800e968  0001e968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800e96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          000068f8  200000e0  200000e0  000200e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  200069d8  200069d8  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022967  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004249  00000000  00000000  00042a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b10  00000000  00000000  00046cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d7c  00000000  00000000  000487d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f100  00000000  00000000  0004e54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2efb  00000000  00000000  0006d64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150547  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001988  00000000  00000000  00150598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007bac  00000000  00000000  00151f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c29c 	.word	0x0800c29c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	0800c29c 	.word	0x0800c29c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f002 fd75 	bl	8003750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f87b 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa1f 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9e7 	bl	8001040 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f96f 	bl	8000f54 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8dd 	bl	8000e34 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fabd 	bl	80011f8 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9b5 	bl	8000fec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f931 	bl	8000ee8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f002 fda1 	bl	80037d4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <main+0xd4>)
 8000c98:	f003 fc40 	bl	800451c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4824      	ldr	r0, [pc, #144]	; (8000d34 <main+0xd8>)
 8000ca4:	f003 fc3a 	bl	800451c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000ca8:	20c8      	movs	r0, #200	; 0xc8
 8000caa:	f002 fd93 	bl	80037d4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <main+0xd4>)
 8000cb4:	f003 fc32 	bl	800451c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481d      	ldr	r0, [pc, #116]	; (8000d34 <main+0xd8>)
 8000cc0:	f003 fc2c 	bl	800451c <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <main+0xdc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 fec7 	bl	8006a68 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0xe0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4917      	ldr	r1, [pc, #92]	; (8000d40 <main+0xe4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fb3f 	bl	8007366 <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <main+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fcf7 	bl	80016e0 <set_Date>

  ST7789_Reset();
 8000cf2:	f001 ffb9 	bl	8002c68 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <main+0xec>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 ffce 	bl	8002c9c <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f007 fc96 	bl	8008630 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <main+0xf0>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f007 fd8a 	bl	8008822 <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <main+0xf4>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <main+0xf8>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <main+0xfc>)
 8000d1a:	f007 fcd5 	bl	80086c8 <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <main+0x100>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d24:	f007 fcaa 	bl	800867c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f002 fd53 	bl	80037d4 <HAL_Delay>
 8000d2e:	e7fb      	b.n	8000d28 <main+0xcc>
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	20000b20 	.word	0x20000b20
 8000d44:	20000028 	.word	0x20000028
 8000d48:	20000b26 	.word	0x20000b26
 8000d4c:	0800e78c 	.word	0x0800e78c
 8000d50:	20000304 	.word	0x20000304
 8000d54:	0800e768 	.word	0x0800e768
 8000d58:	08001f61 	.word	0x08001f61
 8000d5c:	20000300 	.word	0x20000300

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00a fc9a 	bl	800b6a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 f820 	bl	8004e2c <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f001 fda7 	bl	8002944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2105      	movs	r1, #5
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fa81 	bl	800531c <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f001 fd90 	bl	8002944 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <MX_RTC_Init+0xb0>)
 8000e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e5a:	227f      	movs	r2, #127	; 0x7f
 8000e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e60:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e7a:	f004 fd83 	bl	8005984 <HAL_RTC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e84:	f001 fd5e 	bl	8002944 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000ea4:	f004 fdff 	bl	8005aa6 <HAL_RTC_SetTime>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eae:	f001 fd49 	bl	8002944 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000eca:	f004 ff07 	bl	8005cdc <HAL_RTC_SetDate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ed4:	f001 fd36 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000fc 	.word	0x200000fc
 8000ee4:	40002800 	.word	0x40002800

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f005 f855 	bl	8005fe8 <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f001 fcfe 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000011c 	.word	0x2000011c
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	22f9      	movs	r2, #249	; 0xf9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f005 fd15 	bl	80069c8 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f001 fcce 	bl	8002944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f005 fecf 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f001 fcc0 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 f8eb 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f001 fcb2 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001d4 	.word	0x200001d4

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART3_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001024:	f006 f952 	bl	80072cc <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f001 fc89 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000021c 	.word	0x2000021c
 800103c:	40004800 	.word	0x40004800

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_DMA_Init+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_DMA_Init+0x68>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_DMA_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x68>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	200e      	movs	r0, #14
 8001084:	f002 fc82 	bl	800398c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f002 fc9b 	bl	80039c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	203b      	movs	r0, #59	; 0x3b
 8001094:	f002 fc7a 	bl	800398c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001098:	203b      	movs	r0, #59	; 0x3b
 800109a:	f002 fc93 	bl	80039c4 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	210e      	movs	r1, #14
 800116e:	481f      	ldr	r0, [pc, #124]	; (80011ec <MX_GPIO_Init+0x140>)
 8001170:	f003 f9d4 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	481d      	ldr	r0, [pc, #116]	; (80011f0 <MX_GPIO_Init+0x144>)
 800117c:	f003 f9ce 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_GPIO_Init+0x148>)
 8001186:	f003 f9c9 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 800118a:	230e      	movs	r3, #14
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_GPIO_Init+0x140>)
 80011a2:	f003 f81f 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x144>)
 80011c0:	f003 f810 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	2302      	movs	r3, #2
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_GPIO_Init+0x148>)
 80011dc:	f003 f802 	bl	80041e4 <HAL_GPIO_Init>

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <MX_FSMC_Init+0x164>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <MX_FSMC_Init+0x168>)
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <MX_FSMC_Init+0x16c>)
 8001222:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <MX_FSMC_Init+0x168>)
 8001226:	2210      	movs	r2, #16
 8001228:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <MX_FSMC_Init+0x168>)
 800122c:	2202      	movs	r2, #2
 800122e:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <MX_FSMC_Init+0x168>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <MX_FSMC_Init+0x168>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <MX_FSMC_Init+0x168>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <MX_FSMC_Init+0x168>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001248:	4b45      	ldr	r3, [pc, #276]	; (8001360 <MX_FSMC_Init+0x168>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <MX_FSMC_Init+0x168>)
 8001250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <MX_FSMC_Init+0x168>)
 8001258:	2210      	movs	r2, #16
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 800125c:	4b40      	ldr	r3, [pc, #256]	; (8001360 <MX_FSMC_Init+0x168>)
 800125e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001264:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <MX_FSMC_Init+0x168>)
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 800126c:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <MX_FSMC_Init+0x168>)
 800126e:	2201      	movs	r2, #1
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <MX_FSMC_Init+0x168>)
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <MX_FSMC_Init+0x168>)
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8001282:	23fc      	movs	r3, #252	; 0xfc
 8001284:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8001286:	23fc      	movs	r3, #252	; 0xfc
 8001288:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 800128a:	23fc      	movs	r3, #252	; 0xfc
 800128c:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 800128e:	23fc      	movs	r3, #252	; 0xfc
 8001290:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8001292:	23fc      	movs	r3, #252	; 0xfc
 8001294:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8001296:	23fc      	movs	r3, #252	; 0xfc
 8001298:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 800129a:	23fc      	movs	r3, #252	; 0xfc
 800129c:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012a2:	463a      	mov	r2, r7
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	482d      	ldr	r0, [pc, #180]	; (8001360 <MX_FSMC_Init+0x168>)
 80012ac:	f003 f969 	bl	8004582 <HAL_NAND_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012b6:	f001 fb45 	bl	8002944 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  if (my_NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {
 80012ba:	492b      	ldr	r1, [pc, #172]	; (8001368 <MX_FSMC_Init+0x170>)
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <MX_FSMC_Init+0x168>)
 80012be:	f000 f85f 	bl	8001380 <my_NAND_Read_ID>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d145      	bne.n	8001354 <MX_FSMC_Init+0x15c>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <MX_FSMC_Init+0x168>)
 80012ca:	f003 fda0 	bl	8004e0e <HAL_NAND_GetState>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_FSMC_Init+0x174>)
 80012d4:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <MX_FSMC_Init+0x178>)
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_FSMC_Init+0x168>)
 80012da:	4615      	mov	r5, r2
 80012dc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e8:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_FSMC_Init+0x178>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d027      	beq.n	8001344 <MX_FSMC_Init+0x14c>
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_FSMC_Init+0x178>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012fc:	d822      	bhi.n	8001344 <MX_FSMC_Init+0x14c>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_FSMC_Init+0x178>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	2001      	movs	r0, #1
 8001306:	f00a f8d9 	bl	800b4bc <calloc>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_FSMC_Init+0x17c>)
 8001310:	601a      	str	r2, [r3, #0]
		  wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_FSMC_Init+0x178>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	2001      	movs	r0, #1
 800131a:	f00a f8cf 	bl	800b4bc <calloc>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_FSMC_Init+0x180>)
 8001324:	601a      	str	r2, [r3, #0]

		  if (!rdBuf || !wrBuf) devError |= devMEM;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_FSMC_Init+0x17c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <MX_FSMC_Init+0x13e>
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_FSMC_Init+0x180>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <MX_FSMC_Init+0x15a>
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_FSMC_Init+0x184>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_FSMC_Init+0x184>)
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e006      	b.n	8001352 <MX_FSMC_Init+0x15a>
	  } else {
		  devError |= devNAND;
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_FSMC_Init+0x184>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f043 0306 	orr.w	r3, r3, #6
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <MX_FSMC_Init+0x184>)
 800134e:	6013      	str	r3, [r2, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 8001350:	e000      	b.n	8001354 <MX_FSMC_Init+0x15c>
		  if (!rdBuf || !wrBuf) devError |= devMEM;
 8001352:	bf00      	nop
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bdb0      	pop	{r4, r5, r7, pc}
 800135c:	20000b38 	.word	0x20000b38
 8001360:	200002c0 	.word	0x200002c0
 8001364:	a0000060 	.word	0xa0000060
 8001368:	20000b3c 	.word	0x20000b3c
 800136c:	20000045 	.word	0x20000045
 8001370:	20000b44 	.word	0x20000b44
 8001374:	20000b5c 	.word	0x20000b5c
 8001378:	20000b60 	.word	0x20000b60
 800137c:	2000030c 	.word	0x2000030c

08001380 <my_NAND_Read_ID>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef my_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
__IO uint32_t data = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
__IO uint32_t data1 = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
uint32_t deviceaddress = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hnand);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <my_NAND_Read_ID+0x24>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e052      	b.n	800144a <my_NAND_Read_ID+0xca>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]

	if(hnand->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d101      	bne.n	80013bc <my_NAND_Read_ID+0x3c>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e046      	b.n	800144a <my_NAND_Read_ID+0xca>

	if(hnand->Init.NandBank == FMC_NAND_BANK2) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b10      	cmp	r3, #16
 80013c2:	d103      	bne.n	80013cc <my_NAND_Read_ID+0x4c>
		deviceaddress = NAND_DEVICE1;
 80013c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e002      	b.n	80013d2 <my_NAND_Read_ID+0x52>
	} else {
		deviceaddress = NAND_DEVICE2;
 80013cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013d0:	617b      	str	r3, [r7, #20]
	}
	devAdr = deviceaddress;
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <my_NAND_Read_ID+0xd8>)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	6013      	str	r3, [r2, #0]

	hnand->State = HAL_NAND_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Send Read ID command sequence */
	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e6:	2290      	movs	r2, #144	; 0x90
 80013e8:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

	/* Read the electronic signature from NAND flash */
	if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d121      	bne.n	8001440 <my_NAND_Read_ID+0xc0>
		data = *(__IO uint32_t *)deviceaddress;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	613b      	str	r3, [r7, #16]
		data1 = *((__IO uint32_t *)deviceaddress + 4U);
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3310      	adds	r3, #16
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]

		/* Return the data read */
		pNAND_ID->Maker_Id  = ADDR_1ST_CYCLE(data);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	701a      	strb	r2, [r3, #0]
		pNAND_ID->Device_Id = ADDR_2ND_CYCLE(data);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	b2da      	uxtb	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	705a      	strb	r2, [r3, #1]
		pNAND_ID->Third_Id  = ADDR_3RD_CYCLE(data);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	0c1b      	lsrs	r3, r3, #16
 8001420:	b2da      	uxtb	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	709a      	strb	r2, [r3, #2]
		pNAND_ID->Fourth_Id = ADDR_4TH_CYCLE(data);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	0e1b      	lsrs	r3, r3, #24
 800142a:	b2da      	uxtb	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	70da      	strb	r2, [r3, #3]
		pNAND_ID->Plane_Id  = ADDR_1ST_CYCLE(data1);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	711a      	strb	r2, [r3, #4]

		hnand->State = HAL_NAND_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hnand);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

	return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000b28 	.word	0x20000b28

0800145c <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001468:	2330      	movs	r3, #48	; 0x30
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	2300      	movs	r3, #0
 8001472:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <hex2bin+0x28>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <hex2bin+0x2c>
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	e0b2      	b.n	80015ee <hex2bin+0x192>
    if (len > 8) len = 8;
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b08      	cmp	r3, #8
 800148c:	d901      	bls.n	8001492 <hex2bin+0x36>
 800148e:	2308      	movs	r3, #8
 8001490:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	f1c3 0308 	rsb	r3, r3, #8
 8001498:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 800149c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014a0:	f107 0210 	add.w	r2, r7, #16
 80014a4:	4413      	add	r3, r2
 80014a6:	78fa      	ldrb	r2, [r7, #3]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00a f8ee 	bl	800b68c <memcpy>

    k = j = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 80014be:	e090      	b.n	80015e2 <hex2bin+0x186>
        jk = j + 2;
 80014c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014c4:	3302      	adds	r3, #2
 80014c6:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 80014c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014d0:	e066      	b.n	80015a0 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 80014d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014d6:	3328      	adds	r3, #40	; 0x28
 80014d8:	443b      	add	r3, r7
 80014da:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014de:	2b2f      	cmp	r3, #47	; 0x2f
 80014e0:	d918      	bls.n	8001514 <hex2bin+0xb8>
 80014e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014e6:	3328      	adds	r3, #40	; 0x28
 80014e8:	443b      	add	r3, r7
 80014ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014ee:	2b39      	cmp	r3, #57	; 0x39
 80014f0:	d810      	bhi.n	8001514 <hex2bin+0xb8>
 80014f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f6:	3328      	adds	r3, #40	; 0x28
 80014f8:	443b      	add	r3, r7
 80014fa:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80014fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	3a30      	subs	r2, #48	; 0x30
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	3328      	adds	r3, #40	; 0x28
 800150c:	443b      	add	r3, r7
 800150e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001512:	e040      	b.n	8001596 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001518:	3328      	adds	r3, #40	; 0x28
 800151a:	443b      	add	r3, r7
 800151c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001520:	2b60      	cmp	r3, #96	; 0x60
 8001522:	d918      	bls.n	8001556 <hex2bin+0xfa>
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	3328      	adds	r3, #40	; 0x28
 800152a:	443b      	add	r3, r7
 800152c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001530:	2b66      	cmp	r3, #102	; 0x66
 8001532:	d810      	bhi.n	8001556 <hex2bin+0xfa>
 8001534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001538:	3328      	adds	r3, #40	; 0x28
 800153a:	443b      	add	r3, r7
 800153c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	3a57      	subs	r2, #87	; 0x57
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	3328      	adds	r3, #40	; 0x28
 800154e:	443b      	add	r3, r7
 8001550:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001554:	e01f      	b.n	8001596 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800155a:	3328      	adds	r3, #40	; 0x28
 800155c:	443b      	add	r3, r7
 800155e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d917      	bls.n	8001596 <hex2bin+0x13a>
 8001566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156a:	3328      	adds	r3, #40	; 0x28
 800156c:	443b      	add	r3, r7
 800156e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001572:	2b46      	cmp	r3, #70	; 0x46
 8001574:	d80f      	bhi.n	8001596 <hex2bin+0x13a>
 8001576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800157a:	3328      	adds	r3, #40	; 0x28
 800157c:	443b      	add	r3, r7
 800157e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	3a37      	subs	r2, #55	; 0x37
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	3328      	adds	r3, #40	; 0x28
 8001590:	443b      	add	r3, r7
 8001592:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159a:	3301      	adds	r3, #1
 800159c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d393      	bcc.n	80014d2 <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	011a      	lsls	r2, r3, #4
 80015ae:	7b7b      	ldrb	r3, [r7, #13]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 80015b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015bc:	f1c3 0303 	rsb	r3, r3, #3
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	6a3a      	ldr	r2, [r7, #32]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	623b      	str	r3, [r7, #32]
        k++;
 80015ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015d2:	3301      	adds	r3, #1
 80015d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 80015d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015dc:	3302      	adds	r3, #2
 80015de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 80015e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	f67f af6a 	bls.w	80014c0 <hex2bin+0x64>
    }

    return ret;
 80015ec:	6a3b      	ldr	r3, [r7, #32]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	if (on)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <errLedOn+0x34>)
 8001610:	f002 ff84 	bl	800451c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8001614:	e005      	b.n	8001622 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <errLedOn+0x34>)
 800161e:	f002 ff7d 	bl	800451c <HAL_GPIO_WritePin>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020c00 	.word	0x40020c00

08001630 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	return secCounter;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <get_secCounter+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000310 	.word	0x20000310

08001648 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	secCounter++;
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <inc_secCounter+0x18>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	4a03      	ldr	r2, [pc, #12]	; (8001660 <inc_secCounter+0x18>)
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000310 	.word	0x20000310

08001664 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	return msCounter;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <get_msCounter+0x18>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000318 	.word	0x20000318

08001680 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	msCounter++;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <inc_msCounter+0x20>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	1c50      	adds	r0, r2, #1
 800168c:	f143 0100 	adc.w	r1, r3, #0
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <inc_msCounter+0x20>)
 8001692:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000318 	.word	0x20000318

080016a4 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 80016ac:	f7ff ffc0 	bl	8001630 <get_secCounter>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80016c6:	f7ff ffb3 	bl	8001630 <get_secCounter>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	bf94      	ite	ls
 80016d2:	2301      	movls	r3, #1
 80016d4:	2300      	movhi	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm ts;
	time_t ep = (time_t)usec;
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	2000      	movs	r0, #0
 80016ec:	460a      	mov	r2, r1
 80016ee:	4603      	mov	r3, r0
 80016f0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	gmtime_r(&ep, &ts);
 80016f4:	f107 0214 	add.w	r2, r7, #20
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f009 feea 	bl	800b4d8 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	sDate.Month   = ts.tm_mon + 1;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Date    = ts.tm_mday;
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Year    = ts.tm_year;
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <set_Date+0xbc>)
 8001732:	f004 fad3 	bl	8005cdc <HAL_RTC_SetDate>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <set_Date+0x6a>
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <set_Date+0xc0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <set_Date+0xc0>)
 8001746:	6013      	str	r3, [r2, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8001748:	e023      	b.n	8001792 <set_Date+0xb2>
		sTime.Hours   = ts.tm_hour + tZone;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <set_Date+0xc4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sTime.Minutes = ts.tm_min;
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		sTime.Seconds = ts.tm_sec;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800176a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	480a      	ldr	r0, [pc, #40]	; (800179c <set_Date+0xbc>)
 8001774:	f004 f997 	bl	8005aa6 <HAL_RTC_SetTime>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <set_Date+0xac>
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <set_Date+0xc0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <set_Date+0xc0>)
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	e002      	b.n	8001792 <set_Date+0xb2>
			setDate = true;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <set_Date+0xc8>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000fc 	.word	0x200000fc
 80017a0:	2000030c 	.word	0x2000030c
 80017a4:	20000b25 	.word	0x20000b25
 80017a8:	20000b24 	.word	0x20000b24

080017ac <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b093      	sub	sp, #76	; 0x4c
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	6078      	str	r0, [r7, #4]
int ret = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <sec2str+0x10c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f083 0301 	eor.w	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d040      	beq.n	8001848 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80017c6:	f7ff ff33 	bl	8001630 <get_secCounter>
 80017ca:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <sec2str+0x110>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	4a38      	ldr	r2, [pc, #224]	; (80018bc <sec2str+0x110>)
 80017dc:	fba2 1203 	umull	r1, r2, r2, r3
 80017e0:	0c12      	lsrs	r2, r2, #16
 80017e2:	4937      	ldr	r1, [pc, #220]	; (80018c0 <sec2str+0x114>)
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80017ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ee:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <sec2str+0x118>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0adb      	lsrs	r3, r3, #11
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80017f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fa:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <sec2str+0x118>)
 80017fc:	fba2 1203 	umull	r1, r2, r2, r3
 8001800:	0ad2      	lsrs	r2, r2, #11
 8001802:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001810:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <sec2str+0x11c>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 800181a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <sec2str+0x11c>)
 800181e:	fba3 1302 	umull	r1, r3, r3, r2
 8001822:	0959      	lsrs	r1, r3, #5
 8001824:	460b      	mov	r3, r1
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a5b      	subs	r3, r3, r1
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 8001830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	4923      	ldr	r1, [pc, #140]	; (80018cc <sec2str+0x120>)
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f00a f8aa 	bl	800b998 <siprintf>
 8001844:	6378      	str	r0, [r7, #52]	; 0x34
 8001846:	e032      	b.n	80018ae <sec2str+0x102>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	481f      	ldr	r0, [pc, #124]	; (80018d0 <sec2str+0x124>)
 8001852:	f004 faea 	bl	8005e2a <HAL_RTC_GetDate>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <sec2str+0xbe>
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <sec2str+0x128>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <sec2str+0x128>)
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e021      	b.n	80018ae <sec2str+0x102>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	4619      	mov	r1, r3
 8001872:	4817      	ldr	r0, [pc, #92]	; (80018d0 <sec2str+0x124>)
 8001874:	f004 f9d4 	bl	8005c20 <HAL_RTC_GetTime>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <sec2str+0xe0>
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <sec2str+0x128>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <sec2str+0x128>)
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e010      	b.n	80018ae <sec2str+0x102>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 800188c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800188e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001890:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001892:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001894:	7c3b      	ldrb	r3, [r7, #16]
 8001896:	7c7a      	ldrb	r2, [r7, #17]
 8001898:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800189a:	9102      	str	r1, [sp, #8]
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4623      	mov	r3, r4
 80018a2:	4602      	mov	r2, r0
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <sec2str+0x12c>)
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f00a f876 	bl	800b998 <siprintf>
 80018ac:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	373c      	adds	r7, #60	; 0x3c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	20000b24 	.word	0x20000b24
 80018bc:	c22e4507 	.word	0xc22e4507
 80018c0:	00015180 	.word	0x00015180
 80018c4:	91a2b3c5 	.word	0x91a2b3c5
 80018c8:	88888889 	.word	0x88888889
 80018cc:	0800c380 	.word	0x0800c380
 80018d0:	200000fc 	.word	0x200000fc
 80018d4:	2000030c 	.word	0x2000030c
 80018d8:	0800c398 	.word	0x0800c398

080018dc <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 80018dc:	b40e      	push	{r1, r2, r3}
 80018de:	b590      	push	{r4, r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80018e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ec:	613b      	str	r3, [r7, #16]
int dl = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <Report+0xb8>)
 80018f4:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d012      	beq.n	8001928 <Report+0x4c>
		dl = sec2str(buf);
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff ff52 	bl	80017ac <sec2str>
 8001908:	6178      	str	r0, [r7, #20]
		strcat(buf, "| ");
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7fe fc60 	bl	80001d0 <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <Report+0xbc>)
 800191a:	8811      	ldrh	r1, [r2, #0]
 800191c:	7892      	ldrb	r2, [r2, #2]
 800191e:	8019      	strh	r1, [r3, #0]
 8001920:	709a      	strb	r2, [r3, #2]
		dl += 2;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3302      	adds	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8001928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192c:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	18d0      	adds	r0, r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	1ad1      	subs	r1, r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193e:	f00a f951 	bl	800bbe4 <vsniprintf>

	uartRdy = false;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <Report+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <Report+0xc4>)
 800194a:	681c      	ldr	r4, [r3, #0]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7fe fc3f 	bl	80001d0 <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	b29b      	uxth	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	4620      	mov	r0, r4
 800195c:	f005 fd34 	bl	80073c8 <HAL_UART_Transmit_DMA>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <Report+0x96>
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <Report+0xc8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <Report+0xc8>)
 8001970:	6013      	str	r3, [r2, #0]
	while (!uartRdy) {}//HAL_Delay(1);
 8001972:	bf00      	nop
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <Report+0xc0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f8      	bne.n	8001974 <Report+0x98>

	va_end(args);

	return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800198e:	b003      	add	sp, #12
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000320 	.word	0x20000320
 8001998:	0800c3b4 	.word	0x0800c3b4
 800199c:	20000024 	.word	0x20000024
 80019a0:	20000034 	.word	0x20000034
 80019a4:	2000030c 	.word	0x2000030c

080019a8 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08e      	sub	sp, #56	; 0x38
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a9c      	ldr	r2, [pc, #624]	; (8001c28 <HAL_UART_RxCpltCallback+0x280>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	f040 823c 	bne.w	8001e34 <HAL_UART_RxCpltCallback+0x48c>
		rxBuf[ruk++] = (char)rxByte;
 80019bc:	4b9b      	ldr	r3, [pc, #620]	; (8001c2c <HAL_UART_RxCpltCallback+0x284>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	b291      	uxth	r1, r2
 80019c4:	4a99      	ldr	r2, [pc, #612]	; (8001c2c <HAL_UART_RxCpltCallback+0x284>)
 80019c6:	8011      	strh	r1, [r2, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b99      	ldr	r3, [pc, #612]	; (8001c30 <HAL_UART_RxCpltCallback+0x288>)
 80019cc:	7819      	ldrb	r1, [r3, #0]
 80019ce:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <HAL_UART_RxCpltCallback+0x28c>)
 80019d0:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 80019d2:	4b97      	ldr	r3, [pc, #604]	; (8001c30 <HAL_UART_RxCpltCallback+0x288>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b0a      	cmp	r3, #10
 80019d8:	f040 8227 	bne.w	8001e2a <HAL_UART_RxCpltCallback+0x482>
			rxBuf[--ruk] = '\0';
 80019dc:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <HAL_UART_RxCpltCallback+0x284>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b91      	ldr	r3, [pc, #580]	; (8001c2c <HAL_UART_RxCpltCallback+0x284>)
 80019e6:	801a      	strh	r2, [r3, #0]
 80019e8:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <HAL_UART_RxCpltCallback+0x284>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b91      	ldr	r3, [pc, #580]	; (8001c34 <HAL_UART_RxCpltCallback+0x28c>)
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
			bool check = false;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if (strstr(rxBuf, s_restart)) {
 80019fe:	4b8e      	ldr	r3, [pc, #568]	; (8001c38 <HAL_UART_RxCpltCallback+0x290>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	488b      	ldr	r0, [pc, #556]	; (8001c34 <HAL_UART_RxCpltCallback+0x28c>)
 8001a06:	f00a f81e 	bl	800ba46 <strstr>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_UART_RxCpltCallback+0x74>
				flags.restart = 1;
 8001a10:	4a8a      	ldr	r2, [pc, #552]	; (8001c3c <HAL_UART_RxCpltCallback+0x294>)
 8001a12:	7813      	ldrb	r3, [r2, #0]
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	7013      	strb	r3, [r2, #0]
 8001a1a:	e1fd      	b.n	8001e18 <HAL_UART_RxCpltCallback+0x470>
			} else if ((uk = strstr(rxBuf, s_epoch))) {
 8001a1c:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_UART_RxCpltCallback+0x298>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4884      	ldr	r0, [pc, #528]	; (8001c34 <HAL_UART_RxCpltCallback+0x28c>)
 8001a24:	f00a f80f 	bl	800ba46 <strstr>
 8001a28:	6378      	str	r0, [r7, #52]	; 0x34
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d033      	beq.n	8001a98 <HAL_UART_RxCpltCallback+0xf0>
				uk += strlen(s_epoch);
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_UART_RxCpltCallback+0x298>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fbcb 	bl	80001d0 <strlen>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	4413      	add	r3, r2
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
				if (*uk != '?') {
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b3f      	cmp	r3, #63	; 0x3f
 8001a48:	d01d      	beq.n	8001a86 <HAL_UART_RxCpltCallback+0xde>
					if (strlen(uk) < 10) setDate = false;
 8001a4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a4c:	f7fe fbc0 	bl	80001d0 <strlen>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d803      	bhi.n	8001a5e <HAL_UART_RxCpltCallback+0xb6>
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <HAL_UART_RxCpltCallback+0x29c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e1dc      	b.n	8001e18 <HAL_UART_RxCpltCallback+0x470>
					else {
						uint32_t ep = (uint32_t)atol(uk);
 8001a5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a60:	f009 fd28 	bl	800b4b4 <atol>
 8001a64:	4603      	mov	r3, r0
 8001a66:	61bb      	str	r3, [r7, #24]
						if (ep > epoch) {
 8001a68:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <HAL_UART_RxCpltCallback+0x2a0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	f240 81d2 	bls.w	8001e18 <HAL_UART_RxCpltCallback+0x470>
							epoch = ep;
 8001a74:	4a74      	ldr	r2, [pc, #464]	; (8001c48 <HAL_UART_RxCpltCallback+0x2a0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
							flags.time_set = 1;
 8001a7a:	4a70      	ldr	r2, [pc, #448]	; (8001c3c <HAL_UART_RxCpltCallback+0x294>)
 8001a7c:	7813      	ldrb	r3, [r2, #0]
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	7013      	strb	r3, [r2, #0]
 8001a84:	e1c8      	b.n	8001e18 <HAL_UART_RxCpltCallback+0x470>
						}
					}
				} else {
					setDate = true;
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_UART_RxCpltCallback+0x29c>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
					flags.time_show = 1;
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <HAL_UART_RxCpltCallback+0x294>)
 8001a8e:	7813      	ldrb	r3, [r2, #0]
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	7013      	strb	r3, [r2, #0]
 8001a96:	e1bf      	b.n	8001e18 <HAL_UART_RxCpltCallback+0x470>
				}
			} else {
				int8_t idx = -1;
 8001a98:	23ff      	movs	r3, #255	; 0xff
 8001a9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001aa4:	e018      	b.n	8001ad8 <HAL_UART_RxCpltCallback+0x130>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds = "read:0x4549ABBB:256"
 8001aa6:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8001aaa:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <HAL_UART_RxCpltCallback+0x2a4>)
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4860      	ldr	r0, [pc, #384]	; (8001c34 <HAL_UART_RxCpltCallback+0x28c>)
 8001ab4:	f009 ffc7 	bl	800ba46 <strstr>
 8001ab8:	6378      	str	r0, [r7, #52]	; 0x34
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_UART_RxCpltCallback+0x122>
						                                  //"next"
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"clear"
						idx = i;
 8001ac0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						break;
 8001ac8:	e00a      	b.n	8001ae0 <HAL_UART_RxCpltCallback+0x138>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001aca:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001ad8:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	dde2      	ble.n	8001aa6 <HAL_UART_RxCpltCallback+0xfe>
					}
				}
				if (uk == rxBuf) {
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_UART_RxCpltCallback+0x28c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f040 8197 	bne.w	8001e18 <HAL_UART_RxCpltCallback+0x470>
					nandLen = 256;
 8001aea:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_UART_RxCpltCallback+0x2a8>)
 8001aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af0:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8001af2:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001af6:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_UART_RxCpltCallback+0x2a4>)
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fb67 	bl	80001d0 <strlen>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	4413      	add	r3, r2
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
					switch (idx) {
 8001b16:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	f200 815a 	bhi.w	8001dd4 <HAL_UART_RxCpltCallback+0x42c>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <HAL_UART_RxCpltCallback+0x180>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b3d 	.word	0x08001b3d
 8001b2c:	08001bc3 	.word	0x08001bc3
 8001b30:	08001bfb 	.word	0x08001bfb
 8001b34:	08001d7d 	.word	0x08001d7d
 8001b38:	08001daf 	.word	0x08001daf
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8001b3c:	213a      	movs	r1, #58	; 0x3a
 8001b3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b40:	f009 ff59 	bl	800b9f6 <strchr>
 8001b44:	62f8      	str	r0, [r7, #44]	; 0x2c
							if (uki) {
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	3301      	adds	r3, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f009 fcaf 	bl	800b4b4 <atol>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b5c:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8001b64:	493b      	ldr	r1, [pc, #236]	; (8001c54 <HAL_UART_RxCpltCallback+0x2ac>)
 8001b66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b68:	f009 ff6d 	bl	800ba46 <strstr>
 8001b6c:	62f8      	str	r0, [r7, #44]	; 0x2c
							if (uki) {
 8001b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00f      	beq.n	8001b94 <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	3302      	adds	r3, #2
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
								nandAdr = hex2bin(uki, strlen(uki));
 8001b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b7c:	f7fe fb28 	bl	80001d0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b88:	f7ff fc68 	bl	800145c <hex2bin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e006      	b.n	8001ba2 <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 8001b94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b96:	f009 fc8d 	bl	800b4b4 <atol>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001ba0:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_UART_RxCpltCallback+0x2b4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001bae:	6013      	str	r3, [r2, #0]
							check = true;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							flags.cmd = cmdRead;
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_UART_RxCpltCallback+0x294>)
 8001bb8:	7813      	ldrb	r3, [r2, #0]
 8001bba:	f36f 1306 	bfc	r3, #4, #3
 8001bbe:	7013      	strb	r3, [r2, #0]
						break;
 8001bc0:	e108      	b.n	8001dd4 <HAL_UART_RxCpltCallback+0x42c>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_UART_RxCpltCallback+0x2b4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d203      	bcs.n	8001bd6 <HAL_UART_RxCpltCallback+0x22e>
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_UART_RxCpltCallback+0x2b4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001bd4:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_UART_RxCpltCallback+0x2a8>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_UART_RxCpltCallback+0x2b0>)
 8001be4:	6013      	str	r3, [r2, #0]
							check = true;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							flags.cmd = cmdNext;
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_UART_RxCpltCallback+0x294>)
 8001bee:	7813      	ldrb	r3, [r2, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	f361 1306 	bfi	r3, r1, #4, #3
 8001bf6:	7013      	strb	r3, [r2, #0]
						break;
 8001bf8:	e0ec      	b.n	8001dd4 <HAL_UART_RxCpltCallback+0x42c>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							uki = strstr(uk, "0x");
 8001c00:	4914      	ldr	r1, [pc, #80]	; (8001c54 <HAL_UART_RxCpltCallback+0x2ac>)
 8001c02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c04:	f009 ff1f 	bl	800ba46 <strstr>
 8001c08:	62f8      	str	r0, [r7, #44]	; 0x2c
							if (uki) {
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d027      	beq.n	8001c60 <HAL_UART_RxCpltCallback+0x2b8>
								if (uki == uk) {
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d125      	bne.n	8001c64 <HAL_UART_RxCpltCallback+0x2bc>
									uki += 2;
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
									hex = true;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c24:	e01e      	b.n	8001c64 <HAL_UART_RxCpltCallback+0x2bc>
 8001c26:	bf00      	nop
 8001c28:	40004800 	.word	0x40004800
 8001c2c:	20000b22 	.word	0x20000b22
 8001c30:	20000b20 	.word	0x20000b20
 8001c34:	20000720 	.word	0x20000720
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000308 	.word	0x20000308
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000b24 	.word	0x20000b24
 8001c48:	20000028 	.word	0x20000028
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	20000b30 	.word	0x20000b30
 8001c54:	0800c3b8 	.word	0x0800c3b8
 8001c58:	20000b2c 	.word	0x20000b2c
 8001c5c:	20000b28 	.word	0x20000b28
								}
							} else uki = uk;
 8001c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
							uke = strchr(uki, ':');//adr:byte
 8001c64:	213a      	movs	r1, #58	; 0x3a
 8001c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c68:	f009 fec5 	bl	800b9f6 <strchr>
 8001c6c:	6238      	str	r0, [r7, #32]
							if (uke) {
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80ac 	beq.w	8001dce <HAL_UART_RxCpltCallback+0x426>
								ukb = uke + 1;
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
								char tmp[16];
								memset(tmp, 0, 16);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2210      	movs	r2, #16
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f009 fd0f 	bl	800b6a8 <memset>
								memcpy(tmp, uki, uke - uki);
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f009 fcf7 	bl	800b68c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8001c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_UART_RxCpltCallback+0x320>
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fa90 	bl	80001d0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fbce 	bl	800145c <hex2bin>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <HAL_UART_RxCpltCallback+0x494>)
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e008      	b.n	8001cda <HAL_UART_RxCpltCallback+0x332>
								    else nandAdr = atol(tmp);
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f009 fbf1 	bl	800b4b4 <atol>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_UART_RxCpltCallback+0x494>)
 8001cd8:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
								uke = strchr(uki, ':');//byte:len
 8001cde:	213a      	movs	r1, #58	; 0x3a
 8001ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ce2:	f009 fe88 	bl	800b9f6 <strchr>
 8001ce6:	6238      	str	r0, [r7, #32]
								if (uke) {
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_UART_RxCpltCallback+0x35e>
									nandLen = atol(uke + 1);
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f009 fbde 	bl	800b4b4 <atol>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_UART_RxCpltCallback+0x498>)
 8001cfe:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8001d06:	494f      	ldr	r1, [pc, #316]	; (8001e44 <HAL_UART_RxCpltCallback+0x49c>)
 8001d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d0a:	f009 fe9c 	bl	800ba46 <strstr>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_UART_RxCpltCallback+0x37a>
									ukb += 2;
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	3302      	adds	r3, #2
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
									hex = true;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d20:	e002      	b.n	8001d28 <HAL_UART_RxCpltCallback+0x380>
								} else hex = false;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8001d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <HAL_UART_RxCpltCallback+0x3a4>
 8001d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d32:	f7fe fa4d 	bl	80001d0 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d3e:	f7ff fb8d 	bl	800145c <hex2bin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_UART_RxCpltCallback+0x4a0>)
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e006      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x3b2>
								    else nandByte = (uint8_t)atol(ukb);
 8001d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d4e:	f009 fbb1 	bl	800b4b4 <atol>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_UART_RxCpltCallback+0x4a0>)
 8001d58:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_UART_RxCpltCallback+0x494>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <HAL_UART_RxCpltCallback+0x4a4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a35      	ldr	r2, [pc, #212]	; (8001e3c <HAL_UART_RxCpltCallback+0x494>)
 8001d66:	6013      	str	r3, [r2, #0]
								check = true;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								flags.cmd = cmdWrite;
 8001d6e:	4a38      	ldr	r2, [pc, #224]	; (8001e50 <HAL_UART_RxCpltCallback+0x4a8>)
 8001d70:	7813      	ldrb	r3, [r2, #0]
 8001d72:	2102      	movs	r1, #2
 8001d74:	f361 1306 	bfi	r3, r1, #4, #3
 8001d78:	7013      	strb	r3, [r2, #0]
							}
						}
						break;
 8001d7a:	e028      	b.n	8001dce <HAL_UART_RxCpltCallback+0x426>
						case cmdErase://"erase:0" //erase:block_number from 0..1023
						{
							uint32_t blk = atol(uk);
 8001d7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d7e:	f009 fb99 	bl	800b4b4 <atol>
 8001d82:	4603      	mov	r3, r0
 8001d84:	61fb      	str	r3, [r7, #28]
							if (blk < chipConf.BlockNbr) {
 8001d86:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_UART_RxCpltCallback+0x4ac>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d220      	bcs.n	8001dd2 <HAL_UART_RxCpltCallback+0x42a>
								nandBlk = blk;
 8001d90:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <HAL_UART_RxCpltCallback+0x4b0>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	6013      	str	r3, [r2, #0]
								flags.cmd = cmdErase;
 8001d96:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_UART_RxCpltCallback+0x4a8>)
 8001d98:	7813      	ldrb	r3, [r2, #0]
 8001d9a:	2103      	movs	r1, #3
 8001d9c:	f361 1306 	bfi	r3, r1, #4, #3
 8001da0:	7013      	strb	r3, [r2, #0]
								flags.cmd_flag = 1;
 8001da2:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_UART_RxCpltCallback+0x4a8>)
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	7013      	strb	r3, [r2, #0]
							}
						}
						break;
 8001dac:	e011      	b.n	8001dd2 <HAL_UART_RxCpltCallback+0x42a>
						case cmdClear://"clear" //erase block from 0..1023
							nandBlk = chipConf.BlockNbr;
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_UART_RxCpltCallback+0x4ac>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_UART_RxCpltCallback+0x4b0>)
 8001db4:	6013      	str	r3, [r2, #0]
							flags.cmd = cmdClear;
 8001db6:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_UART_RxCpltCallback+0x4a8>)
 8001db8:	7813      	ldrb	r3, [r2, #0]
 8001dba:	2104      	movs	r1, #4
 8001dbc:	f361 1306 	bfi	r3, r1, #4, #3
 8001dc0:	7013      	strb	r3, [r2, #0]
							flags.cmd_flag = 1;
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_UART_RxCpltCallback+0x4a8>)
 8001dc4:	7813      	ldrb	r3, [r2, #0]
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	7013      	strb	r3, [r2, #0]
						break;
 8001dcc:	e002      	b.n	8001dd4 <HAL_UART_RxCpltCallback+0x42c>
						break;
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <HAL_UART_RxCpltCallback+0x42c>
						break;
 8001dd2:	bf00      	nop
					}
					if (check) {
 8001dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01d      	beq.n	8001e18 <HAL_UART_RxCpltCallback+0x470>
						if ((nandAdr + nandLen) >= (chipConf.PlaneSize + devAdr)) {
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_UART_RxCpltCallback+0x498>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_UART_RxCpltCallback+0x494>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	441a      	add	r2, r3
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_UART_RxCpltCallback+0x4ac>)
 8001dea:	6959      	ldr	r1, [r3, #20]
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_UART_RxCpltCallback+0x4a4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	440b      	add	r3, r1
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d30b      	bcc.n	8001e0e <HAL_UART_RxCpltCallback+0x466>
							nandLen = chipConf.PlaneSize - nandAdr - 1;
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_UART_RxCpltCallback+0x4ac>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_UART_RxCpltCallback+0x494>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_UART_RxCpltCallback+0x498>)
 8001e0c:	801a      	strh	r2, [r3, #0]
						}
						flags.cmd_flag = 1;
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_RxCpltCallback+0x4a8>)
 8001e10:	7813      	ldrb	r3, [r2, #0]
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	7013      	strb	r3, [r2, #0]
					}
				}
			}
			ruk = 0;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_UART_RxCpltCallback+0x4b4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	2100      	movs	r1, #0
 8001e24:	480e      	ldr	r0, [pc, #56]	; (8001e60 <HAL_UART_RxCpltCallback+0x4b8>)
 8001e26:	f009 fc3f 	bl	800b6a8 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	490d      	ldr	r1, [pc, #52]	; (8001e64 <HAL_UART_RxCpltCallback+0x4bc>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f005 fa99 	bl	8007366 <HAL_UART_Receive_IT>
	}
}
 8001e34:	bf00      	nop
 8001e36:	3738      	adds	r7, #56	; 0x38
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000b2c 	.word	0x20000b2c
 8001e40:	20000b30 	.word	0x20000b30
 8001e44:	0800c3b8 	.word	0x0800c3b8
 8001e48:	20000044 	.word	0x20000044
 8001e4c:	20000b28 	.word	0x20000b28
 8001e50:	20000308 	.word	0x20000308
 8001e54:	20000b44 	.word	0x20000b44
 8001e58:	20000b34 	.word	0x20000b34
 8001e5c:	20000b22 	.word	0x20000b22
 8001e60:	20000720 	.word	0x20000720
 8001e64:	20000b20 	.word	0x20000b20

08001e68 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_UART_TxCpltCallback+0x24>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d102      	bne.n	8001e80 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_UART_TxCpltCallback+0x28>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
	}
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40004800 	.word	0x40004800
 8001e90:	20000024 	.word	0x20000024

08001e94 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <HAL_SPI_TxCpltCallback+0x24>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d102      	bne.n	8001eac <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_SPI_TxCpltCallback+0x28>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
	}
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	20000025 	.word	0x20000025

08001ec0 <HAL_NAND_ITCallback>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	if (hnand->Instance == FSMC_NAND_DEVICE) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_NAND_ITCallback+0x28>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d104      	bne.n	8001edc <HAL_NAND_ITCallback+0x1c>
		cb_nandCounter++;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_NAND_ITCallback+0x2c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_NAND_ITCallback+0x2c>)
 8001eda:	6013      	str	r3, [r2, #0]
	}
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	a0000060 	.word	0xa0000060
 8001eec:	20000b38 	.word	0x20000b38

08001ef0 <nand_PageToBlock>:
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(uint32_t page)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <nand_PageToBlock+0x28>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	fb03 f202 	mul.w	r2, r3, r2
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <nand_PageToBlock+0x28>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000b44 	.word	0x20000b44

08001f1c <nand_BlockToPage>:
uint32_t nand_BlockToPage(uint32_t blk)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <nand_BlockToPage+0x28>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	fb03 f202 	mul.w	r2, r3, r2
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <nand_BlockToPage+0x28>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000b44 	.word	0x20000b44

08001f48 <isPageEmpty>:
bool isPageEmpty(uint32_t page)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	return true;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	b0a9      	sub	sp, #164	; 0xa4
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	*(uint8_t *)&flags = 0;
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <defThread+0x138>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]

	char *stx = (char *)calloc(1, MAX_UART_BUF);
 8001f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f72:	2001      	movs	r0, #1
 8001f74:	f009 faa2 	bl	800b4bc <calloc>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef SET_SWV
	char stz[MAX_TMP_SIZE];
#endif


	HAL_Delay(1000);
 8001f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f80:	f001 fc28 	bl	80037d4 <HAL_Delay>
	Report(0, "%s", eol);
 8001f84:	4b45      	ldr	r3, [pc, #276]	; (800209c <defThread+0x13c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4945      	ldr	r1, [pc, #276]	; (80020a0 <defThread+0x140>)
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff fca5 	bl	80018dc <Report>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <defThread+0x144>)
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	f009 f95d 	bl	800b254 <xPortGetFreeHeapSize>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <defThread+0x13c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	9200      	str	r2, [sp, #0]
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <defThread+0x148>)
 8001fac:	4622      	mov	r2, r4
 8001fae:	493f      	ldr	r1, [pc, #252]	; (80020ac <defThread+0x14c>)
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fc93 	bl	80018dc <Report>


	uint8_t next_block_erase = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	bool readed = false;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8001fda:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <defThread+0x150>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d174      	bne.n	80020cc <defThread+0x16c>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <defThread+0x154>)
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	22f1      	movs	r2, #241	; 0xf1
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <defThread+0x9e>
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <defThread+0x158>)
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	f107 0320 	add.w	r3, r7, #32
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f009 fd12 	bl	800ba20 <strncpy>
 8001ffc:	e006      	b.n	800200c <defThread+0xac>
		                               else strcpy(cid, "UNKNOWN");
 8001ffe:	f107 0320 	add.w	r3, r7, #32
 8002002:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <defThread+0x15c>)
 8002004:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002008:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 800200c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200e:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <defThread+0x160>)
 8002010:	6810      	ldr	r0, [r2, #0]
 8002012:	6018      	str	r0, [r3, #0]
 8002014:	8892      	ldrh	r2, [r2, #4]
 8002016:	809a      	strh	r2, [r3, #4]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <defThread+0x154>)
 800201a:	65bb      	str	r3, [r7, #88]	; 0x58
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8002022:	e015      	b.n	8002050 <defThread+0xf0>
 8002024:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002026:	f7fe f8d3 	bl	80001d0 <strlen>
 800202a:	4602      	mov	r2, r0
 800202c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202e:	1898      	adds	r0, r3, r2
 8002030:	f997 3081 	ldrsb.w	r3, [r7, #129]	; 0x81
 8002034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4921      	ldr	r1, [pc, #132]	; (80020c4 <defThread+0x164>)
 800203e:	f009 fcab 	bl	800b998 <siprintf>
 8002042:	f997 3081 	ldrsb.w	r3, [r7, #129]	; 0x81
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8002050:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002054:	2b04      	cmp	r3, #4
 8002056:	d9e5      	bls.n	8002024 <defThread+0xc4>
		sprintf(stx+strlen(stx),
 8002058:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800205a:	f7fe f8b9 	bl	80001d0 <strlen>
 800205e:	4602      	mov	r2, r0
 8002060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002062:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <defThread+0x154>)
 8002066:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8002068:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <defThread+0x154>)
 800206c:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 800206e:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <defThread+0x154>)
 8002072:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8002074:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <defThread+0x154>)
 8002078:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 800207a:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <defThread+0x154>)
 800207e:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 8002080:	9303      	str	r3, [sp, #12]
 8002082:	9102      	str	r1, [sp, #8]
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	462b      	mov	r3, r5
 800208e:	4622      	mov	r2, r4
 8002090:	490d      	ldr	r1, [pc, #52]	; (80020c8 <defThread+0x168>)
 8002092:	f009 fc81 	bl	800b998 <siprintf>
 8002096:	e026      	b.n	80020e6 <defThread+0x186>
 8002098:	20000308 	.word	0x20000308
 800209c:	20000004 	.word	0x20000004
 80020a0:	0800c3bc 	.word	0x0800c3bc
 80020a4:	20000000 	.word	0x20000000
 80020a8:	0800e79c 	.word	0x0800e79c
 80020ac:	0800c3c0 	.word	0x0800c3c0
 80020b0:	20000045 	.word	0x20000045
 80020b4:	20000b3c 	.word	0x20000b3c
 80020b8:	20000048 	.word	0x20000048
 80020bc:	0800c3ec 	.word	0x0800c3ec
 80020c0:	0800c3f4 	.word	0x0800c3f4
 80020c4:	0800c3fc 	.word	0x0800c3fc
 80020c8:	0800c404 	.word	0x0800c404
	} else {
			sprintf(stx,
					"NAND: Error nandStatus='%s'(%d)",
					nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 80020cc:	4ba6      	ldr	r3, [pc, #664]	; (8002368 <defThread+0x408>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx,
 80020d4:	4aa5      	ldr	r2, [pc, #660]	; (800236c <defThread+0x40c>)
 80020d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020da:	4ba3      	ldr	r3, [pc, #652]	; (8002368 <defThread+0x408>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	49a4      	ldr	r1, [pc, #656]	; (8002370 <defThread+0x410>)
 80020e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020e2:	f009 fc59 	bl	800b998 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 80020e6:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <defThread+0x414>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020ec:	49a2      	ldr	r1, [pc, #648]	; (8002378 <defThread+0x418>)
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff fbf4 	bl	80018dc <Report>


	//fntKey = &Font_16x26;
	//tFont = &Font_11x18;
	//ipsOn(0);
	uint16_t err_color = BLACK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 80020fa:	4ba0      	ldr	r3, [pc, #640]	; (800237c <defThread+0x41c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	785b      	ldrb	r3, [r3, #1]
 8002100:	b29b      	uxth	r3, r3
 8002102:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002106:	9200      	str	r2, [sp, #0]
 8002108:	22ef      	movs	r2, #239	; 0xef
 800210a:	2100      	movs	r1, #0
 800210c:	2000      	movs	r0, #0
 800210e:	f000 feaa 	bl	8002e66 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002112:	4b9a      	ldr	r3, [pc, #616]	; (800237c <defThread+0x41c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800211e:	b299      	uxth	r1, r3
 8002120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	23ef      	movs	r3, #239	; 0xef
 8002128:	22ef      	movs	r2, #239	; 0xef
 800212a:	2000      	movs	r0, #0
 800212c:	f000 fe9b 	bl	8002e66 <ST7789_Fill>

	sprintf(stx, "NAND : %s", cid);
 8002130:	f107 0320 	add.w	r3, r7, #32
 8002134:	461a      	mov	r2, r3
 8002136:	4992      	ldr	r1, [pc, #584]	; (8002380 <defThread+0x420>)
 8002138:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800213a:	f009 fc2d 	bl	800b998 <siprintf>
	mkLineCenter(stx, ST7789_WIDTH / tFont->width);
 800213e:	4b91      	ldr	r3, [pc, #580]	; (8002384 <defThread+0x424>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	23f0      	movs	r3, #240	; 0xf0
 8002148:	fb93 f3f2 	sdiv	r3, r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	4619      	mov	r1, r3
 8002150:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002152:	f000 ff95 	bl	8003080 <mkLineCenter>
	//sprintf(stx+strlen(stx), "Maker:0x%02X\nchipID:0x%02X\n3-rd:0x%02X\n4-th:0x%02X\n5-th:0x%02X",
	//		                 nandID.Maker_Id, nandID.Device_Id, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
	sprintf(stx+strlen(stx),
 8002156:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002158:	f7fe f83a 	bl	80001d0 <strlen>
 800215c:	4602      	mov	r2, r0
 800215e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002160:	189c      	adds	r4, r3, r2
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <defThread+0x428>)
 8002164:	681d      	ldr	r5, [r3, #0]
 8002166:	4b88      	ldr	r3, [pc, #544]	; (8002388 <defThread+0x428>)
 8002168:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 800216a:	4b87      	ldr	r3, [pc, #540]	; (8002388 <defThread+0x428>)
 800216c:	689b      	ldr	r3, [r3, #8]
	sprintf(stx+strlen(stx),
 800216e:	0a9b      	lsrs	r3, r3, #10
 8002170:	4a85      	ldr	r2, [pc, #532]	; (8002388 <defThread+0x428>)
 8002172:	68d2      	ldr	r2, [r2, #12]
 8002174:	4984      	ldr	r1, [pc, #528]	; (8002388 <defThread+0x428>)
 8002176:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8002178:	4883      	ldr	r0, [pc, #524]	; (8002388 <defThread+0x428>)
 800217a:	6940      	ldr	r0, [r0, #20]
	sprintf(stx+strlen(stx),
 800217c:	0d00      	lsrs	r0, r0, #20
 800217e:	9003      	str	r0, [sp, #12]
 8002180:	9102      	str	r1, [sp, #8]
 8002182:	9201      	str	r2, [sp, #4]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4633      	mov	r3, r6
 8002188:	462a      	mov	r2, r5
 800218a:	4980      	ldr	r1, [pc, #512]	; (800238c <defThread+0x42c>)
 800218c:	4620      	mov	r0, r4
 800218e:	f009 fc03 	bl	800b998 <siprintf>
	if (cb_nandCounter) sprintf(stx+strlen(stx), "\nCallBack:%lu", cb_nandCounter);
 8002192:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <defThread+0x430>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <defThread+0x252>
 800219a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800219c:	f7fe f818 	bl	80001d0 <strlen>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a4:	4413      	add	r3, r2
 80021a6:	4a7a      	ldr	r2, [pc, #488]	; (8002390 <defThread+0x430>)
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	497a      	ldr	r1, [pc, #488]	; (8002394 <defThread+0x434>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f009 fbf3 	bl	800b998 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 80021b2:	4b74      	ldr	r3, [pc, #464]	; (8002384 <defThread+0x424>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fadd 	bl	8000778 <__aeabi_i2d>
 80021be:	4604      	mov	r4, r0
 80021c0:	460d      	mov	r5, r1
 80021c2:	4b70      	ldr	r3, [pc, #448]	; (8002384 <defThread+0x424>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fad5 	bl	8000778 <__aeabi_i2d>
 80021ce:	a364      	add	r3, pc, #400	; (adr r3, 8002360 <defThread+0x400>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe f854 	bl	8000280 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4620      	mov	r0, r4
 80021de:	4629      	mov	r1, r5
 80021e0:	f7fe f97e 	bl	80004e0 <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fb2e 	bl	800084c <__aeabi_d2uiz>
 80021f0:	4603      	mov	r3, r0
 80021f2:	b298      	uxth	r0, r3
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <defThread+0x424>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	; (8002398 <defThread+0x438>)
 80021fa:	8812      	ldrh	r2, [r2, #0]
 80021fc:	43d2      	mvns	r2, r2
 80021fe:	b292      	uxth	r2, r2
 8002200:	4965      	ldr	r1, [pc, #404]	; (8002398 <defThread+0x438>)
 8002202:	8809      	ldrh	r1, [r1, #0]
 8002204:	9102      	str	r1, [sp, #8]
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	9200      	str	r2, [sp, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002210:	4601      	mov	r1, r0
 8002212:	2000      	movs	r0, #0
 8002214:	f000 fede 	bl	8002fd4 <ST7789_WriteString>
					   stx,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002218:	2001      	movs	r0, #1
 800221a:	f000 fc95 	bl	8002b48 <ipsOn>

	bool led = false;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint32_t tmr = get_tmr(1);
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff fa3d 	bl	80016a4 <get_tmr>
 800222a:	67b8      	str	r0, [r7, #120]	; 0x78

  /* Infinite loop */

  while (1) {

	  if (check_tmr(tmr)) {
 800222c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800222e:	f7ff fa46 	bl	80016be <check_tmr>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d069      	beq.n	800230c <defThread+0x3ac>
		  tmr = get_tmr(1);
 8002238:	2001      	movs	r0, #1
 800223a:	f7ff fa33 	bl	80016a4 <get_tmr>
 800223e:	67b8      	str	r0, [r7, #120]	; 0x78
		  //
		  sec2str(stx);
 8002240:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002242:	f7ff fab3 	bl	80017ac <sec2str>
#ifdef SET_SWV
		  strcpy(stz, stx);
#endif
		  ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002246:	4b4d      	ldr	r3, [pc, #308]	; (800237c <defThread+0x41c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	23f0      	movs	r3, #240	; 0xf0
 8002250:	fb93 f3f2 	sdiv	r3, r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	4619      	mov	r1, r3
 8002258:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800225a:	f000 ff11 	bl	8003080 <mkLineCenter>
 800225e:	4601      	mov	r1, r0
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <defThread+0x41c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002268:	9202      	str	r2, [sp, #8]
 800226a:	221f      	movs	r2, #31
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	9200      	str	r2, [sp, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	460a      	mov	r2, r1
 8002276:	2100      	movs	r1, #0
 8002278:	2008      	movs	r0, #8
 800227a:	f000 feab 	bl	8002fd4 <ST7789_WriteString>

		  sprintf(stx, "Error: 0x%04X", (unsigned int)devError);
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <defThread+0x43c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4946      	ldr	r1, [pc, #280]	; (80023a0 <defThread+0x440>)
 8002286:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002288:	f009 fb86 	bl	800b998 <siprintf>
		  if (devError) err_color = RED; else err_color = BLACK;
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <defThread+0x43c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <defThread+0x33e>
 8002294:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002298:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800229c:	e002      	b.n	80022a4 <defThread+0x344>
 800229e:	2300      	movs	r3, #0
 80022a0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		  ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <defThread+0x41c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80022b0:	b29c      	uxth	r4, r3
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <defThread+0x41c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	23f0      	movs	r3, #240	; 0xf0
 80022bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022c6:	f000 fedb 	bl	8003080 <mkLineCenter>
 80022ca:	4601      	mov	r1, r0
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <defThread+0x41c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	460a      	mov	r2, r1
 80022e4:	4621      	mov	r1, r4
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 fe74 	bl	8002fd4 <ST7789_WriteString>
#ifdef SET_SWV
		  //puts("Second...");
		  printf("[%s] %s%s", __func__, stz, eol);
#endif
		  //
		  if (devError) led = true; else led = false;
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <defThread+0x43c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <defThread+0x39c>
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80022fa:	e002      	b.n	8002302 <defThread+0x3a2>
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		  errLedOn(led);
 8002302:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f976 	bl	80015f8 <errLedOn>

	  }


	  if (flags.restart) {
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <defThread+0x444>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00e      	beq.n	8002338 <defThread+0x3d8>
		  flags.restart = 0;
 800231a:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <defThread+0x444>)
 800231c:	7813      	ldrb	r3, [r2, #0]
 800231e:	f36f 0300 	bfc	r3, #0, #1
 8002322:	7013      	strb	r3, [r2, #0]
		  break;
 8002324:	bf00      	nop
	  }
	  //
	  osDelay(10);
  }

  ipsOn(0);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 fc0e 	bl	8002b48 <ipsOn>

  if (wrBuf) free(wrBuf);
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <defThread+0x448>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8290 	beq.w	8002856 <defThread+0x8f6>
 8002336:	e289      	b.n	800284c <defThread+0x8ec>
	  } else if (flags.time_set) {
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <defThread+0x444>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d034      	beq.n	80023b0 <defThread+0x450>
		  flags.time_set = 0;
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <defThread+0x444>)
 8002348:	7813      	ldrb	r3, [r2, #0]
 800234a:	f36f 0341 	bfc	r3, #1, #1
 800234e:	7013      	strb	r3, [r2, #0]
		  set_Date(epoch);
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <defThread+0x44c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f9c3 	bl	80016e0 <set_Date>
 800235a:	e225      	b.n	80027a8 <defThread+0x848>
 800235c:	f3af 8000 	nop.w
 8002360:	33333333 	.word	0x33333333
 8002364:	3feb3333 	.word	0x3feb3333
 8002368:	20000045 	.word	0x20000045
 800236c:	2000004c 	.word	0x2000004c
 8002370:	0800c458 	.word	0x0800c458
 8002374:	20000004 	.word	0x20000004
 8002378:	0800c478 	.word	0x0800c478
 800237c:	2000003c 	.word	0x2000003c
 8002380:	0800c480 	.word	0x0800c480
 8002384:	20000040 	.word	0x20000040
 8002388:	20000b44 	.word	0x20000b44
 800238c:	0800c48c 	.word	0x0800c48c
 8002390:	20000b38 	.word	0x20000b38
 8002394:	0800c4e8 	.word	0x0800c4e8
 8002398:	20000b26 	.word	0x20000b26
 800239c:	2000030c 	.word	0x2000030c
 80023a0:	0800c4f8 	.word	0x0800c4f8
 80023a4:	20000308 	.word	0x20000308
 80023a8:	20000b60 	.word	0x20000b60
 80023ac:	20000028 	.word	0x20000028
	  } else if (flags.time_show) {
 80023b0:	4ba3      	ldr	r3, [pc, #652]	; (8002640 <defThread+0x6e0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00f      	beq.n	80023de <defThread+0x47e>
		  flags.time_show = 0;
 80023be:	4aa0      	ldr	r2, [pc, #640]	; (8002640 <defThread+0x6e0>)
 80023c0:	7813      	ldrb	r3, [r2, #0]
 80023c2:	f36f 0382 	bfc	r3, #2, #1
 80023c6:	7013      	strb	r3, [r2, #0]
		  sec2str(stx);
 80023c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023ca:	f7ff f9ef 	bl	80017ac <sec2str>
		  Report(0, "Current date&time -> %s%s", stx, eol);
 80023ce:	4b9d      	ldr	r3, [pc, #628]	; (8002644 <defThread+0x6e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023d4:	499c      	ldr	r1, [pc, #624]	; (8002648 <defThread+0x6e8>)
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff fa80 	bl	80018dc <Report>
 80023dc:	e1e4      	b.n	80027a8 <defThread+0x848>
	  } else if (flags.cmd_flag) {
 80023de:	4b98      	ldr	r3, [pc, #608]	; (8002640 <defThread+0x6e0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 81dd 	beq.w	80027a8 <defThread+0x848>
		  flags.cmd_flag = 0;
 80023ee:	4a94      	ldr	r2, [pc, #592]	; (8002640 <defThread+0x6e0>)
 80023f0:	7813      	ldrb	r3, [r2, #0]
 80023f2:	f36f 03c3 	bfc	r3, #3, #1
 80023f6:	7013      	strb	r3, [r2, #0]
		  nand_show = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		  switch (flags.cmd) {
 80023fe:	4b90      	ldr	r3, [pc, #576]	; (8002640 <defThread+0x6e0>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b04      	cmp	r3, #4
 800240a:	f200 8142 	bhi.w	8002692 <defThread+0x732>
 800240e:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <defThread+0x4b4>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	08002429 	.word	0x08002429
 8002418:	080024b7 	.word	0x080024b7
 800241c:	08002569 	.word	0x08002569
 8002420:	080024e3 	.word	0x080024e3
 8002424:	0800254b 	.word	0x0800254b
		  		  uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8002428:	4b88      	ldr	r3, [pc, #544]	; (800264c <defThread+0x6ec>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <defThread+0x6f0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1ad2      	subs	r2, r2, r3
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <defThread+0x6f4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  		  NAND_AddressTypeDef addr = {
 800243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243e:	b29b      	uxth	r3, r3
 8002440:	833b      	strh	r3, [r7, #24]
 8002442:	2301      	movs	r3, #1
 8002444:	837b      	strh	r3, [r7, #26]
					  .Block = nand_PageToBlock(p)
 8002446:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002448:	f7ff fd52 	bl	8001ef0 <nand_PageToBlock>
 800244c:	4603      	mov	r3, r0
		  		  NAND_AddressTypeDef addr = {
 800244e:	b29b      	uxth	r3, r3
 8002450:	83bb      	strh	r3, [r7, #28]
		  		  Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002452:	4b7e      	ldr	r3, [pc, #504]	; (800264c <defThread+0x6ec>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b80      	ldr	r3, [pc, #512]	; (8002658 <defThread+0x6f8>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	461c      	mov	r4, r3
		  				    nandAdr, nandLen, addr.Page, addr.Block, eol);
 800245c:	8b3b      	ldrh	r3, [r7, #24]
		  		  Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800245e:	4619      	mov	r1, r3
		  				    nandAdr, nandLen, addr.Page, addr.Block, eol);
 8002460:	8bbb      	ldrh	r3, [r7, #28]
		  		  Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002462:	4618      	mov	r0, r3
 8002464:	4b77      	ldr	r3, [pc, #476]	; (8002644 <defThread+0x6e4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	9001      	str	r0, [sp, #4]
 800246c:	9100      	str	r1, [sp, #0]
 800246e:	4623      	mov	r3, r4
 8002470:	497a      	ldr	r1, [pc, #488]	; (800265c <defThread+0x6fc>)
 8002472:	2001      	movs	r0, #1
 8002474:	f7ff fa32 	bl	80018dc <Report>
		  		  if (rdBuf) {
 8002478:	4b79      	ldr	r3, [pc, #484]	; (8002660 <defThread+0x700>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80dc 	beq.w	800263a <defThread+0x6da>
		  			  if (HAL_NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 8002482:	4b78      	ldr	r3, [pc, #480]	; (8002664 <defThread+0x704>)
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	4b76      	ldr	r3, [pc, #472]	; (8002660 <defThread+0x700>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f107 0118 	add.w	r1, r7, #24
 800248e:	2301      	movs	r3, #1
 8002490:	f002 f999 	bl	80047c6 <HAL_NAND_Read_Page_8b>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <defThread+0x548>
		  				  nand_show = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		  				  readed = true;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		  	  break;
 80024a6:	e0c8      	b.n	800263a <defThread+0x6da>
		  			  } else devError |= devNAND;
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <defThread+0x708>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f043 0306 	orr.w	r3, r3, #6
 80024b0:	4a6d      	ldr	r2, [pc, #436]	; (8002668 <defThread+0x708>)
 80024b2:	6013      	str	r3, [r2, #0]
		  	  break;
 80024b4:	e0c1      	b.n	800263a <defThread+0x6da>
		  		  Report(1, "Read next nand adr:0x%X len:%lu%s",
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <defThread+0x6ec>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <defThread+0x6f8>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	4b60      	ldr	r3, [pc, #384]	; (8002644 <defThread+0x6e4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	460b      	mov	r3, r1
 80024c8:	4968      	ldr	r1, [pc, #416]	; (800266c <defThread+0x70c>)
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff fa06 	bl	80018dc <Report>
		  		  if (rdBuf) nand_show = 2;
 80024d0:	4b63      	ldr	r3, [pc, #396]	; (8002660 <defThread+0x700>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80db 	beq.w	8002690 <defThread+0x730>
 80024da:	2302      	movs	r3, #2
 80024dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		  	  break;
 80024e0:	e0d6      	b.n	8002690 <defThread+0x730>
		  			  .Page = nand_BlockToPage(nandBlk),
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <defThread+0x710>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd18 	bl	8001f1c <nand_BlockToPage>
 80024ec:	4603      	mov	r3, r0
		  		  NAND_AddressTypeDef addr = {
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	823b      	strh	r3, [r7, #16]
 80024f2:	2301      	movs	r3, #1
 80024f4:	827b      	strh	r3, [r7, #18]
 80024f6:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <defThread+0x710>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	82bb      	strh	r3, [r7, #20]
		  		  Report(1, "Erase nand block:%lu... ", addr.Block);
 80024fe:	8abb      	ldrh	r3, [r7, #20]
 8002500:	461a      	mov	r2, r3
 8002502:	495c      	ldr	r1, [pc, #368]	; (8002674 <defThread+0x714>)
 8002504:	2001      	movs	r0, #1
 8002506:	f7ff f9e9 	bl	80018dc <Report>
		  		  uint32_t stik = HAL_GetTick();
 800250a:	f001 f957 	bl	80037bc <HAL_GetTick>
 800250e:	6578      	str	r0, [r7, #84]	; 0x54
		  		  if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 8002510:	4b54      	ldr	r3, [pc, #336]	; (8002664 <defThread+0x704>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f107 0210 	add.w	r2, r7, #16
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fb9f 	bl	8004c5e <HAL_NAND_Erase_Block>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <defThread+0x5d2>
 8002526:	4b50      	ldr	r3, [pc, #320]	; (8002668 <defThread+0x708>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f043 0306 	orr.w	r3, r3, #6
 800252e:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <defThread+0x708>)
 8002530:	6013      	str	r3, [r2, #0]
		  		  Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 8002532:	f001 f943 	bl	80037bc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <defThread+0x6e4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <defThread+0x718>)
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff f9ca 	bl	80018dc <Report>
		  	  break;
 8002548:	e0a3      	b.n	8002692 <defThread+0x732>
		  		  iBlk = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  		  Report(1, "Erase chip ");
 8002550:	494a      	ldr	r1, [pc, #296]	; (800267c <defThread+0x71c>)
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff f9c2 	bl	80018dc <Report>
		  		  next_block_erase = 1;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  		  stik = HAL_GetTick();
 800255e:	f001 f92d 	bl	80037bc <HAL_GetTick>
 8002562:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  break;
 8002566:	e094      	b.n	8002692 <defThread+0x732>
		  	      uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <defThread+0x6ec>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b38      	ldr	r3, [pc, #224]	; (8002650 <defThread+0x6f0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <defThread+0x6f4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	653b      	str	r3, [r7, #80]	; 0x50
		  		  NAND_AddressTypeDef addr = {
 800257c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	817b      	strh	r3, [r7, #10]
						  .Block = nand_PageToBlock(p)
 8002586:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002588:	f7ff fcb2 	bl	8001ef0 <nand_PageToBlock>
 800258c:	4603      	mov	r3, r0
		  		  NAND_AddressTypeDef addr = {
 800258e:	b29b      	uxth	r3, r3
 8002590:	81bb      	strh	r3, [r7, #12]
		  		  Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <defThread+0x6ec>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <defThread+0x720>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461d      	mov	r5, r3
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <defThread+0x6f8>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
		  				  	nandAdr, nandByte, nandLen, addr.Page, addr.Block, eol);
 80025a2:	893b      	ldrh	r3, [r7, #8]
		  		  Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80025a4:	4618      	mov	r0, r3
		  				  	nandAdr, nandByte, nandLen, addr.Page, addr.Block, eol);
 80025a6:	89bb      	ldrh	r3, [r7, #12]
		  		  Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80025a8:	461c      	mov	r4, r3
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <defThread+0x6e4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	9303      	str	r3, [sp, #12]
 80025b0:	9402      	str	r4, [sp, #8]
 80025b2:	9001      	str	r0, [sp, #4]
 80025b4:	9100      	str	r1, [sp, #0]
 80025b6:	462b      	mov	r3, r5
 80025b8:	4932      	ldr	r1, [pc, #200]	; (8002684 <defThread+0x724>)
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff f98e 	bl	80018dc <Report>
		  		  if (wrBuf) {
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <defThread+0x728>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d030      	beq.n	800262a <defThread+0x6ca>
		  			  if (isPageEmpty(addr.Page)) {
 80025c8:	893b      	ldrh	r3, [r7, #8]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fcbc 	bl	8001f48 <isPageEmpty>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d029      	beq.n	800262a <defThread+0x6ca>
		  				  memset(wrBuf, nandByte, nandLen);
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <defThread+0x728>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a29      	ldr	r2, [pc, #164]	; (8002680 <defThread+0x720>)
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	4611      	mov	r1, r2
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <defThread+0x6f8>)
 80025e2:	8812      	ldrh	r2, [r2, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f009 f85f 	bl	800b6a8 <memset>
		  				  memset(wrBuf + nandLen, 0xff, chipConf.PageSize - nandLen);
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <defThread+0x728>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <defThread+0x6f8>)
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	1898      	adds	r0, r3, r2
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <defThread+0x6f4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a17      	ldr	r2, [pc, #92]	; (8002658 <defThread+0x6f8>)
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	461a      	mov	r2, r3
 8002600:	21ff      	movs	r1, #255	; 0xff
 8002602:	f009 f851 	bl	800b6a8 <memset>
		  				  if (HAL_NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <defThread+0x704>)
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <defThread+0x728>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	f107 0108 	add.w	r1, r7, #8
 8002612:	2301      	movs	r3, #1
 8002614:	f002 f9fe 	bl	8004a14 <HAL_NAND_Write_Page_8b>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <defThread+0x6ca>
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <defThread+0x708>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f043 0306 	orr.w	r3, r3, #6
 8002626:	4a10      	ldr	r2, [pc, #64]	; (8002668 <defThread+0x708>)
 8002628:	6013      	str	r3, [r2, #0]
		  		  Report(0, "done%s", eol);
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <defThread+0x6e4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <defThread+0x72c>)
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff f952 	bl	80018dc <Report>
		  	  break;
 8002638:	e02b      	b.n	8002692 <defThread+0x732>
		  	  break;
 800263a:	bf00      	nop
 800263c:	e029      	b.n	8002692 <defThread+0x732>
 800263e:	bf00      	nop
 8002640:	20000308 	.word	0x20000308
 8002644:	20000004 	.word	0x20000004
 8002648:	0800c508 	.word	0x0800c508
 800264c:	20000b2c 	.word	0x20000b2c
 8002650:	20000b28 	.word	0x20000b28
 8002654:	20000b44 	.word	0x20000b44
 8002658:	20000b30 	.word	0x20000b30
 800265c:	0800c524 	.word	0x0800c524
 8002660:	20000b5c 	.word	0x20000b5c
 8002664:	20000038 	.word	0x20000038
 8002668:	2000030c 	.word	0x2000030c
 800266c:	0800c554 	.word	0x0800c554
 8002670:	20000b34 	.word	0x20000b34
 8002674:	0800c578 	.word	0x0800c578
 8002678:	0800c594 	.word	0x0800c594
 800267c:	0800c5a4 	.word	0x0800c5a4
 8002680:	20000044 	.word	0x20000044
 8002684:	0800c5b0 	.word	0x0800c5b0
 8002688:	20000b60 	.word	0x20000b60
 800268c:	0800c5f0 	.word	0x0800c5f0
		  	  break;
 8002690:	bf00      	nop
		  if (nand_show) {
 8002692:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8086 	beq.w	80027a8 <defThread+0x848>
			  uint32_t adr = nandAdr;
 800269c:	4b81      	ldr	r3, [pc, #516]	; (80028a4 <defThread+0x944>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	677b      	str	r3, [r7, #116]	; 0x74
			  int step = 32;
 80026a2:	2320      	movs	r3, #32
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
			  uint32_t ind = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	673b      	str	r3, [r7, #112]	; 0x70
			  uint32_t max_ind = nandLen;
 80026aa:	4b7f      	ldr	r3, [pc, #508]	; (80028a8 <defThread+0x948>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	66fb      	str	r3, [r7, #108]	; 0x6c
			  if (nand_show == 2) {
 80026b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d10f      	bne.n	80026d8 <defThread+0x778>
				  if (readed) {
 80026b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <defThread+0x774>
					  ind = adr & (chipConf.PageSize - 1);// - devAdr;
 80026c0:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <defThread+0x94c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026c8:	4013      	ands	r3, r2
 80026ca:	673b      	str	r3, [r7, #112]	; 0x70
					  max_ind = chipConf.PageSize;
 80026cc:	4b77      	ldr	r3, [pc, #476]	; (80028ac <defThread+0x94c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026d2:	e001      	b.n	80026d8 <defThread+0x778>
				  } else ind = max_ind;
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
			  if (ind < max_ind) {
 80026d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80026da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026dc:	429a      	cmp	r2, r3
 80026de:	d257      	bcs.n	8002790 <defThread+0x830>
				  bool done = false;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				  uint32_t sch = nandLen / step;
 80026e6:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <defThread+0x948>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80026f2:	667b      	str	r3, [r7, #100]	; 0x64
				  stx[0] = '\0';
 80026f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
				  while (!done) {
 80026fa:	e03c      	b.n	8002776 <defThread+0x816>
					  sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80026fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026fe:	f7fd fd67 	bl	80001d0 <strlen>
 8002702:	4602      	mov	r2, r0
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	4413      	add	r3, r2
 8002708:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800270a:	4969      	ldr	r1, [pc, #420]	; (80028b0 <defThread+0x950>)
 800270c:	4618      	mov	r0, r3
 800270e:	f009 f943 	bl	800b998 <siprintf>
					  for (int i = 0; i < step; i++) sprintf(stx+strlen(stx), " %02X", rdBuf[i + ind]);
 8002712:	2300      	movs	r3, #0
 8002714:	663b      	str	r3, [r7, #96]	; 0x60
 8002716:	e013      	b.n	8002740 <defThread+0x7e0>
 8002718:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800271a:	f7fd fd59 	bl	80001d0 <strlen>
 800271e:	4602      	mov	r2, r0
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	1898      	adds	r0, r3, r2
 8002724:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <defThread+0x954>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800272a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272c:	440b      	add	r3, r1
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4960      	ldr	r1, [pc, #384]	; (80028b8 <defThread+0x958>)
 8002736:	f009 f92f 	bl	800b998 <siprintf>
 800273a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800273c:	3301      	adds	r3, #1
 800273e:	663b      	str	r3, [r7, #96]	; 0x60
 8002740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002744:	429a      	cmp	r2, r3
 8002746:	dbe7      	blt.n	8002718 <defThread+0x7b8>
					  strcat(stx, eol);
 8002748:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <defThread+0x95c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002750:	f009 f942 	bl	800b9d8 <strcat>
					  adr += step;
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002758:	4413      	add	r3, r2
 800275a:	677b      	str	r3, [r7, #116]	; 0x74
					  ind += step;
 800275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002760:	4413      	add	r3, r2
 8002762:	673b      	str	r3, [r7, #112]	; 0x70
					  sch--;
 8002764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002766:	3b01      	subs	r3, #1
 8002768:	667b      	str	r3, [r7, #100]	; 0x64
					  if (!sch) done = true;
 800276a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <defThread+0x816>
 8002770:	2301      	movs	r3, #1
 8002772:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				  while (!done) {
 8002776:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1bb      	bne.n	80026fc <defThread+0x79c>
				  Report(0, "%s", stx);
 8002784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002786:	494e      	ldr	r1, [pc, #312]	; (80028c0 <defThread+0x960>)
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff f8a7 	bl	80018dc <Report>
 800278e:	e00b      	b.n	80027a8 <defThread+0x848>
				  Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, readed, eol);
 8002790:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8002794:	4a49      	ldr	r2, [pc, #292]	; (80028bc <defThread+0x95c>)
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	9201      	str	r2, [sp, #4]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80027a0:	4948      	ldr	r1, [pc, #288]	; (80028c4 <defThread+0x964>)
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff f89a 	bl	80018dc <Report>
	  if (next_block_erase) {
 80027a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d049      	beq.n	8002844 <defThread+0x8e4>
		  clr.Block = iBlk;
 80027b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		  iBlk++;
 80027ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027be:	3301      	adds	r3, #1
 80027c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  if (HAL_NAND_Erase_Block(nandPort, &clr) != HAL_OK) {
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <defThread+0x968>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fa45 	bl	8004c5e <HAL_NAND_Erase_Block>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <defThread+0x88e>
			  devError |= devNAND;
 80027da:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <defThread+0x96c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f043 0306 	orr.w	r3, r3, #6
 80027e2:	4a3a      	ldr	r2, [pc, #232]	; (80028cc <defThread+0x96c>)
 80027e4:	6013      	str	r3, [r2, #0]
			  next_block_erase = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80027ec:	e012      	b.n	8002814 <defThread+0x8b4>
			  if (!(iBlk % 16)) Report(0, ".");
 80027ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <defThread+0x8a2>
 80027fa:	4935      	ldr	r1, [pc, #212]	; (80028d0 <defThread+0x970>)
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7ff f86d 	bl	80018dc <Report>
			  if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <defThread+0x94c>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <defThread+0x8b4>
 800280e:	2300      	movs	r3, #0
 8002810:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  if (!next_block_erase) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8002814:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002818:	2b00      	cmp	r3, #0
 800281a:	d113      	bne.n	8002844 <defThread+0x8e4>
 800281c:	f000 ffce 	bl	80037bc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <defThread+0x974>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	099a      	lsrs	r2, r3, #6
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <defThread+0x95c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800283c:	4926      	ldr	r1, [pc, #152]	; (80028d8 <defThread+0x978>)
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff f84c 	bl	80018dc <Report>
	  osDelay(10);
 8002844:	200a      	movs	r0, #10
 8002846:	f005 ffd1 	bl	80087ec <osDelay>
	  if (check_tmr(tmr)) {
 800284a:	e4ef      	b.n	800222c <defThread+0x2cc>
  if (wrBuf) free(wrBuf);
 800284c:	4b23      	ldr	r3, [pc, #140]	; (80028dc <defThread+0x97c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f008 ff13 	bl	800b67c <free>
  if (rdBuf) free(rdBuf);
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <defThread+0x954>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <defThread+0x908>
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <defThread+0x954>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f008 ff0a 	bl	800b67c <free>
  if (stx) free(stx);
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <defThread+0x914>
 800286e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002870:	f008 ff04 	bl	800b67c <free>


  Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <defThread+0x980>)
 8002876:	681c      	ldr	r4, [r3, #0]
 8002878:	f008 fcec 	bl	800b254 <xPortGetFreeHeapSize>
 800287c:	4602      	mov	r2, r0
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <defThread+0x95c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <defThread+0x984>)
 800288e:	4622      	mov	r2, r4
 8002890:	4915      	ldr	r1, [pc, #84]	; (80028e8 <defThread+0x988>)
 8002892:	2001      	movs	r0, #1
 8002894:	f7ff f822 	bl	80018dc <Report>
  osDelay(250);
 8002898:	20fa      	movs	r0, #250	; 0xfa
 800289a:	f005 ffa7 	bl	80087ec <osDelay>

  NVIC_SystemReset();
 800289e:	f7fe f9c7 	bl	8000c30 <__NVIC_SystemReset>
 80028a2:	bf00      	nop
 80028a4:	20000b2c 	.word	0x20000b2c
 80028a8:	20000b30 	.word	0x20000b30
 80028ac:	20000b44 	.word	0x20000b44
 80028b0:	0800c5f8 	.word	0x0800c5f8
 80028b4:	20000b5c 	.word	0x20000b5c
 80028b8:	0800c3fc 	.word	0x0800c3fc
 80028bc:	20000004 	.word	0x20000004
 80028c0:	0800c3bc 	.word	0x0800c3bc
 80028c4:	0800c600 	.word	0x0800c600
 80028c8:	20000038 	.word	0x20000038
 80028cc:	2000030c 	.word	0x2000030c
 80028d0:	0800c628 	.word	0x0800c628
 80028d4:	10624dd3 	.word	0x10624dd3
 80028d8:	0800c62c 	.word	0x0800c62c
 80028dc:	20000b60 	.word	0x20000b60
 80028e0:	20000000 	.word	0x20000000
 80028e4:	0800e79c 	.word	0x0800e79c
 80028e8:	0800c644 	.word	0x0800c644

080028ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b5b0      	push	{r4, r5, r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d102      	bne.n	8002904 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80028fe:	f000 ff49 	bl	8003794 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8002902:	e016      	b.n	8002932 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d111      	bne.n	8002932 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 800290e:	f7fe fea9 	bl	8001664 <get_msCounter>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	f002 0403 	and.w	r4, r2, #3
 800291a:	2500      	movs	r5, #0
 800291c:	1ee3      	subs	r3, r4, #3
 800291e:	432b      	orrs	r3, r5
 8002920:	d105      	bne.n	800292e <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8002922:	f7fe fe91 	bl	8001648 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800292a:	f001 fe10 	bl	800454e <HAL_GPIO_TogglePin>
	  inc_msCounter();
 800292e:	f7fe fea7 	bl	8001680 <inc_msCounter>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bdb0      	pop	{r4, r5, r7, pc}
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40020800 	.word	0x40020800

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 800295e:	2200      	movs	r2, #0
 8002960:	2104      	movs	r1, #4
 8002962:	480b      	ldr	r0, [pc, #44]	; (8002990 <ST7789_WriteCommand+0x3c>)
 8002964:	f001 fdda 	bl	800451c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <ST7789_WriteCommand+0x40>)
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	2396      	movs	r3, #150	; 0x96
 800296e:	1df9      	adds	r1, r7, #7
 8002970:	2201      	movs	r2, #1
 8002972:	f003 fbc2 	bl	80060fa <HAL_SPI_Transmit>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <ST7789_WriteCommand+0x34>
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <ST7789_WriteCommand+0x44>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f043 0305 	orr.w	r3, r3, #5
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <ST7789_WriteCommand+0x44>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40020000 	.word	0x40020000
 8002994:	2000002c 	.word	0x2000002c
 8002998:	2000030c 	.word	0x2000030c

0800299c <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 80029a6:	2200      	movs	r2, #0
 80029a8:	2104      	movs	r1, #4
 80029aa:	480e      	ldr	r0, [pc, #56]	; (80029e4 <ST7789_WriteCommands+0x48>)
 80029ac:	f001 fdb6 	bl	800451c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 80029b0:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <ST7789_WriteCommands+0x4c>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	2196      	movs	r1, #150	; 0x96
 80029ba:	460b      	mov	r3, r1
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	f003 fb99 	bl	80060fa <HAL_SPI_Transmit>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <ST7789_WriteCommands+0x3e>
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <ST7789_WriteCommands+0x50>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f043 0305 	orr.w	r3, r3, #5
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <ST7789_WriteCommands+0x50>)
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40020000 	.word	0x40020000
 80029e8:	2000002c 	.word	0x2000002c
 80029ec:	2000030c 	.word	0x2000030c

080029f0 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80029fe:	2201      	movs	r2, #1
 8002a00:	2104      	movs	r1, #4
 8002a02:	481e      	ldr	r0, [pc, #120]	; (8002a7c <ST7789_WriteData+0x8c>)
 8002a04:	f001 fd8a 	bl	800451c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8002a08:	e028      	b.n	8002a5c <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf28      	it	cs
 8002a14:	4613      	movcs	r3, r2
 8002a16:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <ST7789_WriteData+0x90>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <ST7789_WriteData+0x94>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	89ba      	ldrh	r2, [r7, #12]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fca4 	bl	8006374 <HAL_SPI_Transmit_DMA>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002a36:	e002      	b.n	8002a3e <ST7789_WriteData+0x4e>
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f000 fecb 	bl	80037d4 <HAL_Delay>
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <ST7789_WriteData+0x90>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f5      	bne.n	8002a38 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8002a4c:	89bb      	ldrh	r3, [r7, #12]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1d3      	bne.n	8002a0a <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <ST7789_WriteData+0x84>
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <ST7789_WriteData+0x98>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f043 0305 	orr.w	r3, r3, #5
 8002a70:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <ST7789_WriteData+0x98>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	20000025 	.word	0x20000025
 8002a84:	2000002c 	.word	0x2000002c
 8002a88:	2000030c 	.word	0x2000030c

08002a8c <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	4814      	ldr	r0, [pc, #80]	; (8002af0 <ST7789_WriteDataLine+0x64>)
 8002aa0:	f001 fd3c 	bl	800451c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <ST7789_WriteDataLine+0x68>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <ST7789_WriteDataLine+0x6c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fc5d 	bl	8006374 <HAL_SPI_Transmit_DMA>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002abe:	e002      	b.n	8002ac6 <ST7789_WriteDataLine+0x3a>
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f000 fe87 	bl	80037d4 <HAL_Delay>
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <ST7789_WriteDataLine+0x68>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f5      	bne.n	8002ac0 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <ST7789_WriteDataLine+0x5a>
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <ST7789_WriteDataLine+0x70>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f043 0305 	orr.w	r3, r3, #5
 8002ae2:	4a06      	ldr	r2, [pc, #24]	; (8002afc <ST7789_WriteDataLine+0x70>)
 8002ae4:	6013      	str	r3, [r2, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020000 	.word	0x40020000
 8002af4:	20000025 	.word	0x20000025
 8002af8:	2000002c 	.word	0x2000002c
 8002afc:	2000030c 	.word	0x2000030c

08002b00 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	480b      	ldr	r0, [pc, #44]	; (8002b3c <ST7789_WriteSmallData+0x3c>)
 8002b10:	f001 fd04 	bl	800451c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <ST7789_WriteSmallData+0x40>)
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	2396      	movs	r3, #150	; 0x96
 8002b1a:	1df9      	adds	r1, r7, #7
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f003 faec 	bl	80060fa <HAL_SPI_Transmit>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <ST7789_WriteSmallData+0x34>
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <ST7789_WriteSmallData+0x44>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f043 0305 	orr.w	r3, r3, #5
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <ST7789_WriteSmallData+0x44>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	2000002c 	.word	0x2000002c
 8002b44:	2000030c 	.word	0x2000030c

08002b48 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <ipsOn+0x18>
 8002b58:	2029      	movs	r0, #41	; 0x29
 8002b5a:	f7ff fefb 	bl	8002954 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8002b5e:	e002      	b.n	8002b66 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8002b60:	2028      	movs	r0, #40	; 0x28
 8002b62:	f7ff fef7 	bl	8002954 <ST7789_WriteCommand>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002b7a:	2036      	movs	r0, #54	; 0x36
 8002b7c:	f7ff feea 	bl	8002954 <ST7789_WriteCommand>
	switch (m) {
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d81a      	bhi.n	8002bbc <ST7789_SetRotation+0x4c>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <ST7789_SetRotation+0x1c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002ba5 	.word	0x08002ba5
 8002b94:	08002bad 	.word	0x08002bad
 8002b98:	08002bb5 	.word	0x08002bb5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002b9c:	20c0      	movs	r0, #192	; 0xc0
 8002b9e:	f7ff ffaf 	bl	8002b00 <ST7789_WriteSmallData>
		break;
 8002ba2:	e00c      	b.n	8002bbe <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002ba4:	20a0      	movs	r0, #160	; 0xa0
 8002ba6:	f7ff ffab 	bl	8002b00 <ST7789_WriteSmallData>
		break;
 8002baa:	e008      	b.n	8002bbe <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7ff ffa7 	bl	8002b00 <ST7789_WriteSmallData>
		break;
 8002bb2:	e004      	b.n	8002bbe <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002bb4:	2060      	movs	r0, #96	; 0x60
 8002bb6:	f7ff ffa3 	bl	8002b00 <ST7789_WriteSmallData>
		break;
 8002bba:	e000      	b.n	8002bbe <ST7789_SetRotation+0x4e>
	default:
		break;
 8002bbc:	bf00      	nop
	}
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop

08002bc8 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4604      	mov	r4, r0
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	80fb      	strh	r3, [r7, #6]
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80bb      	strh	r3, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	807b      	strh	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	82fb      	strh	r3, [r7, #22]
 8002bea:	887b      	ldrh	r3, [r7, #2]
 8002bec:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002bee:	88bb      	ldrh	r3, [r7, #4]
 8002bf0:	827b      	strh	r3, [r7, #18]
 8002bf2:	883b      	ldrh	r3, [r7, #0]
 8002bf4:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002bf6:	202a      	movs	r0, #42	; 0x2a
 8002bf8:	f7ff feac 	bl	8002954 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002bfc:	8afb      	ldrh	r3, [r7, #22]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	733b      	strb	r3, [r7, #12]
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	737b      	strb	r3, [r7, #13]
 8002c0c:	8abb      	ldrh	r3, [r7, #20]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	73bb      	strb	r3, [r7, #14]
 8002c16:	8abb      	ldrh	r3, [r7, #20]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	2104      	movs	r1, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fee4 	bl	80029f0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002c28:	202b      	movs	r0, #43	; 0x2b
 8002c2a:	f7ff fe93 	bl	8002954 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002c2e:	8a7b      	ldrh	r3, [r7, #18]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	723b      	strb	r3, [r7, #8]
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	727b      	strb	r3, [r7, #9]
 8002c3e:	8a3b      	ldrh	r3, [r7, #16]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	72bb      	strb	r3, [r7, #10]
 8002c48:	8a3b      	ldrh	r3, [r7, #16]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	2104      	movs	r1, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fecb 	bl	80029f0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002c5a:	202c      	movs	r0, #44	; 0x2c
 8002c5c:	f7ff fe7a 	bl	8002954 <ST7789_WriteCommand>
}
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd90      	pop	{r4, r7, pc}

08002c68 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8002c6c:	2014      	movs	r0, #20
 8002c6e:	f000 fdb1 	bl	80037d4 <HAL_Delay>
    ST7789_RST_Clr();
 8002c72:	2200      	movs	r2, #0
 8002c74:	2102      	movs	r1, #2
 8002c76:	4808      	ldr	r0, [pc, #32]	; (8002c98 <ST7789_Reset+0x30>)
 8002c78:	f001 fc50 	bl	800451c <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8002c7c:	200a      	movs	r0, #10
 8002c7e:	f000 fda9 	bl	80037d4 <HAL_Delay>
    ST7789_RST_Set();
 8002c82:	2201      	movs	r2, #1
 8002c84:	2102      	movs	r1, #2
 8002c86:	4804      	ldr	r0, [pc, #16]	; (8002c98 <ST7789_Reset+0x30>)
 8002c88:	f001 fc48 	bl	800451c <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8002c8c:	2014      	movs	r0, #20
 8002c8e:	f000 fda1 	bl	80037d4 <HAL_Delay>
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40020000 	.word	0x40020000

08002c9c <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b08f      	sub	sp, #60	; 0x3c
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002ca6:	203a      	movs	r0, #58	; 0x3a
 8002ca8:	f7ff fe54 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8002cac:	2055      	movs	r0, #85	; 0x55
 8002cae:	f7ff ff27 	bl	8002b00 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002cb2:	20b2      	movs	r0, #178	; 0xb2
 8002cb4:	f7ff fe4e 	bl	8002954 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <ST7789_Init+0x108>)
 8002cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cc2:	6018      	str	r0, [r3, #0]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ccc:	2105      	movs	r1, #5
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fe8e 	bl	80029f0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f7ff ff4b 	bl	8002b70 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8002cda:	20b7      	movs	r0, #183	; 0xb7
 8002cdc:	f7ff fe3a 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002ce0:	2035      	movs	r0, #53	; 0x35
 8002ce2:	f7ff ff0d 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002ce6:	20bb      	movs	r0, #187	; 0xbb
 8002ce8:	f7ff fe34 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002cec:	2019      	movs	r0, #25
 8002cee:	f7ff ff07 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002cf2:	20c0      	movs	r0, #192	; 0xc0
 8002cf4:	f7ff fe2e 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8002cf8:	202c      	movs	r0, #44	; 0x2c
 8002cfa:	f7ff ff01 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8002cfe:	20c2      	movs	r0, #194	; 0xc2
 8002d00:	f7ff fe28 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8002d04:	2001      	movs	r0, #1
 8002d06:	f7ff fefb 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8002d0a:	20ff      	movs	r0, #255	; 0xff
 8002d0c:	f7ff fef8 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8002d10:	20c3      	movs	r0, #195	; 0xc3
 8002d12:	f7ff fe1f 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002d16:	2012      	movs	r0, #18
 8002d18:	f7ff fef2 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8002d1c:	20c4      	movs	r0, #196	; 0xc4
 8002d1e:	f7ff fe19 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8002d22:	2020      	movs	r0, #32
 8002d24:	f7ff feec 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8002d28:	20c6      	movs	r0, #198	; 0xc6
 8002d2a:	f7ff fe13 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8002d2e:	200f      	movs	r0, #15
 8002d30:	f7ff fee6 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8002d34:	20d0      	movs	r0, #208	; 0xd0
 8002d36:	f7ff fe0d 	bl	8002954 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8002d3a:	20a4      	movs	r0, #164	; 0xa4
 8002d3c:	f7ff fee0 	bl	8002b00 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8002d40:	20a1      	movs	r0, #161	; 0xa1
 8002d42:	f7ff fedd 	bl	8002b00 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002d46:	20e0      	movs	r0, #224	; 0xe0
 8002d48:	f7ff fe04 	bl	8002954 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <ST7789_Init+0x10c>)
 8002d4e:	f107 041c 	add.w	r4, r7, #28
 8002d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d54:	c407      	stmia	r4!, {r0, r1, r2}
 8002d56:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002d58:	f107 031c 	add.w	r3, r7, #28
 8002d5c:	210e      	movs	r1, #14
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fe46 	bl	80029f0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002d64:	20e1      	movs	r0, #225	; 0xe1
 8002d66:	f7ff fdf5 	bl	8002954 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <ST7789_Init+0x110>)
 8002d6c:	f107 040c 	add.w	r4, r7, #12
 8002d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d72:	c407      	stmia	r4!, {r0, r1, r2}
 8002d74:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	210e      	movs	r1, #14
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fe37 	bl	80029f0 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <ST7789_Init+0x114>)
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8002d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe05 	bl	800299c <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f80d 	bl	8002db4 <ST7789_Fill_Color>
}
 8002d9a:	bf00      	nop
 8002d9c:	373c      	adds	r7, #60	; 0x3c
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	0800c670 	.word	0x0800c670
 8002da8:	0800c678 	.word	0x0800c678
 8002dac:	0800c688 	.word	0x0800c688
 8002db0:	28131121 	.word	0x28131121

08002db4 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0fc      	sub	sp, #496	; 0x1f0
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002dc0:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002dc4:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002dc6:	23ef      	movs	r3, #239	; 0xef
 8002dc8:	22ef      	movs	r2, #239	; 0xef
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7ff fefb 	bl	8002bc8 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002dde:	e024      	b.n	8002e2a <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8002de0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002de4:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b21a      	sxth	r2, r3
 8002df0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002df4:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b219      	sxth	r1, r3
 8002e08:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002e0c:	f107 020c 	add.w	r2, r7, #12
 8002e10:	4413      	add	r3, r2
 8002e12:	b28a      	uxth	r2, r1
 8002e14:	801a      	strh	r2, [r3, #0]
		i += 2;
 8002e16:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002e20:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002e24:	3301      	adds	r3, #1
 8002e26:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002e2a:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002e2e:	2bef      	cmp	r3, #239	; 0xef
 8002e30:	d9d6      	bls.n	8002de0 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002e38:	e00b      	b.n	8002e52 <ST7789_Fill_Color+0x9e>
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe22 	bl	8002a8c <ST7789_WriteDataLine>
 8002e48:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002e52:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002e56:	2bef      	cmp	r3, #239	; 0xef
 8002e58:	d9ef      	bls.n	8002e3a <ST7789_Fill_Color+0x86>

//#endif
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8002e66:	b590      	push	{r4, r7, lr}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	4608      	mov	r0, r1
 8002e70:	4611      	mov	r1, r2
 8002e72:	461a      	mov	r2, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	80fb      	strh	r3, [r7, #6]
 8002e78:	4603      	mov	r3, r0
 8002e7a:	80bb      	strh	r3, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	2bef      	cmp	r3, #239	; 0xef
 8002e88:	d82b      	bhi.n	8002ee2 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002e8a:	883b      	ldrh	r3, [r7, #0]
 8002e8c:	2bef      	cmp	r3, #239	; 0xef
 8002e8e:	d828      	bhi.n	8002ee2 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002e90:	8c3b      	ldrh	r3, [r7, #32]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	723b      	strb	r3, [r7, #8]
 8002e9a:	8c3b      	ldrh	r3, [r7, #32]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8002ea0:	883b      	ldrh	r3, [r7, #0]
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	88b9      	ldrh	r1, [r7, #4]
 8002ea6:	88f8      	ldrh	r0, [r7, #6]
 8002ea8:	f7ff fe8e 	bl	8002bc8 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8002eac:	88bb      	ldrh	r3, [r7, #4]
 8002eae:	81fb      	strh	r3, [r7, #14]
 8002eb0:	e012      	b.n	8002ed8 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	81bb      	strh	r3, [r7, #12]
 8002eb6:	e008      	b.n	8002eca <ST7789_Fill+0x64>
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fd96 	bl	80029f0 <ST7789_WriteData>
 8002ec4:	89bb      	ldrh	r3, [r7, #12]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	81bb      	strh	r3, [r7, #12]
 8002eca:	89ba      	ldrh	r2, [r7, #12]
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d9f2      	bls.n	8002eb8 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8002ed2:	89fb      	ldrh	r3, [r7, #14]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	81fb      	strh	r3, [r7, #14]
 8002ed8:	89fa      	ldrh	r2, [r7, #14]
 8002eda:	883b      	ldrh	r3, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d9e8      	bls.n	8002eb2 <ST7789_Fill+0x4c>
 8002ee0:	e000      	b.n	8002ee4 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002ee2:	bf00      	nop
	}
}
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}

08002eea <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002eea:	b082      	sub	sp, #8
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	80fb      	strh	r3, [r7, #6]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	80bb      	strh	r3, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002f00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	4413      	add	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29c      	uxth	r4, r3
 8002f10:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	88b9      	ldrh	r1, [r7, #4]
 8002f22:	88f8      	ldrh	r0, [r7, #6]
 8002f24:	4622      	mov	r2, r4
 8002f26:	f7ff fe4f 	bl	8002bc8 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8002f2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	733b      	strb	r3, [r7, #12]
 8002f34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002f3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	723b      	strb	r3, [r7, #8]
 8002f46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e02f      	b.n	8002fb8 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8002f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	3b20      	subs	r3, #32
 8002f5e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4619      	mov	r1, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	440b      	add	r3, r1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e015      	b.n	8002fa6 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <ST7789_WriteChar+0xa8>
				uk = cdata;
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e002      	b.n	8002f98 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8002f98:	2102      	movs	r1, #2
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff fd28 	bl	80029f0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002faa:	461a      	mov	r2, r3
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d3e3      	bcc.n	8002f7a <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d3c9      	bcc.n	8002f58 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	4770      	bx	lr

08002fd4 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af04      	add	r7, sp, #16
 8002fdc:	603a      	str	r2, [r7, #0]
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	80fb      	strh	r3, [r7, #6]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d03f      	beq.n	800306e <ST7789_WriteString+0x9a>

	while (*str) {
 8002fee:	e039      	b.n	8003064 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	7d3a      	ldrb	r2, [r7, #20]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	2bef      	cmp	r3, #239	; 0xef
 8002ff8:	dd13      	ble.n	8003022 <ST7789_WriteString+0x4e>
			x = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002ffe:	7d7b      	ldrb	r3, [r7, #21]
 8003000:	b29a      	uxth	r2, r3
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	7d7a      	ldrb	r2, [r7, #21]
 800300c:	4413      	add	r3, r2
 800300e:	2bef      	cmp	r3, #239	; 0xef
 8003010:	dc2f      	bgt.n	8003072 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b20      	cmp	r3, #32
 8003018:	d103      	bne.n	8003022 <ST7789_WriteString+0x4e>
				str++;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	603b      	str	r3, [r7, #0]
				continue;
 8003020:	e020      	b.n	8003064 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b0a      	cmp	r3, #10
 8003028:	d012      	beq.n	8003050 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	88b9      	ldrh	r1, [r7, #4]
 8003030:	88f8      	ldrh	r0, [r7, #6]
 8003032:	8c3b      	ldrh	r3, [r7, #32]
 8003034:	9302      	str	r3, [sp, #8]
 8003036:	8bbb      	ldrh	r3, [r7, #28]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f7ff ff53 	bl	8002eea <ST7789_WriteChar>
			x += font.width;
 8003044:	7d3b      	ldrb	r3, [r7, #20]
 8003046:	b29a      	uxth	r2, r3
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	4413      	add	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
 800304e:	e006      	b.n	800305e <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003054:	7d7b      	ldrb	r3, [r7, #21]
 8003056:	b29a      	uxth	r2, r3
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1c1      	bne.n	8002ff0 <ST7789_WriteString+0x1c>
 800306c:	e002      	b.n	8003074 <ST7789_WriteString+0xa0>
	if (!str) return;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8003072:	bf00      	nop
	}
}
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800307c:	b002      	add	sp, #8
 800307e:	4770      	bx	lr

08003080 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b0a4      	sub	sp, #144	; 0x90
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	227c      	movs	r2, #124	; 0x7c
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f008 fb05 	bl	800b6a8 <memset>

	memset(st, 0x20, 127);
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	227f      	movs	r2, #127	; 0x7f
 80030a4:	2120      	movs	r1, #32
 80030a6:	4618      	mov	r0, r3
 80030a8:	f008 fafe 	bl	800b6a8 <memset>
	int8_t k = strlen(str);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd f88f 	bl	80001d0 <strlen>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80030b8:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	429a      	cmp	r2, r3
 80030c0:	da25      	bge.n	800310e <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	0fda      	lsrs	r2, r3, #31
 80030cc:	4413      	add	r3, r2
 80030ce:	105b      	asrs	r3, r3, #1
 80030d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 80030d4:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80030d8:	f107 020c 	add.w	r2, r7, #12
 80030dc:	4413      	add	r3, r2
 80030de:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f008 fad1 	bl	800b68c <memcpy>
		st[k + n*2 + 1] = '\0';
 80030ea:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80030ee:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	3301      	adds	r3, #1
 80030f8:	3390      	adds	r3, #144	; 0x90
 80030fa:	443b      	add	r3, r7
 80030fc:	2200      	movs	r2, #0
 80030fe:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f008 fc81 	bl	800ba10 <strcpy>
	}

	return str;
 800310e:	687b      	ldr	r3, [r7, #4]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3790      	adds	r7, #144	; 0x90
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_MspInit+0x54>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	4a11      	ldr	r2, [pc, #68]	; (800316c <HAL_MspInit+0x54>)
 8003128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800312c:	6453      	str	r3, [r2, #68]	; 0x44
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_MspInit+0x54>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_MspInit+0x54>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_MspInit+0x54>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_MspInit+0x54>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	210f      	movs	r1, #15
 800315a:	f06f 0001 	mvn.w	r0, #1
 800315e:	f000 fc15 	bl	800398c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <HAL_RTC_MspInit+0x4c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d110      	bne.n	80031b2 <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003190:	2302      	movs	r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_RTC_MspInit+0x50>)
 8003196:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	4618      	mov	r0, r3
 800319e:	f002 fb0f 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80031a8:	f7ff fbcc 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RTC_MspInit+0x54>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40002800 	.word	0x40002800
 80031c0:	00190300 	.word	0x00190300
 80031c4:	42470e3c 	.word	0x42470e3c

080031c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a39      	ldr	r2, [pc, #228]	; (80032cc <HAL_SPI_MspInit+0x104>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d16b      	bne.n	80032c2 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_SPI_MspInit+0x108>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_SPI_MspInit+0x108>)
 80031f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_SPI_MspInit+0x108>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_SPI_MspInit+0x108>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <HAL_SPI_MspInit+0x108>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_SPI_MspInit+0x108>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8003222:	23a0      	movs	r3, #160	; 0xa0
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322e:	2303      	movs	r3, #3
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003232:	2305      	movs	r3, #5
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4619      	mov	r1, r3
 800323c:	4825      	ldr	r0, [pc, #148]	; (80032d4 <HAL_SPI_MspInit+0x10c>)
 800323e:	f000 ffd1 	bl	80041e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003244:	4a25      	ldr	r2, [pc, #148]	; (80032dc <HAL_SPI_MspInit+0x114>)
 8003246:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 800324a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800324e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003252:	2240      	movs	r2, #64	; 0x40
 8003254:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800325c:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 800325e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003262:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003264:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003266:	2200      	movs	r2, #0
 8003268:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003278:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800327c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003280:	2204      	movs	r2, #4
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003286:	2203      	movs	r2, #3
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 800328c:	2200      	movs	r2, #0
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003296:	4810      	ldr	r0, [pc, #64]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 8003298:	f000 fba2 	bl	80039e0 <HAL_DMA_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80032a2:	f7ff fb4f 	bl	8002944 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 80032aa:	649a      	str	r2, [r3, #72]	; 0x48
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_SPI_MspInit+0x110>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2103      	movs	r1, #3
 80032b6:	2023      	movs	r0, #35	; 0x23
 80032b8:	f000 fb68 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032bc:	2023      	movs	r0, #35	; 0x23
 80032be:	f000 fb81 	bl	80039c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	; 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013000 	.word	0x40013000
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020000 	.word	0x40020000
 80032d8:	20000174 	.word	0x20000174
 80032dc:	40026458 	.word	0x40026458

080032e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d115      	bne.n	800331e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_TIM_Base_MspInit+0x48>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <HAL_TIM_Base_MspInit+0x48>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_TIM_Base_MspInit+0x48>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2101      	movs	r1, #1
 8003312:	201c      	movs	r0, #28
 8003314:	f000 fb3a 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003318:	201c      	movs	r0, #28
 800331a:	f000 fb53 	bl	80039c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800

0800332c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a35      	ldr	r2, [pc, #212]	; (8003420 <HAL_UART_MspInit+0xf4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d163      	bne.n	8003416 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_UART_MspInit+0xf8>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a33      	ldr	r2, [pc, #204]	; (8003424 <HAL_UART_MspInit+0xf8>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_UART_MspInit+0xf8>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_UART_MspInit+0xf8>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a2c      	ldr	r2, [pc, #176]	; (8003424 <HAL_UART_MspInit+0xf8>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_UART_MspInit+0xf8>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8003386:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800338a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003398:	2307      	movs	r3, #7
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	4619      	mov	r1, r3
 80033a2:	4821      	ldr	r0, [pc, #132]	; (8003428 <HAL_UART_MspInit+0xfc>)
 80033a4:	f000 ff1e 	bl	80041e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80033a8:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_UART_MspInit+0x100>)
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <HAL_UART_MspInit+0x104>)
 80033ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80033ae:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_UART_MspInit+0x100>)
 80033b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_UART_MspInit+0x100>)
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_UART_MspInit+0x100>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_UART_MspInit+0x100>)
 80033c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_UART_MspInit+0x100>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <HAL_UART_MspInit+0x100>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_UART_MspInit+0x100>)
 80033d8:	2200      	movs	r2, #0
 80033da:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033dc:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_UART_MspInit+0x100>)
 80033de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_UART_MspInit+0x100>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80033ea:	4810      	ldr	r0, [pc, #64]	; (800342c <HAL_UART_MspInit+0x100>)
 80033ec:	f000 faf8 	bl	80039e0 <HAL_DMA_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80033f6:	f7ff faa5 	bl	8002944 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a0b      	ldr	r2, [pc, #44]	; (800342c <HAL_UART_MspInit+0x100>)
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <HAL_UART_MspInit+0x100>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2104      	movs	r1, #4
 800340a:	2027      	movs	r0, #39	; 0x27
 800340c:	f000 fabe 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003410:	2027      	movs	r0, #39	; 0x27
 8003412:	f000 fad7 	bl	80039c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003416:	bf00      	nop
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40004800 	.word	0x40004800
 8003424:	40023800 	.word	0x40023800
 8003428:	40020400 	.word	0x40020400
 800342c:	20000260 	.word	0x20000260
 8003430:	40026058 	.word	0x40026058

08003434 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_FSMC_MspInit+0x98>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d139      	bne.n	80034c4 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_FSMC_MspInit+0x98>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_FSMC_MspInit+0x9c>)
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_FSMC_MspInit+0x9c>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6393      	str	r3, [r2, #56]	; 0x38
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_FSMC_MspInit+0x9c>)
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003472:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003484:	230c      	movs	r3, #12
 8003486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4811      	ldr	r0, [pc, #68]	; (80034d4 <HAL_FSMC_MspInit+0xa0>)
 800348e:	f000 fea9 	bl	80041e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8003492:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8003496:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80034a4:	230c      	movs	r3, #12
 80034a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	480a      	ldr	r0, [pc, #40]	; (80034d8 <HAL_FSMC_MspInit+0xa4>)
 80034ae:	f000 fe99 	bl	80041e4 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80034b2:	2200      	movs	r2, #0
 80034b4:	2105      	movs	r1, #5
 80034b6:	2030      	movs	r0, #48	; 0x30
 80034b8:	f000 fa68 	bl	800398c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80034bc:	2030      	movs	r0, #48	; 0x30
 80034be:	f000 fa81 	bl	80039c4 <HAL_NVIC_EnableIRQ>
 80034c2:	e000      	b.n	80034c6 <HAL_FSMC_MspInit+0x92>
    return;
 80034c4:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000b64 	.word	0x20000b64
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40020c00 	.word	0x40020c00

080034dc <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80034e4:	f7ff ffa6 	bl	8003434 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	; 0x30
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003500:	2200      	movs	r2, #0
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	2019      	movs	r0, #25
 8003506:	f000 fa41 	bl	800398c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800350a:	2019      	movs	r0, #25
 800350c:	f000 fa5a 	bl	80039c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_InitTick+0xa4>)
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_InitTick+0xa4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6453      	str	r3, [r2, #68]	; 0x44
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_InitTick+0xa4>)
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800352c:	f107 0210 	add.w	r2, r7, #16
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f002 f910 	bl	800575c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800353c:	f002 f8fa 	bl	8005734 <HAL_RCC_GetPCLK2Freq>
 8003540:	4603      	mov	r3, r0
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	4a13      	ldr	r2, [pc, #76]	; (8003598 <HAL_InitTick+0xa8>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	3b01      	subs	r3, #1
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_InitTick+0xac>)
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <HAL_InitTick+0xb0>)
 8003558:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_InitTick+0xac>)
 800355c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003560:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_InitTick+0xac>)
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <HAL_InitTick+0xac>)
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_InitTick+0xac>)
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003574:	4809      	ldr	r0, [pc, #36]	; (800359c <HAL_InitTick+0xac>)
 8003576:	f003 fa27 	bl	80069c8 <HAL_TIM_Base_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003580:	4806      	ldr	r0, [pc, #24]	; (800359c <HAL_InitTick+0xac>)
 8003582:	f003 fa71 	bl	8006a68 <HAL_TIM_Base_Start_IT>
 8003586:	4603      	mov	r3, r0
 8003588:	e000      	b.n	800358c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
}
 800358c:	4618      	mov	r0, r3
 800358e:	3730      	adds	r7, #48	; 0x30
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	431bde83 	.word	0x431bde83
 800359c:	20000b68 	.word	0x20000b68
 80035a0:	40010000 	.word	0x40010000

080035a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <HardFault_Handler+0x4>

080035b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <MemManage_Handler+0x4>

080035be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <BusFault_Handler+0x4>

080035c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c8:	e7fe      	b.n	80035c8 <UsageFault_Handler+0x4>

080035ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <DMA1_Stream3_IRQHandler+0x10>)
 80035de:	f000 fb97 	bl	8003d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000260 	.word	0x20000260

080035ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80035f2:	f003 faa9 	bl	8006b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000b68 	.word	0x20000b68

08003600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <TIM2_IRQHandler+0x10>)
 8003606:	f003 fa9f 	bl	8006b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200001d4 	.word	0x200001d4

08003614 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <SPI1_IRQHandler+0x10>)
 800361a:	f002 ff61 	bl	80064e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000011c 	.word	0x2000011c

08003628 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <USART3_IRQHandler+0x10>)
 800362e:	f003 ff49 	bl	80074c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000021c 	.word	0x2000021c

0800363c <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <FSMC_IRQHandler+0x10>)
 8003642:	f000 ffec 	bl	800461e <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200002c0 	.word	0x200002c0

08003650 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA2_Stream3_IRQHandler+0x10>)
 8003656:	f000 fb5b 	bl	8003d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000174 	.word	0x20000174

08003664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <_sbrk+0x5c>)
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <_sbrk+0x60>)
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <_sbrk+0x64>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <_sbrk+0x64>)
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <_sbrk+0x68>)
 8003684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <_sbrk+0x64>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	429a      	cmp	r2, r3
 8003692:	d207      	bcs.n	80036a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003694:	f007 ff1a 	bl	800b4cc <__errno>
 8003698:	4603      	mov	r3, r0
 800369a:	220c      	movs	r2, #12
 800369c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036a2:	e009      	b.n	80036b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <_sbrk+0x64>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <_sbrk+0x64>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <_sbrk+0x64>)
 80036b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20020000 	.word	0x20020000
 80036c4:	00000800 	.word	0x00000800
 80036c8:	20000bb0 	.word	0x20000bb0
 80036cc:	200069d8 	.word	0x200069d8

080036d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <SystemInit+0x28>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <SystemInit+0x28>)
 80036dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SystemInit+0x28>)
 80036e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ea:	609a      	str	r2, [r3, #8]
#endif
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003734 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003700:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003702:	e003      	b.n	800370c <LoopCopyDataInit>

08003704 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003706:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003708:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800370a:	3104      	adds	r1, #4

0800370c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800370c:	480b      	ldr	r0, [pc, #44]	; (800373c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003710:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003712:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003714:	d3f6      	bcc.n	8003704 <CopyDataInit>
  ldr  r2, =_sbss
 8003716:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003718:	e002      	b.n	8003720 <LoopFillZerobss>

0800371a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800371a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800371c:	f842 3b04 	str.w	r3, [r2], #4

08003720 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003722:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003724:	d3f9      	bcc.n	800371a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003726:	f7ff ffd3 	bl	80036d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800372a:	f007 ff81 	bl	800b630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372e:	f7fd fa95 	bl	8000c5c <main>
  bx  lr    
 8003732:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003734:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003738:	0800e96c 	.word	0x0800e96c
  ldr  r0, =_sdata
 800373c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003740:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8003744:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8003748:	200069d8 	.word	0x200069d8

0800374c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC_IRQHandler>
	...

08003750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_Init+0x40>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <HAL_Init+0x40>)
 800375a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_Init+0x40>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <HAL_Init+0x40>)
 8003766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <HAL_Init+0x40>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003778:	2003      	movs	r0, #3
 800377a:	f000 f8fc 	bl	8003976 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800377e:	200f      	movs	r0, #15
 8003780:	f7ff feb6 	bl	80034f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003784:	f7ff fcc8 	bl	8003118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023c00 	.word	0x40023c00

08003794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000064 	.word	0x20000064
 80037b8:	20000bb4 	.word	0x20000bb4

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000bb4 	.word	0x20000bb4

080037d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_Delay+0x44>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000064 	.word	0x20000064

0800381c <__NVIC_SetPriorityGrouping>:
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384e:	4a04      	ldr	r2, [pc, #16]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_GetPriorityGrouping>:
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_EnableIRQ>:
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	db0b      	blt.n	80038aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4907      	ldr	r1, [pc, #28]	; (80038b8 <__NVIC_EnableIRQ+0x38>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2001      	movs	r0, #1
 80038a2:	fa00 f202 	lsl.w	r2, r0, r2
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_SetPriority>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	; (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <NVIC_EncodePriority>:
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f1c3 0307 	rsb	r3, r3, #7
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf28      	it	cs
 800392e:	2304      	movcs	r3, #4
 8003930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3304      	adds	r3, #4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d902      	bls.n	8003940 <NVIC_EncodePriority+0x30>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3b03      	subs	r3, #3
 800393e:	e000      	b.n	8003942 <NVIC_EncodePriority+0x32>
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43d9      	mvns	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	4313      	orrs	r3, r2
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ff4c 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800399e:	f7ff ff61 	bl	8003864 <__NVIC_GetPriorityGrouping>
 80039a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f7ff ffb1 	bl	8003910 <NVIC_EncodePriority>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff80 	bl	80038bc <__NVIC_SetPriority>
}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ff54 	bl	8003880 <__NVIC_EnableIRQ>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff fee6 	bl	80037bc <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e099      	b.n	8003b30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1c:	e00f      	b.n	8003a3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a1e:	f7ff fecd 	bl	80037bc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d908      	bls.n	8003a3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2203      	movs	r2, #3
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e078      	b.n	8003b30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e8      	bne.n	8003a1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <HAL_DMA_Init+0x158>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d117      	bne.n	8003b02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fb01 	bl	80040ec <DMA_CheckFifoParam>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2240      	movs	r2, #64	; 0x40
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003afe:	2301      	movs	r3, #1
 8003b00:	e016      	b.n	8003b30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fab8 	bl	8004080 <DMA_CalcBaseAndBitshift>
 8003b10:	4603      	mov	r3, r0
 8003b12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	223f      	movs	r2, #63	; 0x3f
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	f010803f 	.word	0xf010803f

08003b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_DMA_Start_IT+0x26>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e040      	b.n	8003be4 <HAL_DMA_Start_IT+0xa8>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d12f      	bne.n	8003bd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa4a 	bl	8004024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	223f      	movs	r2, #63	; 0x3f
 8003b96:	409a      	lsls	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0216 	orr.w	r2, r2, #22
 8003baa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0208 	orr.w	r2, r2, #8
 8003bc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e005      	b.n	8003be2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bfa:	f7ff fddf 	bl	80037bc <HAL_GetTick>
 8003bfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d008      	beq.n	8003c1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e052      	b.n	8003cc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0216 	bic.w	r2, r2, #22
 8003c2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <HAL_DMA_Abort+0x62>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0208 	bic.w	r2, r2, #8
 8003c5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6e:	e013      	b.n	8003c98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c70:	f7ff fda4 	bl	80037bc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d90c      	bls.n	8003c98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2203      	movs	r2, #3
 8003c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e015      	b.n	8003cc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e4      	bne.n	8003c70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	223f      	movs	r2, #63	; 0x3f
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d004      	beq.n	8003cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e00c      	b.n	8003d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2205      	movs	r2, #5
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d1c:	4b8e      	ldr	r3, [pc, #568]	; (8003f58 <HAL_DMA_IRQHandler+0x248>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a8e      	ldr	r2, [pc, #568]	; (8003f5c <HAL_DMA_IRQHandler+0x24c>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2208      	movs	r2, #8
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	409a      	lsls	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	2204      	movs	r2, #4
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d012      	beq.n	8003de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0204 	orr.w	r2, r3, #4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	2210      	movs	r2, #16
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d043      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d03c      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d018      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d024      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
 8003e3e:	e01f      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	e016      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0208 	bic.w	r2, r2, #8
 8003e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	2220      	movs	r2, #32
 8003e86:	409a      	lsls	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 808f 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8087 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d136      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0216 	bic.w	r2, r2, #22
 8003ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_DMA_IRQHandler+0x1da>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0208 	bic.w	r2, r2, #8
 8003ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	223f      	movs	r2, #63	; 0x3f
 8003f00:	409a      	lsls	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d07e      	beq.n	800401c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
        }
        return;
 8003f26:	e079      	b.n	800401c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01d      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d031      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
 8003f54:	e02c      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
 8003f56:	bf00      	nop
 8003f58:	2000005c 	.word	0x2000005c
 8003f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d023      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
 8003f70:	e01e      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0210 	bic.w	r2, r2, #16
 8003f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d032      	beq.n	800401e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2205      	movs	r2, #5
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d307      	bcc.n	8003ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f2      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x2cc>
 8003ff6:	e000      	b.n	8003ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
 800401a:	e000      	b.n	800401e <HAL_DMA_IRQHandler+0x30e>
        return;
 800401c:	bf00      	nop
    }
  }
}
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d108      	bne.n	8004064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004062:	e007      	b.n	8004074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3b10      	subs	r3, #16
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <DMA_CalcBaseAndBitshift+0x68>)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d909      	bls.n	80040c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	; 0x58
 80040c0:	e007      	b.n	80040d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	0800e7c0 	.word	0x0800e7c0

080040ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11f      	bne.n	8004146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d856      	bhi.n	80041ba <DMA_CheckFifoParam+0xce>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <DMA_CheckFifoParam+0x28>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004125 	.word	0x08004125
 8004118:	08004137 	.word	0x08004137
 800411c:	08004125 	.word	0x08004125
 8004120:	080041bb 	.word	0x080041bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d046      	beq.n	80041be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004134:	e043      	b.n	80041be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413e:	d140      	bne.n	80041c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e03d      	b.n	80041c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	d121      	bne.n	8004194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d837      	bhi.n	80041c6 <DMA_CheckFifoParam+0xda>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <DMA_CheckFifoParam+0x70>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	0800416d 	.word	0x0800416d
 8004160:	08004173 	.word	0x08004173
 8004164:	0800416d 	.word	0x0800416d
 8004168:	08004185 	.word	0x08004185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      break;
 8004170:	e030      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d025      	beq.n	80041ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e022      	b.n	80041ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800418c:	d11f      	bne.n	80041ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004192:	e01c      	b.n	80041ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d903      	bls.n	80041a2 <DMA_CheckFifoParam+0xb6>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d003      	beq.n	80041a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a0:	e018      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e015      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e00b      	b.n	80041d2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ba:	bf00      	nop
 80041bc:	e00a      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e008      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e006      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e004      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e002      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
    }
  } 
  
  return status; 
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e16b      	b.n	80044d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004200:	2201      	movs	r2, #1
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	f040 815a 	bne.w	80044d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d005      	beq.n	8004236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004232:	2b02      	cmp	r3, #2
 8004234:	d130      	bne.n	8004298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800426c:	2201      	movs	r2, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 0201 	and.w	r2, r3, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d017      	beq.n	80042d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2203      	movs	r2, #3
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d123      	bne.n	8004328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	08da      	lsrs	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3208      	adds	r2, #8
 80042e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	220f      	movs	r2, #15
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	08da      	lsrs	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3208      	adds	r2, #8
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80b4 	beq.w	80044d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4b60      	ldr	r3, [pc, #384]	; (80044f0 <HAL_GPIO_Init+0x30c>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a5f      	ldr	r2, [pc, #380]	; (80044f0 <HAL_GPIO_Init+0x30c>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_GPIO_Init+0x30c>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004386:	4a5b      	ldr	r2, [pc, #364]	; (80044f4 <HAL_GPIO_Init+0x310>)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	3302      	adds	r3, #2
 800438e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	220f      	movs	r2, #15
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_GPIO_Init+0x314>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02b      	beq.n	800440a <HAL_GPIO_Init+0x226>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a51      	ldr	r2, [pc, #324]	; (80044fc <HAL_GPIO_Init+0x318>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d025      	beq.n	8004406 <HAL_GPIO_Init+0x222>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a50      	ldr	r2, [pc, #320]	; (8004500 <HAL_GPIO_Init+0x31c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01f      	beq.n	8004402 <HAL_GPIO_Init+0x21e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a4f      	ldr	r2, [pc, #316]	; (8004504 <HAL_GPIO_Init+0x320>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d019      	beq.n	80043fe <HAL_GPIO_Init+0x21a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a4e      	ldr	r2, [pc, #312]	; (8004508 <HAL_GPIO_Init+0x324>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_GPIO_Init+0x216>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a4d      	ldr	r2, [pc, #308]	; (800450c <HAL_GPIO_Init+0x328>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00d      	beq.n	80043f6 <HAL_GPIO_Init+0x212>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4c      	ldr	r2, [pc, #304]	; (8004510 <HAL_GPIO_Init+0x32c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <HAL_GPIO_Init+0x20e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4b      	ldr	r2, [pc, #300]	; (8004514 <HAL_GPIO_Init+0x330>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_GPIO_Init+0x20a>
 80043ea:	2307      	movs	r3, #7
 80043ec:	e00e      	b.n	800440c <HAL_GPIO_Init+0x228>
 80043ee:	2308      	movs	r3, #8
 80043f0:	e00c      	b.n	800440c <HAL_GPIO_Init+0x228>
 80043f2:	2306      	movs	r3, #6
 80043f4:	e00a      	b.n	800440c <HAL_GPIO_Init+0x228>
 80043f6:	2305      	movs	r3, #5
 80043f8:	e008      	b.n	800440c <HAL_GPIO_Init+0x228>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e006      	b.n	800440c <HAL_GPIO_Init+0x228>
 80043fe:	2303      	movs	r3, #3
 8004400:	e004      	b.n	800440c <HAL_GPIO_Init+0x228>
 8004402:	2302      	movs	r3, #2
 8004404:	e002      	b.n	800440c <HAL_GPIO_Init+0x228>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_GPIO_Init+0x228>
 800440a:	2300      	movs	r3, #0
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	f002 0203 	and.w	r2, r2, #3
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	4093      	lsls	r3, r2
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800441c:	4935      	ldr	r1, [pc, #212]	; (80044f4 <HAL_GPIO_Init+0x310>)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	3302      	adds	r3, #2
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800442a:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_GPIO_Init+0x334>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800444e:	4a32      	ldr	r2, [pc, #200]	; (8004518 <HAL_GPIO_Init+0x334>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004454:	4b30      	ldr	r3, [pc, #192]	; (8004518 <HAL_GPIO_Init+0x334>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <HAL_GPIO_Init+0x334>)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800447e:	4b26      	ldr	r3, [pc, #152]	; (8004518 <HAL_GPIO_Init+0x334>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_GPIO_Init+0x334>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_GPIO_Init+0x334>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <HAL_GPIO_Init+0x334>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	f67f ae90 	bls.w	8004200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800
 8004504:	40020c00 	.word	0x40020c00
 8004508:	40021000 	.word	0x40021000
 800450c:	40021400 	.word	0x40021400
 8004510:	40021800 	.word	0x40021800
 8004514:	40021c00 	.word	0x40021c00
 8004518:	40013c00 	.word	0x40013c00

0800451c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
 8004528:	4613      	mov	r3, r2
 800452a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800452c:	787b      	ldrb	r3, [r7, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004538:	e003      	b.n	8004542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	041a      	lsls	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4013      	ands	r3, r2
 8004566:	041a      	lsls	r2, r3, #16
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43d9      	mvns	r1, r3
 800456c:	887b      	ldrh	r3, [r7, #2]
 800456e:	400b      	ands	r3, r1
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	619a      	str	r2, [r3, #24]
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e03e      	b.n	8004616 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7fe ff95 	bl	80034dc <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f003 ff45 	bl	800844c <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	f003 ff7f 	bl	80084d0 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	461a      	mov	r2, r3
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	f003 ffad 	bl	800853c <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d108      	bne.n	80045fc <HAL_NAND_Init+0x7a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0204 	orr.w	r2, r2, #4
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e007      	b.n	800460c <HAL_NAND_Init+0x8a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0204 	orr.w	r2, r2, #4
 800460a:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b10      	cmp	r3, #16
 800462c:	d10a      	bne.n	8004644 <HAL_NAND_IRQHandler+0x26>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e009      	b.n	8004658 <HAL_NAND_IRQHandler+0x3a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fd fc2f 	bl	8001ec0 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d108      	bne.n	800467c <HAL_NAND_IRQHandler+0x5e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	e007      	b.n	800468c <HAL_NAND_IRQHandler+0x6e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b10      	cmp	r3, #16
 8004692:	d10a      	bne.n	80046aa <HAL_NAND_IRQHandler+0x8c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b02      	cmp	r3, #2
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e009      	b.n	80046be <HAL_NAND_IRQHandler+0xa0>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd fbfc 	bl	8001ec0 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d108      	bne.n	80046e2 <HAL_NAND_IRQHandler+0xc4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0202 	bic.w	r2, r2, #2
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	e007      	b.n	80046f2 <HAL_NAND_IRQHandler+0xd4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0202 	bic.w	r2, r2, #2
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d10a      	bne.n	8004710 <HAL_NAND_IRQHandler+0xf2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e009      	b.n	8004724 <HAL_NAND_IRQHandler+0x106>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d017      	beq.n	8004758 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fd fbc9 	bl	8001ec0 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b10      	cmp	r3, #16
 8004734:	d108      	bne.n	8004748 <HAL_NAND_IRQHandler+0x12a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0204 	bic.w	r2, r2, #4
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	e007      	b.n	8004758 <HAL_NAND_IRQHandler+0x13a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b10      	cmp	r3, #16
 800475e:	d10a      	bne.n	8004776 <HAL_NAND_IRQHandler+0x158>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e009      	b.n	800478a <HAL_NAND_IRQHandler+0x16c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd fb96 	bl	8001ec0 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b10      	cmp	r3, #16
 800479a:	d108      	bne.n	80047ae <HAL_NAND_IRQHandler+0x190>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047aa:	605a      	str	r2, [r3, #4]
  }
}
 80047ac:	e007      	b.n	80047be <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b08a      	sub	sp, #40	; 0x28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_NAND_Read_Page_8b+0x34>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e108      	b.n	8004a0c <HAL_NAND_Read_Page_8b+0x246>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d101      	bne.n	8004812 <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	e0fc      	b.n	8004a0c <HAL_NAND_Read_Page_8b+0x246>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b10      	cmp	r3, #16
 8004818:	d103      	bne.n	8004822 <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 800481a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e002      	b.n	8004828 <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004822:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	889b      	ldrh	r3, [r3, #4]
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	885b      	ldrh	r3, [r3, #2]
 8004840:	4618      	mov	r0, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	4413      	add	r3, r2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	440b      	add	r3, r1
 8004856:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004858:	e0c2      	b.n	80049e0 <HAL_NAND_Read_Page_8b+0x21a>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	3301      	adds	r3, #1
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487a:	d835      	bhi.n	80048e8 <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d212      	bcs.n	80048b4 <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	0a1a      	lsrs	r2, r3, #8
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e058      	b.n	8004966 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	0a1a      	lsrs	r2, r3, #8
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	0c1a      	lsrs	r2, r3, #16
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e03e      	b.n	8004966 <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d217      	bcs.n	800492a <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	0a1a      	lsrs	r2, r3, #8
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e01d      	b.n	8004966 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	0a1a      	lsrs	r2, r3, #8
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	0c1a      	lsrs	r2, r3, #16
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	2230      	movs	r2, #48	; 0x30
 800496e:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d125      	bne.n	80049c6 <HAL_NAND_Read_Page_8b+0x200>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 800497a:	f7fe ff1f 	bl	80037bc <HAL_GetTick>
 800497e:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004980:	e009      	b.n	8004996 <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004982:	f7fe ff1b 	bl	80037bc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004990:	d901      	bls.n	8004996 <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 8004992:	2303      	movs	r3, #3
 8004994:	e03a      	b.n	8004a0c <HAL_NAND_Read_Page_8b+0x246>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fa08 	bl	8004dac <HAL_NAND_Read_Status>
 800499c:	4603      	mov	r3, r0
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d1ef      	bne.n	8004982 <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80049ac:	f3bf 8f4f 	dsb	sy
}
 80049b0:	bf00      	nop
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 80049b2:	e008      	b.n	80049c6 <HAL_NAND_Read_Page_8b+0x200>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	6079      	str	r1, [r7, #4]
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	3301      	adds	r3, #1
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d8f2      	bhi.n	80049b4 <HAL_NAND_Read_Page_8b+0x1ee>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	3301      	adds	r3, #1
 80049d2:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_NAND_Read_Page_8b+0x234>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f4ff af30 	bcc.w	800485a <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	; 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_NAND_Write_Page_8b>:
  * @param  pBuffer  pointer to source buffer to write  
  * @param  NumPageToWrite   number of pages to write to block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  __IO uint32_t index = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand);  
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_NAND_Write_Page_8b+0x34>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e106      	b.n	8004c56 <HAL_NAND_Write_Page_8b+0x242>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d101      	bne.n	8004a60 <HAL_NAND_Write_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0fa      	b.n	8004c56 <HAL_NAND_Write_Page_8b+0x242>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d103      	bne.n	8004a70 <HAL_NAND_Write_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8004a68:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e002      	b.n	8004a76 <HAL_NAND_Write_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	889b      	ldrh	r3, [r3, #4]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	885b      	ldrh	r3, [r3, #2]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	fb00 f303 	mul.w	r3, r0, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	61fb      	str	r3, [r7, #28]
    
  /* Page(s) write loop */
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004aa6:	e0c0      	b.n	8004c2a <HAL_NAND_Write_Page_8b+0x216>
  {
    /* update the buffer size */
    size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
    
    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	d835      	bhi.n	8004b40 <HAL_NAND_Write_Page_8b+0x12c>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d212      	bcs.n	8004b0c <HAL_NAND_Write_Page_8b+0xf8>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	0a1a      	lsrs	r2, r3, #8
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e068      	b.n	8004bde <HAL_NAND_Write_Page_8b+0x1ca>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	0a1a      	lsrs	r2, r3, #8
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	0c1a      	lsrs	r2, r3, #16
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e04e      	b.n	8004bde <HAL_NAND_Write_Page_8b+0x1ca>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d217      	bcs.n	8004b82 <HAL_NAND_Write_Page_8b+0x16e>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	0a1a      	lsrs	r2, r3, #8
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e02d      	b.n	8004bde <HAL_NAND_Write_Page_8b+0x1ca>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	0a1a      	lsrs	r2, r3, #8
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bb0:	f3bf 8f4f 	dsb	sy
}
 8004bb4:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	0c1a      	lsrs	r2, r3, #16
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bc4:	f3bf 8f4f 	dsb	sy
}
 8004bc8:	bf00      	nop
      }
    }
  

    /* Write data to memory */
    for(; index < size; index++)
 8004bca:	e008      	b.n	8004bde <HAL_NAND_Write_Page_8b+0x1ca>
    {
      *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	7013      	strb	r3, [r2, #0]
    for(; index < size; index++)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d8f2      	bhi.n	8004bcc <HAL_NAND_Write_Page_8b+0x1b8>
    }
   
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	2210      	movs	r2, #16
 8004bee:	701a      	strb	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fe fde4 	bl	80037bc <HAL_GetTick>
 8004bf4:	61b8      	str	r0, [r7, #24]

    /* Read status until NAND is ready */
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004bf6:	e009      	b.n	8004c0c <HAL_NAND_Write_Page_8b+0x1f8>
    {
      
      if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004bf8:	f7fe fde0 	bl	80037bc <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c06:	d901      	bls.n	8004c0c <HAL_NAND_Write_Page_8b+0x1f8>
      {
        return HAL_TIMEOUT; 
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e024      	b.n	8004c56 <HAL_NAND_Write_Page_8b+0x242>
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f8cd 	bl	8004dac <HAL_NAND_Read_Status>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d1ef      	bne.n	8004bf8 <HAL_NAND_Write_Page_8b+0x1e4>
      }
    }
 
    /* Increment written pages number */
    numPagesWritten++;
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to write */
    NumPageToWrite--;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <HAL_NAND_Write_Page_8b+0x230>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	f4ff af32 	bcc.w	8004aa8 <HAL_NAND_Write_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3728      	adds	r7, #40	; 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_NAND_Erase_Block+0x20>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e092      	b.n	8004da4 <HAL_NAND_Erase_Block+0x146>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d101      	bne.n	8004c96 <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
 8004c94:	e086      	b.n	8004da4 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d103      	bne.n	8004ca6 <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 8004c9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004ca6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004caa:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cba:	2260      	movs	r2, #96	; 0x60
 8004cbc:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	889b      	ldrh	r3, [r3, #4]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	885b      	ldrh	r3, [r3, #2]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	fb00 f303 	mul.w	r3, r0, r3
 8004cd8:	440b      	add	r3, r1
 8004cda:	b2d9      	uxtb	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	fb11 f303 	smulbb	r3, r1, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	68f9      	ldr	r1, [r7, #12]
 8004cea:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004cee:	4413      	add	r3, r2
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	889b      	ldrh	r3, [r3, #4]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	885b      	ldrh	r3, [r3, #2]
 8004d04:	4618      	mov	r0, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	fb00 f303 	mul.w	r3, r0, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	440b      	add	r3, r1
 8004d1a:	0a1a      	lsrs	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	889b      	ldrh	r3, [r3, #4]
 8004d30:	461a      	mov	r2, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	885b      	ldrh	r3, [r3, #2]
 8004d36:	4618      	mov	r0, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	fb00 f303 	mul.w	r3, r0, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	440b      	add	r3, r1
 8004d4c:	0c1a      	lsrs	r2, r3, #16
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5e:	22d0      	movs	r2, #208	; 0xd0
 8004d60:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d6a:	f7fe fd27 	bl	80037bc <HAL_GetTick>
 8004d6e:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004d70:	e00d      	b.n	8004d8e <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004d72:	f7fe fd23 	bl	80037bc <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d80:	d905      	bls.n	8004d8e <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e00a      	b.n	8004da4 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f80c 	bl	8004dac <HAL_NAND_Read_Status>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d1eb      	bne.n	8004d72 <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d103      	bne.n	8004dcc <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 8004dc4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e002      	b.n	8004dd2 <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dd0:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	2270      	movs	r2, #112	; 0x70
 8004dda:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e007      	b.n	8004e02 <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	e000      	b.n	8004e02 <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e1c:	b2db      	uxtb	r3, r3
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e267      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d075      	beq.n	8004f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4a:	4b88      	ldr	r3, [pc, #544]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d00c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e56:	4b85      	ldr	r3, [pc, #532]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d112      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e62:	4b82      	ldr	r3, [pc, #520]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	4b7e      	ldr	r3, [pc, #504]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d05b      	beq.n	8004f34 <HAL_RCC_OscConfig+0x108>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d157      	bne.n	8004f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e242      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x74>
 8004e92:	4b76      	ldr	r3, [pc, #472]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a75      	ldr	r2, [pc, #468]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e01d      	b.n	8004edc <HAL_RCC_OscConfig+0xb0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x98>
 8004eaa:	4b70      	ldr	r3, [pc, #448]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6f      	ldr	r2, [pc, #444]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6c      	ldr	r2, [pc, #432]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0xb0>
 8004ec4:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a68      	ldr	r2, [pc, #416]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	4b66      	ldr	r3, [pc, #408]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a65      	ldr	r2, [pc, #404]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fc6a 	bl	80037bc <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fe fc66 	bl	80037bc <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e207      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b5b      	ldr	r3, [pc, #364]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0xc0>
 8004f0a:	e014      	b.n	8004f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fe fc56 	bl	80037bc <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fe fc52 	bl	80037bc <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e1f3      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	4b51      	ldr	r3, [pc, #324]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0xe8>
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d063      	beq.n	800500a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f42:	4b4a      	ldr	r3, [pc, #296]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d11c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5a:	4b44      	ldr	r3, [pc, #272]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f66:	4b41      	ldr	r3, [pc, #260]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_RCC_OscConfig+0x152>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e1c7      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4937      	ldr	r1, [pc, #220]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	e03a      	b.n	800500a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f9c:	4b34      	ldr	r3, [pc, #208]	; (8005070 <HAL_RCC_OscConfig+0x244>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fe fc0b 	bl	80037bc <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fe fc07 	bl	80037bc <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e1a8      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4925      	ldr	r1, [pc, #148]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fde:	4b24      	ldr	r3, [pc, #144]	; (8005070 <HAL_RCC_OscConfig+0x244>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fbea 	bl	80037bc <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fec:	f7fe fbe6 	bl	80037bc <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e187      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d036      	beq.n	8005084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <HAL_RCC_OscConfig+0x248>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fe fbca 	bl	80037bc <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502c:	f7fe fbc6 	bl	80037bc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e167      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_OscConfig+0x240>)
 8005040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x200>
 800504a:	e01b      	b.n	8005084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCC_OscConfig+0x248>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005052:	f7fe fbb3 	bl	80037bc <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005058:	e00e      	b.n	8005078 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505a:	f7fe fbaf 	bl	80037bc <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d907      	bls.n	8005078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e150      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
 800506c:	40023800 	.word	0x40023800
 8005070:	42470000 	.word	0x42470000
 8005074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	4b88      	ldr	r3, [pc, #544]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ea      	bne.n	800505a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8097 	beq.w	80051c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005096:	4b81      	ldr	r3, [pc, #516]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	4b7d      	ldr	r3, [pc, #500]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4a7c      	ldr	r2, [pc, #496]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
 80050b2:	4b7a      	ldr	r3, [pc, #488]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b77      	ldr	r3, [pc, #476]	; (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d118      	bne.n	8005100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ce:	4b74      	ldr	r3, [pc, #464]	; (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a73      	ldr	r2, [pc, #460]	; (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7fe fb6f 	bl	80037bc <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fe fb6b 	bl	80037bc <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e10c      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	4b6a      	ldr	r3, [pc, #424]	; (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x2ea>
 8005108:	4b64      	ldr	r3, [pc, #400]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a63      	ldr	r2, [pc, #396]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
 8005114:	e01c      	b.n	8005150 <HAL_RCC_OscConfig+0x324>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b05      	cmp	r3, #5
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x30c>
 800511e:	4b5f      	ldr	r3, [pc, #380]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a5e      	ldr	r2, [pc, #376]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 0304 	orr.w	r3, r3, #4
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
 800512a:	4b5c      	ldr	r3, [pc, #368]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	4a5b      	ldr	r2, [pc, #364]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6713      	str	r3, [r2, #112]	; 0x70
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0x324>
 8005138:	4b58      	ldr	r3, [pc, #352]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a57      	ldr	r2, [pc, #348]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
 8005144:	4b55      	ldr	r3, [pc, #340]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	4a54      	ldr	r2, [pc, #336]	; (800529c <HAL_RCC_OscConfig+0x470>)
 800514a:	f023 0304 	bic.w	r3, r3, #4
 800514e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d015      	beq.n	8005184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fe fb30 	bl	80037bc <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005160:	f7fe fb2c 	bl	80037bc <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	f241 3288 	movw	r2, #5000	; 0x1388
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0cb      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005176:	4b49      	ldr	r3, [pc, #292]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ee      	beq.n	8005160 <HAL_RCC_OscConfig+0x334>
 8005182:	e014      	b.n	80051ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005184:	f7fe fb1a 	bl	80037bc <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	e00a      	b.n	80051a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800518c:	f7fe fb16 	bl	80037bc <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	; 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0b5      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a2:	4b3e      	ldr	r3, [pc, #248]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ee      	bne.n	800518c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b4:	4b39      	ldr	r3, [pc, #228]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	4a38      	ldr	r2, [pc, #224]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80051ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80a1 	beq.w	800530c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ca:	4b34      	ldr	r3, [pc, #208]	; (800529c <HAL_RCC_OscConfig+0x470>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d05c      	beq.n	8005290 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d141      	bne.n	8005262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_RCC_OscConfig+0x478>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fe faea 	bl	80037bc <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ec:	f7fe fae6 	bl	80037bc <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e087      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	4b27      	ldr	r3, [pc, #156]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	3b01      	subs	r3, #1
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	491b      	ldr	r1, [pc, #108]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005234:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <HAL_RCC_OscConfig+0x478>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7fe fabf 	bl	80037bc <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005242:	f7fe fabb 	bl	80037bc <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e05c      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005254:	4b11      	ldr	r3, [pc, #68]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x416>
 8005260:	e054      	b.n	800530c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005262:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_RCC_OscConfig+0x478>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fe faa8 	bl	80037bc <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005270:	f7fe faa4 	bl	80037bc <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e045      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_RCC_OscConfig+0x470>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x444>
 800528e:	e03d      	b.n	800530c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e038      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
 800529c:	40023800 	.word	0x40023800
 80052a0:	40007000 	.word	0x40007000
 80052a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_RCC_OscConfig+0x4ec>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d028      	beq.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d121      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d11a      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d111      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	3b01      	subs	r3, #1
 80052f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40023800 	.word	0x40023800

0800531c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0cc      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005330:	4b68      	ldr	r3, [pc, #416]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d90c      	bls.n	8005358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b65      	ldr	r3, [pc, #404]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0b8      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d020      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005370:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a58      	ldr	r2, [pc, #352]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005388:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a52      	ldr	r2, [pc, #328]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005394:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	494d      	ldr	r1, [pc, #308]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d044      	beq.n	800543c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d119      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d003      	beq.n	80053da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e06f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ea:	4b3b      	ldr	r3, [pc, #236]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e067      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fa:	4b37      	ldr	r3, [pc, #220]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f023 0203 	bic.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4934      	ldr	r1, [pc, #208]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800540c:	f7fe f9d6 	bl	80037bc <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	e00a      	b.n	800542a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005414:	f7fe f9d2 	bl	80037bc <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e04f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 020c 	and.w	r2, r3, #12
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	429a      	cmp	r2, r3
 800543a:	d1eb      	bne.n	8005414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d20c      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e032      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4916      	ldr	r1, [pc, #88]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	490e      	ldr	r1, [pc, #56]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a2:	f000 f821 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80054a6:	4602      	mov	r2, r0
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	490a      	ldr	r1, [pc, #40]	; (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 80054b4:	5ccb      	ldrb	r3, [r1, r3]
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe f814 	bl	80034f0 <HAL_InitTick>

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023c00 	.word	0x40023c00
 80054d8:	40023800 	.word	0x40023800
 80054dc:	0800e7a8 	.word	0x0800e7a8
 80054e0:	2000005c 	.word	0x2000005c
 80054e4:	20000060 	.word	0x20000060

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ec:	b094      	sub	sp, #80	; 0x50
 80054ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	647b      	str	r3, [r7, #68]	; 0x44
 80054f4:	2300      	movs	r3, #0
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f8:	2300      	movs	r3, #0
 80054fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005500:	4b79      	ldr	r3, [pc, #484]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b08      	cmp	r3, #8
 800550a:	d00d      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x40>
 800550c:	2b08      	cmp	r3, #8
 800550e:	f200 80e1 	bhi.w	80056d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x34>
 8005516:	2b04      	cmp	r3, #4
 8005518:	d003      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0x3a>
 800551a:	e0db      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800551c:	4b73      	ldr	r3, [pc, #460]	; (80056ec <HAL_RCC_GetSysClockFreq+0x204>)
 800551e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005520:	e0db      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005522:	4b73      	ldr	r3, [pc, #460]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005524:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005526:	e0d8      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005528:	4b6f      	ldr	r3, [pc, #444]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005532:	4b6d      	ldr	r3, [pc, #436]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d063      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553e:	4b6a      	ldr	r3, [pc, #424]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	099b      	lsrs	r3, r3, #6
 8005544:	2200      	movs	r2, #0
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38
 8005548:	63fa      	str	r2, [r7, #60]	; 0x3c
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
 8005552:	2300      	movs	r3, #0
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
 8005556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800555a:	4622      	mov	r2, r4
 800555c:	462b      	mov	r3, r5
 800555e:	f04f 0000 	mov.w	r0, #0
 8005562:	f04f 0100 	mov.w	r1, #0
 8005566:	0159      	lsls	r1, r3, #5
 8005568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800556c:	0150      	lsls	r0, r2, #5
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4621      	mov	r1, r4
 8005574:	1a51      	subs	r1, r2, r1
 8005576:	6139      	str	r1, [r7, #16]
 8005578:	4629      	mov	r1, r5
 800557a:	eb63 0301 	sbc.w	r3, r3, r1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800558c:	4659      	mov	r1, fp
 800558e:	018b      	lsls	r3, r1, #6
 8005590:	4651      	mov	r1, sl
 8005592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005596:	4651      	mov	r1, sl
 8005598:	018a      	lsls	r2, r1, #6
 800559a:	4651      	mov	r1, sl
 800559c:	ebb2 0801 	subs.w	r8, r2, r1
 80055a0:	4659      	mov	r1, fp
 80055a2:	eb63 0901 	sbc.w	r9, r3, r1
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	eb18 0303 	adds.w	r3, r8, r3
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	462b      	mov	r3, r5
 80055c8:	eb49 0303 	adc.w	r3, r9, r3
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055da:	4629      	mov	r1, r5
 80055dc:	024b      	lsls	r3, r1, #9
 80055de:	4621      	mov	r1, r4
 80055e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055e4:	4621      	mov	r1, r4
 80055e6:	024a      	lsls	r2, r1, #9
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ee:	2200      	movs	r2, #0
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055f8:	f7fb f998 	bl	800092c <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4613      	mov	r3, r2
 8005602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005604:	e058      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005606:	4b38      	ldr	r3, [pc, #224]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	099b      	lsrs	r3, r3, #6
 800560c:	2200      	movs	r2, #0
 800560e:	4618      	mov	r0, r3
 8005610:	4611      	mov	r1, r2
 8005612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	2300      	movs	r3, #0
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	f04f 0100 	mov.w	r1, #0
 800562c:	0159      	lsls	r1, r3, #5
 800562e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005632:	0150      	lsls	r0, r2, #5
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4641      	mov	r1, r8
 800563a:	ebb2 0a01 	subs.w	sl, r2, r1
 800563e:	4649      	mov	r1, r9
 8005640:	eb63 0b01 	sbc.w	fp, r3, r1
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005658:	ebb2 040a 	subs.w	r4, r2, sl
 800565c:	eb63 050b 	sbc.w	r5, r3, fp
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	00eb      	lsls	r3, r5, #3
 800566a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800566e:	00e2      	lsls	r2, r4, #3
 8005670:	4614      	mov	r4, r2
 8005672:	461d      	mov	r5, r3
 8005674:	4643      	mov	r3, r8
 8005676:	18e3      	adds	r3, r4, r3
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	464b      	mov	r3, r9
 800567c:	eb45 0303 	adc.w	r3, r5, r3
 8005680:	607b      	str	r3, [r7, #4]
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800568e:	4629      	mov	r1, r5
 8005690:	028b      	lsls	r3, r1, #10
 8005692:	4621      	mov	r1, r4
 8005694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005698:	4621      	mov	r1, r4
 800569a:	028a      	lsls	r2, r1, #10
 800569c:	4610      	mov	r0, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a2:	2200      	movs	r2, #0
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	61fa      	str	r2, [r7, #28]
 80056a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ac:	f7fb f93e 	bl	800092c <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4613      	mov	r3, r2
 80056b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056d2:	e002      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <HAL_RCC_GetSysClockFreq+0x204>)
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3750      	adds	r7, #80	; 0x50
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <HAL_RCC_GetHCLKFreq+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000005c 	.word	0x2000005c

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005710:	f7ff fff0 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0a9b      	lsrs	r3, r3, #10
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4903      	ldr	r1, [pc, #12]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40023800 	.word	0x40023800
 8005730:	0800e7b8 	.word	0x0800e7b8

08005734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005738:	f7ff ffdc 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	0b5b      	lsrs	r3, r3, #13
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	4903      	ldr	r1, [pc, #12]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800574a:	5ccb      	ldrb	r3, [r1, r3]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40023800 	.word	0x40023800
 8005758:	0800e7b8 	.word	0x0800e7b8

0800575c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	220f      	movs	r2, #15
 800576a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <HAL_RCC_GetClockConfig+0x5c>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0203 	and.w	r2, r3, #3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_RCC_GetClockConfig+0x5c>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	08db      	lsrs	r3, r3, #3
 8005796:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <HAL_RCC_GetClockConfig+0x60>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0207 	and.w	r2, r3, #7
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	601a      	str	r2, [r3, #0]
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40023c00 	.word	0x40023c00

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d035      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057e8:	4b62      	ldr	r3, [pc, #392]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057ee:	f7fd ffe5 	bl	80037bc <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057f6:	f7fd ffe1 	bl	80037bc <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e0b0      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005808:	4b5b      	ldr	r3, [pc, #364]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	019a      	lsls	r2, r3, #6
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	071b      	lsls	r3, r3, #28
 8005820:	4955      	ldr	r1, [pc, #340]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005828:	4b52      	ldr	r3, [pc, #328]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800582e:	f7fd ffc5 	bl	80037bc <HAL_GetTick>
 8005832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005836:	f7fd ffc1 	bl	80037bc <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e090      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005848:	4b4b      	ldr	r3, [pc, #300]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8083 	beq.w	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	4b44      	ldr	r3, [pc, #272]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a43      	ldr	r2, [pc, #268]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
 8005872:	4b41      	ldr	r3, [pc, #260]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800587e:	4b3f      	ldr	r3, [pc, #252]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a3e      	ldr	r2, [pc, #248]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005888:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800588a:	f7fd ff97 	bl	80037bc <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005892:	f7fd ff93 	bl	80037bc <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e062      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b0:	4b31      	ldr	r3, [pc, #196]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d02f      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d028      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058d8:	4b29      	ldr	r3, [pc, #164]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058de:	4b28      	ldr	r3, [pc, #160]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058e4:	4a24      	ldr	r2, [pc, #144]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d114      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd ff61 	bl	80037bc <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fc:	e00a      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fd ff5d 	bl	80037bc <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f241 3288 	movw	r2, #5000	; 0x1388
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e02a      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	4b18      	ldr	r3, [pc, #96]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ee      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592c:	d10d      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800593e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005942:	490d      	ldr	r1, [pc, #52]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005944:	4313      	orrs	r3, r2
 8005946:	608b      	str	r3, [r1, #8]
 8005948:	e005      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005950:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005954:	6093      	str	r3, [r2, #8]
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005962:	4905      	ldr	r1, [pc, #20]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005964:	4313      	orrs	r3, r2
 8005966:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	42470068 	.word	0x42470068
 8005978:	40023800 	.word	0x40023800
 800597c:	40007000 	.word	0x40007000
 8005980:	42470e40 	.word	0x42470e40

08005984 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e083      	b.n	8005a9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7f5b      	ldrb	r3, [r3, #29]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fd fbe2 	bl	8003170 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	22ca      	movs	r2, #202	; 0xca
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2253      	movs	r2, #83	; 0x53
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 faa8 	bl	8005f18 <RTC_EnterInitMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2204      	movs	r2, #4
 80059da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e05e      	b.n	8005a9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6899      	ldr	r1, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6919      	ldr	r1, [r3, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	041a      	lsls	r2, r3, #16
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10e      	bne.n	8005a6c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa3a 	bl	8005ec8 <HAL_RTC_WaitForSynchro>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	22ff      	movs	r2, #255	; 0xff
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e018      	b.n	8005a9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aa6:	b590      	push	{r4, r7, lr}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	7f1b      	ldrb	r3, [r3, #28]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_RTC_SetTime+0x1c>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0aa      	b.n	8005c18 <HAL_RTC_SetTime+0x172>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2202      	movs	r2, #2
 8005acc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d126      	bne.n	8005b22 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fa3f 	bl	8005f70 <RTC_ByteToBcd2>
 8005af2:	4603      	mov	r3, r0
 8005af4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fa38 	bl	8005f70 <RTC_ByteToBcd2>
 8005b00:	4603      	mov	r3, r0
 8005b02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005b04:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	789b      	ldrb	r3, [r3, #2]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fa30 	bl	8005f70 <RTC_ByteToBcd2>
 8005b10:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005b12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e018      	b.n	8005b54 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b42:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	78db      	ldrb	r3, [r3, #3]
 8005b4e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	22ca      	movs	r2, #202	; 0xca
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2253      	movs	r2, #83	; 0x53
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f9d7 	bl	8005f18 <RTC_EnterInitMode>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e047      	b.n	8005c18 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b96:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ba6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d111      	bne.n	8005c02 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f972 	bl	8005ec8 <HAL_RTC_WaitForSynchro>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00a      	b.n	8005c18 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005c16:	2300      	movs	r3, #0
  }
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11a      	bne.n	8005cd2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f983 	bl	8005fac <RTC_Bcd2ToByte>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f97a 	bl	8005fac <RTC_Bcd2ToByte>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	789b      	ldrb	r3, [r3, #2]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 f971 	bl	8005fac <RTC_Bcd2ToByte>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	7f1b      	ldrb	r3, [r3, #28]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RTC_SetDate+0x1c>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e094      	b.n	8005e22 <HAL_RTC_SetDate+0x146>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2202      	movs	r2, #2
 8005d02:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10e      	bne.n	8005d28 <HAL_RTC_SetDate+0x4c>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	f023 0310 	bic.w	r3, r3, #16
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	330a      	adds	r3, #10
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11c      	bne.n	8005d68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	78db      	ldrb	r3, [r3, #3]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f91c 	bl	8005f70 <RTC_ByteToBcd2>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f915 	bl	8005f70 <RTC_ByteToBcd2>
 8005d46:	4603      	mov	r3, r0
 8005d48:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d4a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	789b      	ldrb	r3, [r3, #2]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f90d 	bl	8005f70 <RTC_ByteToBcd2>
 8005d56:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d58:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e00e      	b.n	8005d86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	78db      	ldrb	r3, [r3, #3]
 8005d6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d74:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	22ca      	movs	r2, #202	; 0xca
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2253      	movs	r2, #83	; 0x53
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f8be 	bl	8005f18 <RTC_EnterInitMode>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	22ff      	movs	r2, #255	; 0xff
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2204      	movs	r2, #4
 8005dae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e033      	b.n	8005e22 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dc8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d111      	bne.n	8005e0c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f86d 	bl	8005ec8 <HAL_RTC_WaitForSynchro>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e00a      	b.n	8005e22 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	22ff      	movs	r2, #255	; 0xff
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005e20:	2300      	movs	r3, #0
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd90      	pop	{r4, r7, pc}

08005e2a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e48:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f003 031f 	and.w	r3, r3, #31
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	0b5b      	lsrs	r3, r3, #13
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11a      	bne.n	8005ebe <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	78db      	ldrb	r3, [r3, #3]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 f88d 	bl	8005fac <RTC_Bcd2ToByte>
 8005e92:	4603      	mov	r3, r0
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f884 	bl	8005fac <RTC_Bcd2ToByte>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	789b      	ldrb	r3, [r3, #2]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f87b 	bl	8005fac <RTC_Bcd2ToByte>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ee4:	f7fd fc6a 	bl	80037bc <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005eea:	e009      	b.n	8005f00 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005eec:	f7fd fc66 	bl	80037bc <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005efa:	d901      	bls.n	8005f00 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e007      	b.n	8005f10 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0ee      	beq.n	8005eec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d119      	bne.n	8005f66 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f3c:	f7fd fc3e 	bl	80037bc <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f42:	e009      	b.n	8005f58 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f44:	f7fd fc3a 	bl	80037bc <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f52:	d901      	bls.n	8005f58 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e007      	b.n	8005f68 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ee      	beq.n	8005f44 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005f7e:	e005      	b.n	8005f8c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	3b0a      	subs	r3, #10
 8005f8a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	d8f6      	bhi.n	8005f80 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	b2db      	uxtb	r3, r3
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	b2db      	uxtb	r3, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e07b      	b.n	80060f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d108      	bne.n	8006014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600a:	d009      	beq.n	8006020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	61da      	str	r2, [r3, #28]
 8006012:	e005      	b.n	8006020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fd f8c4 	bl	80031c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	ea42 0103 	orr.w	r1, r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	f003 0104 	and.w	r1, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f003 0210 	and.w	r2, r3, #16
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b088      	sub	sp, #32
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_SPI_Transmit+0x22>
 8006118:	2302      	movs	r3, #2
 800611a:	e126      	b.n	800636a <HAL_SPI_Transmit+0x270>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006124:	f7fd fb4a 	bl	80037bc <HAL_GetTick>
 8006128:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d002      	beq.n	8006140 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800613a:	2302      	movs	r3, #2
 800613c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800613e:	e10b      	b.n	8006358 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_SPI_Transmit+0x52>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006150:	e102      	b.n	8006358 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2203      	movs	r2, #3
 8006156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	88fa      	ldrh	r2, [r7, #6]
 800616a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006198:	d10f      	bne.n	80061ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d007      	beq.n	80061d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d14b      	bne.n	800627a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_Transmit+0xf6>
 80061ea:	8afb      	ldrh	r3, [r7, #22]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d13e      	bne.n	800626e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006214:	e02b      	b.n	800626e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d112      	bne.n	800624a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	881a      	ldrh	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	1c9a      	adds	r2, r3, #2
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	86da      	strh	r2, [r3, #54]	; 0x36
 8006248:	e011      	b.n	800626e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624a:	f7fd fab7 	bl	80037bc <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d803      	bhi.n	8006262 <HAL_SPI_Transmit+0x168>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006260:	d102      	bne.n	8006268 <HAL_SPI_Transmit+0x16e>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800626c:	e074      	b.n	8006358 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1ce      	bne.n	8006216 <HAL_SPI_Transmit+0x11c>
 8006278:	e04c      	b.n	8006314 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_SPI_Transmit+0x18e>
 8006282:	8afb      	ldrh	r3, [r7, #22]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d140      	bne.n	800630a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062ae:	e02c      	b.n	800630a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d113      	bne.n	80062e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80062e4:	e011      	b.n	800630a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e6:	f7fd fa69 	bl	80037bc <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d803      	bhi.n	80062fe <HAL_SPI_Transmit+0x204>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fc:	d102      	bne.n	8006304 <HAL_SPI_Transmit+0x20a>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006308:	e026      	b.n	8006358 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1cd      	bne.n	80062b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fb13 	bl	8006944 <SPI_EndRxTxTransaction>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e000      	b.n	8006358 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006368:	7ffb      	ldrb	r3, [r7, #31]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_SPI_Transmit_DMA+0x20>
 8006390:	2302      	movs	r3, #2
 8006392:	e09b      	b.n	80064cc <HAL_SPI_Transmit_DMA+0x158>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063ac:	e089      	b.n	80064c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_SPI_Transmit_DMA+0x46>
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063be:	e080      	b.n	80064c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2203      	movs	r2, #3
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006406:	d10f      	bne.n	8006428 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006426:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642c:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <HAL_SPI_Transmit_DMA+0x160>)
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006434:	4a28      	ldr	r2, [pc, #160]	; (80064d8 <HAL_SPI_Transmit_DMA+0x164>)
 8006436:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643c:	4a27      	ldr	r2, [pc, #156]	; (80064dc <HAL_SPI_Transmit_DMA+0x168>)
 800643e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006444:	2200      	movs	r2, #0
 8006446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	4619      	mov	r1, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006460:	f7fd fb6c 	bl	8003b3c <HAL_DMA_Start_IT>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	f043 0210 	orr.w	r2, r3, #16
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006482:	e01e      	b.n	80064c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d007      	beq.n	80064a2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0220 	orr.w	r2, r2, #32
 80064b0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0202 	orr.w	r2, r2, #2
 80064c0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	080067b1 	.word	0x080067b1
 80064d8:	08006709 	.word	0x08006709
 80064dc:	080067cd 	.word	0x080067cd

080064e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	099b      	lsrs	r3, r3, #6
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	099b      	lsrs	r3, r3, #6
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
    return;
 8006522:	e0d7      	b.n	80066d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_SPI_IRQHandler+0x66>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
    return;
 8006544:	e0c6      	b.n	80066d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10c      	bne.n	800656c <HAL_SPI_IRQHandler+0x8c>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	099b      	lsrs	r3, r3, #6
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80b4 	beq.w	80066d4 <HAL_SPI_IRQHandler+0x1f4>
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80ad 	beq.w	80066d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	099b      	lsrs	r3, r3, #6
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d023      	beq.n	80065ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b03      	cmp	r3, #3
 8006590:	d011      	beq.n	80065b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	e00b      	b.n	80065ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	693b      	ldr	r3, [r7, #16]
        return;
 80065cc:	e082      	b.n	80066d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f043 0201 	orr.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00c      	beq.n	800662a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006614:	f043 0208 	orr.w	r2, r3, #8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800661c:	2300      	movs	r3, #0
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04f      	beq.n	80066d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006640:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <HAL_SPI_IRQHandler+0x17e>
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d034      	beq.n	80066c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0203 	bic.w	r2, r2, #3
 800666c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d011      	beq.n	800669a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_SPI_IRQHandler+0x1fc>)
 800667c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fb22 	bl	8003ccc <HAL_DMA_Abort_IT>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <HAL_SPI_IRQHandler+0x1fc>)
 80066a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fd fb0c 	bl	8003ccc <HAL_DMA_Abort_IT>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80066c6:	e003      	b.n	80066d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f813 	bl	80066f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066ce:	e000      	b.n	80066d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80066d0:	bf00      	nop
    return;
 80066d2:	bf00      	nop
  }
}
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	0800680d 	.word	0x0800680d

080066e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006716:	f7fd f851 	bl	80037bc <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672a:	d03b      	beq.n	80067a4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0220 	bic.w	r2, r2, #32
 800673a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0202 	bic.w	r2, r2, #2
 800674a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	2164      	movs	r1, #100	; 0x64
 8006750:	6978      	ldr	r0, [r7, #20]
 8006752:	f000 f8f7 	bl	8006944 <SPI_EndRxTxTransaction>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800679c:	6978      	ldr	r0, [r7, #20]
 800679e:	f7ff ffa9 	bl	80066f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80067a2:	e002      	b.n	80067aa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80067a4:	6978      	ldr	r0, [r7, #20]
 80067a6:	f7fb fb75 	bl	8001e94 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff ff8e 	bl	80066e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0203 	bic.w	r2, r2, #3
 80067e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f043 0210 	orr.w	r2, r3, #16
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff ff78 	bl	80066f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff ff64 	bl	80066f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006844:	f7fc ffba 	bl	80037bc <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4413      	add	r3, r2
 8006852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006854:	f7fc ffb2 	bl	80037bc <HAL_GetTick>
 8006858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800685a:	4b39      	ldr	r3, [pc, #228]	; (8006940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	015b      	lsls	r3, r3, #5
 8006860:	0d1b      	lsrs	r3, r3, #20
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800686a:	e054      	b.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006872:	d050      	beq.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006874:	f7fc ffa2 	bl	80037bc <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	429a      	cmp	r2, r3
 8006882:	d902      	bls.n	800688a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d13d      	bne.n	8006906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a2:	d111      	bne.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ac:	d004      	beq.n	80068b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b6:	d107      	bne.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d0:	d10f      	bne.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e017      	b.n	8006936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3b01      	subs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	bf0c      	ite	eq
 8006926:	2301      	moveq	r3, #1
 8006928:	2300      	movne	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	429a      	cmp	r2, r3
 8006932:	d19b      	bne.n	800686c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	2000005c 	.word	0x2000005c

08006944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <SPI_EndRxTxTransaction+0x7c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <SPI_EndRxTxTransaction+0x80>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	0d5b      	lsrs	r3, r3, #21
 800695c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006960:	fb02 f303 	mul.w	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696e:	d112      	bne.n	8006996 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2200      	movs	r2, #0
 8006978:	2180      	movs	r1, #128	; 0x80
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff ff5a 	bl	8006834 <SPI_WaitFlagStateUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d016      	beq.n	80069b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e00f      	b.n	80069b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	3b01      	subs	r3, #1
 80069a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d0f2      	beq.n	8006996 <SPI_EndRxTxTransaction+0x52>
 80069b0:	e000      	b.n	80069b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80069b2:	bf00      	nop
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2000005c 	.word	0x2000005c
 80069c4:	165e9f81 	.word	0x165e9f81

080069c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e041      	b.n	8006a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fc fc76 	bl	80032e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f000 fa96 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d001      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e04e      	b.n	8006b1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a23      	ldr	r2, [pc, #140]	; (8006b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d022      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aaa:	d01d      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d018      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1b      	ldr	r2, [pc, #108]	; (8006b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d111      	bne.n	8006b0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d010      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0201 	orr.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0a:	e007      	b.n	8006b1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0201 	orr.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40000400 	.word	0x40000400
 8006b34:	40000800 	.word	0x40000800
 8006b38:	40000c00 	.word	0x40000c00
 8006b3c:	40010400 	.word	0x40010400
 8006b40:	40014000 	.word	0x40014000
 8006b44:	40001800 	.word	0x40001800

08006b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0202 	mvn.w	r2, #2
 8006b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9b5 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9a7 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9b8 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0204 	mvn.w	r2, #4
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f98b 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f97d 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f98e 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0208 	mvn.w	r2, #8
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2204      	movs	r2, #4
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f961 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f953 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f964 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0210 	mvn.w	r2, #16
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2208      	movs	r2, #8
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f937 	bl	8006efa <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f929 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f93a 	bl	8006f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0201 	mvn.w	r2, #1
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fb fe10 	bl	80028ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	2b80      	cmp	r3, #128	; 0x80
 8006cd8:	d10e      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d107      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fae0 	bl	80072b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d10e      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8ff 	bl	8006f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d10e      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d107      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0220 	mvn.w	r2, #32
 8006d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 faaa 	bl	80072a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_ConfigClockSource+0x1c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e0b4      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x186>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	d03e      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0xd4>
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	f200 8087 	bhi.w	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	f000 8086 	beq.w	8006eca <HAL_TIM_ConfigClockSource+0x172>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc2:	d87f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d01a      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0xa6>
 8006dc8:	2b70      	cmp	r3, #112	; 0x70
 8006dca:	d87b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b60      	cmp	r3, #96	; 0x60
 8006dce:	d050      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0x11a>
 8006dd0:	2b60      	cmp	r3, #96	; 0x60
 8006dd2:	d877      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b50      	cmp	r3, #80	; 0x50
 8006dd6:	d03c      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xfa>
 8006dd8:	2b50      	cmp	r3, #80	; 0x50
 8006dda:	d873      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d058      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x13a>
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d86f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d064      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006de8:	2b30      	cmp	r3, #48	; 0x30
 8006dea:	d86b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d060      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d867      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d05c      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d05a      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006dfc:	e062      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6899      	ldr	r1, [r3, #8]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f000 f9ad 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	609a      	str	r2, [r3, #8]
      break;
 8006e2a:	e04f      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6899      	ldr	r1, [r3, #8]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f000 f996 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e4e:	609a      	str	r2, [r3, #8]
      break;
 8006e50:	e03c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6859      	ldr	r1, [r3, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f000 f90a 	bl	8007078 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2150      	movs	r1, #80	; 0x50
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f963 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006e70:	e02c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 f929 	bl	80070d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2160      	movs	r1, #96	; 0x60
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f953 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006e90:	e01c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 f8ea 	bl	8007078 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2140      	movs	r1, #64	; 0x40
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f943 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e00c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f000 f93a 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006ec2:	e003      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec8:	e000      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a40      	ldr	r2, [pc, #256]	; (800704c <TIM_Base_SetConfig+0x114>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d00f      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a3d      	ldr	r2, [pc, #244]	; (8007050 <TIM_Base_SetConfig+0x118>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00b      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3c      	ldr	r2, [pc, #240]	; (8007054 <TIM_Base_SetConfig+0x11c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d007      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <TIM_Base_SetConfig+0x120>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a3a      	ldr	r2, [pc, #232]	; (800705c <TIM_Base_SetConfig+0x124>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d108      	bne.n	8006f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a2f      	ldr	r2, [pc, #188]	; (800704c <TIM_Base_SetConfig+0x114>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d02b      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f98:	d027      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <TIM_Base_SetConfig+0x118>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d023      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2b      	ldr	r2, [pc, #172]	; (8007054 <TIM_Base_SetConfig+0x11c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01f      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <TIM_Base_SetConfig+0x120>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01b      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	; (800705c <TIM_Base_SetConfig+0x124>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d017      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a28      	ldr	r2, [pc, #160]	; (8007060 <TIM_Base_SetConfig+0x128>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a27      	ldr	r2, [pc, #156]	; (8007064 <TIM_Base_SetConfig+0x12c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a26      	ldr	r2, [pc, #152]	; (8007068 <TIM_Base_SetConfig+0x130>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00b      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a25      	ldr	r2, [pc, #148]	; (800706c <TIM_Base_SetConfig+0x134>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a24      	ldr	r2, [pc, #144]	; (8007070 <TIM_Base_SetConfig+0x138>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a23      	ldr	r2, [pc, #140]	; (8007074 <TIM_Base_SetConfig+0x13c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d108      	bne.n	8006ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a0a      	ldr	r2, [pc, #40]	; (800704c <TIM_Base_SetConfig+0x114>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0xf8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a0c      	ldr	r2, [pc, #48]	; (800705c <TIM_Base_SetConfig+0x124>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d103      	bne.n	8007038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	615a      	str	r2, [r3, #20]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800
 800706c:	40001800 	.word	0x40001800
 8007070:	40001c00 	.word	0x40001c00
 8007074:	40002000 	.word	0x40002000

08007078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	f023 0201 	bic.w	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 030a 	bic.w	r3, r3, #10
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007112:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	f043 0307 	orr.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	431a      	orrs	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e05a      	b.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a21      	ldr	r2, [pc, #132]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d022      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007210:	d01d      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1d      	ldr	r2, [pc, #116]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d018      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1b      	ldr	r2, [pc, #108]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1a      	ldr	r2, [pc, #104]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a18      	ldr	r2, [pc, #96]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a17      	ldr	r2, [pc, #92]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d10c      	bne.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4313      	orrs	r3, r2
 800725e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40010000 	.word	0x40010000
 800728c:	40000400 	.word	0x40000400
 8007290:	40000800 	.word	0x40000800
 8007294:	40000c00 	.word	0x40000c00
 8007298:	40010400 	.word	0x40010400
 800729c:	40014000 	.word	0x40014000
 80072a0:	40001800 	.word	0x40001800

080072a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e03f      	b.n	800735e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fc f81a 	bl	800332c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2224      	movs	r2, #36	; 0x24
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800730e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fe27 	bl	8007f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b20      	cmp	r3, #32
 800737e:	d11d      	bne.n	80073bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_UART_Receive_IT+0x26>
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e016      	b.n	80073be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_UART_Receive_IT+0x38>
 800739a:	2302      	movs	r3, #2
 800739c:	e00f      	b.n	80073be <HAL_UART_Receive_IT+0x58>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fbd9 	bl	8007b6a <UART_Start_Receive_IT>
 80073b8:	4603      	mov	r3, r0
 80073ba:	e000      	b.n	80073be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	; 0x30
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d165      	bne.n	80074ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_UART_Transmit_DMA+0x26>
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e05e      	b.n	80074b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_UART_Transmit_DMA+0x38>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e057      	b.n	80074b0 <HAL_UART_Transmit_DMA+0xe8>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	88fa      	ldrh	r2, [r7, #6]
 8007418:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2221      	movs	r2, #33	; 0x21
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <HAL_UART_Transmit_DMA+0xf0>)
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007434:	4a21      	ldr	r2, [pc, #132]	; (80074bc <HAL_UART_Transmit_DMA+0xf4>)
 8007436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <HAL_UART_Transmit_DMA+0xf8>)
 800743e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	2200      	movs	r2, #0
 8007446:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007448:	f107 0308 	add.w	r3, r7, #8
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	6819      	ldr	r1, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3304      	adds	r3, #4
 800745c:	461a      	mov	r2, r3
 800745e:	88fb      	ldrh	r3, [r7, #6]
 8007460:	f7fc fb6c 	bl	8003b3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800746c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3314      	adds	r3, #20
 800747c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	617b      	str	r3, [r7, #20]
   return(result);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	62bb      	str	r3, [r7, #40]	; 0x28
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3314      	adds	r3, #20
 8007494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007496:	627a      	str	r2, [r7, #36]	; 0x24
 8007498:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6a39      	ldr	r1, [r7, #32]
 800749c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3730      	adds	r7, #48	; 0x30
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	08007a21 	.word	0x08007a21
 80074bc:	08007abb 	.word	0x08007abb
 80074c0:	08007ad7 	.word	0x08007ad7

080074c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b0ba      	sub	sp, #232	; 0xe8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10f      	bne.n	800752a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <HAL_UART_IRQHandler+0x66>
 8007516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc62 	bl	8007dec <UART_Receive_IT>
      return;
 8007528:	e256      	b.n	80079d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800752a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80de 	beq.w	80076f0 <HAL_UART_IRQHandler+0x22c>
 8007534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80d1 	beq.w	80076f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <HAL_UART_IRQHandler+0xae>
 800755a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0201 	orr.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <HAL_UART_IRQHandler+0xd2>
 800757e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f043 0202 	orr.w	r2, r3, #2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <HAL_UART_IRQHandler+0xf6>
 80075a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f043 0204 	orr.w	r2, r3, #4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d011      	beq.n	80075ea <HAL_UART_IRQHandler+0x126>
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f043 0208 	orr.w	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 81ed 	beq.w	80079ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_UART_IRQHandler+0x14e>
 8007600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fbed 	bl	8007dec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	bf0c      	ite	eq
 8007620:	2301      	moveq	r3, #1
 8007622:	2300      	movne	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <HAL_UART_IRQHandler+0x17a>
 8007636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04f      	beq.n	80076de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 faf5 	bl	8007c2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d141      	bne.n	80076d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3314      	adds	r3, #20
 800767a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800767e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800768a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1d9      	bne.n	8007652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	4a7d      	ldr	r2, [pc, #500]	; (80078a0 <HAL_UART_IRQHandler+0x3dc>)
 80076ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fc fb0a 	bl	8003ccc <HAL_DMA_Abort_IT>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d016      	beq.n	80076ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	e00e      	b.n	80076ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f990 	bl	80079f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	e00a      	b.n	80076ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f98c 	bl	80079f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e006      	b.n	80076ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f988 	bl	80079f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076ea:	e170      	b.n	80079ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	bf00      	nop
    return;
 80076ee:	e16e      	b.n	80079ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	f040 814a 	bne.w	800798e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8143 	beq.w	800798e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 813c 	beq.w	800798e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	f040 80b4 	bne.w	80078a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8140 	beq.w	80079d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800775a:	429a      	cmp	r2, r3
 800775c:	f080 8139 	bcs.w	80079d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007772:	f000 8088 	beq.w	8007886 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	330c      	adds	r3, #12
 800777c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800778c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1d9      	bne.n	8007776 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3314      	adds	r3, #20
 80077c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3314      	adds	r3, #20
 80077e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e1      	bne.n	80077c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3314      	adds	r3, #20
 8007804:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800780e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3314      	adds	r3, #20
 800781e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007824:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e3      	bne.n	80077fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007856:	f023 0310 	bic.w	r3, r3, #16
 800785a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007868:	65ba      	str	r2, [r7, #88]	; 0x58
 800786a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800786e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e3      	bne.n	8007844 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	4618      	mov	r0, r3
 8007882:	f7fc f9b3 	bl	8003bec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800788e:	b29b      	uxth	r3, r3
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	b29b      	uxth	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f8b6 	bl	8007a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800789c:	e099      	b.n	80079d2 <HAL_UART_IRQHandler+0x50e>
 800789e:	bf00      	nop
 80078a0:	08007cf5 	.word	0x08007cf5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 808b 	beq.w	80079d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8086 	beq.w	80079d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078ee:	647a      	str	r2, [r7, #68]	; 0x44
 80078f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e3      	bne.n	80078ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3314      	adds	r3, #20
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	623b      	str	r3, [r7, #32]
   return(result);
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3314      	adds	r3, #20
 8007922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007926:	633a      	str	r2, [r7, #48]	; 0x30
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800792c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e3      	bne.n	8007902 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2220      	movs	r2, #32
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	60fb      	str	r3, [r7, #12]
   return(result);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0310 	bic.w	r3, r3, #16
 800795e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	330c      	adds	r3, #12
 8007968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800796c:	61fa      	str	r2, [r7, #28]
 800796e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	69b9      	ldr	r1, [r7, #24]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	617b      	str	r3, [r7, #20]
   return(result);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e3      	bne.n	8007948 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f83e 	bl	8007a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800798c:	e023      	b.n	80079d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <HAL_UART_IRQHandler+0x4ea>
 800799a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f9b8 	bl	8007d1c <UART_Transmit_IT>
    return;
 80079ac:	e014      	b.n	80079d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <HAL_UART_IRQHandler+0x514>
 80079ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d008      	beq.n	80079d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9f8 	bl	8007dbc <UART_EndTransmit_IT>
    return;
 80079cc:	e004      	b.n	80079d8 <HAL_UART_IRQHandler+0x514>
    return;
 80079ce:	bf00      	nop
 80079d0:	e002      	b.n	80079d8 <HAL_UART_IRQHandler+0x514>
      return;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <HAL_UART_IRQHandler+0x514>
      return;
 80079d6:	bf00      	nop
  }
}
 80079d8:	37e8      	adds	r7, #232	; 0xe8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b090      	sub	sp, #64	; 0x40
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d137      	bne.n	8007aac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3e:	2200      	movs	r2, #0
 8007a40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3314      	adds	r3, #20
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	623b      	str	r3, [r7, #32]
   return(result);
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a62:	633a      	str	r2, [r7, #48]	; 0x30
 8007a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e5      	bne.n	8007a42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a96:	61fa      	str	r2, [r7, #28]
 8007a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	69b9      	ldr	r1, [r7, #24]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007aaa:	e002      	b.n	8007ab2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007aac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007aae:	f7fa f9db 	bl	8001e68 <HAL_UART_TxCpltCallback>
}
 8007ab2:	bf00      	nop
 8007ab4:	3740      	adds	r7, #64	; 0x40
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff89 	bl	80079e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b80      	cmp	r3, #128	; 0x80
 8007af4:	bf0c      	ite	eq
 8007af6:	2301      	moveq	r3, #1
 8007af8:	2300      	movne	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b21      	cmp	r3, #33	; 0x21
 8007b08:	d108      	bne.n	8007b1c <UART_DMAError+0x46>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b16:	68b8      	ldr	r0, [r7, #8]
 8007b18:	f000 f861 	bl	8007bde <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	bf0c      	ite	eq
 8007b2a:	2301      	moveq	r3, #1
 8007b2c:	2300      	movne	r3, #0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b22      	cmp	r3, #34	; 0x22
 8007b3c:	d108      	bne.n	8007b50 <UART_DMAError+0x7a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b4a:	68b8      	ldr	r0, [r7, #8]
 8007b4c:	f000 f86f 	bl	8007c2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	f043 0210 	orr.w	r2, r3, #16
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b5c:	68b8      	ldr	r0, [r7, #8]
 8007b5e:	f7ff ff49 	bl	80079f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b62:	bf00      	nop
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	4613      	mov	r3, r2
 8007b76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	88fa      	ldrh	r2, [r7, #6]
 8007b88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2222      	movs	r2, #34	; 0x22
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0220 	orr.w	r2, r2, #32
 8007bce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b089      	sub	sp, #36	; 0x24
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	61ba      	str	r2, [r7, #24]
 8007c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	613b      	str	r3, [r7, #16]
   return(result);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007c22:	bf00      	nop
 8007c24:	3724      	adds	r7, #36	; 0x24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b095      	sub	sp, #84	; 0x54
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c56:	643a      	str	r2, [r7, #64]	; 0x40
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e5      	bne.n	8007c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3314      	adds	r3, #20
 8007c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3314      	adds	r3, #20
 8007c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e5      	bne.n	8007c6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d119      	bne.n	8007cda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	330c      	adds	r3, #12
 8007cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f023 0310 	bic.w	r3, r3, #16
 8007cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	330c      	adds	r3, #12
 8007cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cc6:	61ba      	str	r2, [r7, #24]
 8007cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e5      	bne.n	8007ca6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ce8:	bf00      	nop
 8007cea:	3754      	adds	r7, #84	; 0x54
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fe70 	bl	80079f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b21      	cmp	r3, #33	; 0x21
 8007d2e:	d13e      	bne.n	8007dae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d38:	d114      	bne.n	8007d64 <UART_Transmit_IT+0x48>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d110      	bne.n	8007d64 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	1c9a      	adds	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	621a      	str	r2, [r3, #32]
 8007d62:	e008      	b.n	8007d76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	1c59      	adds	r1, r3, #1
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6211      	str	r1, [r2, #32]
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	4619      	mov	r1, r3
 8007d84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10f      	bne.n	8007daa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e000      	b.n	8007db0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007dae:	2302      	movs	r3, #2
  }
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fa f843 	bl	8001e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08c      	sub	sp, #48	; 0x30
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b22      	cmp	r3, #34	; 0x22
 8007dfe:	f040 80ab 	bne.w	8007f58 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0a:	d117      	bne.n	8007e3c <UART_Receive_IT+0x50>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d113      	bne.n	8007e3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	629a      	str	r2, [r3, #40]	; 0x28
 8007e3a:	e026      	b.n	8007e8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4e:	d007      	beq.n	8007e60 <UART_Receive_IT+0x74>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <UART_Receive_IT+0x82>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	e008      	b.n	8007e80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	4619      	mov	r1, r3
 8007e98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d15a      	bne.n	8007f54 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0220 	bic.w	r2, r2, #32
 8007eac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ebc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d135      	bne.n	8007f4a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f023 0310 	bic.w	r3, r3, #16
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	330c      	adds	r3, #12
 8007f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f04:	623a      	str	r2, [r7, #32]
 8007f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	69f9      	ldr	r1, [r7, #28]
 8007f0a:	6a3a      	ldr	r2, [r7, #32]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e5      	bne.n	8007ee4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0310 	and.w	r3, r3, #16
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d10a      	bne.n	8007f3c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fd60 	bl	8007a08 <HAL_UARTEx_RxEventCallback>
 8007f48:	e002      	b.n	8007f50 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7f9 fd2c 	bl	80019a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e002      	b.n	8007f5a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	e000      	b.n	8007f5a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3730      	adds	r7, #48	; 0x30
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f68:	b0c0      	sub	sp, #256	; 0x100
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f80:	68d9      	ldr	r1, [r3, #12]
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	ea40 0301 	orr.w	r3, r0, r1
 8007f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fbc:	f021 010c 	bic.w	r1, r1, #12
 8007fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fde:	6999      	ldr	r1, [r3, #24]
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	ea40 0301 	orr.w	r3, r0, r1
 8007fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b8f      	ldr	r3, [pc, #572]	; (8008230 <UART_SetConfig+0x2cc>)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d005      	beq.n	8008004 <UART_SetConfig+0xa0>
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	4b8d      	ldr	r3, [pc, #564]	; (8008234 <UART_SetConfig+0x2d0>)
 8008000:	429a      	cmp	r2, r3
 8008002:	d104      	bne.n	800800e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008004:	f7fd fb96 	bl	8005734 <HAL_RCC_GetPCLK2Freq>
 8008008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800800c:	e003      	b.n	8008016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800800e:	f7fd fb7d 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8008012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008020:	f040 810c 	bne.w	800823c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008028:	2200      	movs	r2, #0
 800802a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800802e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008036:	4622      	mov	r2, r4
 8008038:	462b      	mov	r3, r5
 800803a:	1891      	adds	r1, r2, r2
 800803c:	65b9      	str	r1, [r7, #88]	; 0x58
 800803e:	415b      	adcs	r3, r3
 8008040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008046:	4621      	mov	r1, r4
 8008048:	eb12 0801 	adds.w	r8, r2, r1
 800804c:	4629      	mov	r1, r5
 800804e:	eb43 0901 	adc.w	r9, r3, r1
 8008052:	f04f 0200 	mov.w	r2, #0
 8008056:	f04f 0300 	mov.w	r3, #0
 800805a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800805e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008066:	4690      	mov	r8, r2
 8008068:	4699      	mov	r9, r3
 800806a:	4623      	mov	r3, r4
 800806c:	eb18 0303 	adds.w	r3, r8, r3
 8008070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008074:	462b      	mov	r3, r5
 8008076:	eb49 0303 	adc.w	r3, r9, r3
 800807a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800808a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800808e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008092:	460b      	mov	r3, r1
 8008094:	18db      	adds	r3, r3, r3
 8008096:	653b      	str	r3, [r7, #80]	; 0x50
 8008098:	4613      	mov	r3, r2
 800809a:	eb42 0303 	adc.w	r3, r2, r3
 800809e:	657b      	str	r3, [r7, #84]	; 0x54
 80080a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080a8:	f7f8 fc40 	bl	800092c <__aeabi_uldivmod>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4b61      	ldr	r3, [pc, #388]	; (8008238 <UART_SetConfig+0x2d4>)
 80080b2:	fba3 2302 	umull	r2, r3, r3, r2
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	011c      	lsls	r4, r3, #4
 80080ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080cc:	4642      	mov	r2, r8
 80080ce:	464b      	mov	r3, r9
 80080d0:	1891      	adds	r1, r2, r2
 80080d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80080d4:	415b      	adcs	r3, r3
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080dc:	4641      	mov	r1, r8
 80080de:	eb12 0a01 	adds.w	sl, r2, r1
 80080e2:	4649      	mov	r1, r9
 80080e4:	eb43 0b01 	adc.w	fp, r3, r1
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080fc:	4692      	mov	sl, r2
 80080fe:	469b      	mov	fp, r3
 8008100:	4643      	mov	r3, r8
 8008102:	eb1a 0303 	adds.w	r3, sl, r3
 8008106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800810a:	464b      	mov	r3, r9
 800810c:	eb4b 0303 	adc.w	r3, fp, r3
 8008110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008128:	460b      	mov	r3, r1
 800812a:	18db      	adds	r3, r3, r3
 800812c:	643b      	str	r3, [r7, #64]	; 0x40
 800812e:	4613      	mov	r3, r2
 8008130:	eb42 0303 	adc.w	r3, r2, r3
 8008134:	647b      	str	r3, [r7, #68]	; 0x44
 8008136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800813a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800813e:	f7f8 fbf5 	bl	800092c <__aeabi_uldivmod>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4611      	mov	r1, r2
 8008148:	4b3b      	ldr	r3, [pc, #236]	; (8008238 <UART_SetConfig+0x2d4>)
 800814a:	fba3 2301 	umull	r2, r3, r3, r1
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	2264      	movs	r2, #100	; 0x64
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	1acb      	subs	r3, r1, r3
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800815e:	4b36      	ldr	r3, [pc, #216]	; (8008238 <UART_SetConfig+0x2d4>)
 8008160:	fba3 2302 	umull	r2, r3, r3, r2
 8008164:	095b      	lsrs	r3, r3, #5
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800816c:	441c      	add	r4, r3
 800816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800817c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	1891      	adds	r1, r2, r2
 8008186:	63b9      	str	r1, [r7, #56]	; 0x38
 8008188:	415b      	adcs	r3, r3
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800818c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008190:	4641      	mov	r1, r8
 8008192:	1851      	adds	r1, r2, r1
 8008194:	6339      	str	r1, [r7, #48]	; 0x30
 8008196:	4649      	mov	r1, r9
 8008198:	414b      	adcs	r3, r1
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081a8:	4659      	mov	r1, fp
 80081aa:	00cb      	lsls	r3, r1, #3
 80081ac:	4651      	mov	r1, sl
 80081ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081b2:	4651      	mov	r1, sl
 80081b4:	00ca      	lsls	r2, r1, #3
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	4603      	mov	r3, r0
 80081bc:	4642      	mov	r2, r8
 80081be:	189b      	adds	r3, r3, r2
 80081c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081c4:	464b      	mov	r3, r9
 80081c6:	460a      	mov	r2, r1
 80081c8:	eb42 0303 	adc.w	r3, r2, r3
 80081cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80081e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80081e4:	460b      	mov	r3, r1
 80081e6:	18db      	adds	r3, r3, r3
 80081e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ea:	4613      	mov	r3, r2
 80081ec:	eb42 0303 	adc.w	r3, r2, r3
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081fa:	f7f8 fb97 	bl	800092c <__aeabi_uldivmod>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <UART_SetConfig+0x2d4>)
 8008204:	fba3 1302 	umull	r1, r3, r3, r2
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	2164      	movs	r1, #100	; 0x64
 800820c:	fb01 f303 	mul.w	r3, r1, r3
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	3332      	adds	r3, #50	; 0x32
 8008216:	4a08      	ldr	r2, [pc, #32]	; (8008238 <UART_SetConfig+0x2d4>)
 8008218:	fba2 2303 	umull	r2, r3, r2, r3
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	f003 0207 	and.w	r2, r3, #7
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4422      	add	r2, r4
 800822a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800822c:	e105      	b.n	800843a <UART_SetConfig+0x4d6>
 800822e:	bf00      	nop
 8008230:	40011000 	.word	0x40011000
 8008234:	40011400 	.word	0x40011400
 8008238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800823c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008240:	2200      	movs	r2, #0
 8008242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800824a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800824e:	4642      	mov	r2, r8
 8008250:	464b      	mov	r3, r9
 8008252:	1891      	adds	r1, r2, r2
 8008254:	6239      	str	r1, [r7, #32]
 8008256:	415b      	adcs	r3, r3
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800825e:	4641      	mov	r1, r8
 8008260:	1854      	adds	r4, r2, r1
 8008262:	4649      	mov	r1, r9
 8008264:	eb43 0501 	adc.w	r5, r3, r1
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	00eb      	lsls	r3, r5, #3
 8008272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008276:	00e2      	lsls	r2, r4, #3
 8008278:	4614      	mov	r4, r2
 800827a:	461d      	mov	r5, r3
 800827c:	4643      	mov	r3, r8
 800827e:	18e3      	adds	r3, r4, r3
 8008280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008284:	464b      	mov	r3, r9
 8008286:	eb45 0303 	adc.w	r3, r5, r3
 800828a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800828e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800829a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082aa:	4629      	mov	r1, r5
 80082ac:	008b      	lsls	r3, r1, #2
 80082ae:	4621      	mov	r1, r4
 80082b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b4:	4621      	mov	r1, r4
 80082b6:	008a      	lsls	r2, r1, #2
 80082b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082bc:	f7f8 fb36 	bl	800092c <__aeabi_uldivmod>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4b60      	ldr	r3, [pc, #384]	; (8008448 <UART_SetConfig+0x4e4>)
 80082c6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	011c      	lsls	r4, r3, #4
 80082ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	1891      	adds	r1, r2, r2
 80082e6:	61b9      	str	r1, [r7, #24]
 80082e8:	415b      	adcs	r3, r3
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082f0:	4641      	mov	r1, r8
 80082f2:	1851      	adds	r1, r2, r1
 80082f4:	6139      	str	r1, [r7, #16]
 80082f6:	4649      	mov	r1, r9
 80082f8:	414b      	adcs	r3, r1
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008308:	4659      	mov	r1, fp
 800830a:	00cb      	lsls	r3, r1, #3
 800830c:	4651      	mov	r1, sl
 800830e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008312:	4651      	mov	r1, sl
 8008314:	00ca      	lsls	r2, r1, #3
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	4603      	mov	r3, r0
 800831c:	4642      	mov	r2, r8
 800831e:	189b      	adds	r3, r3, r2
 8008320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008324:	464b      	mov	r3, r9
 8008326:	460a      	mov	r2, r1
 8008328:	eb42 0303 	adc.w	r3, r2, r3
 800832c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	67bb      	str	r3, [r7, #120]	; 0x78
 800833a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008348:	4649      	mov	r1, r9
 800834a:	008b      	lsls	r3, r1, #2
 800834c:	4641      	mov	r1, r8
 800834e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008352:	4641      	mov	r1, r8
 8008354:	008a      	lsls	r2, r1, #2
 8008356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800835a:	f7f8 fae7 	bl	800092c <__aeabi_uldivmod>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4b39      	ldr	r3, [pc, #228]	; (8008448 <UART_SetConfig+0x4e4>)
 8008364:	fba3 1302 	umull	r1, r3, r3, r2
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	2164      	movs	r1, #100	; 0x64
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	3332      	adds	r3, #50	; 0x32
 8008376:	4a34      	ldr	r2, [pc, #208]	; (8008448 <UART_SetConfig+0x4e4>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008382:	441c      	add	r4, r3
 8008384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008388:	2200      	movs	r2, #0
 800838a:	673b      	str	r3, [r7, #112]	; 0x70
 800838c:	677a      	str	r2, [r7, #116]	; 0x74
 800838e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	1891      	adds	r1, r2, r2
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	415b      	adcs	r3, r3
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083a2:	4641      	mov	r1, r8
 80083a4:	1851      	adds	r1, r2, r1
 80083a6:	6039      	str	r1, [r7, #0]
 80083a8:	4649      	mov	r1, r9
 80083aa:	414b      	adcs	r3, r1
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083ba:	4659      	mov	r1, fp
 80083bc:	00cb      	lsls	r3, r1, #3
 80083be:	4651      	mov	r1, sl
 80083c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083c4:	4651      	mov	r1, sl
 80083c6:	00ca      	lsls	r2, r1, #3
 80083c8:	4610      	mov	r0, r2
 80083ca:	4619      	mov	r1, r3
 80083cc:	4603      	mov	r3, r0
 80083ce:	4642      	mov	r2, r8
 80083d0:	189b      	adds	r3, r3, r2
 80083d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80083d4:	464b      	mov	r3, r9
 80083d6:	460a      	mov	r2, r1
 80083d8:	eb42 0303 	adc.w	r3, r2, r3
 80083dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	663b      	str	r3, [r7, #96]	; 0x60
 80083e8:	667a      	str	r2, [r7, #100]	; 0x64
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083f6:	4649      	mov	r1, r9
 80083f8:	008b      	lsls	r3, r1, #2
 80083fa:	4641      	mov	r1, r8
 80083fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008400:	4641      	mov	r1, r8
 8008402:	008a      	lsls	r2, r1, #2
 8008404:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008408:	f7f8 fa90 	bl	800092c <__aeabi_uldivmod>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <UART_SetConfig+0x4e4>)
 8008412:	fba3 1302 	umull	r1, r3, r3, r2
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	2164      	movs	r1, #100	; 0x64
 800841a:	fb01 f303 	mul.w	r3, r1, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	3332      	adds	r3, #50	; 0x32
 8008424:	4a08      	ldr	r2, [pc, #32]	; (8008448 <UART_SetConfig+0x4e4>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	f003 020f 	and.w	r2, r3, #15
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4422      	add	r2, r4
 8008438:	609a      	str	r2, [r3, #8]
}
 800843a:	bf00      	nop
 800843c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008440:	46bd      	mov	sp, r7
 8008442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008446:	bf00      	nop
 8008448:	51eb851f 	.word	0x51eb851f

0800844c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b10      	cmp	r3, #16
 8008460:	d103      	bne.n	800846a <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	e002      	b.n	8008470 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4b16      	ldr	r3, [pc, #88]	; (80084cc <FSMC_NAND_Init+0x80>)
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8008480:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8008486:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 800848c:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8008494:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 800849c:	431a      	orrs	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f043 0308 	orr.w	r3, r3, #8
 80084a6:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b10      	cmp	r3, #16
 80084ae:	d103      	bne.n	80084b8 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	e002      	b.n	80084be <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	fff00181 	.word	0xfff00181

080084d0 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b10      	cmp	r3, #16
 80084e4:	d103      	bne.n	80084ee <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e002      	b.n	80084f4 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f2:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008502:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 800850a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8008512:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b10      	cmp	r3, #16
 800851e:	d103      	bne.n	8008528 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	609a      	str	r2, [r3, #8]
 8008526:	e002      	b.n	800852e <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b10      	cmp	r3, #16
 8008550:	d103      	bne.n	800855a <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e002      	b.n	8008560 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800856e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8008576:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 800857e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b10      	cmp	r3, #16
 800858a:	d103      	bne.n	8008594 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	60da      	str	r2, [r3, #12]
 8008592:	e002      	b.n	800859a <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <__NVIC_SetPriority>:
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db0a      	blt.n	80085d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	490c      	ldr	r1, [pc, #48]	; (80085f4 <__NVIC_SetPriority+0x4c>)
 80085c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c6:	0112      	lsls	r2, r2, #4
 80085c8:	b2d2      	uxtb	r2, r2
 80085ca:	440b      	add	r3, r1
 80085cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085d0:	e00a      	b.n	80085e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4908      	ldr	r1, [pc, #32]	; (80085f8 <__NVIC_SetPriority+0x50>)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	3b04      	subs	r3, #4
 80085e0:	0112      	lsls	r2, r2, #4
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	440b      	add	r3, r1
 80085e6:	761a      	strb	r2, [r3, #24]
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	e000e100 	.word	0xe000e100
 80085f8:	e000ed00 	.word	0xe000ed00

080085fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <SysTick_Handler+0x1c>)
 8008602:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008604:	f001 fea4 	bl	800a350 <xTaskGetSchedulerState>
 8008608:	4603      	mov	r3, r0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d001      	beq.n	8008612 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800860e:	f002 fc8b 	bl	800af28 <xPortSysTickHandler>
  }
}
 8008612:	bf00      	nop
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	e000e010 	.word	0xe000e010

0800861c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008620:	2100      	movs	r1, #0
 8008622:	f06f 0004 	mvn.w	r0, #4
 8008626:	f7ff ffbf 	bl	80085a8 <__NVIC_SetPriority>
#endif
}
 800862a:	bf00      	nop
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008636:	f3ef 8305 	mrs	r3, IPSR
 800863a:	603b      	str	r3, [r7, #0]
  return(result);
 800863c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008642:	f06f 0305 	mvn.w	r3, #5
 8008646:	607b      	str	r3, [r7, #4]
 8008648:	e00f      	b.n	800866a <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <osKernelInitialize+0x44>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d108      	bne.n	8008664 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8008652:	4809      	ldr	r0, [pc, #36]	; (8008678 <osKernelInitialize+0x48>)
 8008654:	f002 fe64 	bl	800b320 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <osKernelInitialize+0x44>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
 8008662:	e002      	b.n	800866a <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8008664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008668:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800866a:	687b      	ldr	r3, [r7, #4]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000bb8 	.word	0x20000bb8
 8008678:	20000068 	.word	0x20000068

0800867c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008682:	f3ef 8305 	mrs	r3, IPSR
 8008686:	603b      	str	r3, [r7, #0]
  return(result);
 8008688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800868e:	f06f 0305 	mvn.w	r3, #5
 8008692:	607b      	str	r3, [r7, #4]
 8008694:	e010      	b.n	80086b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008696:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <osKernelStart+0x48>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d109      	bne.n	80086b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800869e:	f7ff ffbd 	bl	800861c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086a2:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <osKernelStart+0x48>)
 80086a4:	2202      	movs	r2, #2
 80086a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086a8:	f001 f9f6 	bl	8009a98 <vTaskStartScheduler>
      stat = osOK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	607b      	str	r3, [r7, #4]
 80086b0:	e002      	b.n	80086b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086b8:	687b      	ldr	r3, [r7, #4]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000bb8 	.word	0x20000bb8

080086c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08e      	sub	sp, #56	; 0x38
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086d8:	f3ef 8305 	mrs	r3, IPSR
 80086dc:	617b      	str	r3, [r7, #20]
  return(result);
 80086de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d17e      	bne.n	80087e2 <osThreadNew+0x11a>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d07b      	beq.n	80087e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80086ea:	2380      	movs	r3, #128	; 0x80
 80086ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80086ee:	2318      	movs	r3, #24
 80086f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d045      	beq.n	800878e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <osThreadNew+0x48>
        name = attr->name;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <osThreadNew+0x6e>
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b38      	cmp	r3, #56	; 0x38
 8008728:	d805      	bhi.n	8008736 <osThreadNew+0x6e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <osThreadNew+0x72>
        return (NULL);
 8008736:	2300      	movs	r3, #0
 8008738:	e054      	b.n	80087e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	089b      	lsrs	r3, r3, #2
 8008748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <osThreadNew+0xa8>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2bbb      	cmp	r3, #187	; 0xbb
 8008758:	d90a      	bls.n	8008770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <osThreadNew+0xa8>
        mem = 1;
 800876a:	2301      	movs	r3, #1
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	e010      	b.n	8008792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10c      	bne.n	8008792 <osThreadNew+0xca>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <osThreadNew+0xca>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d104      	bne.n	8008792 <osThreadNew+0xca>
          mem = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	61bb      	str	r3, [r7, #24]
 800878c:	e001      	b.n	8008792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d110      	bne.n	80087ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087a0:	9202      	str	r2, [sp, #8]
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6a3a      	ldr	r2, [r7, #32]
 80087ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 ff86 	bl	80096c0 <xTaskCreateStatic>
 80087b4:	4603      	mov	r3, r0
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	e013      	b.n	80087e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d110      	bne.n	80087e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	f107 0310 	add.w	r3, r7, #16
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 ffd1 	bl	800977a <xTaskCreate>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d001      	beq.n	80087e2 <osThreadNew+0x11a>
            hTask = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087e2:	693b      	ldr	r3, [r7, #16]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3728      	adds	r7, #40	; 0x28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f4:	f3ef 8305 	mrs	r3, IPSR
 80087f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80087fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <osDelay+0x1c>
    stat = osErrorISR;
 8008800:	f06f 0305 	mvn.w	r3, #5
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e007      	b.n	8008818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f90c 	bl	8009a30 <vTaskDelay>
    }
  }

  return (stat);
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008822:	b580      	push	{r7, lr}
 8008824:	b08a      	sub	sp, #40	; 0x28
 8008826:	af02      	add	r7, sp, #8
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008832:	f3ef 8305 	mrs	r3, IPSR
 8008836:	613b      	str	r3, [r7, #16]
  return(result);
 8008838:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800883a:	2b00      	cmp	r3, #0
 800883c:	d175      	bne.n	800892a <osSemaphoreNew+0x108>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d072      	beq.n	800892a <osSemaphoreNew+0x108>
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	429a      	cmp	r2, r3
 800884a:	d86e      	bhi.n	800892a <osSemaphoreNew+0x108>
    mem = -1;
 800884c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d015      	beq.n	8008884 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d006      	beq.n	800886e <osSemaphoreNew+0x4c>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	2b4f      	cmp	r3, #79	; 0x4f
 8008866:	d902      	bls.n	800886e <osSemaphoreNew+0x4c>
        mem = 1;
 8008868:	2301      	movs	r3, #1
 800886a:	61bb      	str	r3, [r7, #24]
 800886c:	e00c      	b.n	8008888 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d108      	bne.n	8008888 <osSemaphoreNew+0x66>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <osSemaphoreNew+0x66>
          mem = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	e001      	b.n	8008888 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888e:	d04c      	beq.n	800892a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d128      	bne.n	80088e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10a      	bne.n	80088b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	2203      	movs	r2, #3
 80088a2:	9200      	str	r2, [sp, #0]
 80088a4:	2200      	movs	r2, #0
 80088a6:	2100      	movs	r1, #0
 80088a8:	2001      	movs	r0, #1
 80088aa:	f000 f993 	bl	8008bd4 <xQueueGenericCreateStatic>
 80088ae:	61f8      	str	r0, [r7, #28]
 80088b0:	e005      	b.n	80088be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80088b2:	2203      	movs	r2, #3
 80088b4:	2100      	movs	r1, #0
 80088b6:	2001      	movs	r0, #1
 80088b8:	f000 fa04 	bl	8008cc4 <xQueueGenericCreate>
 80088bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d022      	beq.n	800890a <osSemaphoreNew+0xe8>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01f      	beq.n	800890a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088ca:	2300      	movs	r3, #0
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	69f8      	ldr	r0, [r7, #28]
 80088d2:	f000 fabf 	bl	8008e54 <xQueueGenericSend>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d016      	beq.n	800890a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80088dc:	69f8      	ldr	r0, [r7, #28]
 80088de:	f000 fd33 	bl	8009348 <vQueueDelete>
            hSemaphore = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	e010      	b.n	800890a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d108      	bne.n	8008900 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	461a      	mov	r2, r3
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fa41 	bl	8008d7e <xQueueCreateCountingSemaphoreStatic>
 80088fc:	61f8      	str	r0, [r7, #28]
 80088fe:	e004      	b.n	800890a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fa72 	bl	8008dec <xQueueCreateCountingSemaphore>
 8008908:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00c      	beq.n	800892a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <osSemaphoreNew+0xfc>
          name = attr->name;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	617b      	str	r3, [r7, #20]
 800891c:	e001      	b.n	8008922 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008922:	6979      	ldr	r1, [r7, #20]
 8008924:	69f8      	ldr	r0, [r7, #28]
 8008926:	f000 fe43 	bl	80095b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800892a:	69fb      	ldr	r3, [r7, #28]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a07      	ldr	r2, [pc, #28]	; (8008960 <vApplicationGetIdleTaskMemory+0x2c>)
 8008944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4a06      	ldr	r2, [pc, #24]	; (8008964 <vApplicationGetIdleTaskMemory+0x30>)
 800894a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2280      	movs	r2, #128	; 0x80
 8008950:	601a      	str	r2, [r3, #0]
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20005bbc 	.word	0x20005bbc
 8008964:	20005c78 	.word	0x20005c78

08008968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a07      	ldr	r2, [pc, #28]	; (8008994 <vApplicationGetTimerTaskMemory+0x2c>)
 8008978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a06      	ldr	r2, [pc, #24]	; (8008998 <vApplicationGetTimerTaskMemory+0x30>)
 800897e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008986:	601a      	str	r2, [r3, #0]
}
 8008988:	bf00      	nop
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	20005e78 	.word	0x20005e78
 8008998:	20005f34 	.word	0x20005f34

0800899c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f103 0208 	add.w	r2, r3, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f103 0208 	add.w	r2, r3, #8
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f103 0208 	add.w	r2, r3, #8
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a54:	d103      	bne.n	8008a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	e00c      	b.n	8008a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3308      	adds	r3, #8
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e002      	b.n	8008a6c <vListInsert+0x2e>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d2f6      	bcs.n	8008a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6892      	ldr	r2, [r2, #8]
 8008ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6852      	ldr	r2, [r2, #4]
 8008ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d103      	bne.n	8008ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	1e5a      	subs	r2, r3, #1
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10a      	bne.n	8008b2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b2a:	bf00      	nop
 8008b2c:	e7fe      	b.n	8008b2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b2e:	f002 f969 	bl	800ae04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	441a      	add	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	68f9      	ldr	r1, [r7, #12]
 8008b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b64:	fb01 f303 	mul.w	r3, r1, r3
 8008b68:	441a      	add	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	22ff      	movs	r2, #255	; 0xff
 8008b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d114      	bne.n	8008bae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01a      	beq.n	8008bc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3310      	adds	r3, #16
 8008b90:	4618      	mov	r0, r3
 8008b92:	f001 fa1b 	bl	8009fcc <xTaskRemoveFromEventList>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d012      	beq.n	8008bc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b9c:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <xQueueGenericReset+0xcc>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	e009      	b.n	8008bc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3310      	adds	r3, #16
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff fef2 	bl	800899c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3324      	adds	r3, #36	; 0x24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff feed 	bl	800899c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bc2:	f002 f94f 	bl	800ae64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bc6:	2301      	movs	r3, #1
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08e      	sub	sp, #56	; 0x38
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10a      	bne.n	8008bfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bfa:	bf00      	nop
 8008bfc:	e7fe      	b.n	8008bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <xQueueGenericCreateStatic+0x52>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <xQueueGenericCreateStatic+0x56>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <xQueueGenericCreateStatic+0x58>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	623b      	str	r3, [r7, #32]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <xQueueGenericCreateStatic+0x7e>
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <xQueueGenericCreateStatic+0x82>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e000      	b.n	8008c58 <xQueueGenericCreateStatic+0x84>
 8008c56:	2300      	movs	r3, #0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	61fb      	str	r3, [r7, #28]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c72:	2350      	movs	r3, #80	; 0x50
 8008c74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b50      	cmp	r3, #80	; 0x50
 8008c7a:	d00a      	beq.n	8008c92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	61bb      	str	r3, [r7, #24]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00d      	beq.n	8008cba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ca6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f83f 	bl	8008d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3730      	adds	r7, #48	; 0x30
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	; 0x28
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <xQueueGenericCreate+0x2a>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	613b      	str	r3, [r7, #16]
}
 8008cea:	bf00      	nop
 8008cec:	e7fe      	b.n	8008cec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	fb02 f303 	mul.w	r3, r2, r3
 8008cf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3350      	adds	r3, #80	; 0x50
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f002 f9a3 	bl	800b048 <pvPortMalloc>
 8008d02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d011      	beq.n	8008d2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	3350      	adds	r3, #80	; 0x50
 8008d12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d1c:	79fa      	ldrb	r2, [r7, #7]
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	4613      	mov	r3, r2
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 f805 	bl	8008d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e002      	b.n	8008d5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d66:	2101      	movs	r1, #1
 8008d68:	69b8      	ldr	r0, [r7, #24]
 8008d6a:	f7ff fecb 	bl	8008b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b08a      	sub	sp, #40	; 0x28
 8008d82:	af02      	add	r7, sp, #8
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	61bb      	str	r3, [r7, #24]
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d90a      	bls.n	8008dc4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	617b      	str	r3, [r7, #20]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f7ff ff00 	bl	8008bd4 <xQueueGenericCreateStatic>
 8008dd4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008de2:	69fb      	ldr	r3, [r7, #28]
	}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3720      	adds	r7, #32
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	613b      	str	r3, [r7, #16]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d90a      	bls.n	8008e30 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	60fb      	str	r3, [r7, #12]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e30:	2202      	movs	r2, #2
 8008e32:	2100      	movs	r1, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff45 	bl	8008cc4 <xQueueGenericCreate>
 8008e3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e48:	697b      	ldr	r3, [r7, #20]
	}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08e      	sub	sp, #56	; 0x38
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e62:	2300      	movs	r3, #0
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <xQueueGenericSend+0x32>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <xQueueGenericSend+0x40>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <xQueueGenericSend+0x44>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <xQueueGenericSend+0x46>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <xQueueGenericSend+0x60>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d103      	bne.n	8008ec2 <xQueueGenericSend+0x6e>
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <xQueueGenericSend+0x72>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <xQueueGenericSend+0x74>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	623b      	str	r3, [r7, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee2:	f001 fa35 	bl	800a350 <xTaskGetSchedulerState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <xQueueGenericSend+0x9e>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <xQueueGenericSend+0xa2>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e000      	b.n	8008ef8 <xQueueGenericSend+0xa4>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <xQueueGenericSend+0xbe>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	61fb      	str	r3, [r7, #28]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f12:	f001 ff77 	bl	800ae04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d302      	bcc.n	8008f28 <xQueueGenericSend+0xd4>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d129      	bne.n	8008f7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2e:	f000 fa2e 	bl	800938e <prvCopyDataToQueue>
 8008f32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d010      	beq.n	8008f5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	3324      	adds	r3, #36	; 0x24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f843 	bl	8009fcc <xTaskRemoveFromEventList>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d013      	beq.n	8008f74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f4c:	4b3f      	ldr	r3, [pc, #252]	; (800904c <xQueueGenericSend+0x1f8>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	e00a      	b.n	8008f74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f64:	4b39      	ldr	r3, [pc, #228]	; (800904c <xQueueGenericSend+0x1f8>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f74:	f001 ff76 	bl	800ae64 <vPortExitCritical>
				return pdPASS;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e063      	b.n	8009044 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f82:	f001 ff6f 	bl	800ae64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	e05c      	b.n	8009044 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 f87d 	bl	800a094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f9e:	f001 ff61 	bl	800ae64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fa2:	f000 fde9 	bl	8009b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fa6:	f001 ff2d 	bl	800ae04 <vPortEnterCritical>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb0:	b25b      	sxtb	r3, r3
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb6:	d103      	bne.n	8008fc0 <xQueueGenericSend+0x16c>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc6:	b25b      	sxtb	r3, r3
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fcc:	d103      	bne.n	8008fd6 <xQueueGenericSend+0x182>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd6:	f001 ff45 	bl	800ae64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fda:	1d3a      	adds	r2, r7, #4
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 f86c 	bl	800a0c0 <xTaskCheckForTimeOut>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d124      	bne.n	8009038 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ff0:	f000 fac5 	bl	800957e <prvIsQueueFull>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d018      	beq.n	800902c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	3310      	adds	r3, #16
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f000 ff92 	bl	8009f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800900a:	f000 fa50 	bl	80094ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800900e:	f000 fdc1 	bl	8009b94 <xTaskResumeAll>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	f47f af7c 	bne.w	8008f12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <xQueueGenericSend+0x1f8>)
 800901c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	e772      	b.n	8008f12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800902c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800902e:	f000 fa3e 	bl	80094ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009032:	f000 fdaf 	bl	8009b94 <xTaskResumeAll>
 8009036:	e76c      	b.n	8008f12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800903a:	f000 fa38 	bl	80094ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800903e:	f000 fda9 	bl	8009b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009044:	4618      	mov	r0, r3
 8009046:	3738      	adds	r7, #56	; 0x38
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b090      	sub	sp, #64	; 0x40
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <xQueueGenericSendFromISR+0x3c>
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <xQueueGenericSendFromISR+0x40>
 800908c:	2301      	movs	r3, #1
 800908e:	e000      	b.n	8009092 <xQueueGenericSendFromISR+0x42>
 8009090:	2300      	movs	r3, #0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSendFromISR+0x6a>
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <xQueueGenericSendFromISR+0x6e>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <xQueueGenericSendFromISR+0x70>
 80090be:	2300      	movs	r3, #0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	623b      	str	r3, [r7, #32]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090da:	f001 ff75 	bl	800afc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090de:	f3ef 8211 	mrs	r2, BASEPRI
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	61fa      	str	r2, [r7, #28]
 80090f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	429a      	cmp	r2, r3
 8009104:	d302      	bcc.n	800910c <xQueueGenericSendFromISR+0xbc>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d12f      	bne.n	800916c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009122:	f000 f934 	bl	800938e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009126:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800912e:	d112      	bne.n	8009156 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d016      	beq.n	8009166 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	3324      	adds	r3, #36	; 0x24
 800913c:	4618      	mov	r0, r3
 800913e:	f000 ff45 	bl	8009fcc <xTaskRemoveFromEventList>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00e      	beq.n	8009166 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e007      	b.n	8009166 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009156:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800915a:	3301      	adds	r3, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	b25a      	sxtb	r2, r3
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800916a:	e001      	b.n	8009170 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800916c:	2300      	movs	r3, #0
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800917a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800917c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800917e:	4618      	mov	r0, r3
 8009180:	3740      	adds	r7, #64	; 0x40
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08c      	sub	sp, #48	; 0x30
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009194:	2300      	movs	r3, #0
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <xQueueReceive+0x30>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	623b      	str	r3, [r7, #32]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d103      	bne.n	80091c6 <xQueueReceive+0x3e>
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <xQueueReceive+0x42>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e000      	b.n	80091cc <xQueueReceive+0x44>
 80091ca:	2300      	movs	r3, #0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xQueueReceive+0x5e>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	61fb      	str	r3, [r7, #28]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091e6:	f001 f8b3 	bl	800a350 <xTaskGetSchedulerState>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <xQueueReceive+0x6e>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <xQueueReceive+0x72>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <xQueueReceive+0x74>
 80091fa:	2300      	movs	r3, #0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10a      	bne.n	8009216 <xQueueReceive+0x8e>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	61bb      	str	r3, [r7, #24]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009216:	f001 fdf5 	bl	800ae04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	d01f      	beq.n	8009266 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800922a:	f000 f91a 	bl	8009462 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	1e5a      	subs	r2, r3, #1
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00f      	beq.n	800925e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	3310      	adds	r3, #16
 8009242:	4618      	mov	r0, r3
 8009244:	f000 fec2 	bl	8009fcc <xTaskRemoveFromEventList>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800924e:	4b3d      	ldr	r3, [pc, #244]	; (8009344 <xQueueReceive+0x1bc>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800925e:	f001 fe01 	bl	800ae64 <vPortExitCritical>
				return pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	e069      	b.n	800933a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800926c:	f001 fdfa 	bl	800ae64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009270:	2300      	movs	r3, #0
 8009272:	e062      	b.n	800933a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800927a:	f107 0310 	add.w	r3, r7, #16
 800927e:	4618      	mov	r0, r3
 8009280:	f000 ff08 	bl	800a094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009288:	f001 fdec 	bl	800ae64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800928c:	f000 fc74 	bl	8009b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009290:	f001 fdb8 	bl	800ae04 <vPortEnterCritical>
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929a:	b25b      	sxtb	r3, r3
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a0:	d103      	bne.n	80092aa <xQueueReceive+0x122>
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b6:	d103      	bne.n	80092c0 <xQueueReceive+0x138>
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092c0:	f001 fdd0 	bl	800ae64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092c4:	1d3a      	adds	r2, r7, #4
 80092c6:	f107 0310 	add.w	r3, r7, #16
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fef7 	bl	800a0c0 <xTaskCheckForTimeOut>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d123      	bne.n	8009320 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092da:	f000 f93a 	bl	8009552 <prvIsQueueEmpty>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d017      	beq.n	8009314 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	3324      	adds	r3, #36	; 0x24
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fe1d 	bl	8009f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f4:	f000 f8db 	bl	80094ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092f8:	f000 fc4c 	bl	8009b94 <xTaskResumeAll>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d189      	bne.n	8009216 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009302:	4b10      	ldr	r3, [pc, #64]	; (8009344 <xQueueReceive+0x1bc>)
 8009304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	e780      	b.n	8009216 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009316:	f000 f8ca 	bl	80094ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800931a:	f000 fc3b 	bl	8009b94 <xTaskResumeAll>
 800931e:	e77a      	b.n	8009216 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009322:	f000 f8c4 	bl	80094ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009326:	f000 fc35 	bl	8009b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800932a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932c:	f000 f911 	bl	8009552 <prvIsQueueEmpty>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	f43f af6f 	beq.w	8009216 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800933a:	4618      	mov	r0, r3
 800933c:	3730      	adds	r7, #48	; 0x30
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <vQueueDelete+0x28>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	60bb      	str	r3, [r7, #8]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f947 	bl	8009604 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f001 ff05 	bl	800b190 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b086      	sub	sp, #24
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10d      	bne.n	80093c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d14d      	bne.n	8009450 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 ffe7 	bl	800a38c <xTaskPriorityDisinherit>
 80093be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	609a      	str	r2, [r3, #8]
 80093c6:	e043      	b.n	8009450 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d119      	bne.n	8009402 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6858      	ldr	r0, [r3, #4]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	461a      	mov	r2, r3
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	f002 f957 	bl	800b68c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	441a      	add	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d32b      	bcc.n	8009450 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	605a      	str	r2, [r3, #4]
 8009400:	e026      	b.n	8009450 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68d8      	ldr	r0, [r3, #12]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	461a      	mov	r2, r3
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	f002 f93d 	bl	800b68c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	425b      	negs	r3, r3
 800941c:	441a      	add	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d207      	bcs.n	800943e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	425b      	negs	r3, r3
 8009438:	441a      	add	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d105      	bne.n	8009450 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	3b01      	subs	r3, #1
 800944e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009458:	697b      	ldr	r3, [r7, #20]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	d018      	beq.n	80094a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	441a      	add	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d303      	bcc.n	8009496 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68d9      	ldr	r1, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	461a      	mov	r2, r3
 80094a0:	6838      	ldr	r0, [r7, #0]
 80094a2:	f002 f8f3 	bl	800b68c <memcpy>
	}
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094b6:	f001 fca5 	bl	800ae04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c2:	e011      	b.n	80094e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d012      	beq.n	80094f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3324      	adds	r3, #36	; 0x24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 fd7b 	bl	8009fcc <xTaskRemoveFromEventList>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094dc:	f000 fe52 	bl	800a184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dce9      	bgt.n	80094c4 <prvUnlockQueue+0x16>
 80094f0:	e000      	b.n	80094f4 <prvUnlockQueue+0x46>
					break;
 80094f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	22ff      	movs	r2, #255	; 0xff
 80094f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094fc:	f001 fcb2 	bl	800ae64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009500:	f001 fc80 	bl	800ae04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800950c:	e011      	b.n	8009532 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d012      	beq.n	800953c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3310      	adds	r3, #16
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fd56 	bl	8009fcc <xTaskRemoveFromEventList>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009526:	f000 fe2d 	bl	800a184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	3b01      	subs	r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dce9      	bgt.n	800950e <prvUnlockQueue+0x60>
 800953a:	e000      	b.n	800953e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800953c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	22ff      	movs	r2, #255	; 0xff
 8009542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009546:	f001 fc8d 	bl	800ae64 <vPortExitCritical>
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800955a:	f001 fc53 	bl	800ae04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009566:	2301      	movs	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e001      	b.n	8009570 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009570:	f001 fc78 	bl	800ae64 <vPortExitCritical>

	return xReturn;
 8009574:	68fb      	ldr	r3, [r7, #12]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009586:	f001 fc3d 	bl	800ae04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	429a      	cmp	r2, r3
 8009594:	d102      	bne.n	800959c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009596:	2301      	movs	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	e001      	b.n	80095a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095a0:	f001 fc60 	bl	800ae64 <vPortExitCritical>

	return xReturn;
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e014      	b.n	80095ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095c0:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <vQueueAddToRegistry+0x50>)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095cc:	490c      	ldr	r1, [pc, #48]	; (8009600 <vQueueAddToRegistry+0x50>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095d6:	4a0a      	ldr	r2, [pc, #40]	; (8009600 <vQueueAddToRegistry+0x50>)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095e2:	e006      	b.n	80095f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3301      	adds	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	d9e7      	bls.n	80095c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20006334 	.word	0x20006334

08009604 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e016      	b.n	8009640 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <vQueueUnregisterQueue+0x50>)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	429a      	cmp	r2, r3
 8009620:	d10b      	bne.n	800963a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009622:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <vQueueUnregisterQueue+0x50>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2100      	movs	r1, #0
 8009628:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800962c:	4a09      	ldr	r2, [pc, #36]	; (8009654 <vQueueUnregisterQueue+0x50>)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	4413      	add	r3, r2
 8009634:	2200      	movs	r2, #0
 8009636:	605a      	str	r2, [r3, #4]
				break;
 8009638:	e006      	b.n	8009648 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b07      	cmp	r3, #7
 8009644:	d9e5      	bls.n	8009612 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	20006334 	.word	0x20006334

08009658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009668:	f001 fbcc 	bl	800ae04 <vPortEnterCritical>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009672:	b25b      	sxtb	r3, r3
 8009674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009678:	d103      	bne.n	8009682 <vQueueWaitForMessageRestricted+0x2a>
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009688:	b25b      	sxtb	r3, r3
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800968e:	d103      	bne.n	8009698 <vQueueWaitForMessageRestricted+0x40>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009698:	f001 fbe4 	bl	800ae64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	3324      	adds	r3, #36	; 0x24
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fc61 	bl	8009f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f7ff fefb 	bl	80094ae <prvUnlockQueue>
	}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08e      	sub	sp, #56	; 0x38
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	623b      	str	r3, [r7, #32]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10a      	bne.n	8009706 <xTaskCreateStatic+0x46>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	61fb      	str	r3, [r7, #28]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009706:	23bc      	movs	r3, #188	; 0xbc
 8009708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2bbc      	cmp	r3, #188	; 0xbc
 800970e:	d00a      	beq.n	8009726 <xTaskCreateStatic+0x66>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	61bb      	str	r3, [r7, #24]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009726:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01e      	beq.n	800976c <xTaskCreateStatic+0xac>
 800972e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01b      	beq.n	800976c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	2202      	movs	r2, #2
 8009742:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009746:	2300      	movs	r3, #0
 8009748:	9303      	str	r3, [sp, #12]
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	9302      	str	r3, [sp, #8]
 800974e:	f107 0314 	add.w	r3, r7, #20
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 f850 	bl	8009804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009766:	f000 f8f3 	bl	8009950 <prvAddNewTaskToReadyList>
 800976a:	e001      	b.n	8009770 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009770:	697b      	ldr	r3, [r7, #20]
	}
 8009772:	4618      	mov	r0, r3
 8009774:	3728      	adds	r7, #40	; 0x28
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800977a:	b580      	push	{r7, lr}
 800977c:	b08c      	sub	sp, #48	; 0x30
 800977e:	af04      	add	r7, sp, #16
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4613      	mov	r3, r2
 8009788:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fc5a 	bl	800b048 <pvPortMalloc>
 8009794:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00e      	beq.n	80097ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800979c:	20bc      	movs	r0, #188	; 0xbc
 800979e:	f001 fc53 	bl	800b048 <pvPortMalloc>
 80097a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	631a      	str	r2, [r3, #48]	; 0x30
 80097b0:	e005      	b.n	80097be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f001 fcec 	bl	800b190 <vPortFree>
 80097b8:	e001      	b.n	80097be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097ba:	2300      	movs	r3, #0
 80097bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d017      	beq.n	80097f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	2300      	movs	r3, #0
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 f80e 	bl	8009804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097e8:	69f8      	ldr	r0, [r7, #28]
 80097ea:	f000 f8b1 	bl	8009950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097ee:	2301      	movs	r3, #1
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	e002      	b.n	80097fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097fa:	69bb      	ldr	r3, [r7, #24]
	}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3720      	adds	r7, #32
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	461a      	mov	r2, r3
 800981c:	21a5      	movs	r1, #165	; 0xa5
 800981e:	f001 ff43 	bl	800b6a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800982c:	3b01      	subs	r3, #1
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	617b      	str	r3, [r7, #20]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01f      	beq.n	80098a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	e012      	b.n	800988e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	7819      	ldrb	r1, [r3, #0]
 8009870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	3334      	adds	r3, #52	; 0x34
 8009878:	460a      	mov	r2, r1
 800987a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	4413      	add	r3, r2
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d006      	beq.n	8009896 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	3301      	adds	r3, #1
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	2b0f      	cmp	r3, #15
 8009892:	d9e9      	bls.n	8009868 <prvInitialiseNewTask+0x64>
 8009894:	e000      	b.n	8009898 <prvInitialiseNewTask+0x94>
			{
				break;
 8009896:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098a0:	e003      	b.n	80098aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	2b37      	cmp	r3, #55	; 0x37
 80098ae:	d901      	bls.n	80098b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098b0:	2337      	movs	r3, #55	; 0x37
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	2200      	movs	r2, #0
 80098c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	3304      	adds	r3, #4
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff f886 	bl	80089dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	3318      	adds	r3, #24
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff f881 	bl	80089dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	3354      	adds	r3, #84	; 0x54
 8009904:	2260      	movs	r2, #96	; 0x60
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f001 fecd 	bl	800b6a8 <memset>
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	4a0c      	ldr	r2, [pc, #48]	; (8009944 <prvInitialiseNewTask+0x140>)
 8009912:	659a      	str	r2, [r3, #88]	; 0x58
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <prvInitialiseNewTask+0x144>)
 8009918:	65da      	str	r2, [r3, #92]	; 0x5c
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	4a0b      	ldr	r2, [pc, #44]	; (800994c <prvInitialiseNewTask+0x148>)
 800991e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	68f9      	ldr	r1, [r7, #12]
 8009924:	69b8      	ldr	r0, [r7, #24]
 8009926:	f001 f941 	bl	800abac <pxPortInitialiseStack>
 800992a:	4602      	mov	r2, r0
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800993c:	bf00      	nop
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	0800e7e8 	.word	0x0800e7e8
 8009948:	0800e808 	.word	0x0800e808
 800994c:	0800e7c8 	.word	0x0800e7c8

08009950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009958:	f001 fa54 	bl	800ae04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800995c:	4b2d      	ldr	r3, [pc, #180]	; (8009a14 <prvAddNewTaskToReadyList+0xc4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	4a2c      	ldr	r2, [pc, #176]	; (8009a14 <prvAddNewTaskToReadyList+0xc4>)
 8009964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009966:	4b2c      	ldr	r3, [pc, #176]	; (8009a18 <prvAddNewTaskToReadyList+0xc8>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d109      	bne.n	8009982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800996e:	4a2a      	ldr	r2, [pc, #168]	; (8009a18 <prvAddNewTaskToReadyList+0xc8>)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009974:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <prvAddNewTaskToReadyList+0xc4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d110      	bne.n	800999e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800997c:	f000 fc26 	bl	800a1cc <prvInitialiseTaskLists>
 8009980:	e00d      	b.n	800999e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009982:	4b26      	ldr	r3, [pc, #152]	; (8009a1c <prvAddNewTaskToReadyList+0xcc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800998a:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <prvAddNewTaskToReadyList+0xc8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	429a      	cmp	r2, r3
 8009996:	d802      	bhi.n	800999e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009998:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <prvAddNewTaskToReadyList+0xc8>)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800999e:	4b20      	ldr	r3, [pc, #128]	; (8009a20 <prvAddNewTaskToReadyList+0xd0>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	4a1e      	ldr	r2, [pc, #120]	; (8009a20 <prvAddNewTaskToReadyList+0xd0>)
 80099a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099a8:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <prvAddNewTaskToReadyList+0xd0>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b4:	4b1b      	ldr	r3, [pc, #108]	; (8009a24 <prvAddNewTaskToReadyList+0xd4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d903      	bls.n	80099c4 <prvAddNewTaskToReadyList+0x74>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4a18      	ldr	r2, [pc, #96]	; (8009a24 <prvAddNewTaskToReadyList+0xd4>)
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	4613      	mov	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4a15      	ldr	r2, [pc, #84]	; (8009a28 <prvAddNewTaskToReadyList+0xd8>)
 80099d2:	441a      	add	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4619      	mov	r1, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f7ff f80b 	bl	80089f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099e0:	f001 fa40 	bl	800ae64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099e4:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <prvAddNewTaskToReadyList+0xcc>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00e      	beq.n	8009a0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <prvAddNewTaskToReadyList+0xc8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d207      	bcs.n	8009a0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <prvAddNewTaskToReadyList+0xdc>)
 80099fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20006848 	.word	0x20006848
 8009a18:	20006374 	.word	0x20006374
 8009a1c:	20006854 	.word	0x20006854
 8009a20:	20006864 	.word	0x20006864
 8009a24:	20006850 	.word	0x20006850
 8009a28:	20006378 	.word	0x20006378
 8009a2c:	e000ed04 	.word	0xe000ed04

08009a30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d017      	beq.n	8009a72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a42:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <vTaskDelay+0x60>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <vTaskDelay+0x30>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	60bb      	str	r3, [r7, #8]
}
 8009a5c:	bf00      	nop
 8009a5e:	e7fe      	b.n	8009a5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a60:	f000 f88a 	bl	8009b78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a64:	2100      	movs	r1, #0
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fcfe 	bl	800a468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a6c:	f000 f892 	bl	8009b94 <xTaskResumeAll>
 8009a70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d107      	bne.n	8009a88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a78:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <vTaskDelay+0x64>)
 8009a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a88:	bf00      	nop
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20006870 	.word	0x20006870
 8009a94:	e000ed04 	.word	0xe000ed04

08009a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009aa6:	463a      	mov	r2, r7
 8009aa8:	1d39      	adds	r1, r7, #4
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe ff40 	bl	8008934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	9202      	str	r2, [sp, #8]
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	460a      	mov	r2, r1
 8009ac6:	4924      	ldr	r1, [pc, #144]	; (8009b58 <vTaskStartScheduler+0xc0>)
 8009ac8:	4824      	ldr	r0, [pc, #144]	; (8009b5c <vTaskStartScheduler+0xc4>)
 8009aca:	f7ff fdf9 	bl	80096c0 <xTaskCreateStatic>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	4a23      	ldr	r2, [pc, #140]	; (8009b60 <vTaskStartScheduler+0xc8>)
 8009ad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ad4:	4b22      	ldr	r3, [pc, #136]	; (8009b60 <vTaskStartScheduler+0xc8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009adc:	2301      	movs	r3, #1
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e001      	b.n	8009ae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d102      	bne.n	8009af2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009aec:	f000 fd10 	bl	800a510 <xTimerCreateTimerTask>
 8009af0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d11b      	bne.n	8009b30 <vTaskStartScheduler+0x98>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	613b      	str	r3, [r7, #16]
}
 8009b0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b0c:	4b15      	ldr	r3, [pc, #84]	; (8009b64 <vTaskStartScheduler+0xcc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3354      	adds	r3, #84	; 0x54
 8009b12:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <vTaskStartScheduler+0xd0>)
 8009b14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b16:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <vTaskStartScheduler+0xd4>)
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b1e:	4b14      	ldr	r3, [pc, #80]	; (8009b70 <vTaskStartScheduler+0xd8>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b24:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <vTaskStartScheduler+0xdc>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b2a:	f001 f8c9 	bl	800acc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b2e:	e00e      	b.n	8009b4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b36:	d10a      	bne.n	8009b4e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	60fb      	str	r3, [r7, #12]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <vTaskStartScheduler+0xb4>
}
 8009b4e:	bf00      	nop
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	0800c698 	.word	0x0800c698
 8009b5c:	0800a19d 	.word	0x0800a19d
 8009b60:	2000686c 	.word	0x2000686c
 8009b64:	20006374 	.word	0x20006374
 8009b68:	2000007c 	.word	0x2000007c
 8009b6c:	20006868 	.word	0x20006868
 8009b70:	20006854 	.word	0x20006854
 8009b74:	2000684c 	.word	0x2000684c

08009b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <vTaskSuspendAll+0x18>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3301      	adds	r3, #1
 8009b82:	4a03      	ldr	r2, [pc, #12]	; (8009b90 <vTaskSuspendAll+0x18>)
 8009b84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b86:	bf00      	nop
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20006870 	.word	0x20006870

08009b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ba2:	4b42      	ldr	r3, [pc, #264]	; (8009cac <xTaskResumeAll+0x118>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10a      	bne.n	8009bc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	603b      	str	r3, [r7, #0]
}
 8009bbc:	bf00      	nop
 8009bbe:	e7fe      	b.n	8009bbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bc0:	f001 f920 	bl	800ae04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bc4:	4b39      	ldr	r3, [pc, #228]	; (8009cac <xTaskResumeAll+0x118>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	4a38      	ldr	r2, [pc, #224]	; (8009cac <xTaskResumeAll+0x118>)
 8009bcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bce:	4b37      	ldr	r3, [pc, #220]	; (8009cac <xTaskResumeAll+0x118>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d162      	bne.n	8009c9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bd6:	4b36      	ldr	r3, [pc, #216]	; (8009cb0 <xTaskResumeAll+0x11c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d05e      	beq.n	8009c9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bde:	e02f      	b.n	8009c40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be0:	4b34      	ldr	r3, [pc, #208]	; (8009cb4 <xTaskResumeAll+0x120>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3318      	adds	r3, #24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe ff5f 	bl	8008ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe ff5a 	bl	8008ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <xTaskResumeAll+0x124>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d903      	bls.n	8009c10 <xTaskResumeAll+0x7c>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	4a2a      	ldr	r2, [pc, #168]	; (8009cb8 <xTaskResumeAll+0x124>)
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4a27      	ldr	r2, [pc, #156]	; (8009cbc <xTaskResumeAll+0x128>)
 8009c1e:	441a      	add	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3304      	adds	r3, #4
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fe fee5 	bl	80089f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c30:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <xTaskResumeAll+0x12c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d302      	bcc.n	8009c40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c3a:	4b22      	ldr	r3, [pc, #136]	; (8009cc4 <xTaskResumeAll+0x130>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c40:	4b1c      	ldr	r3, [pc, #112]	; (8009cb4 <xTaskResumeAll+0x120>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1cb      	bne.n	8009be0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c4e:	f000 fb5f 	bl	800a310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c52:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <xTaskResumeAll+0x134>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d010      	beq.n	8009c80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c5e:	f000 f847 	bl	8009cf0 <xTaskIncrementTick>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c68:	4b16      	ldr	r3, [pc, #88]	; (8009cc4 <xTaskResumeAll+0x130>)
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f1      	bne.n	8009c5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009c7a:	4b13      	ldr	r3, [pc, #76]	; (8009cc8 <xTaskResumeAll+0x134>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c80:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <xTaskResumeAll+0x130>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d009      	beq.n	8009c9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <xTaskResumeAll+0x138>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c9c:	f001 f8e2 	bl	800ae64 <vPortExitCritical>

	return xAlreadyYielded;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20006870 	.word	0x20006870
 8009cb0:	20006848 	.word	0x20006848
 8009cb4:	20006808 	.word	0x20006808
 8009cb8:	20006850 	.word	0x20006850
 8009cbc:	20006378 	.word	0x20006378
 8009cc0:	20006374 	.word	0x20006374
 8009cc4:	2000685c 	.word	0x2000685c
 8009cc8:	20006858 	.word	0x20006858
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <xTaskGetTickCount+0x1c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cdc:	687b      	ldr	r3, [r7, #4]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	2000684c 	.word	0x2000684c

08009cf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cfa:	4b4f      	ldr	r3, [pc, #316]	; (8009e38 <xTaskIncrementTick+0x148>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f040 808f 	bne.w	8009e22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d04:	4b4d      	ldr	r3, [pc, #308]	; (8009e3c <xTaskIncrementTick+0x14c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d0c:	4a4b      	ldr	r2, [pc, #300]	; (8009e3c <xTaskIncrementTick+0x14c>)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d120      	bne.n	8009d5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d18:	4b49      	ldr	r3, [pc, #292]	; (8009e40 <xTaskIncrementTick+0x150>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	603b      	str	r3, [r7, #0]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <xTaskIncrementTick+0x46>
 8009d38:	4b41      	ldr	r3, [pc, #260]	; (8009e40 <xTaskIncrementTick+0x150>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	4b41      	ldr	r3, [pc, #260]	; (8009e44 <xTaskIncrementTick+0x154>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a3f      	ldr	r2, [pc, #252]	; (8009e40 <xTaskIncrementTick+0x150>)
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	4a3f      	ldr	r2, [pc, #252]	; (8009e44 <xTaskIncrementTick+0x154>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	4b3e      	ldr	r3, [pc, #248]	; (8009e48 <xTaskIncrementTick+0x158>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3301      	adds	r3, #1
 8009d52:	4a3d      	ldr	r2, [pc, #244]	; (8009e48 <xTaskIncrementTick+0x158>)
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	f000 fadb 	bl	800a310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d5a:	4b3c      	ldr	r3, [pc, #240]	; (8009e4c <xTaskIncrementTick+0x15c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d349      	bcc.n	8009df8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d64:	4b36      	ldr	r3, [pc, #216]	; (8009e40 <xTaskIncrementTick+0x150>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d104      	bne.n	8009d78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d6e:	4b37      	ldr	r3, [pc, #220]	; (8009e4c <xTaskIncrementTick+0x15c>)
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d74:	601a      	str	r2, [r3, #0]
					break;
 8009d76:	e03f      	b.n	8009df8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d78:	4b31      	ldr	r3, [pc, #196]	; (8009e40 <xTaskIncrementTick+0x150>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d203      	bcs.n	8009d98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d90:	4a2e      	ldr	r2, [pc, #184]	; (8009e4c <xTaskIncrementTick+0x15c>)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d96:	e02f      	b.n	8009df8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fe87 	bl	8008ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	3318      	adds	r3, #24
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fe7e 	bl	8008ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <xTaskIncrementTick+0x160>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d903      	bls.n	8009dc8 <xTaskIncrementTick+0xd8>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	4a22      	ldr	r2, [pc, #136]	; (8009e50 <xTaskIncrementTick+0x160>)
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <xTaskIncrementTick+0x164>)
 8009dd6:	441a      	add	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f7fe fe09 	bl	80089f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de8:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <xTaskIncrementTick+0x168>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d3b8      	bcc.n	8009d64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009df2:	2301      	movs	r3, #1
 8009df4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009df6:	e7b5      	b.n	8009d64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <xTaskIncrementTick+0x168>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfe:	4915      	ldr	r1, [pc, #84]	; (8009e54 <xTaskIncrementTick+0x164>)
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d901      	bls.n	8009e14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009e10:	2301      	movs	r3, #1
 8009e12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <xTaskIncrementTick+0x16c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e004      	b.n	8009e2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e22:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <xTaskIncrementTick+0x170>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	4a0d      	ldr	r2, [pc, #52]	; (8009e60 <xTaskIncrementTick+0x170>)
 8009e2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e2c:	697b      	ldr	r3, [r7, #20]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20006870 	.word	0x20006870
 8009e3c:	2000684c 	.word	0x2000684c
 8009e40:	20006800 	.word	0x20006800
 8009e44:	20006804 	.word	0x20006804
 8009e48:	20006860 	.word	0x20006860
 8009e4c:	20006868 	.word	0x20006868
 8009e50:	20006850 	.word	0x20006850
 8009e54:	20006378 	.word	0x20006378
 8009e58:	20006374 	.word	0x20006374
 8009e5c:	2000685c 	.word	0x2000685c
 8009e60:	20006858 	.word	0x20006858

08009e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e6a:	4b2a      	ldr	r3, [pc, #168]	; (8009f14 <vTaskSwitchContext+0xb0>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e72:	4b29      	ldr	r3, [pc, #164]	; (8009f18 <vTaskSwitchContext+0xb4>)
 8009e74:	2201      	movs	r2, #1
 8009e76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e78:	e046      	b.n	8009f08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009e7a:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <vTaskSwitchContext+0xb4>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e80:	4b26      	ldr	r3, [pc, #152]	; (8009f1c <vTaskSwitchContext+0xb8>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	e010      	b.n	8009eaa <vTaskSwitchContext+0x46>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <vTaskSwitchContext+0x3e>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	491d      	ldr	r1, [pc, #116]	; (8009f20 <vTaskSwitchContext+0xbc>)
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	440b      	add	r3, r1
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0e4      	beq.n	8009e88 <vTaskSwitchContext+0x24>
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <vTaskSwitchContext+0xbc>)
 8009eca:	4413      	add	r3, r2
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	605a      	str	r2, [r3, #4]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d104      	bne.n	8009eee <vTaskSwitchContext+0x8a>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	605a      	str	r2, [r3, #4]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	4a0b      	ldr	r2, [pc, #44]	; (8009f24 <vTaskSwitchContext+0xc0>)
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	4a08      	ldr	r2, [pc, #32]	; (8009f1c <vTaskSwitchContext+0xb8>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009efe:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <vTaskSwitchContext+0xc0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3354      	adds	r3, #84	; 0x54
 8009f04:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <vTaskSwitchContext+0xc4>)
 8009f06:	6013      	str	r3, [r2, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	20006870 	.word	0x20006870
 8009f18:	2000685c 	.word	0x2000685c
 8009f1c:	20006850 	.word	0x20006850
 8009f20:	20006378 	.word	0x20006378
 8009f24:	20006374 	.word	0x20006374
 8009f28:	2000007c 	.word	0x2000007c

08009f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10a      	bne.n	8009f52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	60fb      	str	r3, [r7, #12]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f52:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <vTaskPlaceOnEventList+0x44>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3318      	adds	r3, #24
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fe fd6f 	bl	8008a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f60:	2101      	movs	r1, #1
 8009f62:	6838      	ldr	r0, [r7, #0]
 8009f64:	f000 fa80 	bl	800a468 <prvAddCurrentTaskToDelayedList>
}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20006374 	.word	0x20006374

08009f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	617b      	str	r3, [r7, #20]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3318      	adds	r3, #24
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7fe fd26 	bl	80089f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	68b8      	ldr	r0, [r7, #8]
 8009fba:	f000 fa55 	bl	800a468 <prvAddCurrentTaskToDelayedList>
	}
 8009fbe:	bf00      	nop
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20006374 	.word	0x20006374

08009fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60fb      	str	r3, [r7, #12]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe fd57 	bl	8008ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a002:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <xTaskRemoveFromEventList+0xb0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d11d      	bne.n	800a046 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fe fd4e 	bl	8008ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a018:	4b19      	ldr	r3, [pc, #100]	; (800a080 <xTaskRemoveFromEventList+0xb4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d903      	bls.n	800a028 <xTaskRemoveFromEventList+0x5c>
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a024:	4a16      	ldr	r2, [pc, #88]	; (800a080 <xTaskRemoveFromEventList+0xb4>)
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4a13      	ldr	r2, [pc, #76]	; (800a084 <xTaskRemoveFromEventList+0xb8>)
 800a036:	441a      	add	r2, r3
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	3304      	adds	r3, #4
 800a03c:	4619      	mov	r1, r3
 800a03e:	4610      	mov	r0, r2
 800a040:	f7fe fcd9 	bl	80089f6 <vListInsertEnd>
 800a044:	e005      	b.n	800a052 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3318      	adds	r3, #24
 800a04a:	4619      	mov	r1, r3
 800a04c:	480e      	ldr	r0, [pc, #56]	; (800a088 <xTaskRemoveFromEventList+0xbc>)
 800a04e:	f7fe fcd2 	bl	80089f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a056:	4b0d      	ldr	r3, [pc, #52]	; (800a08c <xTaskRemoveFromEventList+0xc0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d905      	bls.n	800a06c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a060:	2301      	movs	r3, #1
 800a062:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a064:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <xTaskRemoveFromEventList+0xc4>)
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e001      	b.n	800a070 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a06c:	2300      	movs	r3, #0
 800a06e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a070:	697b      	ldr	r3, [r7, #20]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20006870 	.word	0x20006870
 800a080:	20006850 	.word	0x20006850
 800a084:	20006378 	.word	0x20006378
 800a088:	20006808 	.word	0x20006808
 800a08c:	20006374 	.word	0x20006374
 800a090:	2000685c 	.word	0x2000685c

0800a094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a09c:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <vTaskInternalSetTimeOutState+0x24>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <vTaskInternalSetTimeOutState+0x28>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	605a      	str	r2, [r3, #4]
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	20006860 	.word	0x20006860
 800a0bc:	2000684c 	.word	0x2000684c

0800a0c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	e7fe      	b.n	800a0e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	60fb      	str	r3, [r7, #12]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a102:	f000 fe7f 	bl	800ae04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a106:	4b1d      	ldr	r3, [pc, #116]	; (800a17c <xTaskCheckForTimeOut+0xbc>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a11e:	d102      	bne.n	800a126 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a120:	2300      	movs	r3, #0
 800a122:	61fb      	str	r3, [r7, #28]
 800a124:	e023      	b.n	800a16e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4b15      	ldr	r3, [pc, #84]	; (800a180 <xTaskCheckForTimeOut+0xc0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d007      	beq.n	800a142 <xTaskCheckForTimeOut+0x82>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d302      	bcc.n	800a142 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e015      	b.n	800a16e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d20b      	bcs.n	800a164 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff ff9b 	bl	800a094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a15e:	2300      	movs	r3, #0
 800a160:	61fb      	str	r3, [r7, #28]
 800a162:	e004      	b.n	800a16e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a16a:	2301      	movs	r3, #1
 800a16c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a16e:	f000 fe79 	bl	800ae64 <vPortExitCritical>

	return xReturn;
 800a172:	69fb      	ldr	r3, [r7, #28]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	2000684c 	.word	0x2000684c
 800a180:	20006860 	.word	0x20006860

0800a184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a188:	4b03      	ldr	r3, [pc, #12]	; (800a198 <vTaskMissedYield+0x14>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
}
 800a18e:	bf00      	nop
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	2000685c 	.word	0x2000685c

0800a19c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1a4:	f000 f852 	bl	800a24c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1a8:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <prvIdleTask+0x28>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d9f9      	bls.n	800a1a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <prvIdleTask+0x2c>)
 800a1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1c0:	e7f0      	b.n	800a1a4 <prvIdleTask+0x8>
 800a1c2:	bf00      	nop
 800a1c4:	20006378 	.word	0x20006378
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	607b      	str	r3, [r7, #4]
 800a1d6:	e00c      	b.n	800a1f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4a12      	ldr	r2, [pc, #72]	; (800a22c <prvInitialiseTaskLists+0x60>)
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fbd8 	bl	800899c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b37      	cmp	r3, #55	; 0x37
 800a1f6:	d9ef      	bls.n	800a1d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1f8:	480d      	ldr	r0, [pc, #52]	; (800a230 <prvInitialiseTaskLists+0x64>)
 800a1fa:	f7fe fbcf 	bl	800899c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1fe:	480d      	ldr	r0, [pc, #52]	; (800a234 <prvInitialiseTaskLists+0x68>)
 800a200:	f7fe fbcc 	bl	800899c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a204:	480c      	ldr	r0, [pc, #48]	; (800a238 <prvInitialiseTaskLists+0x6c>)
 800a206:	f7fe fbc9 	bl	800899c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a20a:	480c      	ldr	r0, [pc, #48]	; (800a23c <prvInitialiseTaskLists+0x70>)
 800a20c:	f7fe fbc6 	bl	800899c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a210:	480b      	ldr	r0, [pc, #44]	; (800a240 <prvInitialiseTaskLists+0x74>)
 800a212:	f7fe fbc3 	bl	800899c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <prvInitialiseTaskLists+0x78>)
 800a218:	4a05      	ldr	r2, [pc, #20]	; (800a230 <prvInitialiseTaskLists+0x64>)
 800a21a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <prvInitialiseTaskLists+0x7c>)
 800a21e:	4a05      	ldr	r2, [pc, #20]	; (800a234 <prvInitialiseTaskLists+0x68>)
 800a220:	601a      	str	r2, [r3, #0]
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20006378 	.word	0x20006378
 800a230:	200067d8 	.word	0x200067d8
 800a234:	200067ec 	.word	0x200067ec
 800a238:	20006808 	.word	0x20006808
 800a23c:	2000681c 	.word	0x2000681c
 800a240:	20006834 	.word	0x20006834
 800a244:	20006800 	.word	0x20006800
 800a248:	20006804 	.word	0x20006804

0800a24c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a252:	e019      	b.n	800a288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a254:	f000 fdd6 	bl	800ae04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a258:	4b10      	ldr	r3, [pc, #64]	; (800a29c <prvCheckTasksWaitingTermination+0x50>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3304      	adds	r3, #4
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe fc23 	bl	8008ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a26a:	4b0d      	ldr	r3, [pc, #52]	; (800a2a0 <prvCheckTasksWaitingTermination+0x54>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3b01      	subs	r3, #1
 800a270:	4a0b      	ldr	r2, [pc, #44]	; (800a2a0 <prvCheckTasksWaitingTermination+0x54>)
 800a272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a274:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <prvCheckTasksWaitingTermination+0x58>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3b01      	subs	r3, #1
 800a27a:	4a0a      	ldr	r2, [pc, #40]	; (800a2a4 <prvCheckTasksWaitingTermination+0x58>)
 800a27c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a27e:	f000 fdf1 	bl	800ae64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f810 	bl	800a2a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a288:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <prvCheckTasksWaitingTermination+0x58>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e1      	bne.n	800a254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	2000681c 	.word	0x2000681c
 800a2a0:	20006848 	.word	0x20006848
 800a2a4:	20006830 	.word	0x20006830

0800a2a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3354      	adds	r3, #84	; 0x54
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 fb03 	bl	800b8c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d108      	bne.n	800a2d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 ff61 	bl	800b190 <vPortFree>
				vPortFree( pxTCB );
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 ff5e 	bl	800b190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2d4:	e018      	b.n	800a308 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d103      	bne.n	800a2e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 ff55 	bl	800b190 <vPortFree>
	}
 800a2e6:	e00f      	b.n	800a308 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d00a      	beq.n	800a308 <prvDeleteTCB+0x60>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60fb      	str	r3, [r7, #12]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <prvDeleteTCB+0x5e>
	}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a316:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <prvResetNextTaskUnblockTime+0x38>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <prvResetNextTaskUnblockTime+0x3c>)
 800a322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a326:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a328:	e008      	b.n	800a33c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <prvResetNextTaskUnblockTime+0x38>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4a04      	ldr	r2, [pc, #16]	; (800a34c <prvResetNextTaskUnblockTime+0x3c>)
 800a33a:	6013      	str	r3, [r2, #0]
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	20006800 	.word	0x20006800
 800a34c:	20006868 	.word	0x20006868

0800a350 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a356:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <xTaskGetSchedulerState+0x34>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d102      	bne.n	800a364 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a35e:	2301      	movs	r3, #1
 800a360:	607b      	str	r3, [r7, #4]
 800a362:	e008      	b.n	800a376 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a364:	4b08      	ldr	r3, [pc, #32]	; (800a388 <xTaskGetSchedulerState+0x38>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a36c:	2302      	movs	r3, #2
 800a36e:	607b      	str	r3, [r7, #4]
 800a370:	e001      	b.n	800a376 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a372:	2300      	movs	r3, #0
 800a374:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a376:	687b      	ldr	r3, [r7, #4]
	}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	20006854 	.word	0x20006854
 800a388:	20006870 	.word	0x20006870

0800a38c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a398:	2300      	movs	r3, #0
 800a39a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d056      	beq.n	800a450 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3a2:	4b2e      	ldr	r3, [pc, #184]	; (800a45c <xTaskPriorityDisinherit+0xd0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d00a      	beq.n	800a3c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	60fb      	str	r3, [r7, #12]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	60bb      	str	r3, [r7, #8]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	1e5a      	subs	r2, r3, #1
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d02c      	beq.n	800a450 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d128      	bne.n	800a450 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	3304      	adds	r3, #4
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fb54 	bl	8008ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a420:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <xTaskPriorityDisinherit+0xd4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d903      	bls.n	800a430 <xTaskPriorityDisinherit+0xa4>
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	4a0c      	ldr	r2, [pc, #48]	; (800a460 <xTaskPriorityDisinherit+0xd4>)
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4a09      	ldr	r2, [pc, #36]	; (800a464 <xTaskPriorityDisinherit+0xd8>)
 800a43e:	441a      	add	r2, r3
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	3304      	adds	r3, #4
 800a444:	4619      	mov	r1, r3
 800a446:	4610      	mov	r0, r2
 800a448:	f7fe fad5 	bl	80089f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a44c:	2301      	movs	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a450:	697b      	ldr	r3, [r7, #20]
	}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20006374 	.word	0x20006374
 800a460:	20006850 	.word	0x20006850
 800a464:	20006378 	.word	0x20006378

0800a468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a472:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a478:	4b20      	ldr	r3, [pc, #128]	; (800a4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3304      	adds	r3, #4
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fb16 	bl	8008ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48a:	d10a      	bne.n	800a4a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d007      	beq.n	800a4a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a492:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4819      	ldr	r0, [pc, #100]	; (800a500 <prvAddCurrentTaskToDelayedList+0x98>)
 800a49c:	f7fe faab 	bl	80089f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4a0:	e026      	b.n	800a4f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4aa:	4b14      	ldr	r3, [pc, #80]	; (800a4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d209      	bcs.n	800a4ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ba:	4b12      	ldr	r3, [pc, #72]	; (800a504 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f7fe fab9 	bl	8008a3e <vListInsert>
}
 800a4cc:	e010      	b.n	800a4f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	; (800a508 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f7fe faaf 	bl	8008a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d202      	bcs.n	800a4f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4ea:	4a08      	ldr	r2, [pc, #32]	; (800a50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	6013      	str	r3, [r2, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	2000684c 	.word	0x2000684c
 800a4fc:	20006374 	.word	0x20006374
 800a500:	20006834 	.word	0x20006834
 800a504:	20006804 	.word	0x20006804
 800a508:	20006800 	.word	0x20006800
 800a50c:	20006868 	.word	0x20006868

0800a510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a51a:	f000 fb07 	bl	800ab2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a51e:	4b1c      	ldr	r3, [pc, #112]	; (800a590 <xTimerCreateTimerTask+0x80>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d021      	beq.n	800a56a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a52e:	1d3a      	adds	r2, r7, #4
 800a530:	f107 0108 	add.w	r1, r7, #8
 800a534:	f107 030c 	add.w	r3, r7, #12
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fa15 	bl	8008968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	9202      	str	r2, [sp, #8]
 800a546:	9301      	str	r3, [sp, #4]
 800a548:	2302      	movs	r3, #2
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	2300      	movs	r3, #0
 800a54e:	460a      	mov	r2, r1
 800a550:	4910      	ldr	r1, [pc, #64]	; (800a594 <xTimerCreateTimerTask+0x84>)
 800a552:	4811      	ldr	r0, [pc, #68]	; (800a598 <xTimerCreateTimerTask+0x88>)
 800a554:	f7ff f8b4 	bl	80096c0 <xTaskCreateStatic>
 800a558:	4603      	mov	r3, r0
 800a55a:	4a10      	ldr	r2, [pc, #64]	; (800a59c <xTimerCreateTimerTask+0x8c>)
 800a55c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a55e:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <xTimerCreateTimerTask+0x8c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a566:	2301      	movs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	613b      	str	r3, [r7, #16]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a586:	697b      	ldr	r3, [r7, #20]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200068a4 	.word	0x200068a4
 800a594:	0800c6a0 	.word	0x0800c6a0
 800a598:	0800a6d5 	.word	0x0800a6d5
 800a59c:	200068a8 	.word	0x200068a8

0800a5a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	623b      	str	r3, [r7, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5ce:	4b1a      	ldr	r3, [pc, #104]	; (800a638 <xTimerGenericCommand+0x98>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d02a      	beq.n	800a62c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b05      	cmp	r3, #5
 800a5e6:	dc18      	bgt.n	800a61a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5e8:	f7ff feb2 	bl	800a350 <xTaskGetSchedulerState>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d109      	bne.n	800a606 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5f2:	4b11      	ldr	r3, [pc, #68]	; (800a638 <xTimerGenericCommand+0x98>)
 800a5f4:	6818      	ldr	r0, [r3, #0]
 800a5f6:	f107 0110 	add.w	r1, r7, #16
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5fe:	f7fe fc29 	bl	8008e54 <xQueueGenericSend>
 800a602:	6278      	str	r0, [r7, #36]	; 0x24
 800a604:	e012      	b.n	800a62c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a606:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <xTimerGenericCommand+0x98>)
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f107 0110 	add.w	r1, r7, #16
 800a60e:	2300      	movs	r3, #0
 800a610:	2200      	movs	r2, #0
 800a612:	f7fe fc1f 	bl	8008e54 <xQueueGenericSend>
 800a616:	6278      	str	r0, [r7, #36]	; 0x24
 800a618:	e008      	b.n	800a62c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <xTimerGenericCommand+0x98>)
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f107 0110 	add.w	r1, r7, #16
 800a622:	2300      	movs	r3, #0
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	f7fe fd13 	bl	8009050 <xQueueGenericSendFromISR>
 800a62a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3728      	adds	r7, #40	; 0x28
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200068a4 	.word	0x200068a4

0800a63c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af02      	add	r7, sp, #8
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a646:	4b22      	ldr	r3, [pc, #136]	; (800a6d0 <prvProcessExpiredTimer+0x94>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	3304      	adds	r3, #4
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fa2b 	bl	8008ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b00      	cmp	r3, #0
 800a666:	d022      	beq.n	800a6ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	699a      	ldr	r2, [r3, #24]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	18d1      	adds	r1, r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	6978      	ldr	r0, [r7, #20]
 800a676:	f000 f8d1 	bl	800a81c <prvInsertTimerInActiveList>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01f      	beq.n	800a6c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a680:	2300      	movs	r3, #0
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	2300      	movs	r3, #0
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	2100      	movs	r1, #0
 800a68a:	6978      	ldr	r0, [r7, #20]
 800a68c:	f7ff ff88 	bl	800a5a0 <xTimerGenericCommand>
 800a690:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d113      	bne.n	800a6c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	60fb      	str	r3, [r7, #12]
}
 800a6aa:	bf00      	nop
 800a6ac:	e7fe      	b.n	800a6ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	6a1b      	ldr	r3, [r3, #32]
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	4798      	blx	r3
}
 800a6c8:	bf00      	nop
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	2000689c 	.word	0x2000689c

0800a6d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6dc:	f107 0308 	add.w	r3, r7, #8
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f857 	bl	800a794 <prvGetNextExpireTime>
 800a6e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f803 	bl	800a6f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6f2:	f000 f8d5 	bl	800a8a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6f6:	e7f1      	b.n	800a6dc <prvTimerTask+0x8>

0800a6f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a702:	f7ff fa39 	bl	8009b78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a706:	f107 0308 	add.w	r3, r7, #8
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f866 	bl	800a7dc <prvSampleTimeNow>
 800a710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d130      	bne.n	800a77a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <prvProcessTimerOrBlockTask+0x3c>
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	429a      	cmp	r2, r3
 800a724:	d806      	bhi.n	800a734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a726:	f7ff fa35 	bl	8009b94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a72a:	68f9      	ldr	r1, [r7, #12]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ff85 	bl	800a63c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a732:	e024      	b.n	800a77e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d008      	beq.n	800a74c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a73a:	4b13      	ldr	r3, [pc, #76]	; (800a788 <prvProcessTimerOrBlockTask+0x90>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <prvProcessTimerOrBlockTask+0x50>
 800a744:	2301      	movs	r3, #1
 800a746:	e000      	b.n	800a74a <prvProcessTimerOrBlockTask+0x52>
 800a748:	2300      	movs	r3, #0
 800a74a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a74c:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <prvProcessTimerOrBlockTask+0x94>)
 800a74e:	6818      	ldr	r0, [r3, #0]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	4619      	mov	r1, r3
 800a75a:	f7fe ff7d 	bl	8009658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a75e:	f7ff fa19 	bl	8009b94 <xTaskResumeAll>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a768:	4b09      	ldr	r3, [pc, #36]	; (800a790 <prvProcessTimerOrBlockTask+0x98>)
 800a76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	f3bf 8f6f 	isb	sy
}
 800a778:	e001      	b.n	800a77e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a77a:	f7ff fa0b 	bl	8009b94 <xTaskResumeAll>
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	200068a0 	.word	0x200068a0
 800a78c:	200068a4 	.word	0x200068a4
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a79c:	4b0e      	ldr	r3, [pc, #56]	; (800a7d8 <prvGetNextExpireTime+0x44>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <prvGetNextExpireTime+0x16>
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	e000      	b.n	800a7ac <prvGetNextExpireTime+0x18>
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d105      	bne.n	800a7c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7b8:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <prvGetNextExpireTime+0x44>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	e001      	b.n	800a7c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	2000689c 	.word	0x2000689c

0800a7dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7e4:	f7ff fa74 	bl	8009cd0 <xTaskGetTickCount>
 800a7e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7ea:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <prvSampleTimeNow+0x3c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d205      	bcs.n	800a800 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7f4:	f000 f936 	bl	800aa64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e002      	b.n	800a806 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a806:	4a04      	ldr	r2, [pc, #16]	; (800a818 <prvSampleTimeNow+0x3c>)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a80c:	68fb      	ldr	r3, [r7, #12]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	200068ac 	.word	0x200068ac

0800a81c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d812      	bhi.n	800a868 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d302      	bcc.n	800a856 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a850:	2301      	movs	r3, #1
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	e01b      	b.n	800a88e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a856:	4b10      	ldr	r3, [pc, #64]	; (800a898 <prvInsertTimerInActiveList+0x7c>)
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3304      	adds	r3, #4
 800a85e:	4619      	mov	r1, r3
 800a860:	4610      	mov	r0, r2
 800a862:	f7fe f8ec 	bl	8008a3e <vListInsert>
 800a866:	e012      	b.n	800a88e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d206      	bcs.n	800a87e <prvInsertTimerInActiveList+0x62>
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d302      	bcc.n	800a87e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e007      	b.n	800a88e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a87e:	4b07      	ldr	r3, [pc, #28]	; (800a89c <prvInsertTimerInActiveList+0x80>)
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f7fe f8d8 	bl	8008a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a88e:	697b      	ldr	r3, [r7, #20]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	200068a0 	.word	0x200068a0
 800a89c:	2000689c 	.word	0x2000689c

0800a8a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08e      	sub	sp, #56	; 0x38
 800a8a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8a6:	e0ca      	b.n	800aa3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	da18      	bge.n	800a8e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8ae:	1d3b      	adds	r3, r7, #4
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	61fb      	str	r3, [r7, #28]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8d6:	6850      	ldr	r0, [r2, #4]
 800a8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8da:	6892      	ldr	r2, [r2, #8]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f2c0 80aa 	blt.w	800aa3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d004      	beq.n	800a8fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe f8d9 	bl	8008ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8fe:	463b      	mov	r3, r7
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff ff6b 	bl	800a7dc <prvSampleTimeNow>
 800a906:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	f200 8097 	bhi.w	800aa3e <prvProcessReceivedCommands+0x19e>
 800a910:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <prvProcessReceivedCommands+0x78>)
 800a912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a916:	bf00      	nop
 800a918:	0800a941 	.word	0x0800a941
 800a91c:	0800a941 	.word	0x0800a941
 800a920:	0800a941 	.word	0x0800a941
 800a924:	0800a9b5 	.word	0x0800a9b5
 800a928:	0800a9c9 	.word	0x0800a9c9
 800a92c:	0800aa13 	.word	0x0800aa13
 800a930:	0800a941 	.word	0x0800a941
 800a934:	0800a941 	.word	0x0800a941
 800a938:	0800a9b5 	.word	0x0800a9b5
 800a93c:	0800a9c9 	.word	0x0800a9c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a946:	f043 0301 	orr.w	r3, r3, #1
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	18d1      	adds	r1, r2, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a960:	f7ff ff5c 	bl	800a81c <prvInsertTimerInActiveList>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d069      	beq.n	800aa3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d05e      	beq.n	800aa3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	441a      	add	r2, r3
 800a988:	2300      	movs	r3, #0
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	2300      	movs	r3, #0
 800a98e:	2100      	movs	r1, #0
 800a990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a992:	f7ff fe05 	bl	800a5a0 <xTimerGenericCommand>
 800a996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d14f      	bne.n	800aa3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	61bb      	str	r3, [r7, #24]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ba:	f023 0301 	bic.w	r3, r3, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9c6:	e03a      	b.n	800aa3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	617b      	str	r3, [r7, #20]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	18d1      	adds	r1, r2, r3
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa0c:	f7ff ff06 	bl	800a81c <prvInsertTimerInActiveList>
					break;
 800aa10:	e015      	b.n	800aa3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d103      	bne.n	800aa28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa22:	f000 fbb5 	bl	800b190 <vPortFree>
 800aa26:	e00a      	b.n	800aa3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa2e:	f023 0301 	bic.w	r3, r3, #1
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa3a:	e000      	b.n	800aa3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa3e:	4b08      	ldr	r3, [pc, #32]	; (800aa60 <prvProcessReceivedCommands+0x1c0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	1d39      	adds	r1, r7, #4
 800aa44:	2200      	movs	r2, #0
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fb9e 	bl	8009188 <xQueueReceive>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f47f af2a 	bne.w	800a8a8 <prvProcessReceivedCommands+0x8>
	}
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop
 800aa58:	3730      	adds	r7, #48	; 0x30
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	200068a4 	.word	0x200068a4

0800aa64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa6a:	e048      	b.n	800aafe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa6c:	4b2d      	ldr	r3, [pc, #180]	; (800ab24 <prvSwitchTimerLists+0xc0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa76:	4b2b      	ldr	r3, [pc, #172]	; (800ab24 <prvSwitchTimerLists+0xc0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3304      	adds	r3, #4
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe f813 	bl	8008ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d02e      	beq.n	800aafe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d90e      	bls.n	800aad0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aabe:	4b19      	ldr	r3, [pc, #100]	; (800ab24 <prvSwitchTimerLists+0xc0>)
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4619      	mov	r1, r3
 800aac8:	4610      	mov	r0, r2
 800aaca:	f7fd ffb8 	bl	8008a3e <vListInsert>
 800aace:	e016      	b.n	800aafe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aad0:	2300      	movs	r3, #0
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	2300      	movs	r3, #0
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	2100      	movs	r1, #0
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f7ff fd60 	bl	800a5a0 <xTimerGenericCommand>
 800aae0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	603b      	str	r3, [r7, #0]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aafe:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <prvSwitchTimerLists+0xc0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1b1      	bne.n	800aa6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab08:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <prvSwitchTimerLists+0xc0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab0e:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <prvSwitchTimerLists+0xc4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a04      	ldr	r2, [pc, #16]	; (800ab24 <prvSwitchTimerLists+0xc0>)
 800ab14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab16:	4a04      	ldr	r2, [pc, #16]	; (800ab28 <prvSwitchTimerLists+0xc4>)
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	6013      	str	r3, [r2, #0]
}
 800ab1c:	bf00      	nop
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	2000689c 	.word	0x2000689c
 800ab28:	200068a0 	.word	0x200068a0

0800ab2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab32:	f000 f967 	bl	800ae04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab36:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <prvCheckForValidListAndQueue+0x60>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d120      	bne.n	800ab80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab3e:	4814      	ldr	r0, [pc, #80]	; (800ab90 <prvCheckForValidListAndQueue+0x64>)
 800ab40:	f7fd ff2c 	bl	800899c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab44:	4813      	ldr	r0, [pc, #76]	; (800ab94 <prvCheckForValidListAndQueue+0x68>)
 800ab46:	f7fd ff29 	bl	800899c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <prvCheckForValidListAndQueue+0x6c>)
 800ab4c:	4a10      	ldr	r2, [pc, #64]	; (800ab90 <prvCheckForValidListAndQueue+0x64>)
 800ab4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab50:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <prvCheckForValidListAndQueue+0x70>)
 800ab52:	4a10      	ldr	r2, [pc, #64]	; (800ab94 <prvCheckForValidListAndQueue+0x68>)
 800ab54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab56:	2300      	movs	r3, #0
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	4b11      	ldr	r3, [pc, #68]	; (800aba0 <prvCheckForValidListAndQueue+0x74>)
 800ab5c:	4a11      	ldr	r2, [pc, #68]	; (800aba4 <prvCheckForValidListAndQueue+0x78>)
 800ab5e:	2110      	movs	r1, #16
 800ab60:	200a      	movs	r0, #10
 800ab62:	f7fe f837 	bl	8008bd4 <xQueueGenericCreateStatic>
 800ab66:	4603      	mov	r3, r0
 800ab68:	4a08      	ldr	r2, [pc, #32]	; (800ab8c <prvCheckForValidListAndQueue+0x60>)
 800ab6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab6c:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <prvCheckForValidListAndQueue+0x60>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d005      	beq.n	800ab80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <prvCheckForValidListAndQueue+0x60>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	490b      	ldr	r1, [pc, #44]	; (800aba8 <prvCheckForValidListAndQueue+0x7c>)
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fd18 	bl	80095b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab80:	f000 f970 	bl	800ae64 <vPortExitCritical>
}
 800ab84:	bf00      	nop
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	200068a4 	.word	0x200068a4
 800ab90:	20006874 	.word	0x20006874
 800ab94:	20006888 	.word	0x20006888
 800ab98:	2000689c 	.word	0x2000689c
 800ab9c:	200068a0 	.word	0x200068a0
 800aba0:	20006950 	.word	0x20006950
 800aba4:	200068b0 	.word	0x200068b0
 800aba8:	0800c6a8 	.word	0x0800c6a8

0800abac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3b04      	subs	r3, #4
 800abbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3b04      	subs	r3, #4
 800abca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f023 0201 	bic.w	r2, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3b04      	subs	r3, #4
 800abda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abdc:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <pxPortInitialiseStack+0x64>)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3b14      	subs	r3, #20
 800abe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f06f 0202 	mvn.w	r2, #2
 800abfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3b20      	subs	r3, #32
 800ac00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac02:	68fb      	ldr	r3, [r7, #12]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	0800ac15 	.word	0x0800ac15

0800ac14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac1e:	4b12      	ldr	r3, [pc, #72]	; (800ac68 <prvTaskExitError+0x54>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac26:	d00a      	beq.n	800ac3e <prvTaskExitError+0x2a>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	60fb      	str	r3, [r7, #12]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <prvTaskExitError+0x28>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	60bb      	str	r3, [r7, #8]
}
 800ac50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac52:	bf00      	nop
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0fc      	beq.n	800ac54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20000078 	.word	0x20000078
 800ac6c:	00000000 	.word	0x00000000

0800ac70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <pxCurrentTCBConst2>)
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	f380 8809 	msr	PSP, r0
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f380 8811 	msr	BASEPRI, r0
 800ac8a:	4770      	bx	lr
 800ac8c:	f3af 8000 	nop.w

0800ac90 <pxCurrentTCBConst2>:
 800ac90:	20006374 	.word	0x20006374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac98:	4808      	ldr	r0, [pc, #32]	; (800acbc <prvPortStartFirstTask+0x24>)
 800ac9a:	6800      	ldr	r0, [r0, #0]
 800ac9c:	6800      	ldr	r0, [r0, #0]
 800ac9e:	f380 8808 	msr	MSP, r0
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8814 	msr	CONTROL, r0
 800acaa:	b662      	cpsie	i
 800acac:	b661      	cpsie	f
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	df00      	svc	0
 800acb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acba:	bf00      	nop
 800acbc:	e000ed08 	.word	0xe000ed08

0800acc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acc6:	4b46      	ldr	r3, [pc, #280]	; (800ade0 <xPortStartScheduler+0x120>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a46      	ldr	r2, [pc, #280]	; (800ade4 <xPortStartScheduler+0x124>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d10a      	bne.n	800ace6 <xPortStartScheduler+0x26>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	613b      	str	r3, [r7, #16]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ace6:	4b3e      	ldr	r3, [pc, #248]	; (800ade0 <xPortStartScheduler+0x120>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a3f      	ldr	r2, [pc, #252]	; (800ade8 <xPortStartScheduler+0x128>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d10a      	bne.n	800ad06 <xPortStartScheduler+0x46>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	60fb      	str	r3, [r7, #12]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad06:	4b39      	ldr	r3, [pc, #228]	; (800adec <xPortStartScheduler+0x12c>)
 800ad08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	22ff      	movs	r2, #255	; 0xff
 800ad16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	4b31      	ldr	r3, [pc, #196]	; (800adf0 <xPortStartScheduler+0x130>)
 800ad2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad2e:	4b31      	ldr	r3, [pc, #196]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad30:	2207      	movs	r2, #7
 800ad32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad34:	e009      	b.n	800ad4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad36:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	4a2d      	ldr	r2, [pc, #180]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad52:	2b80      	cmp	r3, #128	; 0x80
 800ad54:	d0ef      	beq.n	800ad36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad56:	4b27      	ldr	r3, [pc, #156]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f1c3 0307 	rsb	r3, r3, #7
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d00a      	beq.n	800ad78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60bb      	str	r3, [r7, #8]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad78:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	4a1d      	ldr	r2, [pc, #116]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad82:	4b1c      	ldr	r3, [pc, #112]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad8a:	4a1a      	ldr	r2, [pc, #104]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad96:	4b18      	ldr	r3, [pc, #96]	; (800adf8 <xPortStartScheduler+0x138>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <xPortStartScheduler+0x138>)
 800ad9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ada0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <xPortStartScheduler+0x138>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a14      	ldr	r2, [pc, #80]	; (800adf8 <xPortStartScheduler+0x138>)
 800ada8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adae:	f000 f8dd 	bl	800af6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adb2:	4b12      	ldr	r3, [pc, #72]	; (800adfc <xPortStartScheduler+0x13c>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800adb8:	f000 f8fc 	bl	800afb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <xPortStartScheduler+0x140>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a0f      	ldr	r2, [pc, #60]	; (800ae00 <xPortStartScheduler+0x140>)
 800adc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adc8:	f7ff ff66 	bl	800ac98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adcc:	f7ff f84a 	bl	8009e64 <vTaskSwitchContext>
	prvTaskExitError();
 800add0:	f7ff ff20 	bl	800ac14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	e000ed00 	.word	0xe000ed00
 800ade4:	410fc271 	.word	0x410fc271
 800ade8:	410fc270 	.word	0x410fc270
 800adec:	e000e400 	.word	0xe000e400
 800adf0:	200069a0 	.word	0x200069a0
 800adf4:	200069a4 	.word	0x200069a4
 800adf8:	e000ed20 	.word	0xe000ed20
 800adfc:	20000078 	.word	0x20000078
 800ae00:	e000ef34 	.word	0xe000ef34

0800ae04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	607b      	str	r3, [r7, #4]
}
 800ae1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <vPortEnterCritical+0x58>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	4a0d      	ldr	r2, [pc, #52]	; (800ae5c <vPortEnterCritical+0x58>)
 800ae26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <vPortEnterCritical+0x58>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d10f      	bne.n	800ae50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <vPortEnterCritical+0x5c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	603b      	str	r3, [r7, #0]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <vPortEnterCritical+0x4a>
	}
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	20000078 	.word	0x20000078
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae6a:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <vPortExitCritical+0x24>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	607b      	str	r3, [r7, #4]
}
 800ae84:	bf00      	nop
 800ae86:	e7fe      	b.n	800ae86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	4a09      	ldr	r2, [pc, #36]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae92:	4b08      	ldr	r3, [pc, #32]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d105      	bne.n	800aea6 <vPortExitCritical+0x42>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f383 8811 	msr	BASEPRI, r3
}
 800aea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20000078 	.word	0x20000078
	...

0800aec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aec0:	f3ef 8009 	mrs	r0, PSP
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	4b15      	ldr	r3, [pc, #84]	; (800af20 <pxCurrentTCBConst>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	f01e 0f10 	tst.w	lr, #16
 800aed0:	bf08      	it	eq
 800aed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	6010      	str	r0, [r2, #0]
 800aedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aee4:	f380 8811 	msr	BASEPRI, r0
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f7fe ffb8 	bl	8009e64 <vTaskSwitchContext>
 800aef4:	f04f 0000 	mov.w	r0, #0
 800aef8:	f380 8811 	msr	BASEPRI, r0
 800aefc:	bc09      	pop	{r0, r3}
 800aefe:	6819      	ldr	r1, [r3, #0]
 800af00:	6808      	ldr	r0, [r1, #0]
 800af02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af06:	f01e 0f10 	tst.w	lr, #16
 800af0a:	bf08      	it	eq
 800af0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af10:	f380 8809 	msr	PSP, r0
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	f3af 8000 	nop.w

0800af20 <pxCurrentTCBConst>:
 800af20:	20006374 	.word	0x20006374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop

0800af28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	607b      	str	r3, [r7, #4]
}
 800af40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af42:	f7fe fed5 	bl	8009cf0 <xTaskIncrementTick>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af4c:	4b06      	ldr	r3, [pc, #24]	; (800af68 <xPortSysTickHandler+0x40>)
 800af4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	f383 8811 	msr	BASEPRI, r3
}
 800af5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af70:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <vPortSetupTimerInterrupt+0x34>)
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af76:	4b0b      	ldr	r3, [pc, #44]	; (800afa4 <vPortSetupTimerInterrupt+0x38>)
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <vPortSetupTimerInterrupt+0x3c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a0a      	ldr	r2, [pc, #40]	; (800afac <vPortSetupTimerInterrupt+0x40>)
 800af82:	fba2 2303 	umull	r2, r3, r2, r3
 800af86:	099b      	lsrs	r3, r3, #6
 800af88:	4a09      	ldr	r2, [pc, #36]	; (800afb0 <vPortSetupTimerInterrupt+0x44>)
 800af8a:	3b01      	subs	r3, #1
 800af8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af8e:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <vPortSetupTimerInterrupt+0x34>)
 800af90:	2207      	movs	r2, #7
 800af92:	601a      	str	r2, [r3, #0]
}
 800af94:	bf00      	nop
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	e000e010 	.word	0xe000e010
 800afa4:	e000e018 	.word	0xe000e018
 800afa8:	2000005c 	.word	0x2000005c
 800afac:	10624dd3 	.word	0x10624dd3
 800afb0:	e000e014 	.word	0xe000e014

0800afb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afc4 <vPortEnableVFP+0x10>
 800afb8:	6801      	ldr	r1, [r0, #0]
 800afba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afbe:	6001      	str	r1, [r0, #0]
 800afc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afc2:	bf00      	nop
 800afc4:	e000ed88 	.word	0xe000ed88

0800afc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afce:	f3ef 8305 	mrs	r3, IPSR
 800afd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b0f      	cmp	r3, #15
 800afd8:	d914      	bls.n	800b004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afda:	4a17      	ldr	r2, [pc, #92]	; (800b038 <vPortValidateInterruptPriority+0x70>)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afe4:	4b15      	ldr	r3, [pc, #84]	; (800b03c <vPortValidateInterruptPriority+0x74>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	7afa      	ldrb	r2, [r7, #11]
 800afea:	429a      	cmp	r2, r3
 800afec:	d20a      	bcs.n	800b004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	607b      	str	r3, [r7, #4]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b004:	4b0e      	ldr	r3, [pc, #56]	; (800b040 <vPortValidateInterruptPriority+0x78>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <vPortValidateInterruptPriority+0x7c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d90a      	bls.n	800b02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	603b      	str	r3, [r7, #0]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <vPortValidateInterruptPriority+0x60>
	}
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	e000e3f0 	.word	0xe000e3f0
 800b03c:	200069a0 	.word	0x200069a0
 800b040:	e000ed0c 	.word	0xe000ed0c
 800b044:	200069a4 	.word	0x200069a4

0800b048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b050:	2300      	movs	r3, #0
 800b052:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800b054:	4b48      	ldr	r3, [pc, #288]	; (800b178 <pvPortMalloc+0x130>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <pvPortMalloc+0x2a>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60fb      	str	r3, [r7, #12]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800b072:	f7fe fd81 	bl	8009b78 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b076:	4b41      	ldr	r3, [pc, #260]	; (800b17c <pvPortMalloc+0x134>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4013      	ands	r3, r2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d172      	bne.n	800b168 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00d      	beq.n	800b0a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800b088:	2208      	movs	r2, #8
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f023 0307 	bic.w	r3, r3, #7
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d05e      	beq.n	800b168 <pvPortMalloc+0x120>
 800b0aa:	4b35      	ldr	r3, [pc, #212]	; (800b180 <pvPortMalloc+0x138>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d859      	bhi.n	800b168 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0b4:	4b33      	ldr	r3, [pc, #204]	; (800b184 <pvPortMalloc+0x13c>)
 800b0b6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800b0b8:	4b32      	ldr	r3, [pc, #200]	; (800b184 <pvPortMalloc+0x13c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0be:	e004      	b.n	800b0ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d903      	bls.n	800b0dc <pvPortMalloc+0x94>
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f1      	bne.n	800b0c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0dc:	4b26      	ldr	r3, [pc, #152]	; (800b178 <pvPortMalloc+0x130>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d040      	beq.n	800b168 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	4413      	add	r3, r2
 800b0ee:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	2308      	movs	r3, #8
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	429a      	cmp	r2, r3
 800b106:	d90f      	bls.n	800b128 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800b122:	6938      	ldr	r0, [r7, #16]
 800b124:	f000 f8a2 	bl	800b26c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b128:	4b15      	ldr	r3, [pc, #84]	; (800b180 <pvPortMalloc+0x138>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	4a13      	ldr	r2, [pc, #76]	; (800b180 <pvPortMalloc+0x138>)
 800b134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b136:	4b12      	ldr	r3, [pc, #72]	; (800b180 <pvPortMalloc+0x138>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <pvPortMalloc+0x140>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d203      	bcs.n	800b14a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b142:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <pvPortMalloc+0x138>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a10      	ldr	r2, [pc, #64]	; (800b188 <pvPortMalloc+0x140>)
 800b148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	4b0b      	ldr	r3, [pc, #44]	; (800b17c <pvPortMalloc+0x134>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	431a      	orrs	r2, r3
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <pvPortMalloc+0x144>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	4a09      	ldr	r2, [pc, #36]	; (800b18c <pvPortMalloc+0x144>)
 800b166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b168:	f7fe fd14 	bl	8009b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800b16c:	697b      	ldr	r3, [r7, #20]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	200069b0 	.word	0x200069b0
 800b17c:	200069c4 	.word	0x200069c4
 800b180:	200069b4 	.word	0x200069b4
 800b184:	200069a8 	.word	0x200069a8
 800b188:	200069b8 	.word	0x200069b8
 800b18c:	200069bc 	.word	0x200069bc

0800b190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d04d      	beq.n	800b23e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1a2:	2308      	movs	r3, #8
 800b1a4:	425b      	negs	r3, r3
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	4b24      	ldr	r3, [pc, #144]	; (800b248 <vPortFree+0xb8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10a      	bne.n	800b1d4 <vPortFree+0x44>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	60fb      	str	r3, [r7, #12]
}
 800b1d0:	bf00      	nop
 800b1d2:	e7fe      	b.n	800b1d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00a      	beq.n	800b1f2 <vPortFree+0x62>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	60bb      	str	r3, [r7, #8]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <vPortFree+0xb8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01e      	beq.n	800b23e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d11a      	bne.n	800b23e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	4b0e      	ldr	r3, [pc, #56]	; (800b248 <vPortFree+0xb8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	43db      	mvns	r3, r3
 800b212:	401a      	ands	r2, r3
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b218:	f7fe fcae 	bl	8009b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <vPortFree+0xbc>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4413      	add	r3, r2
 800b226:	4a09      	ldr	r2, [pc, #36]	; (800b24c <vPortFree+0xbc>)
 800b228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b22a:	6938      	ldr	r0, [r7, #16]
 800b22c:	f000 f81e 	bl	800b26c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <vPortFree+0xc0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3301      	adds	r3, #1
 800b236:	4a06      	ldr	r2, [pc, #24]	; (800b250 <vPortFree+0xc0>)
 800b238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b23a:	f7fe fcab 	bl	8009b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b23e:	bf00      	nop
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	200069c4 	.word	0x200069c4
 800b24c:	200069b4 	.word	0x200069b4
 800b250:	200069c0 	.word	0x200069c0

0800b254 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b258:	4b03      	ldr	r3, [pc, #12]	; (800b268 <xPortGetFreeHeapSize+0x14>)
 800b25a:	681b      	ldr	r3, [r3, #0]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	200069b4 	.word	0x200069b4

0800b26c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b274:	4b28      	ldr	r3, [pc, #160]	; (800b318 <prvInsertBlockIntoFreeList+0xac>)
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	e002      	b.n	800b280 <prvInsertBlockIntoFreeList+0x14>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	429a      	cmp	r2, r3
 800b288:	d8f7      	bhi.n	800b27a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	4413      	add	r3, r2
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d108      	bne.n	800b2ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d118      	bne.n	800b2f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	4b15      	ldr	r3, [pc, #84]	; (800b31c <prvInsertBlockIntoFreeList+0xb0>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d00d      	beq.n	800b2ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	441a      	add	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	e008      	b.n	800b2fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2ea:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <prvInsertBlockIntoFreeList+0xb0>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	e003      	b.n	800b2fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	429a      	cmp	r2, r3
 800b302:	d002      	beq.n	800b30a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	200069a8 	.word	0x200069a8
 800b31c:	200069b0 	.word	0x200069b0

0800b320 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800b320:	b480      	push	{r7}
 800b322:	b08f      	sub	sp, #60	; 0x3c
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800b328:	2300      	movs	r3, #0
 800b32a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800b334:	4b5a      	ldr	r3, [pc, #360]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00a      	beq.n	800b352 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	617b      	str	r3, [r7, #20]
}
 800b34e:	bf00      	nop
 800b350:	e7fe      	b.n	800b350 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	00db      	lsls	r3, r3, #3
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	4413      	add	r3, r2
 800b35a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800b35c:	e07d      	b.n	800b45a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00e      	beq.n	800b392 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	3307      	adds	r3, #7
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37c:	f023 0307 	bic.w	r3, r3, #7
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b38e:	4413      	add	r3, r2
 800b390:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d106      	bne.n	800b3aa <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	4a41      	ldr	r2, [pc, #260]	; (800b4a4 <vPortDefineHeapRegions+0x184>)
 800b3a0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800b3a2:	4b40      	ldr	r3, [pc, #256]	; (800b4a4 <vPortDefineHeapRegions+0x184>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]
 800b3a8:	e01f      	b.n	800b3ea <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800b3aa:	4b3d      	ldr	r3, [pc, #244]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10a      	bne.n	800b3c8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	613b      	str	r3, [r7, #16]
}
 800b3c4:	bf00      	nop
 800b3c6:	e7fe      	b.n	800b3c6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800b3c8:	4b35      	ldr	r3, [pc, #212]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d80a      	bhi.n	800b3ea <vPortDefineHeapRegions+0xca>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	60fb      	str	r3, [r7, #12]
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800b3ea:	4b2d      	ldr	r3, [pc, #180]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f4:	4413      	add	r3, r2
 800b3f6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	1a9b      	subs	r3, r3, r2
 800b3fe:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b402:	f023 0307 	bic.w	r3, r3, #7
 800b406:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800b408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40a:	4a25      	ldr	r2, [pc, #148]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b40c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800b40e:	4b24      	ldr	r3, [pc, #144]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2200      	movs	r2, #0
 800b414:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800b416:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800b42c:	4b1c      	ldr	r3, [pc, #112]	; (800b4a0 <vPortDefineHeapRegions+0x180>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d002      	beq.n	800b440 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	6a3a      	ldr	r2, [r7, #32]
 800b43e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b446:	4413      	add	r3, r2
 800b448:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	3301      	adds	r3, #1
 800b44e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	4413      	add	r3, r2
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f47f af7d 	bne.w	800b35e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800b464:	4a10      	ldr	r2, [pc, #64]	; (800b4a8 <vPortDefineHeapRegions+0x188>)
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800b46a:	4a10      	ldr	r2, [pc, #64]	; (800b4ac <vPortDefineHeapRegions+0x18c>)
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	60bb      	str	r3, [r7, #8]
}
 800b488:	bf00      	nop
 800b48a:	e7fe      	b.n	800b48a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b48c:	4b08      	ldr	r3, [pc, #32]	; (800b4b0 <vPortDefineHeapRegions+0x190>)
 800b48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b492:	601a      	str	r2, [r3, #0]
}
 800b494:	bf00      	nop
 800b496:	373c      	adds	r7, #60	; 0x3c
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	200069b0 	.word	0x200069b0
 800b4a4:	200069a8 	.word	0x200069a8
 800b4a8:	200069b8 	.word	0x200069b8
 800b4ac:	200069b4 	.word	0x200069b4
 800b4b0:	200069c4 	.word	0x200069c4

0800b4b4 <atol>:
 800b4b4:	220a      	movs	r2, #10
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	f000 bb5e 	b.w	800bb78 <strtol>

0800b4bc <calloc>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	; (800b4c8 <calloc+0xc>)
 800b4be:	460a      	mov	r2, r1
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	6818      	ldr	r0, [r3, #0]
 800b4c4:	f000 b8f8 	b.w	800b6b8 <_calloc_r>
 800b4c8:	2000007c 	.word	0x2000007c

0800b4cc <__errno>:
 800b4cc:	4b01      	ldr	r3, [pc, #4]	; (800b4d4 <__errno+0x8>)
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	2000007c 	.word	0x2000007c

0800b4d8 <gmtime_r>:
 800b4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4dc:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	4a4f      	ldr	r2, [pc, #316]	; (800b620 <gmtime_r+0x148>)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	f7f5 f9cf 	bl	800088c <__aeabi_ldivmod>
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	4a4b      	ldr	r2, [pc, #300]	; (800b620 <gmtime_r+0x148>)
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f7f5 f9c8 	bl	800088c <__aeabi_ldivmod>
 800b4fc:	2a00      	cmp	r2, #0
 800b4fe:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b502:	bfb7      	itett	lt
 800b504:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b508:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b50c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b510:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b514:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b518:	fbb2 f1f0 	udiv	r1, r2, r0
 800b51c:	fb00 2211 	mls	r2, r0, r1, r2
 800b520:	203c      	movs	r0, #60	; 0x3c
 800b522:	60a1      	str	r1, [r4, #8]
 800b524:	fbb2 f1f0 	udiv	r1, r2, r0
 800b528:	fb00 2211 	mls	r2, r0, r1, r2
 800b52c:	6061      	str	r1, [r4, #4]
 800b52e:	6022      	str	r2, [r4, #0]
 800b530:	2107      	movs	r1, #7
 800b532:	1cda      	adds	r2, r3, #3
 800b534:	fb92 f1f1 	sdiv	r1, r2, r1
 800b538:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b53c:	1a52      	subs	r2, r2, r1
 800b53e:	bf48      	it	mi
 800b540:	3207      	addmi	r2, #7
 800b542:	4d38      	ldr	r5, [pc, #224]	; (800b624 <gmtime_r+0x14c>)
 800b544:	4838      	ldr	r0, [pc, #224]	; (800b628 <gmtime_r+0x150>)
 800b546:	61a2      	str	r2, [r4, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	bfb7      	itett	lt
 800b54c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800b550:	fb93 f5f5 	sdivge	r5, r3, r5
 800b554:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800b558:	fb92 f5f5 	sdivlt	r5, r2, r5
 800b55c:	fb00 3005 	mla	r0, r0, r5, r3
 800b560:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800b564:	fbb0 f2f2 	udiv	r2, r0, r2
 800b568:	4402      	add	r2, r0
 800b56a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b56e:	fbb0 f1f3 	udiv	r1, r0, r3
 800b572:	1a52      	subs	r2, r2, r1
 800b574:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b578:	492c      	ldr	r1, [pc, #176]	; (800b62c <gmtime_r+0x154>)
 800b57a:	fbb0 f1f1 	udiv	r1, r0, r1
 800b57e:	2764      	movs	r7, #100	; 0x64
 800b580:	1a52      	subs	r2, r2, r1
 800b582:	fbb2 f1fc 	udiv	r1, r2, ip
 800b586:	fbb2 f3f3 	udiv	r3, r2, r3
 800b58a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b58e:	1af3      	subs	r3, r6, r3
 800b590:	4403      	add	r3, r0
 800b592:	fb0c 3311 	mls	r3, ip, r1, r3
 800b596:	2299      	movs	r2, #153	; 0x99
 800b598:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800b59c:	f10e 0e02 	add.w	lr, lr, #2
 800b5a0:	f103 0c01 	add.w	ip, r3, #1
 800b5a4:	fbbe f0f2 	udiv	r0, lr, r2
 800b5a8:	4342      	muls	r2, r0
 800b5aa:	3202      	adds	r2, #2
 800b5ac:	f04f 0805 	mov.w	r8, #5
 800b5b0:	fbb2 f2f8 	udiv	r2, r2, r8
 800b5b4:	ebac 0c02 	sub.w	ip, ip, r2
 800b5b8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800b5bc:	4596      	cmp	lr, r2
 800b5be:	bf94      	ite	ls
 800b5c0:	2202      	movls	r2, #2
 800b5c2:	f06f 0209 	mvnhi.w	r2, #9
 800b5c6:	4410      	add	r0, r2
 800b5c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b5cc:	fb02 1505 	mla	r5, r2, r5, r1
 800b5d0:	2801      	cmp	r0, #1
 800b5d2:	bf98      	it	ls
 800b5d4:	3501      	addls	r5, #1
 800b5d6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800b5da:	d30d      	bcc.n	800b5f8 <gmtime_r+0x120>
 800b5dc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b5e0:	61e3      	str	r3, [r4, #28]
 800b5e2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800b5ec:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b5f0:	6223      	str	r3, [r4, #32]
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	078a      	lsls	r2, r1, #30
 800b5fa:	d102      	bne.n	800b602 <gmtime_r+0x12a>
 800b5fc:	fb07 1616 	mls	r6, r7, r6, r1
 800b600:	b95e      	cbnz	r6, 800b61a <gmtime_r+0x142>
 800b602:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b606:	fbb1 f6f2 	udiv	r6, r1, r2
 800b60a:	fb02 1216 	mls	r2, r2, r6, r1
 800b60e:	fab2 f282 	clz	r2, r2
 800b612:	0952      	lsrs	r2, r2, #5
 800b614:	333b      	adds	r3, #59	; 0x3b
 800b616:	4413      	add	r3, r2
 800b618:	e7e2      	b.n	800b5e0 <gmtime_r+0x108>
 800b61a:	2201      	movs	r2, #1
 800b61c:	e7fa      	b.n	800b614 <gmtime_r+0x13c>
 800b61e:	bf00      	nop
 800b620:	00015180 	.word	0x00015180
 800b624:	00023ab1 	.word	0x00023ab1
 800b628:	fffdc54f 	.word	0xfffdc54f
 800b62c:	00023ab0 	.word	0x00023ab0

0800b630 <__libc_init_array>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4d0d      	ldr	r5, [pc, #52]	; (800b668 <__libc_init_array+0x38>)
 800b634:	4c0d      	ldr	r4, [pc, #52]	; (800b66c <__libc_init_array+0x3c>)
 800b636:	1b64      	subs	r4, r4, r5
 800b638:	10a4      	asrs	r4, r4, #2
 800b63a:	2600      	movs	r6, #0
 800b63c:	42a6      	cmp	r6, r4
 800b63e:	d109      	bne.n	800b654 <__libc_init_array+0x24>
 800b640:	4d0b      	ldr	r5, [pc, #44]	; (800b670 <__libc_init_array+0x40>)
 800b642:	4c0c      	ldr	r4, [pc, #48]	; (800b674 <__libc_init_array+0x44>)
 800b644:	f000 fe2a 	bl	800c29c <_init>
 800b648:	1b64      	subs	r4, r4, r5
 800b64a:	10a4      	asrs	r4, r4, #2
 800b64c:	2600      	movs	r6, #0
 800b64e:	42a6      	cmp	r6, r4
 800b650:	d105      	bne.n	800b65e <__libc_init_array+0x2e>
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	f855 3b04 	ldr.w	r3, [r5], #4
 800b658:	4798      	blx	r3
 800b65a:	3601      	adds	r6, #1
 800b65c:	e7ee      	b.n	800b63c <__libc_init_array+0xc>
 800b65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b662:	4798      	blx	r3
 800b664:	3601      	adds	r6, #1
 800b666:	e7f2      	b.n	800b64e <__libc_init_array+0x1e>
 800b668:	0800e964 	.word	0x0800e964
 800b66c:	0800e964 	.word	0x0800e964
 800b670:	0800e964 	.word	0x0800e964
 800b674:	0800e968 	.word	0x0800e968

0800b678 <__retarget_lock_acquire_recursive>:
 800b678:	4770      	bx	lr

0800b67a <__retarget_lock_release_recursive>:
 800b67a:	4770      	bx	lr

0800b67c <free>:
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <free+0xc>)
 800b67e:	4601      	mov	r1, r0
 800b680:	6818      	ldr	r0, [r3, #0]
 800b682:	f000 b82f 	b.w	800b6e4 <_free_r>
 800b686:	bf00      	nop
 800b688:	2000007c 	.word	0x2000007c

0800b68c <memcpy>:
 800b68c:	440a      	add	r2, r1
 800b68e:	4291      	cmp	r1, r2
 800b690:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b694:	d100      	bne.n	800b698 <memcpy+0xc>
 800b696:	4770      	bx	lr
 800b698:	b510      	push	{r4, lr}
 800b69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b69e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6a2:	4291      	cmp	r1, r2
 800b6a4:	d1f9      	bne.n	800b69a <memcpy+0xe>
 800b6a6:	bd10      	pop	{r4, pc}

0800b6a8 <memset>:
 800b6a8:	4402      	add	r2, r0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d100      	bne.n	800b6b2 <memset+0xa>
 800b6b0:	4770      	bx	lr
 800b6b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6b6:	e7f9      	b.n	800b6ac <memset+0x4>

0800b6b8 <_calloc_r>:
 800b6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ba:	fba1 2402 	umull	r2, r4, r1, r2
 800b6be:	b94c      	cbnz	r4, 800b6d4 <_calloc_r+0x1c>
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	9201      	str	r2, [sp, #4]
 800b6c4:	f000 f87a 	bl	800b7bc <_malloc_r>
 800b6c8:	9a01      	ldr	r2, [sp, #4]
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b930      	cbnz	r0, 800b6dc <_calloc_r+0x24>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	b003      	add	sp, #12
 800b6d2:	bd30      	pop	{r4, r5, pc}
 800b6d4:	220c      	movs	r2, #12
 800b6d6:	6002      	str	r2, [r0, #0]
 800b6d8:	2500      	movs	r5, #0
 800b6da:	e7f8      	b.n	800b6ce <_calloc_r+0x16>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	f7ff ffe3 	bl	800b6a8 <memset>
 800b6e2:	e7f4      	b.n	800b6ce <_calloc_r+0x16>

0800b6e4 <_free_r>:
 800b6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6e6:	2900      	cmp	r1, #0
 800b6e8:	d044      	beq.n	800b774 <_free_r+0x90>
 800b6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ee:	9001      	str	r0, [sp, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800b6f6:	bfb8      	it	lt
 800b6f8:	18e4      	addlt	r4, r4, r3
 800b6fa:	f000 fa81 	bl	800bc00 <__malloc_lock>
 800b6fe:	4a1e      	ldr	r2, [pc, #120]	; (800b778 <_free_r+0x94>)
 800b700:	9801      	ldr	r0, [sp, #4]
 800b702:	6813      	ldr	r3, [r2, #0]
 800b704:	b933      	cbnz	r3, 800b714 <_free_r+0x30>
 800b706:	6063      	str	r3, [r4, #4]
 800b708:	6014      	str	r4, [r2, #0]
 800b70a:	b003      	add	sp, #12
 800b70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b710:	f000 ba7c 	b.w	800bc0c <__malloc_unlock>
 800b714:	42a3      	cmp	r3, r4
 800b716:	d908      	bls.n	800b72a <_free_r+0x46>
 800b718:	6825      	ldr	r5, [r4, #0]
 800b71a:	1961      	adds	r1, r4, r5
 800b71c:	428b      	cmp	r3, r1
 800b71e:	bf01      	itttt	eq
 800b720:	6819      	ldreq	r1, [r3, #0]
 800b722:	685b      	ldreq	r3, [r3, #4]
 800b724:	1949      	addeq	r1, r1, r5
 800b726:	6021      	streq	r1, [r4, #0]
 800b728:	e7ed      	b.n	800b706 <_free_r+0x22>
 800b72a:	461a      	mov	r2, r3
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	b10b      	cbz	r3, 800b734 <_free_r+0x50>
 800b730:	42a3      	cmp	r3, r4
 800b732:	d9fa      	bls.n	800b72a <_free_r+0x46>
 800b734:	6811      	ldr	r1, [r2, #0]
 800b736:	1855      	adds	r5, r2, r1
 800b738:	42a5      	cmp	r5, r4
 800b73a:	d10b      	bne.n	800b754 <_free_r+0x70>
 800b73c:	6824      	ldr	r4, [r4, #0]
 800b73e:	4421      	add	r1, r4
 800b740:	1854      	adds	r4, r2, r1
 800b742:	42a3      	cmp	r3, r4
 800b744:	6011      	str	r1, [r2, #0]
 800b746:	d1e0      	bne.n	800b70a <_free_r+0x26>
 800b748:	681c      	ldr	r4, [r3, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	6053      	str	r3, [r2, #4]
 800b74e:	4421      	add	r1, r4
 800b750:	6011      	str	r1, [r2, #0]
 800b752:	e7da      	b.n	800b70a <_free_r+0x26>
 800b754:	d902      	bls.n	800b75c <_free_r+0x78>
 800b756:	230c      	movs	r3, #12
 800b758:	6003      	str	r3, [r0, #0]
 800b75a:	e7d6      	b.n	800b70a <_free_r+0x26>
 800b75c:	6825      	ldr	r5, [r4, #0]
 800b75e:	1961      	adds	r1, r4, r5
 800b760:	428b      	cmp	r3, r1
 800b762:	bf04      	itt	eq
 800b764:	6819      	ldreq	r1, [r3, #0]
 800b766:	685b      	ldreq	r3, [r3, #4]
 800b768:	6063      	str	r3, [r4, #4]
 800b76a:	bf04      	itt	eq
 800b76c:	1949      	addeq	r1, r1, r5
 800b76e:	6021      	streq	r1, [r4, #0]
 800b770:	6054      	str	r4, [r2, #4]
 800b772:	e7ca      	b.n	800b70a <_free_r+0x26>
 800b774:	b003      	add	sp, #12
 800b776:	bd30      	pop	{r4, r5, pc}
 800b778:	200069cc 	.word	0x200069cc

0800b77c <sbrk_aligned>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	4e0e      	ldr	r6, [pc, #56]	; (800b7b8 <sbrk_aligned+0x3c>)
 800b780:	460c      	mov	r4, r1
 800b782:	6831      	ldr	r1, [r6, #0]
 800b784:	4605      	mov	r5, r0
 800b786:	b911      	cbnz	r1, 800b78e <sbrk_aligned+0x12>
 800b788:	f000 f8f6 	bl	800b978 <_sbrk_r>
 800b78c:	6030      	str	r0, [r6, #0]
 800b78e:	4621      	mov	r1, r4
 800b790:	4628      	mov	r0, r5
 800b792:	f000 f8f1 	bl	800b978 <_sbrk_r>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d00a      	beq.n	800b7b0 <sbrk_aligned+0x34>
 800b79a:	1cc4      	adds	r4, r0, #3
 800b79c:	f024 0403 	bic.w	r4, r4, #3
 800b7a0:	42a0      	cmp	r0, r4
 800b7a2:	d007      	beq.n	800b7b4 <sbrk_aligned+0x38>
 800b7a4:	1a21      	subs	r1, r4, r0
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f000 f8e6 	bl	800b978 <_sbrk_r>
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d101      	bne.n	800b7b4 <sbrk_aligned+0x38>
 800b7b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	200069d0 	.word	0x200069d0

0800b7bc <_malloc_r>:
 800b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	1ccd      	adds	r5, r1, #3
 800b7c2:	f025 0503 	bic.w	r5, r5, #3
 800b7c6:	3508      	adds	r5, #8
 800b7c8:	2d0c      	cmp	r5, #12
 800b7ca:	bf38      	it	cc
 800b7cc:	250c      	movcc	r5, #12
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	db01      	blt.n	800b7d8 <_malloc_r+0x1c>
 800b7d4:	42a9      	cmp	r1, r5
 800b7d6:	d905      	bls.n	800b7e4 <_malloc_r+0x28>
 800b7d8:	230c      	movs	r3, #12
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	2600      	movs	r6, #0
 800b7de:	4630      	mov	r0, r6
 800b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e4:	4e2e      	ldr	r6, [pc, #184]	; (800b8a0 <_malloc_r+0xe4>)
 800b7e6:	f000 fa0b 	bl	800bc00 <__malloc_lock>
 800b7ea:	6833      	ldr	r3, [r6, #0]
 800b7ec:	461c      	mov	r4, r3
 800b7ee:	bb34      	cbnz	r4, 800b83e <_malloc_r+0x82>
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f7ff ffc2 	bl	800b77c <sbrk_aligned>
 800b7f8:	1c43      	adds	r3, r0, #1
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	d14d      	bne.n	800b89a <_malloc_r+0xde>
 800b7fe:	6834      	ldr	r4, [r6, #0]
 800b800:	4626      	mov	r6, r4
 800b802:	2e00      	cmp	r6, #0
 800b804:	d140      	bne.n	800b888 <_malloc_r+0xcc>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	4631      	mov	r1, r6
 800b80a:	4638      	mov	r0, r7
 800b80c:	eb04 0803 	add.w	r8, r4, r3
 800b810:	f000 f8b2 	bl	800b978 <_sbrk_r>
 800b814:	4580      	cmp	r8, r0
 800b816:	d13a      	bne.n	800b88e <_malloc_r+0xd2>
 800b818:	6821      	ldr	r1, [r4, #0]
 800b81a:	3503      	adds	r5, #3
 800b81c:	1a6d      	subs	r5, r5, r1
 800b81e:	f025 0503 	bic.w	r5, r5, #3
 800b822:	3508      	adds	r5, #8
 800b824:	2d0c      	cmp	r5, #12
 800b826:	bf38      	it	cc
 800b828:	250c      	movcc	r5, #12
 800b82a:	4629      	mov	r1, r5
 800b82c:	4638      	mov	r0, r7
 800b82e:	f7ff ffa5 	bl	800b77c <sbrk_aligned>
 800b832:	3001      	adds	r0, #1
 800b834:	d02b      	beq.n	800b88e <_malloc_r+0xd2>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	442b      	add	r3, r5
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	e00e      	b.n	800b85c <_malloc_r+0xa0>
 800b83e:	6822      	ldr	r2, [r4, #0]
 800b840:	1b52      	subs	r2, r2, r5
 800b842:	d41e      	bmi.n	800b882 <_malloc_r+0xc6>
 800b844:	2a0b      	cmp	r2, #11
 800b846:	d916      	bls.n	800b876 <_malloc_r+0xba>
 800b848:	1961      	adds	r1, r4, r5
 800b84a:	42a3      	cmp	r3, r4
 800b84c:	6025      	str	r5, [r4, #0]
 800b84e:	bf18      	it	ne
 800b850:	6059      	strne	r1, [r3, #4]
 800b852:	6863      	ldr	r3, [r4, #4]
 800b854:	bf08      	it	eq
 800b856:	6031      	streq	r1, [r6, #0]
 800b858:	5162      	str	r2, [r4, r5]
 800b85a:	604b      	str	r3, [r1, #4]
 800b85c:	4638      	mov	r0, r7
 800b85e:	f104 060b 	add.w	r6, r4, #11
 800b862:	f000 f9d3 	bl	800bc0c <__malloc_unlock>
 800b866:	f026 0607 	bic.w	r6, r6, #7
 800b86a:	1d23      	adds	r3, r4, #4
 800b86c:	1af2      	subs	r2, r6, r3
 800b86e:	d0b6      	beq.n	800b7de <_malloc_r+0x22>
 800b870:	1b9b      	subs	r3, r3, r6
 800b872:	50a3      	str	r3, [r4, r2]
 800b874:	e7b3      	b.n	800b7de <_malloc_r+0x22>
 800b876:	6862      	ldr	r2, [r4, #4]
 800b878:	42a3      	cmp	r3, r4
 800b87a:	bf0c      	ite	eq
 800b87c:	6032      	streq	r2, [r6, #0]
 800b87e:	605a      	strne	r2, [r3, #4]
 800b880:	e7ec      	b.n	800b85c <_malloc_r+0xa0>
 800b882:	4623      	mov	r3, r4
 800b884:	6864      	ldr	r4, [r4, #4]
 800b886:	e7b2      	b.n	800b7ee <_malloc_r+0x32>
 800b888:	4634      	mov	r4, r6
 800b88a:	6876      	ldr	r6, [r6, #4]
 800b88c:	e7b9      	b.n	800b802 <_malloc_r+0x46>
 800b88e:	230c      	movs	r3, #12
 800b890:	603b      	str	r3, [r7, #0]
 800b892:	4638      	mov	r0, r7
 800b894:	f000 f9ba 	bl	800bc0c <__malloc_unlock>
 800b898:	e7a1      	b.n	800b7de <_malloc_r+0x22>
 800b89a:	6025      	str	r5, [r4, #0]
 800b89c:	e7de      	b.n	800b85c <_malloc_r+0xa0>
 800b89e:	bf00      	nop
 800b8a0:	200069cc 	.word	0x200069cc

0800b8a4 <cleanup_glue>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	6809      	ldr	r1, [r1, #0]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b109      	cbz	r1, 800b8b2 <cleanup_glue+0xe>
 800b8ae:	f7ff fff9 	bl	800b8a4 <cleanup_glue>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ba:	f7ff bf13 	b.w	800b6e4 <_free_r>
	...

0800b8c0 <_reclaim_reent>:
 800b8c0:	4b2c      	ldr	r3, [pc, #176]	; (800b974 <_reclaim_reent+0xb4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4283      	cmp	r3, r0
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	d051      	beq.n	800b970 <_reclaim_reent+0xb0>
 800b8cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b8ce:	b143      	cbz	r3, 800b8e2 <_reclaim_reent+0x22>
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d14a      	bne.n	800b96c <_reclaim_reent+0xac>
 800b8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8d8:	6819      	ldr	r1, [r3, #0]
 800b8da:	b111      	cbz	r1, 800b8e2 <_reclaim_reent+0x22>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff ff01 	bl	800b6e4 <_free_r>
 800b8e2:	6961      	ldr	r1, [r4, #20]
 800b8e4:	b111      	cbz	r1, 800b8ec <_reclaim_reent+0x2c>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff fefc 	bl	800b6e4 <_free_r>
 800b8ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b8ee:	b111      	cbz	r1, 800b8f6 <_reclaim_reent+0x36>
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f7ff fef7 	bl	800b6e4 <_free_r>
 800b8f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8f8:	b111      	cbz	r1, 800b900 <_reclaim_reent+0x40>
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff fef2 	bl	800b6e4 <_free_r>
 800b900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b902:	b111      	cbz	r1, 800b90a <_reclaim_reent+0x4a>
 800b904:	4620      	mov	r0, r4
 800b906:	f7ff feed 	bl	800b6e4 <_free_r>
 800b90a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b90c:	b111      	cbz	r1, 800b914 <_reclaim_reent+0x54>
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff fee8 	bl	800b6e4 <_free_r>
 800b914:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b916:	b111      	cbz	r1, 800b91e <_reclaim_reent+0x5e>
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff fee3 	bl	800b6e4 <_free_r>
 800b91e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b920:	b111      	cbz	r1, 800b928 <_reclaim_reent+0x68>
 800b922:	4620      	mov	r0, r4
 800b924:	f7ff fede 	bl	800b6e4 <_free_r>
 800b928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b92a:	b111      	cbz	r1, 800b932 <_reclaim_reent+0x72>
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7ff fed9 	bl	800b6e4 <_free_r>
 800b932:	69a3      	ldr	r3, [r4, #24]
 800b934:	b1e3      	cbz	r3, 800b970 <_reclaim_reent+0xb0>
 800b936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b938:	4620      	mov	r0, r4
 800b93a:	4798      	blx	r3
 800b93c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b93e:	b1b9      	cbz	r1, 800b970 <_reclaim_reent+0xb0>
 800b940:	4620      	mov	r0, r4
 800b942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b946:	f7ff bfad 	b.w	800b8a4 <cleanup_glue>
 800b94a:	5949      	ldr	r1, [r1, r5]
 800b94c:	b941      	cbnz	r1, 800b960 <_reclaim_reent+0xa0>
 800b94e:	3504      	adds	r5, #4
 800b950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b952:	2d80      	cmp	r5, #128	; 0x80
 800b954:	68d9      	ldr	r1, [r3, #12]
 800b956:	d1f8      	bne.n	800b94a <_reclaim_reent+0x8a>
 800b958:	4620      	mov	r0, r4
 800b95a:	f7ff fec3 	bl	800b6e4 <_free_r>
 800b95e:	e7ba      	b.n	800b8d6 <_reclaim_reent+0x16>
 800b960:	680e      	ldr	r6, [r1, #0]
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff febe 	bl	800b6e4 <_free_r>
 800b968:	4631      	mov	r1, r6
 800b96a:	e7ef      	b.n	800b94c <_reclaim_reent+0x8c>
 800b96c:	2500      	movs	r5, #0
 800b96e:	e7ef      	b.n	800b950 <_reclaim_reent+0x90>
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	bf00      	nop
 800b974:	2000007c 	.word	0x2000007c

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	; (800b994 <_sbrk_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f7 fe6e 	bl	8003664 <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	200069d4 	.word	0x200069d4

0800b998 <siprintf>:
 800b998:	b40e      	push	{r1, r2, r3}
 800b99a:	b500      	push	{lr}
 800b99c:	b09c      	sub	sp, #112	; 0x70
 800b99e:	ab1d      	add	r3, sp, #116	; 0x74
 800b9a0:	9002      	str	r0, [sp, #8]
 800b9a2:	9006      	str	r0, [sp, #24]
 800b9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9a8:	4809      	ldr	r0, [pc, #36]	; (800b9d0 <siprintf+0x38>)
 800b9aa:	9107      	str	r1, [sp, #28]
 800b9ac:	9104      	str	r1, [sp, #16]
 800b9ae:	4909      	ldr	r1, [pc, #36]	; (800b9d4 <siprintf+0x3c>)
 800b9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b4:	9105      	str	r1, [sp, #20]
 800b9b6:	6800      	ldr	r0, [r0, #0]
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	a902      	add	r1, sp, #8
 800b9bc:	f000 f988 	bl	800bcd0 <_svfiprintf_r>
 800b9c0:	9b02      	ldr	r3, [sp, #8]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	b01c      	add	sp, #112	; 0x70
 800b9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9cc:	b003      	add	sp, #12
 800b9ce:	4770      	bx	lr
 800b9d0:	2000007c 	.word	0x2000007c
 800b9d4:	ffff0208 	.word	0xffff0208

0800b9d8 <strcat>:
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	4602      	mov	r2, r0
 800b9dc:	7814      	ldrb	r4, [r2, #0]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	3201      	adds	r2, #1
 800b9e2:	2c00      	cmp	r4, #0
 800b9e4:	d1fa      	bne.n	800b9dc <strcat+0x4>
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	d1f9      	bne.n	800b9e8 <strcat+0x10>
 800b9f4:	bd10      	pop	{r4, pc}

0800b9f6 <strchr>:
 800b9f6:	b2c9      	uxtb	r1, r1
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9fe:	b11a      	cbz	r2, 800ba08 <strchr+0x12>
 800ba00:	428a      	cmp	r2, r1
 800ba02:	d1f9      	bne.n	800b9f8 <strchr+0x2>
 800ba04:	4618      	mov	r0, r3
 800ba06:	4770      	bx	lr
 800ba08:	2900      	cmp	r1, #0
 800ba0a:	bf18      	it	ne
 800ba0c:	2300      	movne	r3, #0
 800ba0e:	e7f9      	b.n	800ba04 <strchr+0xe>

0800ba10 <strcpy>:
 800ba10:	4603      	mov	r3, r0
 800ba12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba16:	f803 2b01 	strb.w	r2, [r3], #1
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	d1f9      	bne.n	800ba12 <strcpy+0x2>
 800ba1e:	4770      	bx	lr

0800ba20 <strncpy>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	3901      	subs	r1, #1
 800ba24:	4603      	mov	r3, r0
 800ba26:	b132      	cbz	r2, 800ba36 <strncpy+0x16>
 800ba28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ba2c:	f803 4b01 	strb.w	r4, [r3], #1
 800ba30:	3a01      	subs	r2, #1
 800ba32:	2c00      	cmp	r4, #0
 800ba34:	d1f7      	bne.n	800ba26 <strncpy+0x6>
 800ba36:	441a      	add	r2, r3
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d100      	bne.n	800ba40 <strncpy+0x20>
 800ba3e:	bd10      	pop	{r4, pc}
 800ba40:	f803 1b01 	strb.w	r1, [r3], #1
 800ba44:	e7f9      	b.n	800ba3a <strncpy+0x1a>

0800ba46 <strstr>:
 800ba46:	780a      	ldrb	r2, [r1, #0]
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	b96a      	cbnz	r2, 800ba68 <strstr+0x22>
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d109      	bne.n	800ba66 <strstr+0x20>
 800ba52:	460c      	mov	r4, r1
 800ba54:	4605      	mov	r5, r0
 800ba56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0f6      	beq.n	800ba4c <strstr+0x6>
 800ba5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ba62:	429e      	cmp	r6, r3
 800ba64:	d0f7      	beq.n	800ba56 <strstr+0x10>
 800ba66:	3001      	adds	r0, #1
 800ba68:	7803      	ldrb	r3, [r0, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1ef      	bne.n	800ba4e <strstr+0x8>
 800ba6e:	4618      	mov	r0, r3
 800ba70:	e7ec      	b.n	800ba4c <strstr+0x6>
	...

0800ba74 <_strtol_l.constprop.0>:
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7a:	d001      	beq.n	800ba80 <_strtol_l.constprop.0+0xc>
 800ba7c:	2b24      	cmp	r3, #36	; 0x24
 800ba7e:	d906      	bls.n	800ba8e <_strtol_l.constprop.0+0x1a>
 800ba80:	f7ff fd24 	bl	800b4cc <__errno>
 800ba84:	2316      	movs	r3, #22
 800ba86:	6003      	str	r3, [r0, #0]
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb74 <_strtol_l.constprop.0+0x100>
 800ba92:	460d      	mov	r5, r1
 800ba94:	462e      	mov	r6, r5
 800ba96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ba9e:	f017 0708 	ands.w	r7, r7, #8
 800baa2:	d1f7      	bne.n	800ba94 <_strtol_l.constprop.0+0x20>
 800baa4:	2c2d      	cmp	r4, #45	; 0x2d
 800baa6:	d132      	bne.n	800bb0e <_strtol_l.constprop.0+0x9a>
 800baa8:	782c      	ldrb	r4, [r5, #0]
 800baaa:	2701      	movs	r7, #1
 800baac:	1cb5      	adds	r5, r6, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d05b      	beq.n	800bb6a <_strtol_l.constprop.0+0xf6>
 800bab2:	2b10      	cmp	r3, #16
 800bab4:	d109      	bne.n	800baca <_strtol_l.constprop.0+0x56>
 800bab6:	2c30      	cmp	r4, #48	; 0x30
 800bab8:	d107      	bne.n	800baca <_strtol_l.constprop.0+0x56>
 800baba:	782c      	ldrb	r4, [r5, #0]
 800babc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bac0:	2c58      	cmp	r4, #88	; 0x58
 800bac2:	d14d      	bne.n	800bb60 <_strtol_l.constprop.0+0xec>
 800bac4:	786c      	ldrb	r4, [r5, #1]
 800bac6:	2310      	movs	r3, #16
 800bac8:	3502      	adds	r5, #2
 800baca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bace:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bad2:	f04f 0c00 	mov.w	ip, #0
 800bad6:	fbb8 f9f3 	udiv	r9, r8, r3
 800bada:	4666      	mov	r6, ip
 800badc:	fb03 8a19 	mls	sl, r3, r9, r8
 800bae0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bae4:	f1be 0f09 	cmp.w	lr, #9
 800bae8:	d816      	bhi.n	800bb18 <_strtol_l.constprop.0+0xa4>
 800baea:	4674      	mov	r4, lr
 800baec:	42a3      	cmp	r3, r4
 800baee:	dd24      	ble.n	800bb3a <_strtol_l.constprop.0+0xc6>
 800baf0:	f1bc 0f00 	cmp.w	ip, #0
 800baf4:	db1e      	blt.n	800bb34 <_strtol_l.constprop.0+0xc0>
 800baf6:	45b1      	cmp	r9, r6
 800baf8:	d31c      	bcc.n	800bb34 <_strtol_l.constprop.0+0xc0>
 800bafa:	d101      	bne.n	800bb00 <_strtol_l.constprop.0+0x8c>
 800bafc:	45a2      	cmp	sl, r4
 800bafe:	db19      	blt.n	800bb34 <_strtol_l.constprop.0+0xc0>
 800bb00:	fb06 4603 	mla	r6, r6, r3, r4
 800bb04:	f04f 0c01 	mov.w	ip, #1
 800bb08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb0c:	e7e8      	b.n	800bae0 <_strtol_l.constprop.0+0x6c>
 800bb0e:	2c2b      	cmp	r4, #43	; 0x2b
 800bb10:	bf04      	itt	eq
 800bb12:	782c      	ldrbeq	r4, [r5, #0]
 800bb14:	1cb5      	addeq	r5, r6, #2
 800bb16:	e7ca      	b.n	800baae <_strtol_l.constprop.0+0x3a>
 800bb18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bb1c:	f1be 0f19 	cmp.w	lr, #25
 800bb20:	d801      	bhi.n	800bb26 <_strtol_l.constprop.0+0xb2>
 800bb22:	3c37      	subs	r4, #55	; 0x37
 800bb24:	e7e2      	b.n	800baec <_strtol_l.constprop.0+0x78>
 800bb26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bb2a:	f1be 0f19 	cmp.w	lr, #25
 800bb2e:	d804      	bhi.n	800bb3a <_strtol_l.constprop.0+0xc6>
 800bb30:	3c57      	subs	r4, #87	; 0x57
 800bb32:	e7db      	b.n	800baec <_strtol_l.constprop.0+0x78>
 800bb34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bb38:	e7e6      	b.n	800bb08 <_strtol_l.constprop.0+0x94>
 800bb3a:	f1bc 0f00 	cmp.w	ip, #0
 800bb3e:	da05      	bge.n	800bb4c <_strtol_l.constprop.0+0xd8>
 800bb40:	2322      	movs	r3, #34	; 0x22
 800bb42:	6003      	str	r3, [r0, #0]
 800bb44:	4646      	mov	r6, r8
 800bb46:	b942      	cbnz	r2, 800bb5a <_strtol_l.constprop.0+0xe6>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	e79e      	b.n	800ba8a <_strtol_l.constprop.0+0x16>
 800bb4c:	b107      	cbz	r7, 800bb50 <_strtol_l.constprop.0+0xdc>
 800bb4e:	4276      	negs	r6, r6
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	d0f9      	beq.n	800bb48 <_strtol_l.constprop.0+0xd4>
 800bb54:	f1bc 0f00 	cmp.w	ip, #0
 800bb58:	d000      	beq.n	800bb5c <_strtol_l.constprop.0+0xe8>
 800bb5a:	1e69      	subs	r1, r5, #1
 800bb5c:	6011      	str	r1, [r2, #0]
 800bb5e:	e7f3      	b.n	800bb48 <_strtol_l.constprop.0+0xd4>
 800bb60:	2430      	movs	r4, #48	; 0x30
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1b1      	bne.n	800baca <_strtol_l.constprop.0+0x56>
 800bb66:	2308      	movs	r3, #8
 800bb68:	e7af      	b.n	800baca <_strtol_l.constprop.0+0x56>
 800bb6a:	2c30      	cmp	r4, #48	; 0x30
 800bb6c:	d0a5      	beq.n	800baba <_strtol_l.constprop.0+0x46>
 800bb6e:	230a      	movs	r3, #10
 800bb70:	e7ab      	b.n	800baca <_strtol_l.constprop.0+0x56>
 800bb72:	bf00      	nop
 800bb74:	0800e829 	.word	0x0800e829

0800bb78 <strtol>:
 800bb78:	4613      	mov	r3, r2
 800bb7a:	460a      	mov	r2, r1
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	4802      	ldr	r0, [pc, #8]	; (800bb88 <strtol+0x10>)
 800bb80:	6800      	ldr	r0, [r0, #0]
 800bb82:	f7ff bf77 	b.w	800ba74 <_strtol_l.constprop.0>
 800bb86:	bf00      	nop
 800bb88:	2000007c 	.word	0x2000007c

0800bb8c <_vsniprintf_r>:
 800bb8c:	b530      	push	{r4, r5, lr}
 800bb8e:	4614      	mov	r4, r2
 800bb90:	2c00      	cmp	r4, #0
 800bb92:	b09b      	sub	sp, #108	; 0x6c
 800bb94:	4605      	mov	r5, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	da05      	bge.n	800bba6 <_vsniprintf_r+0x1a>
 800bb9a:	238b      	movs	r3, #139	; 0x8b
 800bb9c:	6003      	str	r3, [r0, #0]
 800bb9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bba2:	b01b      	add	sp, #108	; 0x6c
 800bba4:	bd30      	pop	{r4, r5, pc}
 800bba6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bbaa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bbae:	bf14      	ite	ne
 800bbb0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bbb4:	4623      	moveq	r3, r4
 800bbb6:	9302      	str	r3, [sp, #8]
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	9104      	str	r1, [sp, #16]
 800bbc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bbc6:	4669      	mov	r1, sp
 800bbc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bbca:	f000 f881 	bl	800bcd0 <_svfiprintf_r>
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	bfbc      	itt	lt
 800bbd2:	238b      	movlt	r3, #139	; 0x8b
 800bbd4:	602b      	strlt	r3, [r5, #0]
 800bbd6:	2c00      	cmp	r4, #0
 800bbd8:	d0e3      	beq.n	800bba2 <_vsniprintf_r+0x16>
 800bbda:	9b00      	ldr	r3, [sp, #0]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	e7df      	b.n	800bba2 <_vsniprintf_r+0x16>
	...

0800bbe4 <vsniprintf>:
 800bbe4:	b507      	push	{r0, r1, r2, lr}
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	460a      	mov	r2, r1
 800bbec:	4601      	mov	r1, r0
 800bbee:	4803      	ldr	r0, [pc, #12]	; (800bbfc <vsniprintf+0x18>)
 800bbf0:	6800      	ldr	r0, [r0, #0]
 800bbf2:	f7ff ffcb 	bl	800bb8c <_vsniprintf_r>
 800bbf6:	b003      	add	sp, #12
 800bbf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbfc:	2000007c 	.word	0x2000007c

0800bc00 <__malloc_lock>:
 800bc00:	4801      	ldr	r0, [pc, #4]	; (800bc08 <__malloc_lock+0x8>)
 800bc02:	f7ff bd39 	b.w	800b678 <__retarget_lock_acquire_recursive>
 800bc06:	bf00      	nop
 800bc08:	200069c8 	.word	0x200069c8

0800bc0c <__malloc_unlock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <__malloc_unlock+0x8>)
 800bc0e:	f7ff bd34 	b.w	800b67a <__retarget_lock_release_recursive>
 800bc12:	bf00      	nop
 800bc14:	200069c8 	.word	0x200069c8

0800bc18 <__ssputs_r>:
 800bc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc1c:	688e      	ldr	r6, [r1, #8]
 800bc1e:	429e      	cmp	r6, r3
 800bc20:	4682      	mov	sl, r0
 800bc22:	460c      	mov	r4, r1
 800bc24:	4690      	mov	r8, r2
 800bc26:	461f      	mov	r7, r3
 800bc28:	d838      	bhi.n	800bc9c <__ssputs_r+0x84>
 800bc2a:	898a      	ldrh	r2, [r1, #12]
 800bc2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc30:	d032      	beq.n	800bc98 <__ssputs_r+0x80>
 800bc32:	6825      	ldr	r5, [r4, #0]
 800bc34:	6909      	ldr	r1, [r1, #16]
 800bc36:	eba5 0901 	sub.w	r9, r5, r1
 800bc3a:	6965      	ldr	r5, [r4, #20]
 800bc3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc44:	3301      	adds	r3, #1
 800bc46:	444b      	add	r3, r9
 800bc48:	106d      	asrs	r5, r5, #1
 800bc4a:	429d      	cmp	r5, r3
 800bc4c:	bf38      	it	cc
 800bc4e:	461d      	movcc	r5, r3
 800bc50:	0553      	lsls	r3, r2, #21
 800bc52:	d531      	bpl.n	800bcb8 <__ssputs_r+0xa0>
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7ff fdb1 	bl	800b7bc <_malloc_r>
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	b950      	cbnz	r0, 800bc74 <__ssputs_r+0x5c>
 800bc5e:	230c      	movs	r3, #12
 800bc60:	f8ca 3000 	str.w	r3, [sl]
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc74:	6921      	ldr	r1, [r4, #16]
 800bc76:	464a      	mov	r2, r9
 800bc78:	f7ff fd08 	bl	800b68c <memcpy>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc86:	81a3      	strh	r3, [r4, #12]
 800bc88:	6126      	str	r6, [r4, #16]
 800bc8a:	6165      	str	r5, [r4, #20]
 800bc8c:	444e      	add	r6, r9
 800bc8e:	eba5 0509 	sub.w	r5, r5, r9
 800bc92:	6026      	str	r6, [r4, #0]
 800bc94:	60a5      	str	r5, [r4, #8]
 800bc96:	463e      	mov	r6, r7
 800bc98:	42be      	cmp	r6, r7
 800bc9a:	d900      	bls.n	800bc9e <__ssputs_r+0x86>
 800bc9c:	463e      	mov	r6, r7
 800bc9e:	6820      	ldr	r0, [r4, #0]
 800bca0:	4632      	mov	r2, r6
 800bca2:	4641      	mov	r1, r8
 800bca4:	f000 faa8 	bl	800c1f8 <memmove>
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	1b9b      	subs	r3, r3, r6
 800bcac:	60a3      	str	r3, [r4, #8]
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	4433      	add	r3, r6
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7db      	b.n	800bc70 <__ssputs_r+0x58>
 800bcb8:	462a      	mov	r2, r5
 800bcba:	f000 fab7 	bl	800c22c <_realloc_r>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d1e1      	bne.n	800bc88 <__ssputs_r+0x70>
 800bcc4:	6921      	ldr	r1, [r4, #16]
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	f7ff fd0c 	bl	800b6e4 <_free_r>
 800bccc:	e7c7      	b.n	800bc5e <__ssputs_r+0x46>
	...

0800bcd0 <_svfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	4698      	mov	r8, r3
 800bcd6:	898b      	ldrh	r3, [r1, #12]
 800bcd8:	061b      	lsls	r3, r3, #24
 800bcda:	b09d      	sub	sp, #116	; 0x74
 800bcdc:	4607      	mov	r7, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	d50e      	bpl.n	800bd02 <_svfiprintf_r+0x32>
 800bce4:	690b      	ldr	r3, [r1, #16]
 800bce6:	b963      	cbnz	r3, 800bd02 <_svfiprintf_r+0x32>
 800bce8:	2140      	movs	r1, #64	; 0x40
 800bcea:	f7ff fd67 	bl	800b7bc <_malloc_r>
 800bcee:	6028      	str	r0, [r5, #0]
 800bcf0:	6128      	str	r0, [r5, #16]
 800bcf2:	b920      	cbnz	r0, 800bcfe <_svfiprintf_r+0x2e>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcfc:	e0d1      	b.n	800bea2 <_svfiprintf_r+0x1d2>
 800bcfe:	2340      	movs	r3, #64	; 0x40
 800bd00:	616b      	str	r3, [r5, #20]
 800bd02:	2300      	movs	r3, #0
 800bd04:	9309      	str	r3, [sp, #36]	; 0x24
 800bd06:	2320      	movs	r3, #32
 800bd08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd10:	2330      	movs	r3, #48	; 0x30
 800bd12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bebc <_svfiprintf_r+0x1ec>
 800bd16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd1a:	f04f 0901 	mov.w	r9, #1
 800bd1e:	4623      	mov	r3, r4
 800bd20:	469a      	mov	sl, r3
 800bd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd26:	b10a      	cbz	r2, 800bd2c <_svfiprintf_r+0x5c>
 800bd28:	2a25      	cmp	r2, #37	; 0x25
 800bd2a:	d1f9      	bne.n	800bd20 <_svfiprintf_r+0x50>
 800bd2c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd30:	d00b      	beq.n	800bd4a <_svfiprintf_r+0x7a>
 800bd32:	465b      	mov	r3, fp
 800bd34:	4622      	mov	r2, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff ff6d 	bl	800bc18 <__ssputs_r>
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f000 80aa 	beq.w	800be98 <_svfiprintf_r+0x1c8>
 800bd44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd46:	445a      	add	r2, fp
 800bd48:	9209      	str	r2, [sp, #36]	; 0x24
 800bd4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80a2 	beq.w	800be98 <_svfiprintf_r+0x1c8>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd5e:	f10a 0a01 	add.w	sl, sl, #1
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	9307      	str	r3, [sp, #28]
 800bd66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd6a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd6c:	4654      	mov	r4, sl
 800bd6e:	2205      	movs	r2, #5
 800bd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd74:	4851      	ldr	r0, [pc, #324]	; (800bebc <_svfiprintf_r+0x1ec>)
 800bd76:	f7f4 fa33 	bl	80001e0 <memchr>
 800bd7a:	9a04      	ldr	r2, [sp, #16]
 800bd7c:	b9d8      	cbnz	r0, 800bdb6 <_svfiprintf_r+0xe6>
 800bd7e:	06d0      	lsls	r0, r2, #27
 800bd80:	bf44      	itt	mi
 800bd82:	2320      	movmi	r3, #32
 800bd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd88:	0711      	lsls	r1, r2, #28
 800bd8a:	bf44      	itt	mi
 800bd8c:	232b      	movmi	r3, #43	; 0x2b
 800bd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd92:	f89a 3000 	ldrb.w	r3, [sl]
 800bd96:	2b2a      	cmp	r3, #42	; 0x2a
 800bd98:	d015      	beq.n	800bdc6 <_svfiprintf_r+0xf6>
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	4654      	mov	r4, sl
 800bd9e:	2000      	movs	r0, #0
 800bda0:	f04f 0c0a 	mov.w	ip, #10
 800bda4:	4621      	mov	r1, r4
 800bda6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdaa:	3b30      	subs	r3, #48	; 0x30
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d94e      	bls.n	800be4e <_svfiprintf_r+0x17e>
 800bdb0:	b1b0      	cbz	r0, 800bde0 <_svfiprintf_r+0x110>
 800bdb2:	9207      	str	r2, [sp, #28]
 800bdb4:	e014      	b.n	800bde0 <_svfiprintf_r+0x110>
 800bdb6:	eba0 0308 	sub.w	r3, r0, r8
 800bdba:	fa09 f303 	lsl.w	r3, r9, r3
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	46a2      	mov	sl, r4
 800bdc4:	e7d2      	b.n	800bd6c <_svfiprintf_r+0x9c>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	1d19      	adds	r1, r3, #4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	9103      	str	r1, [sp, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bfbb      	ittet	lt
 800bdd2:	425b      	neglt	r3, r3
 800bdd4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd8:	9307      	strge	r3, [sp, #28]
 800bdda:	9307      	strlt	r3, [sp, #28]
 800bddc:	bfb8      	it	lt
 800bdde:	9204      	strlt	r2, [sp, #16]
 800bde0:	7823      	ldrb	r3, [r4, #0]
 800bde2:	2b2e      	cmp	r3, #46	; 0x2e
 800bde4:	d10c      	bne.n	800be00 <_svfiprintf_r+0x130>
 800bde6:	7863      	ldrb	r3, [r4, #1]
 800bde8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdea:	d135      	bne.n	800be58 <_svfiprintf_r+0x188>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	1d1a      	adds	r2, r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	9203      	str	r2, [sp, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfb8      	it	lt
 800bdf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdfc:	3402      	adds	r4, #2
 800bdfe:	9305      	str	r3, [sp, #20]
 800be00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800becc <_svfiprintf_r+0x1fc>
 800be04:	7821      	ldrb	r1, [r4, #0]
 800be06:	2203      	movs	r2, #3
 800be08:	4650      	mov	r0, sl
 800be0a:	f7f4 f9e9 	bl	80001e0 <memchr>
 800be0e:	b140      	cbz	r0, 800be22 <_svfiprintf_r+0x152>
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	eba0 000a 	sub.w	r0, r0, sl
 800be16:	fa03 f000 	lsl.w	r0, r3, r0
 800be1a:	9b04      	ldr	r3, [sp, #16]
 800be1c:	4303      	orrs	r3, r0
 800be1e:	3401      	adds	r4, #1
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be26:	4826      	ldr	r0, [pc, #152]	; (800bec0 <_svfiprintf_r+0x1f0>)
 800be28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be2c:	2206      	movs	r2, #6
 800be2e:	f7f4 f9d7 	bl	80001e0 <memchr>
 800be32:	2800      	cmp	r0, #0
 800be34:	d038      	beq.n	800bea8 <_svfiprintf_r+0x1d8>
 800be36:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <_svfiprintf_r+0x1f4>)
 800be38:	bb1b      	cbnz	r3, 800be82 <_svfiprintf_r+0x1b2>
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	3307      	adds	r3, #7
 800be3e:	f023 0307 	bic.w	r3, r3, #7
 800be42:	3308      	adds	r3, #8
 800be44:	9303      	str	r3, [sp, #12]
 800be46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be48:	4433      	add	r3, r6
 800be4a:	9309      	str	r3, [sp, #36]	; 0x24
 800be4c:	e767      	b.n	800bd1e <_svfiprintf_r+0x4e>
 800be4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be52:	460c      	mov	r4, r1
 800be54:	2001      	movs	r0, #1
 800be56:	e7a5      	b.n	800bda4 <_svfiprintf_r+0xd4>
 800be58:	2300      	movs	r3, #0
 800be5a:	3401      	adds	r4, #1
 800be5c:	9305      	str	r3, [sp, #20]
 800be5e:	4619      	mov	r1, r3
 800be60:	f04f 0c0a 	mov.w	ip, #10
 800be64:	4620      	mov	r0, r4
 800be66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be6a:	3a30      	subs	r2, #48	; 0x30
 800be6c:	2a09      	cmp	r2, #9
 800be6e:	d903      	bls.n	800be78 <_svfiprintf_r+0x1a8>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0c5      	beq.n	800be00 <_svfiprintf_r+0x130>
 800be74:	9105      	str	r1, [sp, #20]
 800be76:	e7c3      	b.n	800be00 <_svfiprintf_r+0x130>
 800be78:	fb0c 2101 	mla	r1, ip, r1, r2
 800be7c:	4604      	mov	r4, r0
 800be7e:	2301      	movs	r3, #1
 800be80:	e7f0      	b.n	800be64 <_svfiprintf_r+0x194>
 800be82:	ab03      	add	r3, sp, #12
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	462a      	mov	r2, r5
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <_svfiprintf_r+0x1f8>)
 800be8a:	a904      	add	r1, sp, #16
 800be8c:	4638      	mov	r0, r7
 800be8e:	f3af 8000 	nop.w
 800be92:	1c42      	adds	r2, r0, #1
 800be94:	4606      	mov	r6, r0
 800be96:	d1d6      	bne.n	800be46 <_svfiprintf_r+0x176>
 800be98:	89ab      	ldrh	r3, [r5, #12]
 800be9a:	065b      	lsls	r3, r3, #25
 800be9c:	f53f af2c 	bmi.w	800bcf8 <_svfiprintf_r+0x28>
 800bea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bea2:	b01d      	add	sp, #116	; 0x74
 800bea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea8:	ab03      	add	r3, sp, #12
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	462a      	mov	r2, r5
 800beae:	4b06      	ldr	r3, [pc, #24]	; (800bec8 <_svfiprintf_r+0x1f8>)
 800beb0:	a904      	add	r1, sp, #16
 800beb2:	4638      	mov	r0, r7
 800beb4:	f000 f87a 	bl	800bfac <_printf_i>
 800beb8:	e7eb      	b.n	800be92 <_svfiprintf_r+0x1c2>
 800beba:	bf00      	nop
 800bebc:	0800e929 	.word	0x0800e929
 800bec0:	0800e933 	.word	0x0800e933
 800bec4:	00000000 	.word	0x00000000
 800bec8:	0800bc19 	.word	0x0800bc19
 800becc:	0800e92f 	.word	0x0800e92f

0800bed0 <_printf_common>:
 800bed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed4:	4616      	mov	r6, r2
 800bed6:	4699      	mov	r9, r3
 800bed8:	688a      	ldr	r2, [r1, #8]
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	bfb8      	it	lt
 800bee4:	4613      	movlt	r3, r2
 800bee6:	6033      	str	r3, [r6, #0]
 800bee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beec:	4607      	mov	r7, r0
 800beee:	460c      	mov	r4, r1
 800bef0:	b10a      	cbz	r2, 800bef6 <_printf_common+0x26>
 800bef2:	3301      	adds	r3, #1
 800bef4:	6033      	str	r3, [r6, #0]
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	0699      	lsls	r1, r3, #26
 800befa:	bf42      	ittt	mi
 800befc:	6833      	ldrmi	r3, [r6, #0]
 800befe:	3302      	addmi	r3, #2
 800bf00:	6033      	strmi	r3, [r6, #0]
 800bf02:	6825      	ldr	r5, [r4, #0]
 800bf04:	f015 0506 	ands.w	r5, r5, #6
 800bf08:	d106      	bne.n	800bf18 <_printf_common+0x48>
 800bf0a:	f104 0a19 	add.w	sl, r4, #25
 800bf0e:	68e3      	ldr	r3, [r4, #12]
 800bf10:	6832      	ldr	r2, [r6, #0]
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	42ab      	cmp	r3, r5
 800bf16:	dc26      	bgt.n	800bf66 <_printf_common+0x96>
 800bf18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf1c:	1e13      	subs	r3, r2, #0
 800bf1e:	6822      	ldr	r2, [r4, #0]
 800bf20:	bf18      	it	ne
 800bf22:	2301      	movne	r3, #1
 800bf24:	0692      	lsls	r2, r2, #26
 800bf26:	d42b      	bmi.n	800bf80 <_printf_common+0xb0>
 800bf28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	4638      	mov	r0, r7
 800bf30:	47c0      	blx	r8
 800bf32:	3001      	adds	r0, #1
 800bf34:	d01e      	beq.n	800bf74 <_printf_common+0xa4>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	68e5      	ldr	r5, [r4, #12]
 800bf3a:	6832      	ldr	r2, [r6, #0]
 800bf3c:	f003 0306 	and.w	r3, r3, #6
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	bf08      	it	eq
 800bf44:	1aad      	subeq	r5, r5, r2
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	6922      	ldr	r2, [r4, #16]
 800bf4a:	bf0c      	ite	eq
 800bf4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf50:	2500      	movne	r5, #0
 800bf52:	4293      	cmp	r3, r2
 800bf54:	bfc4      	itt	gt
 800bf56:	1a9b      	subgt	r3, r3, r2
 800bf58:	18ed      	addgt	r5, r5, r3
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	341a      	adds	r4, #26
 800bf5e:	42b5      	cmp	r5, r6
 800bf60:	d11a      	bne.n	800bf98 <_printf_common+0xc8>
 800bf62:	2000      	movs	r0, #0
 800bf64:	e008      	b.n	800bf78 <_printf_common+0xa8>
 800bf66:	2301      	movs	r3, #1
 800bf68:	4652      	mov	r2, sl
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	47c0      	blx	r8
 800bf70:	3001      	adds	r0, #1
 800bf72:	d103      	bne.n	800bf7c <_printf_common+0xac>
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7c:	3501      	adds	r5, #1
 800bf7e:	e7c6      	b.n	800bf0e <_printf_common+0x3e>
 800bf80:	18e1      	adds	r1, r4, r3
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	2030      	movs	r0, #48	; 0x30
 800bf86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf8a:	4422      	add	r2, r4
 800bf8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf94:	3302      	adds	r3, #2
 800bf96:	e7c7      	b.n	800bf28 <_printf_common+0x58>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	47c0      	blx	r8
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	d0e6      	beq.n	800bf74 <_printf_common+0xa4>
 800bfa6:	3601      	adds	r6, #1
 800bfa8:	e7d9      	b.n	800bf5e <_printf_common+0x8e>
	...

0800bfac <_printf_i>:
 800bfac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb0:	7e0f      	ldrb	r7, [r1, #24]
 800bfb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfb4:	2f78      	cmp	r7, #120	; 0x78
 800bfb6:	4691      	mov	r9, r2
 800bfb8:	4680      	mov	r8, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	469a      	mov	sl, r3
 800bfbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfc2:	d807      	bhi.n	800bfd4 <_printf_i+0x28>
 800bfc4:	2f62      	cmp	r7, #98	; 0x62
 800bfc6:	d80a      	bhi.n	800bfde <_printf_i+0x32>
 800bfc8:	2f00      	cmp	r7, #0
 800bfca:	f000 80d8 	beq.w	800c17e <_printf_i+0x1d2>
 800bfce:	2f58      	cmp	r7, #88	; 0x58
 800bfd0:	f000 80a3 	beq.w	800c11a <_printf_i+0x16e>
 800bfd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfdc:	e03a      	b.n	800c054 <_printf_i+0xa8>
 800bfde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfe2:	2b15      	cmp	r3, #21
 800bfe4:	d8f6      	bhi.n	800bfd4 <_printf_i+0x28>
 800bfe6:	a101      	add	r1, pc, #4	; (adr r1, 800bfec <_printf_i+0x40>)
 800bfe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfec:	0800c045 	.word	0x0800c045
 800bff0:	0800c059 	.word	0x0800c059
 800bff4:	0800bfd5 	.word	0x0800bfd5
 800bff8:	0800bfd5 	.word	0x0800bfd5
 800bffc:	0800bfd5 	.word	0x0800bfd5
 800c000:	0800bfd5 	.word	0x0800bfd5
 800c004:	0800c059 	.word	0x0800c059
 800c008:	0800bfd5 	.word	0x0800bfd5
 800c00c:	0800bfd5 	.word	0x0800bfd5
 800c010:	0800bfd5 	.word	0x0800bfd5
 800c014:	0800bfd5 	.word	0x0800bfd5
 800c018:	0800c165 	.word	0x0800c165
 800c01c:	0800c089 	.word	0x0800c089
 800c020:	0800c147 	.word	0x0800c147
 800c024:	0800bfd5 	.word	0x0800bfd5
 800c028:	0800bfd5 	.word	0x0800bfd5
 800c02c:	0800c187 	.word	0x0800c187
 800c030:	0800bfd5 	.word	0x0800bfd5
 800c034:	0800c089 	.word	0x0800c089
 800c038:	0800bfd5 	.word	0x0800bfd5
 800c03c:	0800bfd5 	.word	0x0800bfd5
 800c040:	0800c14f 	.word	0x0800c14f
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	1d1a      	adds	r2, r3, #4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	602a      	str	r2, [r5, #0]
 800c04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c054:	2301      	movs	r3, #1
 800c056:	e0a3      	b.n	800c1a0 <_printf_i+0x1f4>
 800c058:	6820      	ldr	r0, [r4, #0]
 800c05a:	6829      	ldr	r1, [r5, #0]
 800c05c:	0606      	lsls	r6, r0, #24
 800c05e:	f101 0304 	add.w	r3, r1, #4
 800c062:	d50a      	bpl.n	800c07a <_printf_i+0xce>
 800c064:	680e      	ldr	r6, [r1, #0]
 800c066:	602b      	str	r3, [r5, #0]
 800c068:	2e00      	cmp	r6, #0
 800c06a:	da03      	bge.n	800c074 <_printf_i+0xc8>
 800c06c:	232d      	movs	r3, #45	; 0x2d
 800c06e:	4276      	negs	r6, r6
 800c070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c074:	485e      	ldr	r0, [pc, #376]	; (800c1f0 <_printf_i+0x244>)
 800c076:	230a      	movs	r3, #10
 800c078:	e019      	b.n	800c0ae <_printf_i+0x102>
 800c07a:	680e      	ldr	r6, [r1, #0]
 800c07c:	602b      	str	r3, [r5, #0]
 800c07e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c082:	bf18      	it	ne
 800c084:	b236      	sxthne	r6, r6
 800c086:	e7ef      	b.n	800c068 <_printf_i+0xbc>
 800c088:	682b      	ldr	r3, [r5, #0]
 800c08a:	6820      	ldr	r0, [r4, #0]
 800c08c:	1d19      	adds	r1, r3, #4
 800c08e:	6029      	str	r1, [r5, #0]
 800c090:	0601      	lsls	r1, r0, #24
 800c092:	d501      	bpl.n	800c098 <_printf_i+0xec>
 800c094:	681e      	ldr	r6, [r3, #0]
 800c096:	e002      	b.n	800c09e <_printf_i+0xf2>
 800c098:	0646      	lsls	r6, r0, #25
 800c09a:	d5fb      	bpl.n	800c094 <_printf_i+0xe8>
 800c09c:	881e      	ldrh	r6, [r3, #0]
 800c09e:	4854      	ldr	r0, [pc, #336]	; (800c1f0 <_printf_i+0x244>)
 800c0a0:	2f6f      	cmp	r7, #111	; 0x6f
 800c0a2:	bf0c      	ite	eq
 800c0a4:	2308      	moveq	r3, #8
 800c0a6:	230a      	movne	r3, #10
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0ae:	6865      	ldr	r5, [r4, #4]
 800c0b0:	60a5      	str	r5, [r4, #8]
 800c0b2:	2d00      	cmp	r5, #0
 800c0b4:	bfa2      	ittt	ge
 800c0b6:	6821      	ldrge	r1, [r4, #0]
 800c0b8:	f021 0104 	bicge.w	r1, r1, #4
 800c0bc:	6021      	strge	r1, [r4, #0]
 800c0be:	b90e      	cbnz	r6, 800c0c4 <_printf_i+0x118>
 800c0c0:	2d00      	cmp	r5, #0
 800c0c2:	d04d      	beq.n	800c160 <_printf_i+0x1b4>
 800c0c4:	4615      	mov	r5, r2
 800c0c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0ca:	fb03 6711 	mls	r7, r3, r1, r6
 800c0ce:	5dc7      	ldrb	r7, [r0, r7]
 800c0d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0d4:	4637      	mov	r7, r6
 800c0d6:	42bb      	cmp	r3, r7
 800c0d8:	460e      	mov	r6, r1
 800c0da:	d9f4      	bls.n	800c0c6 <_printf_i+0x11a>
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d10b      	bne.n	800c0f8 <_printf_i+0x14c>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	07de      	lsls	r6, r3, #31
 800c0e4:	d508      	bpl.n	800c0f8 <_printf_i+0x14c>
 800c0e6:	6923      	ldr	r3, [r4, #16]
 800c0e8:	6861      	ldr	r1, [r4, #4]
 800c0ea:	4299      	cmp	r1, r3
 800c0ec:	bfde      	ittt	le
 800c0ee:	2330      	movle	r3, #48	; 0x30
 800c0f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c0f8:	1b52      	subs	r2, r2, r5
 800c0fa:	6122      	str	r2, [r4, #16]
 800c0fc:	f8cd a000 	str.w	sl, [sp]
 800c100:	464b      	mov	r3, r9
 800c102:	aa03      	add	r2, sp, #12
 800c104:	4621      	mov	r1, r4
 800c106:	4640      	mov	r0, r8
 800c108:	f7ff fee2 	bl	800bed0 <_printf_common>
 800c10c:	3001      	adds	r0, #1
 800c10e:	d14c      	bne.n	800c1aa <_printf_i+0x1fe>
 800c110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c114:	b004      	add	sp, #16
 800c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11a:	4835      	ldr	r0, [pc, #212]	; (800c1f0 <_printf_i+0x244>)
 800c11c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c120:	6829      	ldr	r1, [r5, #0]
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	f851 6b04 	ldr.w	r6, [r1], #4
 800c128:	6029      	str	r1, [r5, #0]
 800c12a:	061d      	lsls	r5, r3, #24
 800c12c:	d514      	bpl.n	800c158 <_printf_i+0x1ac>
 800c12e:	07df      	lsls	r7, r3, #31
 800c130:	bf44      	itt	mi
 800c132:	f043 0320 	orrmi.w	r3, r3, #32
 800c136:	6023      	strmi	r3, [r4, #0]
 800c138:	b91e      	cbnz	r6, 800c142 <_printf_i+0x196>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	f023 0320 	bic.w	r3, r3, #32
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	2310      	movs	r3, #16
 800c144:	e7b0      	b.n	800c0a8 <_printf_i+0xfc>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	f043 0320 	orr.w	r3, r3, #32
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	2378      	movs	r3, #120	; 0x78
 800c150:	4828      	ldr	r0, [pc, #160]	; (800c1f4 <_printf_i+0x248>)
 800c152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c156:	e7e3      	b.n	800c120 <_printf_i+0x174>
 800c158:	0659      	lsls	r1, r3, #25
 800c15a:	bf48      	it	mi
 800c15c:	b2b6      	uxthmi	r6, r6
 800c15e:	e7e6      	b.n	800c12e <_printf_i+0x182>
 800c160:	4615      	mov	r5, r2
 800c162:	e7bb      	b.n	800c0dc <_printf_i+0x130>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	6826      	ldr	r6, [r4, #0]
 800c168:	6961      	ldr	r1, [r4, #20]
 800c16a:	1d18      	adds	r0, r3, #4
 800c16c:	6028      	str	r0, [r5, #0]
 800c16e:	0635      	lsls	r5, r6, #24
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	d501      	bpl.n	800c178 <_printf_i+0x1cc>
 800c174:	6019      	str	r1, [r3, #0]
 800c176:	e002      	b.n	800c17e <_printf_i+0x1d2>
 800c178:	0670      	lsls	r0, r6, #25
 800c17a:	d5fb      	bpl.n	800c174 <_printf_i+0x1c8>
 800c17c:	8019      	strh	r1, [r3, #0]
 800c17e:	2300      	movs	r3, #0
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	4615      	mov	r5, r2
 800c184:	e7ba      	b.n	800c0fc <_printf_i+0x150>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	1d1a      	adds	r2, r3, #4
 800c18a:	602a      	str	r2, [r5, #0]
 800c18c:	681d      	ldr	r5, [r3, #0]
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	2100      	movs	r1, #0
 800c192:	4628      	mov	r0, r5
 800c194:	f7f4 f824 	bl	80001e0 <memchr>
 800c198:	b108      	cbz	r0, 800c19e <_printf_i+0x1f2>
 800c19a:	1b40      	subs	r0, r0, r5
 800c19c:	6060      	str	r0, [r4, #4]
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1a8:	e7a8      	b.n	800c0fc <_printf_i+0x150>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	462a      	mov	r2, r5
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	47d0      	blx	sl
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d0ab      	beq.n	800c110 <_printf_i+0x164>
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	079b      	lsls	r3, r3, #30
 800c1bc:	d413      	bmi.n	800c1e6 <_printf_i+0x23a>
 800c1be:	68e0      	ldr	r0, [r4, #12]
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	4298      	cmp	r0, r3
 800c1c4:	bfb8      	it	lt
 800c1c6:	4618      	movlt	r0, r3
 800c1c8:	e7a4      	b.n	800c114 <_printf_i+0x168>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	47d0      	blx	sl
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	d09b      	beq.n	800c110 <_printf_i+0x164>
 800c1d8:	3501      	adds	r5, #1
 800c1da:	68e3      	ldr	r3, [r4, #12]
 800c1dc:	9903      	ldr	r1, [sp, #12]
 800c1de:	1a5b      	subs	r3, r3, r1
 800c1e0:	42ab      	cmp	r3, r5
 800c1e2:	dcf2      	bgt.n	800c1ca <_printf_i+0x21e>
 800c1e4:	e7eb      	b.n	800c1be <_printf_i+0x212>
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	f104 0619 	add.w	r6, r4, #25
 800c1ec:	e7f5      	b.n	800c1da <_printf_i+0x22e>
 800c1ee:	bf00      	nop
 800c1f0:	0800e93a 	.word	0x0800e93a
 800c1f4:	0800e94b 	.word	0x0800e94b

0800c1f8 <memmove>:
 800c1f8:	4288      	cmp	r0, r1
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	eb01 0402 	add.w	r4, r1, r2
 800c200:	d902      	bls.n	800c208 <memmove+0x10>
 800c202:	4284      	cmp	r4, r0
 800c204:	4623      	mov	r3, r4
 800c206:	d807      	bhi.n	800c218 <memmove+0x20>
 800c208:	1e43      	subs	r3, r0, #1
 800c20a:	42a1      	cmp	r1, r4
 800c20c:	d008      	beq.n	800c220 <memmove+0x28>
 800c20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c216:	e7f8      	b.n	800c20a <memmove+0x12>
 800c218:	4402      	add	r2, r0
 800c21a:	4601      	mov	r1, r0
 800c21c:	428a      	cmp	r2, r1
 800c21e:	d100      	bne.n	800c222 <memmove+0x2a>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22a:	e7f7      	b.n	800c21c <memmove+0x24>

0800c22c <_realloc_r>:
 800c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c230:	4680      	mov	r8, r0
 800c232:	4614      	mov	r4, r2
 800c234:	460e      	mov	r6, r1
 800c236:	b921      	cbnz	r1, 800c242 <_realloc_r+0x16>
 800c238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c23c:	4611      	mov	r1, r2
 800c23e:	f7ff babd 	b.w	800b7bc <_malloc_r>
 800c242:	b92a      	cbnz	r2, 800c250 <_realloc_r+0x24>
 800c244:	f7ff fa4e 	bl	800b6e4 <_free_r>
 800c248:	4625      	mov	r5, r4
 800c24a:	4628      	mov	r0, r5
 800c24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c250:	f000 f81b 	bl	800c28a <_malloc_usable_size_r>
 800c254:	4284      	cmp	r4, r0
 800c256:	4607      	mov	r7, r0
 800c258:	d802      	bhi.n	800c260 <_realloc_r+0x34>
 800c25a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c25e:	d812      	bhi.n	800c286 <_realloc_r+0x5a>
 800c260:	4621      	mov	r1, r4
 800c262:	4640      	mov	r0, r8
 800c264:	f7ff faaa 	bl	800b7bc <_malloc_r>
 800c268:	4605      	mov	r5, r0
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d0ed      	beq.n	800c24a <_realloc_r+0x1e>
 800c26e:	42bc      	cmp	r4, r7
 800c270:	4622      	mov	r2, r4
 800c272:	4631      	mov	r1, r6
 800c274:	bf28      	it	cs
 800c276:	463a      	movcs	r2, r7
 800c278:	f7ff fa08 	bl	800b68c <memcpy>
 800c27c:	4631      	mov	r1, r6
 800c27e:	4640      	mov	r0, r8
 800c280:	f7ff fa30 	bl	800b6e4 <_free_r>
 800c284:	e7e1      	b.n	800c24a <_realloc_r+0x1e>
 800c286:	4635      	mov	r5, r6
 800c288:	e7df      	b.n	800c24a <_realloc_r+0x1e>

0800c28a <_malloc_usable_size_r>:
 800c28a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c28e:	1f18      	subs	r0, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	bfbc      	itt	lt
 800c294:	580b      	ldrlt	r3, [r1, r0]
 800c296:	18c0      	addlt	r0, r0, r3
 800c298:	4770      	bx	lr
	...

0800c29c <_init>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	bf00      	nop
 800c2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a2:	bc08      	pop	{r3}
 800c2a4:	469e      	mov	lr, r3
 800c2a6:	4770      	bx	lr

0800c2a8 <_fini>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr
