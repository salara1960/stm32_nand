
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002af4  0800d674  0800d674  0001d674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010168  08010168  00030128  2**0
                  CONTENTS
  4 .ARM          00000008  08010168  08010168  00020168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010170  08010170  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010170  08010170  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010174  08010174  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08010178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          00006908  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20006a30  20006a30  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024016  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004262  00000000  00000000  0005416e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  000583d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc6  00000000  00000000  00059f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020629  00000000  00000000  0005fd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3fbb  00000000  00000000  0008032f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001642ea  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001a30  00000000  00000000  00164340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d70  00000000  00000000  00165d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d65c 	.word	0x0800d65c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0800d65c 	.word	0x0800d65c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 ff23 	bl	8004aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f881 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e3 	bl	8000e40 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 ff4f 	bl	8004b30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xdc>)
 8000c98:	f004 fdee 	bl	8005878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0xe0>)
 8000ca4:	f004 fde8 	bl	8005878 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 ff41 	bl	8004b30 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xdc>)
 8000cb4:	f004 fde0 	bl	8005878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xe0>)
 8000cc0:	f004 fdda 	bl	8005878 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fecd 	bl	8007a74 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0xe8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0xec>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 fb45 	bl	8008372 <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000ce8:	f003 f954 	bl	8003f94 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0xf0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f969 	bl	8003fc8 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf6:	f008 fcc9 	bl	800968c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <main+0xf4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 fdbd 	bl	800987e <osSemaphoreNew>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <main+0xf8>)
 8000d08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xfc>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f008 fe3e 	bl	8009990 <osMessageQueueNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <main+0x100>)
 8000d18:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x108>)
 8000d20:	f008 fd00 	bl	8009724 <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <main+0x10c>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2a:	f008 fcd5 	bl	80096d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 fefe 	bl	8004b30 <HAL_Delay>
 8000d34:	e7fb      	b.n	8000d2e <main+0xd2>
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	20000078 	.word	0x20000078
 8000d44:	2000007c 	.word	0x2000007c
 8000d48:	20001368 	.word	0x20001368
 8000d4c:	2000136e 	.word	0x2000136e
 8000d50:	0800ff44 	.word	0x0800ff44
 8000d54:	20000350 	.word	0x20000350
 8000d58:	0800ff2c 	.word	0x0800ff2c
 8000d5c:	2000034c 	.word	0x2000034c
 8000d60:	0800ff08 	.word	0x0800ff08
 8000d64:	08002bd1 	.word	0x08002bd1
 8000d68:	20000348 	.word	0x20000348

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b fe74 	bl	800ca68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 f854 	bl	8005ea0 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f002 ff29 	bl	8003c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fab5 	bl	8006390 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f002 ff12 	bl	8003c54 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_RTC_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e6c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e86:	f005 fdb7 	bl	80069f8 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e90:	f002 fee0 	bl	8003c54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000e98:	2334      	movs	r3, #52	; 0x34
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000eb0:	f005 fe18 	bl	8006ae4 <HAL_RTC_SetTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f002 fecb 	bl	8003c54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000ed6:	f005 fefd 	bl	8006cd4 <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f002 feb8 	bl	8003c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f987 	bl	80021fc <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000144 	.word	0x20000144
 8000efc:	40002800 	.word	0x40002800
 8000f00:	2000006c 	.word	0x2000006c

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f006 f84d 	bl	8006ff4 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f002 fe78 	bl	8003c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000164 	.word	0x20000164
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f006 fd0d 	bl	80079d4 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f002 fe48 	bl	8003c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 fec7 	bl	8007d64 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f002 fe3a 	bl	8003c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f007 f8e3 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f002 fe2c 	bl	8003c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000021c 	.word	0x2000021c

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f007 f94a 	bl	80082d8 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f002 fe03 	bl	8003c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000264 	.word	0x20000264
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 fe22 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f003 fe3b 	bl	8004d20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f003 fe1a 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f003 fe33 	bl	8004d20 <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 fb74 	bl	8005878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 fb6e 	bl	8005878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 fb69 	bl	8005878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f004 f9bf 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f004 f9b0 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f004 f9a2 	bl	8005540 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <MX_FSMC_Init+0x1ac>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 800123c:	4a62      	ldr	r2, [pc, #392]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001288:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128e:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001296:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012ba:	23fc      	movs	r3, #252	; 0xfc
 80012bc:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 80012c8:	f004 fb09 	bl	80058de <HAL_NAND_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012d2:	f002 fcbf 	bl	8003c54 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

    if (HAL_NAND_ECC_Disable(&hnand1) != HAL_OK) devError |= devNAND;
 80012d6:	483b      	ldr	r0, [pc, #236]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 80012d8:	f004 fd85 	bl	8005de6 <HAL_NAND_ECC_Disable>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <MX_FSMC_Init+0xdc>
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <MX_FSMC_Init+0x1b8>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <MX_FSMC_Init+0x1b8>)
 80012ee:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012f0:	4937      	ldr	r1, [pc, #220]	; (80013d0 <MX_FSMC_Init+0x1bc>)
 80012f2:	4834      	ldr	r0, [pc, #208]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 80012f4:	f000 f8a6 	bl	8001444 <NAND_Read_ID>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d15b      	bne.n	80013b6 <MX_FSMC_Init+0x1a2>

    	nandState = HAL_NAND_GetState(&hnand1);
 80012fe:	4831      	ldr	r0, [pc, #196]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001300:	f004 fd9a 	bl	8005e38 <HAL_NAND_GetState>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_FSMC_Init+0x1c0>)
 800130a:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 800130c:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001310:	4615      	mov	r5, r2
 8001312:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131e:	e885 0003 	stmia.w	r5, {r0, r1}

    	total_pages = (chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr;
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001330:	68d2      	ldr	r2, [r2, #12]
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	4a29      	ldr	r2, [pc, #164]	; (80013dc <MX_FSMC_Init+0x1c8>)
 8001338:	6013      	str	r3, [r2, #0]
    	total_bytes = chipConf.BlockSize * chipConf.BlockNbr;
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001340:	68d2      	ldr	r2, [r2, #12]
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <MX_FSMC_Init+0x1cc>)
 8001348:	6013      	str	r3, [r2, #0]

    	if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d028      	beq.n	80013a4 <MX_FSMC_Init+0x190>
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800135a:	d823      	bhi.n	80013a4 <MX_FSMC_Init+0x190>
    		rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	2001      	movs	r0, #1
 8001364:	f00b fa8a 	bl	800c87c <calloc>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_FSMC_Init+0x1d0>)
 800136e:	601a      	str	r2, [r3, #0]
    		wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	2001      	movs	r0, #1
 8001378:	f00b fa80 	bl	800c87c <calloc>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_FSMC_Init+0x1d4>)
 8001382:	601a      	str	r2, [r3, #0]

    		if (!rdBuf || !wrBuf) devError |= devMEM;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_FSMC_Init+0x1d0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <MX_FSMC_Init+0x180>
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_FSMC_Init+0x1d4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10f      	bne.n	80013b4 <MX_FSMC_Init+0x1a0>
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_FSMC_Init+0x1b8>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_FSMC_Init+0x1b8>)
 80013a0:	801a      	strh	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <MX_FSMC_Init+0x1a0>
    	} else {
    		devError |= devNAND;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_FSMC_Init+0x1b8>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_FSMC_Init+0x1b8>)
 80013b0:	801a      	strh	r2, [r3, #0]

    }


  /* USER CODE END FSMC_Init 2 */
}
 80013b2:	e000      	b.n	80013b6 <MX_FSMC_Init+0x1a2>
    		if (!rdBuf || !wrBuf) devError |= devMEM;
 80013b4:	bf00      	nop
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000138c 	.word	0x2000138c
 80013c4:	20000308 	.word	0x20000308
 80013c8:	a0000060 	.word	0xa0000060
 80013cc:	20000354 	.word	0x20000354
 80013d0:	20001390 	.word	0x20001390
 80013d4:	2000008d 	.word	0x2000008d
 80013d8:	20001398 	.word	0x20001398
 80013dc:	20001370 	.word	0x20001370
 80013e0:	20001374 	.word	0x20001374
 80013e4:	200013b0 	.word	0x200013b0
 80013e8:	200013b4 	.word	0x200013b4

080013ec <nand_PageToBlock>:

/* USER CODE BEGIN 4 */

//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <nand_PageToBlock+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <nand_PageToBlock+0x28>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20001398 	.word	0x20001398

08001418 <nand_BlockToPage>:
//-------------------------------------------------------------------------------------------
uint32_t nand_BlockToPage(const uint32_t blk)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <nand_BlockToPage+0x28>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	fb03 f202 	mul.w	r2, r3, r2
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <nand_BlockToPage+0x28>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20001398 	.word	0x20001398

08001444 <NAND_Read_ID>:
//-----------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d101      	bne.n	800145e <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 800145a:	2302      	movs	r3, #2
 800145c:	e059      	b.n	8001512 <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d152      	bne.n	8001510 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <NAND_Read_ID+0x34>
 8001474:	2302      	movs	r3, #2
 8001476:	e04c      	b.n	8001512 <NAND_Read_ID+0xce>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <NAND_Read_ID+0xdc>)
 800148a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800148e:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <NAND_Read_ID+0xdc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	2290      	movs	r2, #144	; 0x90
 800149a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800149c:	f3bf 8f4f 	dsb	sy
}
 80014a0:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <NAND_Read_ID+0xdc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ae:	f3bf 8f4f 	dsb	sy
}
 80014b2:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d123      	bne.n	8001504 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <NAND_Read_ID+0xdc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <NAND_Read_ID+0xdc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3310      	adds	r3, #16
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0e1b      	lsrs	r3, r3, #24
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20001378 	.word	0x20001378

08001524 <NAND_Read_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Read_Page_8b(NAND_HandleTypeDef *hnand,
									   NAND_AddressTypeDef *pAddress,
									   uint8_t *pBuffer,
                                       uint32_t NumPageToRead)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b090      	sub	sp, #64	; 0x40
 8001528:	af04      	add	r7, sp, #16
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
uint32_t numpagesread = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToRead;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	627b      	str	r3, [r7, #36]	; 0x24

	// Check the NAND controller state
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d101      	bne.n	800154e <NAND_Read_Page_8b+0x2a>
		return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
 800154c:	e0dc      	b.n	8001708 <NAND_Read_Page_8b+0x1e4>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	f040 80d5 	bne.w	8001706 <NAND_Read_Page_8b+0x1e2>
		__HAL_LOCK(hnand);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <NAND_Read_Page_8b+0x46>
 8001566:	2302      	movs	r3, #2
 8001568:	e0ce      	b.n	8001708 <NAND_Read_Page_8b+0x1e4>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <NAND_Read_Page_8b+0x1ec>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	623b      	str	r3, [r7, #32]

	    if (dbg > logOn)
 8001586:	4b63      	ldr	r3, [pc, #396]	; (8001714 <NAND_Read_Page_8b+0x1f0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	f240 80a4 	bls.w	80016d8 <NAND_Read_Page_8b+0x1b4>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    		  __func__,
				  nandaddress,
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001594:	461a      	mov	r2, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800159a:	4619      	mov	r1, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 80015a0:	4618      	mov	r0, r3
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <NAND_Read_Page_8b+0x1f4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9002      	str	r0, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	4a5a      	ldr	r2, [pc, #360]	; (800171c <NAND_Read_Page_8b+0x1f8>)
 80015b2:	495b      	ldr	r1, [pc, #364]	; (8001720 <NAND_Read_Page_8b+0x1fc>)
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 ff1b 	bl	80023f0 <Report>

	    // Page(s) read loop
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 80015ba:	e08d      	b.n	80016d8 <NAND_Read_Page_8b+0x1b4>
	    	// Send read page command sequence
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c6:	f3bf 8f4f 	dsb	sy
}
 80015ca:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015d6:	f3bf 8f4f 	dsb	sy
}
 80015da:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.PageSize) > 512U) {
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e4:	d907      	bls.n	80015f6 <NAND_Read_Page_8b+0xd2>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015f0:	f3bf 8f4f 	dsb	sy
}
 80015f4:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001602:	f3bf 8f4f 	dsb	sy
}
 8001606:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	0a1a      	lsrs	r2, r3, #8
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d309      	bcc.n	8001642 <NAND_Read_Page_8b+0x11e>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	0c1a      	lsrs	r2, r3, #16
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800163c:	f3bf 8f4f 	dsb	sy
}
 8001640:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	2230      	movs	r2, #48	; 0x30
 800164a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800164c:	f3bf 8f4f 	dsb	sy
}
 8001650:	bf00      	nop
	    	__DSB();


	    	if (hnand->Config.ExtraCommandEnable == ENABLE) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d123      	bne.n	80016a4 <NAND_Read_Page_8b+0x180>
	    		uint32_t tickstart = HAL_GetTick();
 800165c:	f003 fa5c 	bl	8004b18 <HAL_GetTick>
 8001660:	6178      	str	r0, [r7, #20]
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001662:	e011      	b.n	8001688 <NAND_Read_Page_8b+0x164>
	    			if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001664:	f003 fa58 	bl	8004b18 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001672:	d909      	bls.n	8001688 <NAND_Read_Page_8b+0x164>
	    				hnand->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    				__HAL_UNLOCK(hnand);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
	    				return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e03f      	b.n	8001708 <NAND_Read_Page_8b+0x1e4>
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f004 fbe3 	bl	8005e54 <HAL_NAND_Read_Status>
 800168e:	4603      	mov	r3, r0
 8001690:	2b40      	cmp	r3, #64	; 0x40
 8001692:	d1e7      	bne.n	8001664 <NAND_Read_Page_8b+0x140>
	    			}
	    		}

	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800169e:	f3bf 8f4f 	dsb	sy
}
 80016a2:	bf00      	nop
	    		__DSB();
	    	}

	    	// Get Data into Buffer
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	e008      	b.n	80016bc <NAND_Read_Page_8b+0x198>
	    		*buff++ = *(uint8_t *)deviceaddress;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	6279      	str	r1, [r7, #36]	; 0x24
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	701a      	strb	r2, [r3, #0]
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3f1      	bcc.n	80016aa <NAND_Read_Page_8b+0x186>
	    	}

	    	numpagesread++;// Increment read pages number
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	3301      	adds	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to read
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	3b01      	subs	r3, #1
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3301      	adds	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <NAND_Read_Page_8b+0x1ce>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	6a3a      	ldr	r2, [r7, #32]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f4ff af65 	bcc.w	80015bc <NAND_Read_Page_8b+0x98>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <NAND_Read_Page_8b+0x1e4>
	    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20001378 	.word	0x20001378
 8001714:	20000070 	.word	0x20000070
 8001718:	20000004 	.word	0x20000004
 800171c:	0800ff54 	.word	0x0800ff54
 8001720:	0800d7cc 	.word	0x0800d7cc

08001724 <NAND_Write_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Write_Page_8b(NAND_HandleTypeDef *hnand,
									    NAND_AddressTypeDef *pAddress,
									    uint8_t *pBuffer,
                                        uint32_t NumPageToWrite)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af04      	add	r7, sp, #16
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
uint32_t numpageswritten = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t nbpages = NumPageToWrite;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	623b      	str	r3, [r7, #32]

	/* Check the NAND controller state */
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d101      	bne.n	800174a <NAND_Write_Page_8b+0x26>
		return HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	e0da      	b.n	8001900 <NAND_Write_Page_8b+0x1dc>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b01      	cmp	r3, #1
 8001754:	f040 80d3 	bne.w	80018fe <NAND_Write_Page_8b+0x1da>

	    __HAL_LOCK(hnand);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <NAND_Write_Page_8b+0x42>
 8001762:	2302      	movs	r3, #2
 8001764:	e0cc      	b.n	8001900 <NAND_Write_Page_8b+0x1dc>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2202      	movs	r2, #2
 8001772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 8001776:	4b64      	ldr	r3, [pc, #400]	; (8001908 <NAND_Write_Page_8b+0x1e4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	617b      	str	r3, [r7, #20]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	61fb      	str	r3, [r7, #28]

	    if (dbg > logOn)
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <NAND_Write_Page_8b+0x1e8>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	f240 80a2 	bls.w	80018d0 <NAND_Write_Page_8b+0x1ac>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    	      __func__,
	    		  nandaddress,
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001790:	461a      	mov	r2, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001796:	4619      	mov	r1, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800179c:	4618      	mov	r0, r3
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <NAND_Write_Page_8b+0x1ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	9303      	str	r3, [sp, #12]
 80017a4:	9002      	str	r0, [sp, #8]
 80017a6:	9101      	str	r1, [sp, #4]
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4a59      	ldr	r2, [pc, #356]	; (8001914 <NAND_Write_Page_8b+0x1f0>)
 80017ae:	495a      	ldr	r1, [pc, #360]	; (8001918 <NAND_Write_Page_8b+0x1f4>)
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fe1d 	bl	80023f0 <Report>

	    /* Page(s) write loop */
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 80017b6:	e08b      	b.n	80018d0 <NAND_Write_Page_8b+0x1ac>
	    	/* Send write page command sequence */
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017c2:	f3bf 8f4f 	dsb	sy
}
 80017c6:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017d2:	f3bf 8f4f 	dsb	sy
}
 80017d6:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017e2:	f3bf 8f4f 	dsb	sy
}
 80017e6:	bf00      	nop
	    	__DSB();
	    	if (hnand->Config.PageSize > 512U) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f0:	d907      	bls.n	8001802 <NAND_Write_Page_8b+0xde>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017fc:	f3bf 8f4f 	dsb	sy
}
 8001800:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800180e:	f3bf 8f4f 	dsb	sy
}
 8001812:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	0a1a      	lsrs	r2, r3, #8
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
}
 8001826:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d309      	bcc.n	800184e <NAND_Write_Page_8b+0x12a>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	0c1a      	lsrs	r2, r3, #16
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001848:	f3bf 8f4f 	dsb	sy
}
 800184c:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	// Write data to memory
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	e00b      	b.n	800186c <NAND_Write_Page_8b+0x148>
	    		*(__IO uint8_t *)deviceaddress = *(pBuffer + index);
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	441a      	add	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001860:	f3bf 8f4f 	dsb	sy
}
 8001864:	bf00      	nop
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	3301      	adds	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3ee      	bcc.n	8001854 <NAND_Write_Page_8b+0x130>
	    		__DSB();
	    	}

	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	2210      	movs	r2, #16
 800187e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001880:	f3bf 8f4f 	dsb	sy
}
 8001884:	bf00      	nop
	    	__DSB();

	    	uint32_t tickstart = HAL_GetTick();
 8001886:	f003 f947 	bl	8004b18 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 800188c:	e011      	b.n	80018b2 <NAND_Write_Page_8b+0x18e>
	    		if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 800188e:	f003 f943 	bl	8004b18 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d909      	bls.n	80018b2 <NAND_Write_Page_8b+0x18e>
	    			hnand->State = HAL_NAND_STATE_ERROR;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2203      	movs	r2, #3
 80018a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    			__HAL_UNLOCK(hnand);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]
	    			return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e026      	b.n	8001900 <NAND_Write_Page_8b+0x1dc>
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f004 face 	bl	8005e54 <HAL_NAND_Read_Status>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d1e7      	bne.n	800188e <NAND_Write_Page_8b+0x16a>
	    		}
	    	}

	    	numpageswritten++;// Increment written pages number
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
	    	nbpages--;// Decrement pages to write
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <NAND_Write_Page_8b+0x1c6>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f4ff af67 	bcc.w	80017b8 <NAND_Write_Page_8b+0x94>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <NAND_Write_Page_8b+0x1dc>
	    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20001378 	.word	0x20001378
 800190c:	20000070 	.word	0x20000070
 8001910:	20000004 	.word	0x20000004
 8001914:	0800ff68 	.word	0x0800ff68
 8001918:	0800d7cc 	.word	0x0800d7cc

0800191c <NAND_Erase_Block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t prn)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af04      	add	r7, sp, #16
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	71fb      	strb	r3, [r7, #7]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d101      	bne.n	800193a <NAND_Erase_Block+0x1e>

		return HAL_BUSY;
 8001936:	2302      	movs	r3, #2
 8001938:	e06e      	b.n	8001a18 <NAND_Erase_Block+0xfc>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d167      	bne.n	8001a16 <NAND_Erase_Block+0xfa>

		__HAL_LOCK(hnand);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <NAND_Erase_Block+0x38>
 8001950:	2302      	movs	r3, #2
 8001952:	e061      	b.n	8001a18 <NAND_Erase_Block+0xfc>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2020 	strb.w	r2, [r3, #32]
		hnand->State = HAL_NAND_STATE_BUSY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <NAND_Erase_Block+0x104>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]

		if (prn) {
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d018      	beq.n	80019a8 <NAND_Erase_Block+0x8c>
			if (dbg > logOn)
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <NAND_Erase_Block+0x108>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d914      	bls.n	80019a8 <NAND_Erase_Block+0x8c>
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	881b      	ldrh	r3, [r3, #0]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001982:	461a      	mov	r2, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	885b      	ldrh	r3, [r3, #2]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001988:	4619      	mov	r1, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	889b      	ldrh	r3, [r3, #4]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800198e:	4618      	mov	r0, r3
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <NAND_Erase_Block+0x10c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	9303      	str	r3, [sp, #12]
 8001996:	9002      	str	r0, [sp, #8]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <NAND_Erase_Block+0x110>)
 80019a0:	4923      	ldr	r1, [pc, #140]	; (8001a30 <NAND_Erase_Block+0x114>)
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 fd24 	bl	80023f0 <Report>
		}

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	2260      	movs	r2, #96	; 0x60
 80019b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019b2:	f3bf 8f4f 	dsb	sy
}
 80019b6:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019c4:	f3bf 8f4f 	dsb	sy
}
 80019c8:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	0a1a      	lsrs	r2, r3, #8
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d8:	f3bf 8f4f 	dsb	sy
}
 80019dc:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	0c1a      	lsrs	r2, r3, #16
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ec:	f3bf 8f4f 	dsb	sy
}
 80019f0:	bf00      	nop
		__DSB();

		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	22d0      	movs	r2, #208	; 0xd0
 80019fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019fc:	f3bf 8f4f 	dsb	sy
}
 8001a00:	bf00      	nop
		__DSB();

		hnand->State = HAL_NAND_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(hnand);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <NAND_Erase_Block+0xfc>
		return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20001378 	.word	0x20001378
 8001a24:	20000070 	.word	0x20000070
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	0800ff7c 	.word	0x0800ff7c
 8001a30:	0800d7cc 	.word	0x0800d7cc

08001a34 <pageIsEmpty>:
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	75fb      	strb	r3, [r7, #23]

	NAND_AddressTypeDef addr = {
		.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <pageIsEmpty+0x98>)
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <pageIsEmpty+0x98>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a52:	fb01 f202 	mul.w	r2, r1, r2
 8001a56:	1a9b      	subs	r3, r3, r2
	NAND_AddressTypeDef addr = {
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	813b      	strh	r3, [r7, #8]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	817b      	strh	r3, [r7, #10]
		.Plane = 1,
		.Block = nand_PageToBlock(page)
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fcc3 	bl	80013ec <nand_PageToBlock>
 8001a66:	4603      	mov	r3, r0
	NAND_AddressTypeDef addr = {
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	81bb      	strh	r3, [r7, #12]
	};

	if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) != HAL_OK) {
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <pageIsEmpty+0x9c>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <pageIsEmpty+0xa0>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	f107 0108 	add.w	r1, r7, #8
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f7ff fd53 	bl	8001524 <NAND_Read_Page_8b>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <pageIsEmpty+0x60>
		devError |= devNAND;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <pageIsEmpty+0xa4>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <pageIsEmpty+0xa4>)
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	e015      	b.n	8001ac0 <pageIsEmpty+0x8c>
	} else {
		ret = true;
 8001a94:	2301      	movs	r3, #1
 8001a96:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	e00b      	b.n	8001ab6 <pageIsEmpty+0x82>
			if (*(uint8_t *)(rdBuf + i) != 0xff) {
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <pageIsEmpty+0xa0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2bff      	cmp	r3, #255	; 0xff
 8001aaa:	d001      	beq.n	8001ab0 <pageIsEmpty+0x7c>
				ret = false;
 8001aac:	2300      	movs	r3, #0
 8001aae:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <pageIsEmpty+0x98>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3ee      	bcc.n	8001a9e <pageIsEmpty+0x6a>
			}
		}
	}

	return ret;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20001398 	.word	0x20001398
 8001ad0:	20000080 	.word	0x20000080
 8001ad4:	200013b0 	.word	0x200013b0
 8001ad8:	20000354 	.word	0x20000354

08001adc <emptyArea>:
//-------------------------------------------------------------------------------------------
int emptyArea(uint32_t addr, uint32_t len, uint8_t *buf, NAND_AddressTypeDef *nan)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b093      	sub	sp, #76	; 0x4c
 8001ae0:	af08      	add	r7, sp, #32
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
int ret = -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t shift = (addr - devAdr) % chipConf.PageSize;
 8001af0:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <emptyArea+0x104>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <emptyArea+0x108>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
uint32_t dlin = shift + len;
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	623b      	str	r3, [r7, #32]

	if (dlin > chipConf.PageSize)  dlin = chipConf.PageSize - shift;
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <emptyArea+0x108>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d904      	bls.n	8001b24 <emptyArea+0x48>
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <emptyArea+0x108>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	623b      	str	r3, [r7, #32]
	//

	if (dbg > logOn)
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <emptyArea+0x10c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d91c      	bls.n	8001b66 <emptyArea+0x8a>
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	4413      	add	r3, r2
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6a3a      	ldr	r2, [r7, #32]
 8001b36:	3a01      	subs	r2, #1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	8809      	ldrh	r1, [r1, #0]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001b3c:	4608      	mov	r0, r1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	8889      	ldrh	r1, [r1, #4]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001b42:	460c      	mov	r4, r1
 8001b44:	4929      	ldr	r1, [pc, #164]	; (8001bec <emptyArea+0x110>)
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	9106      	str	r1, [sp, #24]
 8001b4a:	9405      	str	r4, [sp, #20]
 8001b4c:	9004      	str	r0, [sp, #16]
 8001b4e:	9203      	str	r2, [sp, #12]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <emptyArea+0x114>)
 8001b5e:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <emptyArea+0x118>)
 8001b60:	2001      	movs	r0, #1
 8001b62:	f000 fc45 	bl	80023f0 <Report>

	//
	bool rt = false;
 8001b66:	2300      	movs	r3, #0
 8001b68:	77fb      	strb	r3, [r7, #31]
	if (NAND_Read_Page_8b(nandPort, nan, buf, 1) != HAL_OK) {
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <emptyArea+0x11c>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	f7ff fcd6 	bl	8001524 <NAND_Read_Page_8b>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <emptyArea+0xb2>
		devError |= devNAND;
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <emptyArea+0x120>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f043 0320 	orr.w	r3, r3, #32
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <emptyArea+0x120>)
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	e01e      	b.n	8001bcc <emptyArea+0xf0>
	} else {
		//
		rt = true;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]
		uint8_t byte;
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	e014      	b.n	8001bc2 <emptyArea+0xe6>
			byte = *(buf + i);
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	74fb      	strb	r3, [r7, #19]
			if ((i >= shift) && (i < dlin)) {
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d308      	bcc.n	8001bbc <emptyArea+0xe0>
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d204      	bcs.n	8001bbc <emptyArea+0xe0>
				if (byte != 0xff) rt = false;
 8001bb2:	7cfb      	ldrb	r3, [r7, #19]
 8001bb4:	2bff      	cmp	r3, #255	; 0xff
 8001bb6:	d001      	beq.n	8001bbc <emptyArea+0xe0>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	77fb      	strb	r3, [r7, #31]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <emptyArea+0x108>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d3e5      	bcc.n	8001b98 <emptyArea+0xbc>
			}
		}
		//
	}

	if (rt) ret = shift;
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <emptyArea+0xfa>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	372c      	adds	r7, #44	; 0x2c
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}
 8001be0:	20001378 	.word	0x20001378
 8001be4:	20001398 	.word	0x20001398
 8001be8:	20000070 	.word	0x20000070
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	0800ff90 	.word	0x0800ff90
 8001bf4:	0800d800 	.word	0x0800d800
 8001bf8:	20000080 	.word	0x20000080
 8001bfc:	20000354 	.word	0x20000354

08001c00 <areaIsEmpty>:
//
bool areaIsEmpty(uint32_t adr, uint32_t len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af08      	add	r7, sp, #32
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
bool ret = false;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint32_t shift = adr - devAdr;
 8001c10:	4b97      	ldr	r3, [pc, #604]	; (8001e70 <areaIsEmpty+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	623b      	str	r3, [r7, #32]
uint32_t page = shift / nandPort->Config.PageSize;
 8001c1a:	4b96      	ldr	r3, [pc, #600]	; (8001e74 <areaIsEmpty+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	61fb      	str	r3, [r7, #28]
uint32_t block = nand_PageToBlock(page);
 8001c28:	69f8      	ldr	r0, [r7, #28]
 8001c2a:	f7ff fbdf 	bl	80013ec <nand_PageToBlock>
 8001c2e:	61b8      	str	r0, [r7, #24]


	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001c30:	4b90      	ldr	r3, [pc, #576]	; (8001e74 <areaIsEmpty+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d109      	bne.n	8001c52 <areaIsEmpty+0x52>
		devError |= devNAND;
 8001c3e:	4b8e      	ldr	r3, [pc, #568]	; (8001e78 <areaIsEmpty+0x278>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b8b      	ldr	r3, [pc, #556]	; (8001e78 <areaIsEmpty+0x278>)
 8001c4a:	801a      	strh	r2, [r3, #0]
		return ret;//HAL_BUSY;
 8001c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c50:	e10a      	b.n	8001e68 <areaIsEmpty+0x268>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <areaIsEmpty+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f040 80fa 	bne.w	8001e56 <areaIsEmpty+0x256>
		//
		shift %= nandPort->Config.PageSize;
 8001c62:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <areaIsEmpty+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c6e:	fb01 f202 	mul.w	r2, r1, r2
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	623b      	str	r3, [r7, #32]
		uint32_t dlin = shift + len;
 8001c76:	6a3a      	ldr	r2, [r7, #32]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (dlin > nandPort->Config.PageSize)  dlin = nandPort->Config.PageSize - shift;
 8001c7e:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <areaIsEmpty+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d905      	bls.n	8001c96 <areaIsEmpty+0x96>
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <areaIsEmpty+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
		//
		__HAL_LOCK(nandPort);
 8001c96:	4b77      	ldr	r3, [pc, #476]	; (8001e74 <areaIsEmpty+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <areaIsEmpty+0xa6>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e0      	b.n	8001e68 <areaIsEmpty+0x268>
 8001ca6:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <areaIsEmpty+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <areaIsEmpty+0x274>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <areaIsEmpty+0x27c>)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <areaIsEmpty+0x27c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ccc:	fb01 f202 	mul.w	r2, r1, r2
 8001cd0:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	813b      	strh	r3, [r7, #8]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	817b      	strh	r3, [r7, #10]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	81bb      	strh	r3, [r7, #12]
			.Plane = 1,
			.Block = block
		};
		uint32_t deviceaddress = devAdr;
 8001ce0:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <areaIsEmpty+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 8001ce6:	893b      	ldrh	r3, [r7, #8]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	89bb      	ldrh	r3, [r7, #12]
 8001cec:	461a      	mov	r2, r3
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4b60      	ldr	r3, [pc, #384]	; (8001e74 <areaIsEmpty+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	fb00 f303 	mul.w	r3, r0, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a5d      	ldr	r2, [pc, #372]	; (8001e74 <areaIsEmpty+0x274>)
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	440b      	add	r3, r1
 8001d0a:	613b      	str	r3, [r7, #16]

		if (dbg > logOn)
 8001d0c:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <areaIsEmpty+0x280>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d91a      	bls.n	8001d4a <areaIsEmpty+0x14a>
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
				  __func__, nandaddress, adr, adr + len - 1, len, shift, dlin - 1, page, block, eol);
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	4413      	add	r3, r2
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d1e:	3a01      	subs	r2, #1
 8001d20:	4958      	ldr	r1, [pc, #352]	; (8001e84 <areaIsEmpty+0x284>)
 8001d22:	6809      	ldr	r1, [r1, #0]
 8001d24:	9107      	str	r1, [sp, #28]
 8001d26:	69b9      	ldr	r1, [r7, #24]
 8001d28:	9106      	str	r1, [sp, #24]
 8001d2a:	69f9      	ldr	r1, [r7, #28]
 8001d2c:	9105      	str	r1, [sp, #20]
 8001d2e:	9204      	str	r2, [sp, #16]
 8001d30:	6a3a      	ldr	r2, [r7, #32]
 8001d32:	9203      	str	r2, [sp, #12]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	9202      	str	r2, [sp, #8]
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <areaIsEmpty+0x288>)
 8001d42:	4952      	ldr	r1, [pc, #328]	; (8001e8c <areaIsEmpty+0x28c>)
 8001d44:	2001      	movs	r0, #1
 8001d46:	f000 fb53 	bl	80023f0 <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <areaIsEmpty+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <areaIsEmpty+0x274>)
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d26d      	bcs.n	8001e3c <areaIsEmpty+0x23c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6a:	f3bf 8f4f 	dsb	sy
}
 8001d6e:	bf00      	nop
			__DSB();
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7a:	f3bf 8f4f 	dsb	sy
}
 8001d7e:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 8001d80:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <areaIsEmpty+0x274>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8a:	d907      	bls.n	8001d9c <areaIsEmpty+0x19c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d96:	f3bf 8f4f 	dsb	sy
}
 8001d9a:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001da8:	f3bf 8f4f 	dsb	sy
}
 8001dac:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	0a1a      	lsrs	r2, r3, #8
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dbc:	f3bf 8f4f 	dsb	sy
}
 8001dc0:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <areaIsEmpty+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <areaIsEmpty+0x274>)
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d309      	bcc.n	8001dec <areaIsEmpty+0x1ec>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	0c1a      	lsrs	r2, r3, #16
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001de6:	f3bf 8f4f 	dsb	sy
}
 8001dea:	bf00      	nop
				__DSB();
			}
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001df6:	f3bf 8f4f 	dsb	sy
}
 8001dfa:	bf00      	nop
			__DSB();

			ret = true;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t byte;
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	e013      	b.n	8001e30 <areaIsEmpty+0x230>
				byte = *(uint8_t *)deviceaddress;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	73fb      	strb	r3, [r7, #15]
				if ((index >= shift) && (index < dlin)) {
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d309      	bcc.n	8001e2a <areaIsEmpty+0x22a>
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d205      	bcs.n	8001e2a <areaIsEmpty+0x22a>
					if (byte != 0xff) ret = false;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2bff      	cmp	r3, #255	; 0xff
 8001e22:	d002      	beq.n	8001e2a <areaIsEmpty+0x22a>
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <areaIsEmpty+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3e5      	bcc.n	8001e08 <areaIsEmpty+0x208>
				}
			}
		}
		//
		nandPort->State = HAL_NAND_STATE_READY;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <areaIsEmpty+0x274>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <areaIsEmpty+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	//
	return ret;
 8001e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e54:	e008      	b.n	8001e68 <areaIsEmpty+0x268>
		devError |= devNAND;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <areaIsEmpty+0x278>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <areaIsEmpty+0x278>)
 8001e62:	801a      	strh	r2, [r3, #0]
		return ret;//HAL_ERROR;
 8001e64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3730      	adds	r7, #48	; 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20001378 	.word	0x20001378
 8001e74:	20000080 	.word	0x20000080
 8001e78:	20000354 	.word	0x20000354
 8001e7c:	20001398 	.word	0x20001398
 8001e80:	20000070 	.word	0x20000070
 8001e84:	20000004 	.word	0x20000004
 8001e88:	0800ff9c 	.word	0x0800ff9c
 8001e8c:	0800d840 	.word	0x0800d840

08001e90 <get_qStat>:
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	dc18      	bgt.n	8001ed0 <get_qStat+0x40>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f113 0f06 	cmn.w	r3, #6
 8001ea4:	db2a      	blt.n	8001efc <get_qStat+0x6c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3306      	adds	r3, #6
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d826      	bhi.n	8001efc <get_qStat+0x6c>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <get_qStat+0x24>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ef5 	.word	0x08001ef5
 8001eb8:	08001ef1 	.word	0x08001ef1
 8001ebc:	08001eed 	.word	0x08001eed
 8001ec0:	08001ee9 	.word	0x08001ee9
 8001ec4:	08001ee5 	.word	0x08001ee5
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <get_qStat+0x68>
 8001eda:	e00f      	b.n	8001efc <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <get_qStat+0x7c>)
 8001ede:	e00e      	b.n	8001efe <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <get_qStat+0x80>)
 8001ee2:	e00c      	b.n	8001efe <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <get_qStat+0x84>)
 8001ee6:	e00a      	b.n	8001efe <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <get_qStat+0x88>)
 8001eea:	e008      	b.n	8001efe <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <get_qStat+0x8c>)
 8001eee:	e006      	b.n	8001efe <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <get_qStat+0x90>)
 8001ef2:	e004      	b.n	8001efe <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <get_qStat+0x94>)
 8001ef6:	e002      	b.n	8001efe <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <get_qStat+0x98>)
 8001efa:	e000      	b.n	8001efe <get_qStat+0x6e>
	}

	return "UnknownError";
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <get_qStat+0x9c>)
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0800d890 	.word	0x0800d890
 8001f10:	0800d898 	.word	0x0800d898
 8001f14:	0800d8a0 	.word	0x0800d8a0
 8001f18:	0800d8b0 	.word	0x0800d8b0
 8001f1c:	0800d8c0 	.word	0x0800d8c0
 8001f20:	0800d8d4 	.word	0x0800d8d4
 8001f24:	0800d8e4 	.word	0x0800d8e4
 8001f28:	0800d8f0 	.word	0x0800d8f0
 8001f2c:	0800d904 	.word	0x0800d904

08001f30 <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d00a      	beq.n	8001f56 <get_logName+0x26>
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	dc0a      	bgt.n	8001f5a <get_logName+0x2a>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <get_logName+0x1e>
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d002      	beq.n	8001f52 <get_logName+0x22>
 8001f4c:	e005      	b.n	8001f5a <get_logName+0x2a>
		case logOff:
			return "logOff";
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <get_logName+0x38>)
 8001f50:	e004      	b.n	8001f5c <get_logName+0x2c>
		case logOn:
			return "logOn";
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <get_logName+0x3c>)
 8001f54:	e002      	b.n	8001f5c <get_logName+0x2c>
		case logDump:
			return "logDump";
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <get_logName+0x40>)
 8001f58:	e000      	b.n	8001f5c <get_logName+0x2c>
	}

	return "???";
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <get_logName+0x44>)
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	0800d914 	.word	0x0800d914
 8001f6c:	0800d91c 	.word	0x0800d91c
 8001f70:	0800d924 	.word	0x0800d924
 8001f74:	0800d92c 	.word	0x0800d92c

08001f78 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001f84:	2330      	movs	r3, #48	; 0x30
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <hex2bin+0x28>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <hex2bin+0x2c>
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	e0b2      	b.n	800210a <hex2bin+0x192>
    if (len > 8) len = 8;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d901      	bls.n	8001fae <hex2bin+0x36>
 8001faa:	2308      	movs	r3, #8
 8001fac:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f1c3 0308 	rsb	r3, r3, #8
 8001fb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001fb8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fbc:	f107 0210 	add.w	r2, r7, #16
 8001fc0:	4413      	add	r3, r2
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00a fd40 	bl	800ca4c <memcpy>

    k = j = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001fda:	e090      	b.n	80020fe <hex2bin+0x186>
        jk = j + 2;
 8001fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fec:	e066      	b.n	80020bc <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff2:	3328      	adds	r3, #40	; 0x28
 8001ff4:	443b      	add	r3, r7
 8001ff6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ffa:	2b2f      	cmp	r3, #47	; 0x2f
 8001ffc:	d918      	bls.n	8002030 <hex2bin+0xb8>
 8001ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002002:	3328      	adds	r3, #40	; 0x28
 8002004:	443b      	add	r3, r7
 8002006:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800200a:	2b39      	cmp	r3, #57	; 0x39
 800200c:	d810      	bhi.n	8002030 <hex2bin+0xb8>
 800200e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002012:	3328      	adds	r3, #40	; 0x28
 8002014:	443b      	add	r3, r7
 8002016:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800201a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	3a30      	subs	r2, #48	; 0x30
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	3328      	adds	r3, #40	; 0x28
 8002028:	443b      	add	r3, r7
 800202a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800202e:	e040      	b.n	80020b2 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8002030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002034:	3328      	adds	r3, #40	; 0x28
 8002036:	443b      	add	r3, r7
 8002038:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800203c:	2b60      	cmp	r3, #96	; 0x60
 800203e:	d918      	bls.n	8002072 <hex2bin+0xfa>
 8002040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002044:	3328      	adds	r3, #40	; 0x28
 8002046:	443b      	add	r3, r7
 8002048:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800204c:	2b66      	cmp	r3, #102	; 0x66
 800204e:	d810      	bhi.n	8002072 <hex2bin+0xfa>
 8002050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002054:	3328      	adds	r3, #40	; 0x28
 8002056:	443b      	add	r3, r7
 8002058:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800205c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	3a57      	subs	r2, #87	; 0x57
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	3328      	adds	r3, #40	; 0x28
 800206a:	443b      	add	r3, r7
 800206c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002070:	e01f      	b.n	80020b2 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8002072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002076:	3328      	adds	r3, #40	; 0x28
 8002078:	443b      	add	r3, r7
 800207a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d917      	bls.n	80020b2 <hex2bin+0x13a>
 8002082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002086:	3328      	adds	r3, #40	; 0x28
 8002088:	443b      	add	r3, r7
 800208a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800208e:	2b46      	cmp	r3, #70	; 0x46
 8002090:	d80f      	bhi.n	80020b2 <hex2bin+0x13a>
 8002092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002096:	3328      	adds	r3, #40	; 0x28
 8002098:	443b      	add	r3, r7
 800209a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800209e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	3a37      	subs	r2, #55	; 0x37
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	3328      	adds	r3, #40	; 0x28
 80020ac:	443b      	add	r3, r7
 80020ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 80020b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b6:	3301      	adds	r3, #1
 80020b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d393      	bcc.n	8001fee <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	011a      	lsls	r2, r3, #4
 80020ca:	7b7b      	ldrb	r3, [r7, #13]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 80020d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020d8:	f1c3 0303 	rsb	r3, r3, #3
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	6a3a      	ldr	r2, [r7, #32]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	623b      	str	r3, [r7, #32]
        k++;
 80020ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020ee:	3301      	adds	r3, #1
 80020f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 80020f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020f8:	3302      	adds	r3, #2
 80020fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 80020fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002102:	2b03      	cmp	r3, #3
 8002104:	f67f af6a 	bls.w	8001fdc <hex2bin+0x64>
    }

    return ret;
 8002108:	6a3b      	ldr	r3, [r7, #32]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
	if (on)
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <errLedOn+0x34>)
 800212c:	f003 fba4 	bl	8005878 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002130:	e005      	b.n	800213e <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <errLedOn+0x34>)
 800213a:	f003 fb9d 	bl	8005878 <HAL_GPIO_WritePin>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40020c00 	.word	0x40020c00

0800214c <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
	return secCounter;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <get_secCounter+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000358 	.word	0x20000358

08002164 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
	secCounter++;
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <inc_secCounter+0x18>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a03      	ldr	r2, [pc, #12]	; (800217c <inc_secCounter+0x18>)
 8002170:	6013      	str	r3, [r2, #0]
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20000358 	.word	0x20000358

08002180 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	return msCounter;
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <get_msCounter+0x18>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000360 	.word	0x20000360

0800219c <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	msCounter++;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <inc_msCounter+0x20>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	1c50      	adds	r0, r2, #1
 80021a8:	f143 0100 	adc.w	r1, r3, #0
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <inc_msCounter+0x20>)
 80021ae:	e9c3 0100 	strd	r0, r1, [r3]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20000360 	.word	0x20000360

080021c0 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 80021c8:	f7ff ffc0 	bl	800214c <get_secCounter>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80021e2:	f7ff ffb3 	bl	800214c <get_secCounter>
 80021e6:	4602      	mov	r2, r0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bf94      	ite	ls
 80021ee:	2301      	movls	r3, #1
 80021f0:	2300      	movhi	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b094      	sub	sp, #80	; 0x50
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	2000      	movs	r0, #0
 8002208:	460a      	mov	r2, r1
 800220a:	4603      	mov	r3, r0
 800220c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002210:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f00a fb3c 	bl	800c898 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002222:	b2db      	uxtb	r3, r3
 8002224:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	b2db      	uxtb	r3, r3
 8002234:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002238:	b2db      	uxtb	r3, r3
 800223a:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <set_Date+0xb0>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4413      	add	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	b2db      	uxtb	r3, r3
 800224e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	4814      	ldr	r0, [pc, #80]	; (80022b0 <set_Date+0xb4>)
 8002260:	f004 fc40 	bl	8006ae4 <HAL_RTC_SetTime>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <set_Date+0x7e>
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <set_Date+0xb8>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	b29a      	uxth	r2, r3
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <set_Date+0xb8>)
 8002276:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002278:	e014      	b.n	80022a4 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	4619      	mov	r1, r3
 8002282:	480b      	ldr	r0, [pc, #44]	; (80022b0 <set_Date+0xb4>)
 8002284:	f004 fd26 	bl	8006cd4 <HAL_RTC_SetDate>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <set_Date+0xa2>
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <set_Date+0xb8>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <set_Date+0xb8>)
 800229a:	801a      	strh	r2, [r3, #0]
}
 800229c:	e002      	b.n	80022a4 <set_Date+0xa8>
			setDate = true;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <set_Date+0xbc>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	3750      	adds	r7, #80	; 0x50
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000136d 	.word	0x2000136d
 80022b0:	20000144 	.word	0x20000144
 80022b4:	20000354 	.word	0x20000354
 80022b8:	2000136c 	.word	0x2000136c

080022bc <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b093      	sub	sp, #76	; 0x4c
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	6078      	str	r0, [r7, #4]
int ret = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <sec2str+0x110>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f083 0301 	eor.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d040      	beq.n	8002358 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80022d6:	f7ff ff39 	bl	800214c <get_secCounter>
 80022da:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	4a3c      	ldr	r2, [pc, #240]	; (80023d0 <sec2str+0x114>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	4a39      	ldr	r2, [pc, #228]	; (80023d0 <sec2str+0x114>)
 80022ec:	fba2 1203 	umull	r1, r2, r2, r3
 80022f0:	0c12      	lsrs	r2, r2, #16
 80022f2:	4938      	ldr	r1, [pc, #224]	; (80023d4 <sec2str+0x118>)
 80022f4:	fb01 f202 	mul.w	r2, r1, r2
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	4a36      	ldr	r2, [pc, #216]	; (80023d8 <sec2str+0x11c>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0adb      	lsrs	r3, r3, #11
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <sec2str+0x11c>)
 800230c:	fba2 1203 	umull	r1, r2, r2, r3
 8002310:	0ad2      	lsrs	r2, r2, #11
 8002312:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002316:	fb01 f202 	mul.w	r2, r1, r2
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	4a2e      	ldr	r2, [pc, #184]	; (80023dc <sec2str+0x120>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 800232a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <sec2str+0x120>)
 800232e:	fba3 1302 	umull	r1, r3, r3, r2
 8002332:	0959      	lsrs	r1, r3, #5
 8002334:	460b      	mov	r3, r1
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a5b      	subs	r3, r3, r1
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234c:	4924      	ldr	r1, [pc, #144]	; (80023e0 <sec2str+0x124>)
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f00a fd02 	bl	800cd58 <siprintf>
 8002354:	6378      	str	r0, [r7, #52]	; 0x34
 8002356:	e034      	b.n	80023c2 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2200      	movs	r2, #0
 800235e:	4619      	mov	r1, r3
 8002360:	4820      	ldr	r0, [pc, #128]	; (80023e4 <sec2str+0x128>)
 8002362:	f004 fd3b 	bl	8006ddc <HAL_RTC_GetDate>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <sec2str+0xc0>
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <sec2str+0x12c>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	b29a      	uxth	r2, r3
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <sec2str+0x12c>)
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e022      	b.n	80023c2 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2200      	movs	r2, #0
 8002382:	4619      	mov	r1, r3
 8002384:	4817      	ldr	r0, [pc, #92]	; (80023e4 <sec2str+0x128>)
 8002386:	f004 fc47 	bl	8006c18 <HAL_RTC_GetTime>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <sec2str+0xe4>
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <sec2str+0x12c>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <sec2str+0x12c>)
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	e010      	b.n	80023c2 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80023a2:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80023a4:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80023a6:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80023a8:	7c3b      	ldrb	r3, [r7, #16]
 80023aa:	7c7a      	ldrb	r2, [r7, #17]
 80023ac:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80023ae:	9102      	str	r1, [sp, #8]
 80023b0:	9201      	str	r2, [sp, #4]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4623      	mov	r3, r4
 80023b6:	4602      	mov	r2, r0
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <sec2str+0x130>)
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f00a fccc 	bl	800cd58 <siprintf>
 80023c0:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	373c      	adds	r7, #60	; 0x3c
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd90      	pop	{r4, r7, pc}
 80023cc:	2000136c 	.word	0x2000136c
 80023d0:	c22e4507 	.word	0xc22e4507
 80023d4:	00015180 	.word	0x00015180
 80023d8:	91a2b3c5 	.word	0x91a2b3c5
 80023dc:	88888889 	.word	0x88888889
 80023e0:	0800d930 	.word	0x0800d930
 80023e4:	20000144 	.word	0x20000144
 80023e8:	20000354 	.word	0x20000354
 80023ec:	0800d948 	.word	0x0800d948

080023f0 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 80023f0:	b40e      	push	{r1, r2, r3}
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80023fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002400:	613b      	str	r3, [r7, #16]
int dl = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <Report+0xb4>)
 8002408:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <Report+0x48>
		dl = sec2str(buf);
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff ff50 	bl	80022bc <sec2str>
 800241c:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7fd fed6 	bl	80001d0 <strlen>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <Report+0xb8>)
 800242e:	6810      	ldr	r0, [r2, #0]
 8002430:	6018      	str	r0, [r3, #0]
		dl += 3;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3303      	adds	r3, #3
 8002436:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243c:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	18d0      	adds	r0, r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	1ad1      	subs	r1, r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	f00a fda9 	bl	800cfa4 <vsniprintf>

	uartRdy = false;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <Report+0xbc>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <Report+0xc0>)
 800245a:	681c      	ldr	r4, [r3, #0]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7fd feb7 	bl	80001d0 <strlen>
 8002462:	4603      	mov	r3, r0
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	4620      	mov	r0, r4
 800246c:	f005 ffb2 	bl	80083d4 <HAL_UART_Transmit_DMA>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <Report+0x94>
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <Report+0xc4>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <Report+0xc4>)
 8002482:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002484:	bf00      	nop
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <Report+0xbc>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f8      	bne.n	8002486 <Report+0x96>

	va_end(args);

	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80024a0:	b003      	add	sp, #12
 80024a2:	4770      	bx	lr
 80024a4:	20000368 	.word	0x20000368
 80024a8:	0800d964 	.word	0x0800d964
 80024ac:	20000068 	.word	0x20000068
 80024b0:	2000007c 	.word	0x2000007c
 80024b4:	20000354 	.word	0x20000354

080024b8 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a97      	ldr	r2, [pc, #604]	; (8002724 <HAL_UART_RxCpltCallback+0x26c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f040 826d 	bne.w	80029a6 <HAL_UART_RxCpltCallback+0x4ee>

		rxBuf[ruk++] = (char)rxByte;
 80024cc:	4b96      	ldr	r3, [pc, #600]	; (8002728 <HAL_UART_RxCpltCallback+0x270>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	b291      	uxth	r1, r2
 80024d4:	4a94      	ldr	r2, [pc, #592]	; (8002728 <HAL_UART_RxCpltCallback+0x270>)
 80024d6:	8011      	strh	r1, [r2, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b94      	ldr	r3, [pc, #592]	; (800272c <HAL_UART_RxCpltCallback+0x274>)
 80024dc:	7819      	ldrb	r1, [r3, #0]
 80024de:	4b94      	ldr	r3, [pc, #592]	; (8002730 <HAL_UART_RxCpltCallback+0x278>)
 80024e0:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 80024e2:	4b92      	ldr	r3, [pc, #584]	; (800272c <HAL_UART_RxCpltCallback+0x274>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	f040 8258 	bne.w	800299c <HAL_UART_RxCpltCallback+0x4e4>
			rxBuf[--ruk] = '\0';
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_UART_RxCpltCallback+0x270>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <HAL_UART_RxCpltCallback+0x270>)
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_UART_RxCpltCallback+0x270>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_UART_RxCpltCallback+0x278>)
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_UART_RxCpltCallback+0x27c>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002514:	2300      	movs	r3, #0
 8002516:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002518:	4885      	ldr	r0, [pc, #532]	; (8002730 <HAL_UART_RxCpltCallback+0x278>)
 800251a:	f7fd fe59 	bl	80001d0 <strlen>
 800251e:	4603      	mov	r3, r0
 8002520:	2b03      	cmp	r3, #3
 8002522:	f240 8235 	bls.w	8002990 <HAL_UART_RxCpltCallback+0x4d8>
				int8_t idx = -1;
 8002526:	23ff      	movs	r3, #255	; 0xff
 8002528:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002532:	e018      	b.n	8002566 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002534:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002538:	4a7f      	ldr	r2, [pc, #508]	; (8002738 <HAL_UART_RxCpltCallback+0x280>)
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	4619      	mov	r1, r3
 8002540:	487b      	ldr	r0, [pc, #492]	; (8002730 <HAL_UART_RxCpltCallback+0x278>)
 8002542:	f00a fc60 	bl	800ce06 <strstr>
 8002546:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <HAL_UART_RxCpltCallback+0xa0>
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"check:"
														  //"area:"
														  //"save:"
						idx = i;
 800254e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002552:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002556:	e00a      	b.n	800256e <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002558:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002566:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800256a:	2b0b      	cmp	r3, #11
 800256c:	dde2      	ble.n	8002534 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 800256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002570:	4a6f      	ldr	r2, [pc, #444]	; (8002730 <HAL_UART_RxCpltCallback+0x278>)
 8002572:	4293      	cmp	r3, r2
 8002574:	f040 820c 	bne.w	8002990 <HAL_UART_RxCpltCallback+0x4d8>
 8002578:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002580:	f000 8206 	beq.w	8002990 <HAL_UART_RxCpltCallback+0x4d8>
					nandLen = MAX_LEN_DATA;//256;
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_UART_RxCpltCallback+0x284>)
 8002586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258a:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 800258c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002590:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_UART_RxCpltCallback+0x280>)
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd fe1a 	bl	80001d0 <strlen>
 800259c:	4602      	mov	r2, r0
 800259e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a0:	4413      	add	r3, r2
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 80025b0:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80025b4:	2b0b      	cmp	r3, #11
 80025b6:	f200 81ae 	bhi.w	8002916 <HAL_UART_RxCpltCallback+0x45e>
 80025ba:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_UART_RxCpltCallback+0x108>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	080025f1 	.word	0x080025f1
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	08002651 	.word	0x08002651
 80025cc:	080026cd 	.word	0x080026cd
 80025d0:	080026f9 	.word	0x080026f9
 80025d4:	08002865 	.word	0x08002865
 80025d8:	0800289b 	.word	0x0800289b
 80025dc:	080026f9 	.word	0x080026f9
 80025e0:	080026f9 	.word	0x080026f9
 80025e4:	080028bd 	.word	0x080028bd
 80025e8:	080025f1 	.word	0x080025f1
 80025ec:	080025f1 	.word	0x080025f1
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
							cmd_flag = 1;
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_UART_RxCpltCallback+0x27c>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
						break;
 80025f6:	e18e      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 80025f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025fa:	f7fd fde9 	bl	80001d0 <strlen>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b09      	cmp	r3, #9
 8002602:	d802      	bhi.n	800260a <HAL_UART_RxCpltCallback+0x152>
								qcmd.attr = 1;
 8002604:	2301      	movs	r3, #1
 8002606:	777b      	strb	r3, [r7, #29]
 8002608:	e01e      	b.n	8002648 <HAL_UART_RxCpltCallback+0x190>
							} else {
								uki = strchr(uk, ':');
 800260a:	213a      	movs	r1, #58	; 0x3a
 800260c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800260e:	f00a fbd2 	bl	800cdb6 <strchr>
 8002612:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_UART_RxCpltCallback+0x17c>
									tZone = (uint8_t)atol(uki + 1);
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	3301      	adds	r3, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f00a f928 	bl	800c874 <atol>
 8002624:	4603      	mov	r3, r0
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_UART_RxCpltCallback+0x288>)
 800262a:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e002      	b.n	800263a <HAL_UART_RxCpltCallback+0x182>
								} else {
									tZone = 0;
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_UART_RxCpltCallback+0x288>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 800263a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800263c:	f00a f91a 	bl	800c874 <atol>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_UART_RxCpltCallback+0x28c>)
 8002646:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002648:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <HAL_UART_RxCpltCallback+0x27c>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
						break;
 800264e:	e162      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8002650:	213a      	movs	r1, #58	; 0x3a
 8002652:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002654:	f00a fbaf 	bl	800cdb6 <strchr>
 8002658:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_UART_RxCpltCallback+0x1c0>
								nandLen = atol(uki + 1);
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	3301      	adds	r3, #1
 8002664:	4618      	mov	r0, r3
 8002666:	f00a f905 	bl	800c874 <atol>
 800266a:	4603      	mov	r3, r0
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_UART_RxCpltCallback+0x284>)
 8002670:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002678:	4933      	ldr	r1, [pc, #204]	; (8002748 <HAL_UART_RxCpltCallback+0x290>)
 800267a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800267c:	f00a fbc3 	bl	800ce06 <strstr>
 8002680:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00f      	beq.n	80026a8 <HAL_UART_RxCpltCallback+0x1f0>
								uki += 2;
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	3302      	adds	r3, #2
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 800268e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002690:	f7fd fd9e 	bl	80001d0 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800269c:	f7ff fc6c 	bl	8001f78 <hex2bin>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e006      	b.n	80026b6 <HAL_UART_RxCpltCallback+0x1fe>
							} else {
								nandAdr = atol(uk);
 80026a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026aa:	f00a f8e3 	bl	800c874 <atol>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026b4:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 80026b6:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_UART_RxCpltCallback+0x298>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026c2:	6013      	str	r3, [r2, #0]
							check = true;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80026ca:	e124      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_UART_RxCpltCallback+0x298>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d203      	bcs.n	80026e0 <HAL_UART_RxCpltCallback+0x228>
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_UART_RxCpltCallback+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026de:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_UART_RxCpltCallback+0x284>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a17      	ldr	r2, [pc, #92]	; (800274c <HAL_UART_RxCpltCallback+0x294>)
 80026ee:	6013      	str	r3, [r2, #0]
							check = true;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80026f6:	e10e      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdArea://"area:'0x0:0x55:256'" //adr:byte:len
						case cmdSave://"save:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 80026fe:	4912      	ldr	r1, [pc, #72]	; (8002748 <HAL_UART_RxCpltCallback+0x290>)
 8002700:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002702:	f00a fb80 	bl	800ce06 <strstr>
 8002706:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d022      	beq.n	8002754 <HAL_UART_RxCpltCallback+0x29c>
								if (uki == uk) {
 800270e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002712:	429a      	cmp	r2, r3
 8002714:	d120      	bne.n	8002758 <HAL_UART_RxCpltCallback+0x2a0>
									uki += 2;
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	3302      	adds	r3, #2
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002722:	e019      	b.n	8002758 <HAL_UART_RxCpltCallback+0x2a0>
 8002724:	40004800 	.word	0x40004800
 8002728:	2000136a 	.word	0x2000136a
 800272c:	20001368 	.word	0x20001368
 8002730:	20000b68 	.word	0x20000b68
 8002734:	20000356 	.word	0x20000356
 8002738:	20000008 	.word	0x20000008
 800273c:	20001380 	.word	0x20001380
 8002740:	2000136d 	.word	0x2000136d
 8002744:	2000006c 	.word	0x2000006c
 8002748:	0800d968 	.word	0x0800d968
 800274c:	2000137c 	.word	0x2000137c
 8002750:	20001378 	.word	0x20001378
								}
							} else uki = uk;
 8002754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002758:	213a      	movs	r1, #58	; 0x3a
 800275a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800275c:	f00a fb2b 	bl	800cdb6 <strchr>
 8002760:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80d3 	beq.w	8002910 <HAL_UART_RxCpltCallback+0x458>
								ukb = uke + 1;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	3301      	adds	r3, #1
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	2210      	movs	r2, #16
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f00a f975 	bl	800ca68 <memset>
								memcpy(tmp, uki, uke - uki);
 800277e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	461a      	mov	r2, r3
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800278c:	4618      	mov	r0, r3
 800278e:	f00a f95d 	bl	800ca4c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002796:	2b00      	cmp	r3, #0
 8002798:	d010      	beq.n	80027bc <HAL_UART_RxCpltCallback+0x304>
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fd16 	bl	80001d0 <strlen>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fbe2 	bl	8001f78 <hex2bin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a7e      	ldr	r2, [pc, #504]	; (80029b0 <HAL_UART_RxCpltCallback+0x4f8>)
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e008      	b.n	80027ce <HAL_UART_RxCpltCallback+0x316>
								    else nandAdr = atol(tmp);
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00a f857 	bl	800c874 <atol>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <HAL_UART_RxCpltCallback+0x4f8>)
 80027cc:	601a      	str	r2, [r3, #0]
								uki = ukb;
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 80027d2:	213a      	movs	r1, #58	; 0x3a
 80027d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027d6:	f00a faee 	bl	800cdb6 <strchr>
 80027da:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_UART_RxCpltCallback+0x342>
									nandLen = atol(uke + 1);
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	3301      	adds	r3, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f00a f844 	bl	800c874 <atol>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_UART_RxCpltCallback+0x4fc>)
 80027f2:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 80027fa:	496f      	ldr	r1, [pc, #444]	; (80029b8 <HAL_UART_RxCpltCallback+0x500>)
 80027fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fe:	f00a fb02 	bl	800ce06 <strstr>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_UART_RxCpltCallback+0x35e>
									ukb += 2;
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	3302      	adds	r3, #2
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002814:	e002      	b.n	800281c <HAL_UART_RxCpltCallback+0x364>
								} else hex = false;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 800281c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_UART_RxCpltCallback+0x388>
 8002824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002826:	f7fd fcd3 	bl	80001d0 <strlen>
 800282a:	4603      	mov	r3, r0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4619      	mov	r1, r3
 8002830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002832:	f7ff fba1 	bl	8001f78 <hex2bin>
 8002836:	4603      	mov	r3, r0
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b60      	ldr	r3, [pc, #384]	; (80029bc <HAL_UART_RxCpltCallback+0x504>)
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e006      	b.n	800284e <HAL_UART_RxCpltCallback+0x396>
								    else nandByte = (uint8_t)atol(ukb);
 8002840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002842:	f00a f817 	bl	800c874 <atol>
 8002846:	4603      	mov	r3, r0
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_UART_RxCpltCallback+0x504>)
 800284c:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_UART_RxCpltCallback+0x4f8>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_UART_RxCpltCallback+0x508>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a55      	ldr	r2, [pc, #340]	; (80029b0 <HAL_UART_RxCpltCallback+0x4f8>)
 800285a:	6013      	str	r3, [r2, #0]
								check = true;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 8002862:	e055      	b.n	8002910 <HAL_UART_RxCpltCallback+0x458>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002864:	4957      	ldr	r1, [pc, #348]	; (80029c4 <HAL_UART_RxCpltCallback+0x50c>)
 8002866:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002868:	f00a facd 	bl	800ce06 <strstr>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_RxCpltCallback+0x3c0>
								qcmd.attr = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	777b      	strb	r3, [r7, #29]
 8002876:	e00c      	b.n	8002892 <HAL_UART_RxCpltCallback+0x3da>
							} else {
								uint32_t blk = atol(uk);
 8002878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800287a:	f009 fffb 	bl	800c874 <atol>
 800287e:	4603      	mov	r3, r0
 8002880:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_UART_RxCpltCallback+0x510>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	6a3a      	ldr	r2, [r7, #32]
 8002888:	429a      	cmp	r2, r3
 800288a:	d202      	bcs.n	8002892 <HAL_UART_RxCpltCallback+0x3da>
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_UART_RxCpltCallback+0x514>)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002892:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_UART_RxCpltCallback+0x518>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
						break;
 8002898:	e03d      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 800289a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800289c:	f009 ffea 	bl	800c874 <atol>
 80028a0:	4603      	mov	r3, r0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//(128K / 2K) * 1024 = 65536
 80028a4:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_UART_RxCpltCallback+0x51c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d232      	bcs.n	8002914 <HAL_UART_RxCpltCallback+0x45c>
								nandPage = page;
 80028ae:	4a4a      	ldr	r2, [pc, #296]	; (80029d8 <HAL_UART_RxCpltCallback+0x520>)
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_UART_RxCpltCallback+0x518>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 80028ba:	e02b      	b.n	8002914 <HAL_UART_RxCpltCallback+0x45c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 80028bc:	2303      	movs	r3, #3
 80028be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 80028c2:	4946      	ldr	r1, [pc, #280]	; (80029dc <HAL_UART_RxCpltCallback+0x524>)
 80028c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028c6:	f00a fa9e 	bl	800ce06 <strstr>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_UART_RxCpltCallback+0x420>
								lg = logOff;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80028d6:	e014      	b.n	8002902 <HAL_UART_RxCpltCallback+0x44a>
							} else if (strstr(uk, "on")) {
 80028d8:	4941      	ldr	r1, [pc, #260]	; (80029e0 <HAL_UART_RxCpltCallback+0x528>)
 80028da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028dc:	f00a fa93 	bl	800ce06 <strstr>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_UART_RxCpltCallback+0x436>
								lg = logOn;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80028ec:	e009      	b.n	8002902 <HAL_UART_RxCpltCallback+0x44a>
							} else if (strstr(uk, "dump")) {
 80028ee:	493d      	ldr	r1, [pc, #244]	; (80029e4 <HAL_UART_RxCpltCallback+0x52c>)
 80028f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028f2:	f00a fa88 	bl	800ce06 <strstr>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_UART_RxCpltCallback+0x44a>
								lg = logDump;
 80028fc:	2302      	movs	r3, #2
 80028fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 8002902:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002906:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_UART_RxCpltCallback+0x518>)
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
						}
						break;
 800290e:	e002      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						break;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <HAL_UART_RxCpltCallback+0x45e>
						break;
 8002914:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002916:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800291a:	773b      	strb	r3, [r7, #28]
					if (check) {
 800291c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <HAL_UART_RxCpltCallback+0x4a4>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_UART_RxCpltCallback+0x4fc>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_UART_RxCpltCallback+0x4f8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	441a      	add	r2, r3
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_UART_RxCpltCallback+0x530>)
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_UART_RxCpltCallback+0x508>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	440b      	add	r3, r1
 800293a:	429a      	cmp	r2, r3
 800293c:	d30b      	bcc.n	8002956 <HAL_UART_RxCpltCallback+0x49e>
							nandLen = total_bytes - nandAdr - 1;
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_UART_RxCpltCallback+0x530>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_UART_RxCpltCallback+0x4f8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_UART_RxCpltCallback+0x4fc>)
 8002954:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_UART_RxCpltCallback+0x518>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_UART_RxCpltCallback+0x518>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_UART_RxCpltCallback+0x4d8>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_UART_RxCpltCallback+0x534>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f107 011c 	add.w	r1, r7, #28
 800296c:	2300      	movs	r3, #0
 800296e:	2205      	movs	r2, #5
 8002970:	f007 f882 	bl	8009a78 <osMessageQueuePut>
 8002974:	4603      	mov	r3, r0
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_UART_RxCpltCallback+0x538>)
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_UART_RxCpltCallback+0x538>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_UART_RxCpltCallback+0x4d8>
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_UART_RxCpltCallback+0x53c>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298a:	b29a      	uxth	r2, r3
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_UART_RxCpltCallback+0x53c>)
 800298e:	801a      	strh	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_UART_RxCpltCallback+0x540>)
 8002992:	2200      	movs	r2, #0
 8002994:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_UART_RxCpltCallback+0x544>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 800299c:	2201      	movs	r2, #1
 800299e:	4918      	ldr	r1, [pc, #96]	; (8002a00 <HAL_UART_RxCpltCallback+0x548>)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f005 fce6 	bl	8008372 <HAL_UART_Receive_IT>
	}
}
 80029a6:	bf00      	nop
 80029a8:	3740      	adds	r7, #64	; 0x40
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000137c 	.word	0x2000137c
 80029b4:	20001380 	.word	0x20001380
 80029b8:	0800d968 	.word	0x0800d968
 80029bc:	2000008c 	.word	0x2000008c
 80029c0:	20001378 	.word	0x20001378
 80029c4:	0800d96c 	.word	0x0800d96c
 80029c8:	20001398 	.word	0x20001398
 80029cc:	20001384 	.word	0x20001384
 80029d0:	20000356 	.word	0x20000356
 80029d4:	20001370 	.word	0x20001370
 80029d8:	20001388 	.word	0x20001388
 80029dc:	0800d970 	.word	0x0800d970
 80029e0:	0800d974 	.word	0x0800d974
 80029e4:	0800d978 	.word	0x0800d978
 80029e8:	20001374 	.word	0x20001374
 80029ec:	2000034c 	.word	0x2000034c
 80029f0:	200013b8 	.word	0x200013b8
 80029f4:	20000354 	.word	0x20000354
 80029f8:	2000136a 	.word	0x2000136a
 80029fc:	20000b68 	.word	0x20000b68
 8002a00:	20001368 	.word	0x20001368

08002a04 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_UART_TxCpltCallback+0x24>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d102      	bne.n	8002a1c <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_UART_TxCpltCallback+0x28>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40004800 	.word	0x40004800
 8002a2c:	20000068 	.word	0x20000068

08002a30 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_SPI_TxCpltCallback+0x24>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d102      	bne.n	8002a48 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_SPI_TxCpltCallback+0x28>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
	}
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40013000 	.word	0x40013000
 8002a58:	20000069 	.word	0x20000069

08002a5c <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60ba      	str	r2, [r7, #8]
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d10e      	bne.n	8002a9e <showBuf+0x42>
		if (rd) {
 8002a80:	7bbb      	ldrb	r3, [r7, #14]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002a86:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <showBuf+0x154>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <showBuf+0x154>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	e001      	b.n	8002a9e <showBuf+0x42>
		} else ind = max_ind;
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d271      	bcs.n	8002b8a <showBuf+0x12e>
		bool done = false;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ac2:	fb01 f202 	mul.w	r2, r1, r2
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <showBuf+0x76>
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <showBuf+0x158>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002ad8:	e046      	b.n	8002b68 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002ada:	4836      	ldr	r0, [pc, #216]	; (8002bb4 <showBuf+0x158>)
 8002adc:	f7fd fb78 	bl	80001d0 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a34      	ldr	r2, [pc, #208]	; (8002bb4 <showBuf+0x158>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4933      	ldr	r1, [pc, #204]	; (8002bb8 <showBuf+0x15c>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00a f934 	bl	800cd58 <siprintf>
			for (int i = 0; i < step; i++) {
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e01d      	b.n	8002b32 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002af6:	482f      	ldr	r0, [pc, #188]	; (8002bb4 <showBuf+0x158>)
 8002af8:	f7fd fb6a 	bl	80001d0 <strlen>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <showBuf+0x158>)
 8002b00:	1898      	adds	r0, r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	4413      	add	r3, r2
 8002b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	492a      	ldr	r1, [pc, #168]	; (8002bbc <showBuf+0x160>)
 8002b12:	f00a f921 	bl	800cd58 <siprintf>
				ix++;
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002b1c:	6a3a      	ldr	r2, [r7, #32]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d103      	bne.n	8002b2c <showBuf+0xd0>
					done = true;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002b2a:	e006      	b.n	8002b3a <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	dbdd      	blt.n	8002af6 <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <showBuf+0x164>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481c      	ldr	r0, [pc, #112]	; (8002bb4 <showBuf+0x158>)
 8002b42:	f00a f929 	bl	800cd98 <strcat>
			adr += step;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b52:	4413      	add	r3, r2
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <showBuf+0x10c>
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6c:	f083 0301 	eor.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1b1      	bne.n	8002ada <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <showBuf+0x168>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d014      	beq.n	8002ba8 <showBuf+0x14c>
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <showBuf+0x158>)
 8002b80:	4911      	ldr	r1, [pc, #68]	; (8002bc8 <showBuf+0x16c>)
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7ff fc34 	bl	80023f0 <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002b88:	e00e      	b.n	8002ba8 <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <showBuf+0x168>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <showBuf+0x14c>
 8002b92:	7bbb      	ldrb	r3, [r7, #14]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <showBuf+0x164>)
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	9201      	str	r2, [sp, #4]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba0:	490a      	ldr	r1, [pc, #40]	; (8002bcc <showBuf+0x170>)
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7ff fc24 	bl	80023f0 <Report>
}
 8002ba8:	bf00      	nop
 8002baa:	3730      	adds	r7, #48	; 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20001398 	.word	0x20001398
 8002bb4:	200013bc 	.word	0x200013bc
 8002bb8:	0800d980 	.word	0x0800d980
 8002bbc:	0800d988 	.word	0x0800d988
 8002bc0:	20000004 	.word	0x20000004
 8002bc4:	20000070 	.word	0x20000070
 8002bc8:	0800d990 	.word	0x0800d990
 8002bcc:	0800d994 	.word	0x0800d994

08002bd0 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 8002bd6:	af06      	add	r7, sp, #24
 8002bd8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002bdc:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8002be0:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 8002be2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002be6:	f001 ffa3 	bl	8004b30 <HAL_Delay>
	if (dbg != logOff) {
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <defThread+0x168>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <defThread+0x54>
		Report(0, "%s", eol);
 8002bf2:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <defThread+0x16c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4951      	ldr	r1, [pc, #324]	; (8002d40 <defThread+0x170>)
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7ff fbf8 	bl	80023f0 <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <defThread+0x174>)
 8002c02:	681c      	ldr	r4, [r3, #0]
 8002c04:	f009 fd06 	bl	800c614 <xPortGetFreeHeapSize>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <defThread+0x16c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	9302      	str	r3, [sp, #8]
 8002c10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <defThread+0x178>)
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	494b      	ldr	r1, [pc, #300]	; (8002d4c <defThread+0x17c>)
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff fbe6 	bl	80023f0 <Report>
	}

	uint8_t next_block_erase = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
 8002c30:	2301      	movs	r3, #1
 8002c32:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	bool readed = false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
	char cid[32];
	uint32_t BlockSizeKB = chipConf.BlockSize / 1024;
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <defThread+0x180>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	0a9b      	lsrs	r3, r3, #10
 8002c4e:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	uint32_t PlaneSizeMB = chipConf.PlaneSize / 1024 / 1024;
 8002c52:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <defThread+0x180>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	0d1b      	lsrs	r3, r3, #20
 8002c58:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <defThread+0x184>)
 8002c5e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
	if (nandState == HAL_NAND_STATE_READY) {
 8002c62:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <defThread+0x188>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	f040 8086 	bne.w	8002d78 <defThread+0x1a8>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <defThread+0x184>)
 8002c6e:	785b      	ldrb	r3, [r3, #1]
 8002c70:	22f1      	movs	r2, #241	; 0xf1
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <defThread+0xb8>
 8002c76:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <defThread+0x18c>)
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4618      	mov	r0, r3
 8002c82:	f00a f8ad 	bl	800cde0 <strncpy>
 8002c86:	e006      	b.n	8002c96 <defThread+0xc6>
		                               else strcpy(cid, "UNKNOWN");
 8002c88:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002c8c:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <defThread+0x190>)
 8002c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c92:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <defThread+0x194>)
 8002c98:	4a33      	ldr	r2, [pc, #204]	; (8002d68 <defThread+0x198>)
 8002c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c9e:	6018      	str	r0, [r3, #0]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002caa:	e016      	b.n	8002cda <defThread+0x10a>
 8002cac:	482d      	ldr	r0, [pc, #180]	; (8002d64 <defThread+0x194>)
 8002cae:	f7fd fa8f 	bl	80001d0 <strlen>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <defThread+0x194>)
 8002cb6:	1898      	adds	r0, r3, r2
 8002cb8:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002cbc:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4929      	ldr	r1, [pc, #164]	; (8002d6c <defThread+0x19c>)
 8002cc8:	f00a f846 	bl	800cd58 <siprintf>
 8002ccc:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002cda:	f897 3489 	ldrb.w	r3, [r7, #1161]	; 0x489
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d9e4      	bls.n	8002cac <defThread+0xdc>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8002ce2:	4820      	ldr	r0, [pc, #128]	; (8002d64 <defThread+0x194>)
 8002ce4:	f7fd fa74 	bl	80001d0 <strlen>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <defThread+0x194>)
 8002cec:	1898      	adds	r0, r3, r2
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <defThread+0x184>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002cf8:	491d      	ldr	r1, [pc, #116]	; (8002d70 <defThread+0x1a0>)
 8002cfa:	f00a f82d 	bl	800cd58 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8002cfe:	4819      	ldr	r0, [pc, #100]	; (8002d64 <defThread+0x194>)
 8002d00:	f7fd fa66 	bl	80001d0 <strlen>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <defThread+0x194>)
 8002d08:	1898      	adds	r0, r3, r2
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <defThread+0x180>)
 8002d0c:	681c      	ldr	r4, [r3, #0]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <defThread+0x180>)
 8002d10:	685d      	ldr	r5, [r3, #4]
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <defThread+0x180>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <defThread+0x180>)
 8002d18:	6912      	ldr	r2, [r2, #16]
 8002d1a:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8002d1e:	9103      	str	r1, [sp, #12]
 8002d20:	9202      	str	r2, [sp, #8]
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4911      	ldr	r1, [pc, #68]	; (8002d74 <defThread+0x1a4>)
 8002d30:	f00a f812 	bl	800cd58 <siprintf>
 8002d34:	e02d      	b.n	8002d92 <defThread+0x1c2>
 8002d36:	bf00      	nop
 8002d38:	20000070 	.word	0x20000070
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	0800d990 	.word	0x0800d990
 8002d44:	20000000 	.word	0x20000000
 8002d48:	0800ffa8 	.word	0x0800ffa8
 8002d4c:	0800d9bc 	.word	0x0800d9bc
 8002d50:	20001398 	.word	0x20001398
 8002d54:	20001390 	.word	0x20001390
 8002d58:	2000008d 	.word	0x2000008d
 8002d5c:	20000090 	.word	0x20000090
 8002d60:	0800d9e8 	.word	0x0800d9e8
 8002d64:	200013bc 	.word	0x200013bc
 8002d68:	0800d9f0 	.word	0x0800d9f0
 8002d6c:	0800d988 	.word	0x0800d988
 8002d70:	0800d9f8 	.word	0x0800d9f8
 8002d74:	0800da10 	.word	0x0800da10
					chipConf.BlockNbr,
					chipConf.PlaneNbr,
					PlaneSizeMB);
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002d78:	4bb3      	ldr	r3, [pc, #716]	; (8003048 <defThread+0x478>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002d80:	4ab2      	ldr	r2, [pc, #712]	; (800304c <defThread+0x47c>)
 8002d82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d86:	4bb0      	ldr	r3, [pc, #704]	; (8003048 <defThread+0x478>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	49b1      	ldr	r1, [pc, #708]	; (8003050 <defThread+0x480>)
 8002d8c:	48b1      	ldr	r0, [pc, #708]	; (8003054 <defThread+0x484>)
 8002d8e:	f009 ffe3 	bl	800cd58 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002d92:	4bb1      	ldr	r3, [pc, #708]	; (8003058 <defThread+0x488>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <defThread+0x1d8>
 8002d9a:	4bb0      	ldr	r3, [pc, #704]	; (800305c <defThread+0x48c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4aad      	ldr	r2, [pc, #692]	; (8003054 <defThread+0x484>)
 8002da0:	49af      	ldr	r1, [pc, #700]	; (8003060 <defThread+0x490>)
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7ff fb24 	bl	80023f0 <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002dae:	4bad      	ldr	r3, [pc, #692]	; (8003064 <defThread+0x494>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002dba:	9200      	str	r2, [sp, #0]
 8002dbc:	22ef      	movs	r2, #239	; 0xef
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f001 f9e6 	bl	8004192 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002dc6:	4ba7      	ldr	r3, [pc, #668]	; (8003064 <defThread+0x494>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002dd2:	b299      	uxth	r1, r3
 8002dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	23ef      	movs	r3, #239	; 0xef
 8002ddc:	22ef      	movs	r2, #239	; 0xef
 8002dde:	2000      	movs	r0, #0
 8002de0:	f001 f9d7 	bl	8004192 <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002de4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8002de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dec:	499e      	ldr	r1, [pc, #632]	; (8003068 <defThread+0x498>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f009 ffb2 	bl	800cd58 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002df4:	4b9d      	ldr	r3, [pc, #628]	; (800306c <defThread+0x49c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	23f0      	movs	r3, #240	; 0xf0
 8002dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 face 	bl	80043ac <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd f9db 	bl	80001d0 <strlen>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e20:	1898      	adds	r0, r3, r2
 8002e22:	4b93      	ldr	r3, [pc, #588]	; (8003070 <defThread+0x4a0>)
 8002e24:	681c      	ldr	r4, [r3, #0]
 8002e26:	4b92      	ldr	r3, [pc, #584]	; (8003070 <defThread+0x4a0>)
 8002e28:	685d      	ldr	r5, [r3, #4]
 8002e2a:	4b91      	ldr	r3, [pc, #580]	; (8003070 <defThread+0x4a0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4a90      	ldr	r2, [pc, #576]	; (8003070 <defThread+0x4a0>)
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8002e36:	9103      	str	r1, [sp, #12]
 8002e38:	9202      	str	r2, [sp, #8]
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	462b      	mov	r3, r5
 8002e44:	4622      	mov	r2, r4
 8002e46:	498b      	ldr	r1, [pc, #556]	; (8003074 <defThread+0x4a4>)
 8002e48:	f009 ff86 	bl	800cd58 <siprintf>
			chipConf.SpareAreaSize,
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002e4c:	4b8a      	ldr	r3, [pc, #552]	; (8003078 <defThread+0x4a8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <defThread+0x2a2>
 8002e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd f9b9 	bl	80001d0 <strlen>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e64:	4413      	add	r3, r2
 8002e66:	4a84      	ldr	r2, [pc, #528]	; (8003078 <defThread+0x4a8>)
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	4984      	ldr	r1, [pc, #528]	; (800307c <defThread+0x4ac>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f009 ff73 	bl	800cd58 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002e72:	4b7e      	ldr	r3, [pc, #504]	; (800306c <defThread+0x49c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fc7d 	bl	8000778 <__aeabi_i2d>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	460d      	mov	r5, r1
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <defThread+0x49c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fc75 	bl	8000778 <__aeabi_i2d>
 8002e8e:	a36c      	add	r3, pc, #432	; (adr r3, 8003040 <defThread+0x470>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd f9f4 	bl	8000280 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f7fd fb1e 	bl	80004e0 <__adddf3>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fd fcce 	bl	800084c <__aeabi_d2uiz>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	b298      	uxth	r0, r3
 8002eb4:	4b6d      	ldr	r3, [pc, #436]	; (800306c <defThread+0x49c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a71      	ldr	r2, [pc, #452]	; (8003080 <defThread+0x4b0>)
 8002eba:	8812      	ldrh	r2, [r2, #0]
 8002ebc:	43d2      	mvns	r2, r2
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	496f      	ldr	r1, [pc, #444]	; (8003080 <defThread+0x4b0>)
 8002ec2:	8809      	ldrh	r1, [r1, #0]
 8002ec4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ec8:	9102      	str	r1, [sp, #8]
 8002eca:	9201      	str	r2, [sp, #4]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	9200      	str	r2, [sp, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f001 fa12 	bl	8004300 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f000 ffc9 	bl	8003e74 <ipsOn>


	bool loop = true;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
	bool led = false;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
	uint32_t tmr = get_tmr(1);
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7ff f966 	bl	80021c0 <get_tmr>
 8002ef4:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480

	s_qcmd qcmd = {0};
 8002ef8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002efc:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002f00:	2200      	movs	r2, #0
 8002f02:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8002f04:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002f08:	f2a3 4375 	subw	r3, r3, #1141	; 0x475
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

  /* Infinite loop */

	while (loop) {
 8002f16:	f000 be1d 	b.w	8003b54 <defThread+0xf84>

		if (check_tmr(tmr)) {
 8002f1a:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8002f1e:	f7ff f95c 	bl	80021da <check_tmr>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80bd 	beq.w	80030a4 <defThread+0x4d4>
			tmr = get_tmr(1);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f7ff f948 	bl	80021c0 <get_tmr>
 8002f30:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480
			//
			sec2str(screen);
 8002f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f9bf 	bl	80022bc <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002f3e:	4b49      	ldr	r3, [pc, #292]	; (8003064 <defThread+0x494>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	23f0      	movs	r3, #240	; 0xf0
 8002f48:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 fa29 	bl	80043ac <mkLineCenter>
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4b41      	ldr	r3, [pc, #260]	; (8003064 <defThread+0x494>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f64:	9202      	str	r2, [sp, #8]
 8002f66:	221f      	movs	r2, #31
 8002f68:	9201      	str	r2, [sp, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	9200      	str	r2, [sp, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	460a      	mov	r2, r1
 8002f72:	2100      	movs	r1, #0
 8002f74:	2008      	movs	r0, #8
 8002f76:	f001 f9c3 	bl	8004300 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 8002f7a:	4b42      	ldr	r3, [pc, #264]	; (8003084 <defThread+0x4b4>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f84:	4940      	ldr	r1, [pc, #256]	; (8003088 <defThread+0x4b8>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f009 fee6 	bl	800cd58 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <defThread+0x4b4>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <defThread+0x3ce>
 8002f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f98:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
 8002f9c:	e002      	b.n	8002fa4 <defThread+0x3d4>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <defThread+0x494>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002fb0:	b29c      	uxth	r4, r3
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <defThread+0x494>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	23f0      	movs	r3, #240	; 0xf0
 8002fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 f9ef 	bl	80043ac <mkLineCenter>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <defThread+0x494>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd8:	9202      	str	r2, [sp, #8]
 8002fda:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	; 0x486
 8002fde:	9201      	str	r2, [sp, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	9200      	str	r2, [sp, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	4621      	mov	r1, r4
 8002fea:	2000      	movs	r0, #0
 8002fec:	f001 f988 	bl	8004300 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <defThread+0x4bc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d019      	beq.n	800302c <defThread+0x45c>
				if (qs != qStat) {
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <defThread+0x4bc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8003000:	429a      	cmp	r2, r3
 8003002:	d013      	beq.n	800302c <defThread+0x45c>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <defThread+0x488>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <defThread+0x454>
 800300c:	4b1f      	ldr	r3, [pc, #124]	; (800308c <defThread+0x4bc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe ff3d 	bl	8001e90 <get_qStat>
 8003016:	4602      	mov	r2, r0
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <defThread+0x48c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	491c      	ldr	r1, [pc, #112]	; (8003090 <defThread+0x4c0>)
 800301e:	2001      	movs	r0, #1
 8003020:	f7ff f9e6 	bl	80023f0 <Report>
					qs = qStat;
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <defThread+0x4bc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
				}
			}

			if (devError) led = true; else led = false;
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <defThread+0x4b4>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d02f      	beq.n	8003094 <defThread+0x4c4>
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
 800303a:	e02e      	b.n	800309a <defThread+0x4ca>
 800303c:	f3af 8000 	nop.w
 8003040:	33333333 	.word	0x33333333
 8003044:	3feb3333 	.word	0x3feb3333
 8003048:	2000008d 	.word	0x2000008d
 800304c:	20000094 	.word	0x20000094
 8003050:	0800da74 	.word	0x0800da74
 8003054:	200013bc 	.word	0x200013bc
 8003058:	20000070 	.word	0x20000070
 800305c:	20000004 	.word	0x20000004
 8003060:	0800da94 	.word	0x0800da94
 8003064:	20000084 	.word	0x20000084
 8003068:	0800da9c 	.word	0x0800da9c
 800306c:	20000088 	.word	0x20000088
 8003070:	20001398 	.word	0x20001398
 8003074:	0800daa8 	.word	0x0800daa8
 8003078:	2000138c 	.word	0x2000138c
 800307c:	0800db04 	.word	0x0800db04
 8003080:	2000136e 	.word	0x2000136e
 8003084:	20000354 	.word	0x20000354
 8003088:	0800db14 	.word	0x0800db14
 800308c:	200013b8 	.word	0x200013b8
 8003090:	0800db24 	.word	0x0800db24
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
			errLedOn(led);
 800309a:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f838 	bl	8002114 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 80030a4:	4bb1      	ldr	r3, [pc, #708]	; (800336c <defThread+0x79c>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80030ac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80030b0:	2305      	movs	r3, #5
 80030b2:	f006 fd41 	bl	8009b38 <osMessageQueueGet>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4aad      	ldr	r2, [pc, #692]	; (8003370 <defThread+0x7a0>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4bac      	ldr	r3, [pc, #688]	; (8003370 <defThread+0x7a0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d029      	beq.n	8003118 <defThread+0x548>
			if (qs != qStat) qs = qStat;
 80030c4:	4baa      	ldr	r3, [pc, #680]	; (8003370 <defThread+0x7a0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d003      	beq.n	80030d8 <defThread+0x508>
 80030d0:	4ba7      	ldr	r3, [pc, #668]	; (8003370 <defThread+0x7a0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
			if (qStat != osErrorTimeout) {
 80030d8:	4ba5      	ldr	r3, [pc, #660]	; (8003370 <defThread+0x7a0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f113 0f02 	cmn.w	r3, #2
 80030e0:	f000 84e2 	beq.w	8003aa8 <defThread+0xed8>
				devError |= devQUE;
 80030e4:	4ba3      	ldr	r3, [pc, #652]	; (8003374 <defThread+0x7a4>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4ba1      	ldr	r3, [pc, #644]	; (8003374 <defThread+0x7a4>)
 80030f0:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80030f2:	4ba1      	ldr	r3, [pc, #644]	; (8003378 <defThread+0x7a8>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 84d6 	beq.w	8003aa8 <defThread+0xed8>
 80030fc:	4b9c      	ldr	r3, [pc, #624]	; (8003370 <defThread+0x7a0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe fec5 	bl	8001e90 <get_qStat>
 8003106:	4602      	mov	r2, r0
 8003108:	4b9c      	ldr	r3, [pc, #624]	; (800337c <defThread+0x7ac>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	499c      	ldr	r1, [pc, #624]	; (8003380 <defThread+0x7b0>)
 800310e:	2001      	movs	r0, #1
 8003110:	f7ff f96e 	bl	80023f0 <Report>
 8003114:	f000 bcc8 	b.w	8003aa8 <defThread+0xed8>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8003118:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800311c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4b97      	ldr	r3, [pc, #604]	; (8003384 <defThread+0x7b4>)
 8003126:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800312a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800312e:	4996      	ldr	r1, [pc, #600]	; (8003388 <defThread+0x7b8>)
 8003130:	4618      	mov	r0, r3
 8003132:	f009 fe11 	bl	800cd58 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003136:	4b95      	ldr	r3, [pc, #596]	; (800338c <defThread+0x7bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	b29b      	uxth	r3, r3
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003146:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 8003148:	4b90      	ldr	r3, [pc, #576]	; (800338c <defThread+0x7bc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	23f0      	movs	r3, #240	; 0xf0
 8003152:	fb93 f3f2 	sdiv	r3, r3, r2
 8003156:	b29a      	uxth	r2, r3
 8003158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f924 	bl	80043ac <mkLineCenter>
 8003164:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <defThread+0x7bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	9202      	str	r2, [sp, #8]
 800316e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003172:	9201      	str	r2, [sp, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	9200      	str	r2, [sp, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	460a      	mov	r2, r1
 800317c:	4621      	mov	r1, r4
 800317e:	2000      	movs	r0, #0
 8003180:	f001 f8be 	bl	8004300 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 8003184:	4b7c      	ldr	r3, [pc, #496]	; (8003378 <defThread+0x7a8>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d91e      	bls.n	80031ca <defThread+0x5fa>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 800318c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003190:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800319c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80031a8:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b74      	ldr	r3, [pc, #464]	; (8003384 <defThread+0x7b4>)
 80031b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b6:	4a71      	ldr	r2, [pc, #452]	; (800337c <defThread+0x7ac>)
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	9201      	str	r2, [sp, #4]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4603      	mov	r3, r0
 80031c0:	460a      	mov	r2, r1
 80031c2:	4973      	ldr	r1, [pc, #460]	; (8003390 <defThread+0x7c0>)
 80031c4:	2001      	movs	r0, #1
 80031c6:	f7ff f913 	bl	80023f0 <Report>
			//
			nand_show = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
			switch (qcmd.cmd) {
 80031d0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80031d4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b0b      	cmp	r3, #11
 80031dc:	f200 8451 	bhi.w	8003a82 <defThread+0xeb2>
 80031e0:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <defThread+0x618>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800326f 	.word	0x0800326f
 80031ec:	08003331 	.word	0x08003331
 80031f0:	0800343d 	.word	0x0800343d
 80031f4:	08003503 	.word	0x08003503
 80031f8:	080036b1 	.word	0x080036b1
 80031fc:	08003537 	.word	0x08003537
 8003200:	080035f9 	.word	0x080035f9
 8003204:	080036b1 	.word	0x080036b1
 8003208:	08003899 	.word	0x08003899
 800320c:	080033cd 	.word	0x080033cd
 8003210:	08003279 	.word	0x08003279
 8003214:	08003219 	.word	0x08003219
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003218:	4b58      	ldr	r3, [pc, #352]	; (800337c <defThread+0x7ac>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	495d      	ldr	r1, [pc, #372]	; (8003394 <defThread+0x7c4>)
 8003220:	485d      	ldr	r0, [pc, #372]	; (8003398 <defThread+0x7c8>)
 8003222:	f009 fd99 	bl	800cd58 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003226:	2300      	movs	r3, #0
 8003228:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 800322c:	e014      	b.n	8003258 <defThread+0x688>
 800322e:	485a      	ldr	r0, [pc, #360]	; (8003398 <defThread+0x7c8>)
 8003230:	f7fc ffce 	bl	80001d0 <strlen>
 8003234:	4603      	mov	r3, r0
 8003236:	4a58      	ldr	r2, [pc, #352]	; (8003398 <defThread+0x7c8>)
 8003238:	1898      	adds	r0, r3, r2
 800323a:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 800323e:	4a57      	ldr	r2, [pc, #348]	; (800339c <defThread+0x7cc>)
 8003240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003244:	4b4d      	ldr	r3, [pc, #308]	; (800337c <defThread+0x7ac>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4955      	ldr	r1, [pc, #340]	; (80033a0 <defThread+0x7d0>)
 800324a:	f009 fd85 	bl	800cd58 <siprintf>
 800324e:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 8003252:	3301      	adds	r3, #1
 8003254:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 8003258:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 800325c:	2b0b      	cmp	r3, #11
 800325e:	d9e6      	bls.n	800322e <defThread+0x65e>
					Report(1, "%s", stx);
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <defThread+0x7c8>)
 8003262:	4950      	ldr	r1, [pc, #320]	; (80033a4 <defThread+0x7d4>)
 8003264:	2001      	movs	r0, #1
 8003266:	f7ff f8c3 	bl	80023f0 <Report>
				break;
 800326a:	f000 bc0a 	b.w	8003a82 <defThread+0xeb2>
				case cmdRestart:
					loop = false;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
		  		break;
 8003274:	f000 bc05 	b.w	8003a82 <defThread+0xeb2>
				case cmdInfo:
					if (dbg != logOff) {
 8003278:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <defThread+0x7a8>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 83ed 	beq.w	8003a5c <defThread+0xe8c>
						strcpy(stx, "NAND:");
 8003282:	4b45      	ldr	r3, [pc, #276]	; (8003398 <defThread+0x7c8>)
 8003284:	4a48      	ldr	r2, [pc, #288]	; (80033a8 <defThread+0x7d8>)
 8003286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800328a:	6018      	str	r0, [r3, #0]
 800328c:	3304      	adds	r3, #4
 800328e:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8003290:	2300      	movs	r3, #0
 8003292:	f887 347a 	strb.w	r3, [r7, #1146]	; 0x47a
 8003296:	e016      	b.n	80032c6 <defThread+0x6f6>
 8003298:	483f      	ldr	r0, [pc, #252]	; (8003398 <defThread+0x7c8>)
 800329a:	f7fc ff99 	bl	80001d0 <strlen>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a3d      	ldr	r2, [pc, #244]	; (8003398 <defThread+0x7c8>)
 80032a2:	1898      	adds	r0, r3, r2
 80032a4:	f997 347a 	ldrsb.w	r3, [r7, #1146]	; 0x47a
 80032a8:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	493e      	ldr	r1, [pc, #248]	; (80033ac <defThread+0x7dc>)
 80032b4:	f009 fd50 	bl	800cd58 <siprintf>
 80032b8:	f997 347a 	ldrsb.w	r3, [r7, #1146]	; 0x47a
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f887 347a 	strb.w	r3, [r7, #1146]	; 0x47a
 80032c6:	f897 347a 	ldrb.w	r3, [r7, #1146]	; 0x47a
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d9e4      	bls.n	8003298 <defThread+0x6c8>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 80032ce:	4832      	ldr	r0, [pc, #200]	; (8003398 <defThread+0x7c8>)
 80032d0:	f7fc ff7e 	bl	80001d0 <strlen>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4a30      	ldr	r2, [pc, #192]	; (8003398 <defThread+0x7c8>)
 80032d8:	1898      	adds	r0, r3, r2
 80032da:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <defThread+0x7e0>)
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	461a      	mov	r2, r3
 80032e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80032e4:	4933      	ldr	r1, [pc, #204]	; (80033b4 <defThread+0x7e4>)
 80032e6:	f009 fd37 	bl	800cd58 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 80032ea:	482b      	ldr	r0, [pc, #172]	; (8003398 <defThread+0x7c8>)
 80032ec:	f7fc ff70 	bl	80001d0 <strlen>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <defThread+0x7c8>)
 80032f4:	1898      	adds	r0, r3, r2
 80032f6:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <defThread+0x7e8>)
 80032f8:	681c      	ldr	r4, [r3, #0]
 80032fa:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <defThread+0x7e8>)
 80032fc:	685d      	ldr	r5, [r3, #4]
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <defThread+0x7e8>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <defThread+0x7e8>)
 8003304:	6912      	ldr	r2, [r2, #16]
 8003306:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800330a:	9103      	str	r1, [sp, #12]
 800330c:	9202      	str	r2, [sp, #8]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	462b      	mov	r3, r5
 8003318:	4622      	mov	r2, r4
 800331a:	4928      	ldr	r1, [pc, #160]	; (80033bc <defThread+0x7ec>)
 800331c:	f009 fd1c 	bl	800cd58 <siprintf>
											chipConf.SpareAreaSize,
											BlockSizeKB,
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB);
						Report(1, "%s%s", stx, eol);
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <defThread+0x7ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <defThread+0x7c8>)
 8003326:	4926      	ldr	r1, [pc, #152]	; (80033c0 <defThread+0x7f0>)
 8003328:	2001      	movs	r0, #1
 800332a:	f7ff f861 	bl	80023f0 <Report>
					}
				break;
 800332e:	e395      	b.n	8003a5c <defThread+0xe8c>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003330:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003334:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <defThread+0x77a>
						set_Date(epoch);
 800333e:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <defThread+0x7f4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe ff5a 	bl	80021fc <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003348:	e38a      	b.n	8003a60 <defThread+0xe90>
						sec2str(stx);
 800334a:	4813      	ldr	r0, [pc, #76]	; (8003398 <defThread+0x7c8>)
 800334c:	f7fe ffb6 	bl	80022bc <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <defThread+0x7a8>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8383 	beq.w	8003a60 <defThread+0xe90>
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <defThread+0x7ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <defThread+0x7c8>)
 8003360:	4919      	ldr	r1, [pc, #100]	; (80033c8 <defThread+0x7f8>)
 8003362:	2000      	movs	r0, #0
 8003364:	f7ff f844 	bl	80023f0 <Report>
				break;
 8003368:	e37a      	b.n	8003a60 <defThread+0xe90>
 800336a:	bf00      	nop
 800336c:	2000034c 	.word	0x2000034c
 8003370:	200013b8 	.word	0x200013b8
 8003374:	20000354 	.word	0x20000354
 8003378:	20000070 	.word	0x20000070
 800337c:	20000004 	.word	0x20000004
 8003380:	0800db24 	.word	0x0800db24
 8003384:	20000038 	.word	0x20000038
 8003388:	0800db30 	.word	0x0800db30
 800338c:	20000084 	.word	0x20000084
 8003390:	0800db38 	.word	0x0800db38
 8003394:	0800db50 	.word	0x0800db50
 8003398:	200013bc 	.word	0x200013bc
 800339c:	20000008 	.word	0x20000008
 80033a0:	0800db6c 	.word	0x0800db6c
 80033a4:	0800d990 	.word	0x0800d990
 80033a8:	0800d9f0 	.word	0x0800d9f0
 80033ac:	0800d988 	.word	0x0800d988
 80033b0:	20001390 	.word	0x20001390
 80033b4:	0800d9f8 	.word	0x0800d9f8
 80033b8:	20001398 	.word	0x20001398
 80033bc:	0800da10 	.word	0x0800da10
 80033c0:	0800da94 	.word	0x0800da94
 80033c4:	2000006c 	.word	0x2000006c
 80033c8:	0800db74 	.word	0x0800db74
				case cmdLog:
					if (qcmd.attr < logNone) {
 80033cc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033d0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d81e      	bhi.n	8003418 <defThread+0x848>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 80033da:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033de:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fda3 	bl	8001f30 <get_logName>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033f0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <defThread+0xa90>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	460b      	mov	r3, r1
 8003400:	4998      	ldr	r1, [pc, #608]	; (8003664 <defThread+0xa94>)
 8003402:	2001      	movs	r0, #1
 8003404:	f7fe fff4 	bl	80023f0 <Report>
						dbg = qcmd.attr;
 8003408:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800340c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003410:	785a      	ldrb	r2, [r3, #1]
 8003412:	4b95      	ldr	r3, [pc, #596]	; (8003668 <defThread+0xa98>)
 8003414:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003416:	e334      	b.n	8003a82 <defThread+0xeb2>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003418:	4b93      	ldr	r3, [pc, #588]	; (8003668 <defThread+0xa98>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fd87 	bl	8001f30 <get_logName>
 8003422:	4602      	mov	r2, r0
 8003424:	4b90      	ldr	r3, [pc, #576]	; (8003668 <defThread+0xa98>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <defThread+0xa90>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	460b      	mov	r3, r1
 8003432:	498e      	ldr	r1, [pc, #568]	; (800366c <defThread+0xa9c>)
 8003434:	2001      	movs	r0, #1
 8003436:	f7fe ffdb 	bl	80023f0 <Report>
				break;
 800343a:	e322      	b.n	8003a82 <defThread+0xeb2>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 800343c:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <defThread+0xaa0>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b8c      	ldr	r3, [pc, #560]	; (8003674 <defThread+0xaa4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1ad2      	subs	r2, r2, r3
 8003446:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <defThread+0xaa8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					NAND_AddressTypeDef addr = {
 8003452:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003456:	b29a      	uxth	r2, r3
 8003458:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800345c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003466:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800346a:	2201      	movs	r2, #1
 800346c:	805a      	strh	r2, [r3, #2]
						.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 800346e:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8003472:	f7fd ffbb 	bl	80013ec <nand_PageToBlock>
 8003476:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8003478:	b29a      	uxth	r2, r3
 800347a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800347e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003482:	809a      	strh	r2, [r3, #4]
					};
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003484:	4b78      	ldr	r3, [pc, #480]	; (8003668 <defThread+0xa98>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01a      	beq.n	80034c2 <defThread+0x8f2>
 800348c:	4b78      	ldr	r3, [pc, #480]	; (8003670 <defThread+0xaa0>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b7a      	ldr	r3, [pc, #488]	; (800367c <defThread+0xaac>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	461c      	mov	r4, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003496:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800349a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800349e:	881b      	ldrh	r3, [r3, #0]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 80034a0:	4619      	mov	r1, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 80034a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034a6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80034aa:	889b      	ldrh	r3, [r3, #4]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 80034ac:	4618      	mov	r0, r3
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <defThread+0xa90>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	9001      	str	r0, [sp, #4]
 80034b6:	9100      	str	r1, [sp, #0]
 80034b8:	4623      	mov	r3, r4
 80034ba:	4971      	ldr	r1, [pc, #452]	; (8003680 <defThread+0xab0>)
 80034bc:	2001      	movs	r0, #1
 80034be:	f7fe ff97 	bl	80023f0 <Report>
					if (rdBuf) {
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <defThread+0xab4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 82cc 	beq.w	8003a64 <defThread+0xe94>
						if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 80034cc:	4b6e      	ldr	r3, [pc, #440]	; (8003688 <defThread+0xab8>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <defThread+0xab4>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	f107 011c 	add.w	r1, r7, #28
 80034d8:	2301      	movs	r3, #1
 80034da:	f7fe f823 	bl	8001524 <NAND_Read_Page_8b>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <defThread+0x922>
							nand_show = 1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
							readed = true;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
						} else devError |= devNAND;
					}
				}
				break;
 80034f0:	e2b8      	b.n	8003a64 <defThread+0xe94>
						} else devError |= devNAND;
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <defThread+0xabc>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b63      	ldr	r3, [pc, #396]	; (800368c <defThread+0xabc>)
 80034fe:	801a      	strh	r2, [r3, #0]
				break;
 8003500:	e2b0      	b.n	8003a64 <defThread+0xe94>
				case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 8003502:	4b59      	ldr	r3, [pc, #356]	; (8003668 <defThread+0xa98>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <defThread+0x954>
 800350a:	4b59      	ldr	r3, [pc, #356]	; (8003670 <defThread+0xaa0>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <defThread+0xaac>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <defThread+0xa90>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	460b      	mov	r3, r1
 800351c:	495c      	ldr	r1, [pc, #368]	; (8003690 <defThread+0xac0>)
 800351e:	2001      	movs	r0, #1
 8003520:	f7fe ff66 	bl	80023f0 <Report>
					if (rdBuf) nand_show = 2;
 8003524:	4b57      	ldr	r3, [pc, #348]	; (8003684 <defThread+0xab4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 829d 	beq.w	8003a68 <defThread+0xe98>
 800352e:	2302      	movs	r3, #2
 8003530:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
				break;
 8003534:	e298      	b.n	8003a68 <defThread+0xe98>
				case cmdErase:
					clr.Page = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
					clr.Block = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
					clr.Plane = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
					if (!qcmd.attr) {
 8003548:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800354c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d13d      	bne.n	80035d2 <defThread+0xa02>
						clr.Page = nand_BlockToPage(nandBlk);
 8003556:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <defThread+0xac4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd ff5c 	bl	8001418 <nand_BlockToPage>
 8003560:	4603      	mov	r3, r0
 8003562:	b29b      	uxth	r3, r3
 8003564:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
						clr.Block = nandBlk;
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <defThread+0xac4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
						if (NAND_Erase_Block(nandPort, &clr, 1) != HAL_OK) {
 8003572:	4b45      	ldr	r3, [pc, #276]	; (8003688 <defThread+0xab8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 800357a:	2201      	movs	r2, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe f9cd 	bl	800191c <NAND_Erase_Block>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <defThread+0x9e4>
							devError |= devNAND;
 8003588:	4b40      	ldr	r3, [pc, #256]	; (800368c <defThread+0xabc>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	f043 0320 	orr.w	r3, r3, #32
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b3e      	ldr	r3, [pc, #248]	; (800368c <defThread+0xabc>)
 8003594:	801a      	strh	r2, [r3, #0]
							if (dbg != logOff) Report(1, "Erase nand block:%lu Error !%s", clr.Block, eol);
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <defThread+0xa98>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8266 	beq.w	8003a6c <defThread+0xe9c>
 80035a0:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	; 0x44c
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <defThread+0xa90>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	493b      	ldr	r1, [pc, #236]	; (8003698 <defThread+0xac8>)
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fe ff1f 	bl	80023f0 <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 80035b2:	e25b      	b.n	8003a6c <defThread+0xe9c>
							if (dbg != logOff) Report(1, "Erase nand block:%lu Ok !%s", clr.Block, eol);
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <defThread+0xa98>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8257 	beq.w	8003a6c <defThread+0xe9c>
 80035be:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	; 0x44c
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b26      	ldr	r3, [pc, #152]	; (8003660 <defThread+0xa90>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4934      	ldr	r1, [pc, #208]	; (800369c <defThread+0xacc>)
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fe ff10 	bl	80023f0 <Report>
				break;
 80035d0:	e24c      	b.n	8003a6c <defThread+0xe9c>
						iBlk = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
						next_block_erase = 1;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
						if (dbg != logOff) Report(1, "Erase chip ");
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <defThread+0xa98>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <defThread+0xa1e>
 80035e6:	492e      	ldr	r1, [pc, #184]	; (80036a0 <defThread+0xad0>)
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7fe ff01 	bl	80023f0 <Report>
						stik = HAL_GetTick();
 80035ee:	f001 fa93 	bl	8004b18 <HAL_GetTick>
 80035f2:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
				break;
 80035f6:	e239      	b.n	8003a6c <defThread+0xe9c>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <defThread+0xad4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fef5 	bl	80013ec <nand_PageToBlock>
 8003602:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
					if (!pageIsEmpty(nandPage)) {
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <defThread+0xad4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fa12 	bl	8001a34 <pageIsEmpty>
 8003610:	4603      	mov	r3, r0
 8003612:	f083 0301 	eor.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <defThread+0xa6e>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <defThread+0xa98>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8225 	beq.w	8003a70 <defThread+0xea0>
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <defThread+0xad4>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <defThread+0xa90>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003634:	491c      	ldr	r1, [pc, #112]	; (80036a8 <defThread+0xad8>)
 8003636:	2001      	movs	r0, #1
 8003638:	f7fe feda 	bl	80023f0 <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 800363c:	e218      	b.n	8003a70 <defThread+0xea0>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <defThread+0xa98>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8214 	beq.w	8003a70 <defThread+0xea0>
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <defThread+0xad4>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <defThread+0xa90>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003656:	4915      	ldr	r1, [pc, #84]	; (80036ac <defThread+0xadc>)
 8003658:	2001      	movs	r0, #1
 800365a:	f7fe fec9 	bl	80023f0 <Report>
				break;
 800365e:	e207      	b.n	8003a70 <defThread+0xea0>
 8003660:	20000004 	.word	0x20000004
 8003664:	0800db90 	.word	0x0800db90
 8003668:	20000070 	.word	0x20000070
 800366c:	0800dbac 	.word	0x0800dbac
 8003670:	2000137c 	.word	0x2000137c
 8003674:	20001378 	.word	0x20001378
 8003678:	20001398 	.word	0x20001398
 800367c:	20001380 	.word	0x20001380
 8003680:	0800dbcc 	.word	0x0800dbcc
 8003684:	200013b0 	.word	0x200013b0
 8003688:	20000080 	.word	0x20000080
 800368c:	20000354 	.word	0x20000354
 8003690:	0800dbfc 	.word	0x0800dbfc
 8003694:	20001384 	.word	0x20001384
 8003698:	0800dc20 	.word	0x0800dc20
 800369c:	0800dc40 	.word	0x0800dc40
 80036a0:	0800dc5c 	.word	0x0800dc5c
 80036a4:	20001388 	.word	0x20001388
 80036a8:	0800dc68 	.word	0x0800dc68
 80036ac:	0800dc8c 	.word	0x0800dc8c
				case cmdWrite:
				case cmdArea:
					if (wrBuf) {
 80036b0:	4ba5      	ldr	r3, [pc, #660]	; (8003948 <defThread+0xd78>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 81dd 	beq.w	8003a74 <defThread+0xea4>
						//
						if (qcmd.cmd == cmdArea) {
 80036ba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80036be:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	d127      	bne.n	8003718 <defThread+0xb48>
							if (!areaIsEmpty(nandAdr, nandLen)) {
 80036c8:	4ba0      	ldr	r3, [pc, #640]	; (800394c <defThread+0xd7c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4aa0      	ldr	r2, [pc, #640]	; (8003950 <defThread+0xd80>)
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fa94 	bl	8001c00 <areaIsEmpty>
 80036d8:	4603      	mov	r3, r0
 80036da:	f083 0301 	eor.w	r3, r3, #1
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <defThread+0xb2e>
								if (dbg != logOff) Report(1, "Area Not empty%s", eol);
 80036e4:	4b9b      	ldr	r3, [pc, #620]	; (8003954 <defThread+0xd84>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 81c5 	beq.w	8003a78 <defThread+0xea8>
 80036ee:	4b9a      	ldr	r3, [pc, #616]	; (8003958 <defThread+0xd88>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	4999      	ldr	r1, [pc, #612]	; (800395c <defThread+0xd8c>)
 80036f6:	2001      	movs	r0, #1
 80036f8:	f7fe fe7a 	bl	80023f0 <Report>
							} else {
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
							}
							break;
 80036fc:	e1bc      	b.n	8003a78 <defThread+0xea8>
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
 80036fe:	4b95      	ldr	r3, [pc, #596]	; (8003954 <defThread+0xd84>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 81b8 	beq.w	8003a78 <defThread+0xea8>
 8003708:	4b93      	ldr	r3, [pc, #588]	; (8003958 <defThread+0xd88>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	4994      	ldr	r1, [pc, #592]	; (8003960 <defThread+0xd90>)
 8003710:	2001      	movs	r0, #1
 8003712:	f7fe fe6d 	bl	80023f0 <Report>
 8003716:	e1b4      	b.n	8003a82 <defThread+0xeb2>
						}
						//
						uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8003718:	4b8c      	ldr	r3, [pc, #560]	; (800394c <defThread+0xd7c>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b91      	ldr	r3, [pc, #580]	; (8003964 <defThread+0xd94>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	4b91      	ldr	r3, [pc, #580]	; (8003968 <defThread+0xd98>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
						uint32_t b = nand_PageToBlock(p);
 800372e:	f8d7 045c 	ldr.w	r0, [r7, #1116]	; 0x45c
 8003732:	f7fd fe5b 	bl	80013ec <nand_PageToBlock>
 8003736:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
						NAND_AddressTypeDef addr = {
 800373a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800373e:	b29a      	uxth	r2, r3
 8003740:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003744:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800374e:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003752:	2201      	movs	r2, #1
 8003754:	805a      	strh	r2, [r3, #2]
 8003756:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800375a:	b29a      	uxth	r2, r3
 800375c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003760:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003764:	809a      	strh	r2, [r3, #4]
							.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
							.Plane = 1,
							.Block = b
						};
						if (!pageIsEmpty(p)) {//nandPage)) {
 8003766:	f8d7 045c 	ldr.w	r0, [r7, #1116]	; 0x45c
 800376a:	f7fe f963 	bl	8001a34 <pageIsEmpty>
 800376e:	4603      	mov	r3, r0
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01c      	beq.n	80037b4 <defThread+0xbe4>
							if (NAND_Erase_Block(nandPort, &addr, 1) != HAL_OK) devError |= devNAND;
 800377a:	4b7c      	ldr	r3, [pc, #496]	; (800396c <defThread+0xd9c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f107 0114 	add.w	r1, r7, #20
 8003782:	2201      	movs	r2, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe f8c9 	bl	800191c <NAND_Erase_Block>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <defThread+0xbce>
 8003790:	4b77      	ldr	r3, [pc, #476]	; (8003970 <defThread+0xda0>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b75      	ldr	r3, [pc, #468]	; (8003970 <defThread+0xda0>)
 800379c:	801a      	strh	r2, [r3, #0]
							sprintf(stx, "Erase nand block:%u done", addr.Block);
 800379e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80037a2:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80037a6:	889b      	ldrh	r3, [r3, #4]
 80037a8:	461a      	mov	r2, r3
 80037aa:	4972      	ldr	r1, [pc, #456]	; (8003974 <defThread+0xda4>)
 80037ac:	4872      	ldr	r0, [pc, #456]	; (8003978 <defThread+0xda8>)
 80037ae:	f009 fad3 	bl	800cd58 <siprintf>
 80037b2:	e009      	b.n	80037c8 <defThread+0xbf8>
						} else {
							sprintf(stx, "Block:%u is Empty", addr.Block);
 80037b4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80037b8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80037bc:	889b      	ldrh	r3, [r3, #4]
 80037be:	461a      	mov	r2, r3
 80037c0:	496e      	ldr	r1, [pc, #440]	; (800397c <defThread+0xdac>)
 80037c2:	486d      	ldr	r0, [pc, #436]	; (8003978 <defThread+0xda8>)
 80037c4:	f009 fac8 	bl	800cd58 <siprintf>
						}
						if (dbg != logOff) Report(1, "%s%s", stx, eol);
 80037c8:	4b62      	ldr	r3, [pc, #392]	; (8003954 <defThread+0xd84>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <defThread+0xc0e>
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <defThread+0xd88>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a68      	ldr	r2, [pc, #416]	; (8003978 <defThread+0xda8>)
 80037d6:	496a      	ldr	r1, [pc, #424]	; (8003980 <defThread+0xdb0>)
 80037d8:	2001      	movs	r0, #1
 80037da:	f7fe fe09 	bl	80023f0 <Report>
						memset(wrBuf, 0xff, chipConf.PageSize);
 80037de:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <defThread+0xd78>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a61      	ldr	r2, [pc, #388]	; (8003968 <defThread+0xd98>)
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	21ff      	movs	r1, #255	; 0xff
 80037e8:	4618      	mov	r0, r3
 80037ea:	f009 f93d 	bl	800ca68 <memset>
						uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <defThread+0xd7c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <defThread+0xd94>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <defThread+0xd98>)
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003800:	fb01 f202 	mul.w	r2, r1, r2
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
						memset(wrBuf + ofs, nandByte, nandLen);
 800380a:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <defThread+0xd78>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003812:	4413      	add	r3, r2
 8003814:	4a5b      	ldr	r2, [pc, #364]	; (8003984 <defThread+0xdb4>)
 8003816:	7812      	ldrb	r2, [r2, #0]
 8003818:	4611      	mov	r1, r2
 800381a:	4a4d      	ldr	r2, [pc, #308]	; (8003950 <defThread+0xd80>)
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f009 f922 	bl	800ca68 <memset>
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8003824:	4b51      	ldr	r3, [pc, #324]	; (800396c <defThread+0xd9c>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	4b47      	ldr	r3, [pc, #284]	; (8003948 <defThread+0xd78>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f107 0114 	add.w	r1, r7, #20
 8003830:	2301      	movs	r3, #1
 8003832:	f7fd ff77 	bl	8001724 <NAND_Write_Page_8b>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <defThread+0xc7a>
 800383c:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <defThread+0xda0>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	f043 0320 	orr.w	r3, r3, #32
 8003844:	b29a      	uxth	r2, r3
 8003846:	4b4a      	ldr	r3, [pc, #296]	; (8003970 <defThread+0xda0>)
 8003848:	801a      	strh	r2, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <defThread+0xd84>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8110 	beq.w	8003a74 <defThread+0xea4>
 8003854:	4b3d      	ldr	r3, [pc, #244]	; (800394c <defThread+0xd7c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b4a      	ldr	r3, [pc, #296]	; (8003984 <defThread+0xdb4>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <defThread+0xd80>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8003864:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003868:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 800386c:	881b      	ldrh	r3, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 800386e:	461c      	mov	r4, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8003870:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003874:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003878:	889b      	ldrh	r3, [r3, #4]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 800387a:	461d      	mov	r5, r3
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <defThread+0xd88>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	9304      	str	r3, [sp, #16]
 8003882:	9503      	str	r5, [sp, #12]
 8003884:	9402      	str	r4, [sp, #8]
 8003886:	9001      	str	r0, [sp, #4]
 8003888:	9100      	str	r1, [sp, #0]
 800388a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800388e:	493e      	ldr	r1, [pc, #248]	; (8003988 <defThread+0xdb8>)
 8003890:	2001      	movs	r0, #1
 8003892:	f7fe fdad 	bl	80023f0 <Report>
					}
				break;
 8003896:	e0ed      	b.n	8003a74 <defThread+0xea4>
				case cmdSave:
					if (wrBuf) {
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <defThread+0xd78>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80ed 	beq.w	8003a7c <defThread+0xeac>
						uint32_t page = (nandAdr - devAdr) / chipConf.PageSize;
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <defThread+0xd7c>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <defThread+0xd94>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <defThread+0xd98>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
						NAND_AddressTypeDef nans = {
							.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <defThread+0xd98>)
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <defThread+0xd98>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80038c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80038cc:	fb01 f202 	mul.w	r2, r1, r2
 80038d0:	1a9b      	subs	r3, r3, r2
						NAND_AddressTypeDef nans = {
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038d8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80038dc:	801a      	strh	r2, [r3, #0]
 80038de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038e2:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80038e6:	2201      	movs	r2, #1
 80038e8:	805a      	strh	r2, [r3, #2]
							.Plane = 1,
							.Block = nand_PageToBlock(page)
 80038ea:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 80038ee:	f7fd fd7d 	bl	80013ec <nand_PageToBlock>
 80038f2:	4603      	mov	r3, r0
						NAND_AddressTypeDef nans = {
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038fa:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80038fe:	809a      	strh	r2, [r3, #4]
						};
						int shift = emptyArea(nandAdr, nandLen, wrBuf, &nans);
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <defThread+0xd7c>)
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <defThread+0xd80>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <defThread+0xd78>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f107 030c 	add.w	r3, r7, #12
 8003912:	f7fe f8e3 	bl	8001adc <emptyArea>
 8003916:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
						if (shift == -1) {
 800391a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003922:	d135      	bne.n	8003990 <defThread+0xdc0>
							if (dbg != logOff) if (dbg != logOff) Report(1, "Area Not empty. Process not alow%s", eol);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <defThread+0xd84>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a9 	beq.w	8003a80 <defThread+0xeb0>
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <defThread+0xd84>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80a4 	beq.w	8003a80 <defThread+0xeb0>
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <defThread+0xd88>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4913      	ldr	r1, [pc, #76]	; (800398c <defThread+0xdbc>)
 8003940:	2001      	movs	r0, #1
 8003942:	f7fe fd55 	bl	80023f0 <Report>
 8003946:	e09c      	b.n	8003a82 <defThread+0xeb2>
 8003948:	200013b4 	.word	0x200013b4
 800394c:	2000137c 	.word	0x2000137c
 8003950:	20001380 	.word	0x20001380
 8003954:	20000070 	.word	0x20000070
 8003958:	20000004 	.word	0x20000004
 800395c:	0800dcb0 	.word	0x0800dcb0
 8003960:	0800dcc4 	.word	0x0800dcc4
 8003964:	20001378 	.word	0x20001378
 8003968:	20001398 	.word	0x20001398
 800396c:	20000080 	.word	0x20000080
 8003970:	20000354 	.word	0x20000354
 8003974:	0800dcd4 	.word	0x0800dcd4
 8003978:	200013bc 	.word	0x200013bc
 800397c:	0800dcf0 	.word	0x0800dcf0
 8003980:	0800da94 	.word	0x0800da94
 8003984:	2000008c 	.word	0x2000008c
 8003988:	0800dd04 	.word	0x0800dd04
 800398c:	0800dd4c 	.word	0x0800dd4c
							break;
						} else {
							memset(wrBuf + shift, nandByte, nandLen);
 8003990:	4b89      	ldr	r3, [pc, #548]	; (8003bb8 <defThread+0xfe8>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003998:	4413      	add	r3, r2
 800399a:	4a88      	ldr	r2, [pc, #544]	; (8003bbc <defThread+0xfec>)
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	4611      	mov	r1, r2
 80039a0:	4a87      	ldr	r2, [pc, #540]	; (8003bc0 <defThread+0xff0>)
 80039a2:	8812      	ldrh	r2, [r2, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f009 f85f 	bl	800ca68 <memset>
							if (HAL_NAND_Write_Page_8b(nandPort, &nans, wrBuf, 1) != HAL_OK) devError |= devNAND;
 80039aa:	4b86      	ldr	r3, [pc, #536]	; (8003bc4 <defThread+0xff4>)
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <defThread+0xfe8>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f107 010c 	add.w	r1, r7, #12
 80039b6:	2301      	movs	r3, #1
 80039b8:	f002 f8bd 	bl	8005b36 <HAL_NAND_Write_Page_8b>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <defThread+0xe00>
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <defThread+0xff8>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	f043 0320 	orr.w	r3, r3, #32
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <defThread+0xff8>)
 80039ce:	801a      	strh	r2, [r3, #0]
							//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
							if (dbg != logOff)
 80039d0:	4b7e      	ldr	r3, [pc, #504]	; (8003bcc <defThread+0xffc>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d051      	beq.n	8003a7c <defThread+0xeac>
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
									  ARRAY_ADDRESS(&nans, nandPort),
 80039d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80039dc:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	4619      	mov	r1, r3
 80039e4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80039e8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80039ec:	889b      	ldrh	r3, [r3, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80039f4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80039f8:	885b      	ldrh	r3, [r3, #2]
 80039fa:	4618      	mov	r0, r3
 80039fc:	4b71      	ldr	r3, [pc, #452]	; (8003bc4 <defThread+0xff4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	fb00 f303 	mul.w	r3, r0, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <defThread+0xff4>)
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003a12:	18ca      	adds	r2, r1, r3
 8003a14:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <defThread+0x1000>)
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <defThread+0xfec>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <defThread+0xff0>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	461c      	mov	r4, r3
									  nandAdr,
									  shift,
									  nandByte,
									  nandLen,
									  nans.Page,
 8003a24:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a28:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8003a2c:	881b      	ldrh	r3, [r3, #0]
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003a2e:	461d      	mov	r5, r3
									  nans.Block,
 8003a30:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a34:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8003a38:	889b      	ldrh	r3, [r3, #4]
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003a3a:	461e      	mov	r6, r3
 8003a3c:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <defThread+0x1004>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	9305      	str	r3, [sp, #20]
 8003a42:	9604      	str	r6, [sp, #16]
 8003a44:	9503      	str	r5, [sp, #12]
 8003a46:	9402      	str	r4, [sp, #8]
 8003a48:	9001      	str	r0, [sp, #4]
 8003a4a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	460b      	mov	r3, r1
 8003a52:	4961      	ldr	r1, [pc, #388]	; (8003bd8 <defThread+0x1008>)
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7fe fccb 	bl	80023f0 <Report>
									  eol);
						}
					}
				break;
 8003a5a:	e00f      	b.n	8003a7c <defThread+0xeac>
				break;
 8003a5c:	bf00      	nop
 8003a5e:	e010      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a60:	bf00      	nop
 8003a62:	e00e      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a64:	bf00      	nop
 8003a66:	e00c      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a68:	bf00      	nop
 8003a6a:	e00a      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a6c:	bf00      	nop
 8003a6e:	e008      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a70:	bf00      	nop
 8003a72:	e006      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a74:	bf00      	nop
 8003a76:	e004      	b.n	8003a82 <defThread+0xeb2>
							break;
 8003a78:	bf00      	nop
 8003a7a:	e002      	b.n	8003a82 <defThread+0xeb2>
				break;
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <defThread+0xeb2>
							break;
 8003a80:	bf00      	nop
			}
			if (nand_show) {
 8003a82:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00e      	beq.n	8003aa8 <defThread+0xed8>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003a8a:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <defThread+0x1000>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <defThread+0xff0>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	461c      	mov	r4, r3
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <defThread+0x100c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f897 148a 	ldrb.w	r1, [r7, #1162]	; 0x48a
 8003a9c:	f897 048b 	ldrb.w	r0, [r7, #1163]	; 0x48b
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f7fe ffda 	bl	8002a5c <showBuf>
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 8003aa8:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d04e      	beq.n	8003b4e <defThread+0xf7e>
			clr.Block = iBlk;
 8003ab0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
			iBlk++;
 8003aba:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
			if (NAND_Erase_Block(nandPort, &clr, 0) != HAL_OK) {
 8003ac4:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <defThread+0xff4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8003acc:	2200      	movs	r2, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd ff24 	bl	800191c <NAND_Erase_Block>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <defThread+0xf20>
				devError |= devNAND;
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <defThread+0xff8>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f043 0320 	orr.w	r3, r3, #32
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <defThread+0xff8>)
 8003ae6:	801a      	strh	r2, [r3, #0]
				next_block_erase = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8003aee:	e012      	b.n	8003b16 <defThread+0xf46>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8003af0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <defThread+0xf34>
 8003afc:	4938      	ldr	r1, [pc, #224]	; (8003be0 <defThread+0x1010>)
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fe fc76 	bl	80023f0 <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8003b04:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <defThread+0x1014>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d302      	bcc.n	8003b16 <defThread+0xf46>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
			}
			if (!next_block_erase) {
 8003b16:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d117      	bne.n	8003b4e <defThread+0xf7e>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <defThread+0xffc>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d013      	beq.n	8003b4e <defThread+0xf7e>
 8003b26:	f000 fff7 	bl	8004b18 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <defThread+0x1018>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099a      	lsrs	r2, r3, #6
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <defThread+0x1004>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003b46:	4929      	ldr	r1, [pc, #164]	; (8003bec <defThread+0x101c>)
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f7fe fc51 	bl	80023f0 <Report>
			}
		}
		//
		osDelay(5);
 8003b4e:	2005      	movs	r0, #5
 8003b50:	f005 fe7a 	bl	8009848 <osDelay>
	while (loop) {
 8003b54:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f a9de 	bne.w	8002f1a <defThread+0x34a>
	}

	if (wrBuf) free(wrBuf);
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <defThread+0xfe8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <defThread+0xfa0>
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <defThread+0xfe8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f008 ff66 	bl	800ca3c <free>
	if (rdBuf) free(rdBuf);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <defThread+0x100c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <defThread+0xfb2>
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <defThread+0x100c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f008 ff5d 	bl	800ca3c <free>


	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <defThread+0xffc>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d011      	beq.n	8003bae <defThread+0xfde>
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <defThread+0x1020>)
 8003b8c:	681c      	ldr	r4, [r3, #0]
 8003b8e:	f008 fd41 	bl	800c614 <xPortGetFreeHeapSize>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <defThread+0x1004>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	9302      	str	r3, [sp, #8]
 8003b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	9200      	str	r2, [sp, #0]
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <defThread+0x1024>)
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	4914      	ldr	r1, [pc, #80]	; (8003bf8 <defThread+0x1028>)
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7fe fc21 	bl	80023f0 <Report>
	osDelay(250);
 8003bae:	20fa      	movs	r0, #250	; 0xfa
 8003bb0:	f005 fe4a 	bl	8009848 <osDelay>

	NVIC_SystemReset();
 8003bb4:	f7fd f83c 	bl	8000c30 <__NVIC_SystemReset>
 8003bb8:	200013b4 	.word	0x200013b4
 8003bbc:	2000008c 	.word	0x2000008c
 8003bc0:	20001380 	.word	0x20001380
 8003bc4:	20000080 	.word	0x20000080
 8003bc8:	20000354 	.word	0x20000354
 8003bcc:	20000070 	.word	0x20000070
 8003bd0:	2000137c 	.word	0x2000137c
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	0800dd70 	.word	0x0800dd70
 8003bdc:	200013b0 	.word	0x200013b0
 8003be0:	0800ddc8 	.word	0x0800ddc8
 8003be4:	20001398 	.word	0x20001398
 8003be8:	10624dd3 	.word	0x10624dd3
 8003bec:	0800ddcc 	.word	0x0800ddcc
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	0800ffa8 	.word	0x0800ffa8
 8003bf8:	0800dde4 	.word	0x0800dde4

08003bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d102      	bne.n	8003c14 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003c0e:	f000 ff6f 	bl	8004af0 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003c12:	e016      	b.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d111      	bne.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003c1e:	f7fe faaf 	bl	8002180 <get_msCounter>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	f002 0403 	and.w	r4, r2, #3
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	1ee3      	subs	r3, r4, #3
 8003c2e:	432b      	orrs	r3, r5
 8003c30:	d105      	bne.n	8003c3e <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003c32:	f7fe fa97 	bl	8002164 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	4805      	ldr	r0, [pc, #20]	; (8003c50 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003c3a:	f001 fe36 	bl	80058aa <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003c3e:	f7fe faad 	bl	800219c <inc_msCounter>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40020800 	.word	0x40020800

08003c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <Error_Handler+0x1c>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <Error_Handler+0x1c>)
 8003c64:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 8003c66:	2001      	movs	r0, #1
 8003c68:	f7fe fa54 	bl	8002114 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000354 	.word	0x20000354

08003c74 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2104      	movs	r1, #4
 8003c82:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <ST7789_WriteCommand+0x40>)
 8003c84:	f001 fdf8 	bl	8005878 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <ST7789_WriteCommand+0x44>)
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	2396      	movs	r3, #150	; 0x96
 8003c8e:	1df9      	adds	r1, r7, #7
 8003c90:	2201      	movs	r2, #1
 8003c92:	f003 fa38 	bl	8007106 <HAL_SPI_Transmit>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <ST7789_WriteCommand+0x36>
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <ST7789_WriteCommand+0x48>)
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <ST7789_WriteCommand+0x48>)
 8003ca8:	801a      	strh	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	20000074 	.word	0x20000074
 8003cbc:	20000354 	.word	0x20000354

08003cc0 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2104      	movs	r1, #4
 8003cce:	480e      	ldr	r0, [pc, #56]	; (8003d08 <ST7789_WriteCommands+0x48>)
 8003cd0:	f001 fdd2 	bl	8005878 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <ST7789_WriteCommands+0x4c>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	2196      	movs	r1, #150	; 0x96
 8003cde:	460b      	mov	r3, r1
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	f003 fa0d 	bl	8007106 <HAL_SPI_Transmit>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <ST7789_WriteCommands+0x40>
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <ST7789_WriteCommands+0x50>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	f043 0310 	orr.w	r3, r3, #16
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <ST7789_WriteCommands+0x50>)
 8003cfe:	801a      	strh	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	20000074 	.word	0x20000074
 8003d10:	20000354 	.word	0x20000354

08003d14 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003d22:	2201      	movs	r2, #1
 8003d24:	2104      	movs	r1, #4
 8003d26:	481f      	ldr	r0, [pc, #124]	; (8003da4 <ST7789_WriteData+0x90>)
 8003d28:	f001 fda6 	bl	8005878 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003d2c:	e028      	b.n	8003d80 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bf28      	it	cs
 8003d38:	4613      	movcs	r3, r2
 8003d3a:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <ST7789_WriteData+0x94>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <ST7789_WriteData+0x98>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	89ba      	ldrh	r2, [r7, #12]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 fb18 	bl	8007380 <HAL_SPI_Transmit_DMA>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003d5a:	e002      	b.n	8003d62 <ST7789_WriteData+0x4e>
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f000 fee7 	bl	8004b30 <HAL_Delay>
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <ST7789_WriteData+0x94>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f083 0301 	eor.w	r3, r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f5      	bne.n	8003d5c <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003d70:	89bb      	ldrh	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003d78:	89bb      	ldrh	r3, [r7, #12]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d3      	bne.n	8003d2e <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <ST7789_WriteData+0x86>
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <ST7789_WriteData+0x9c>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f043 0310 	orr.w	r3, r3, #16
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <ST7789_WriteData+0x9c>)
 8003d98:	801a      	strh	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40020000 	.word	0x40020000
 8003da8:	20000069 	.word	0x20000069
 8003dac:	20000074 	.word	0x20000074
 8003db0:	20000354 	.word	0x20000354

08003db4 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4814      	ldr	r0, [pc, #80]	; (8003e18 <ST7789_WriteDataLine+0x64>)
 8003dc8:	f001 fd56 	bl	8005878 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <ST7789_WriteDataLine+0x68>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <ST7789_WriteDataLine+0x6c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	b292      	uxth	r2, r2
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 facf 	bl	8007380 <HAL_SPI_Transmit_DMA>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003de6:	e002      	b.n	8003dee <ST7789_WriteDataLine+0x3a>
 8003de8:	2001      	movs	r0, #1
 8003dea:	f000 fea1 	bl	8004b30 <HAL_Delay>
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <ST7789_WriteDataLine+0x68>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	f083 0301 	eor.w	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f5      	bne.n	8003de8 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d006      	beq.n	8003e10 <ST7789_WriteDataLine+0x5c>
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <ST7789_WriteDataLine+0x70>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	f043 0310 	orr.w	r3, r3, #16
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <ST7789_WriteDataLine+0x70>)
 8003e0e:	801a      	strh	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	20000069 	.word	0x20000069
 8003e20:	20000074 	.word	0x20000074
 8003e24:	20000354 	.word	0x20000354

08003e28 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003e32:	2201      	movs	r2, #1
 8003e34:	2104      	movs	r1, #4
 8003e36:	480c      	ldr	r0, [pc, #48]	; (8003e68 <ST7789_WriteSmallData+0x40>)
 8003e38:	f001 fd1e 	bl	8005878 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <ST7789_WriteSmallData+0x44>)
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	2396      	movs	r3, #150	; 0x96
 8003e42:	1df9      	adds	r1, r7, #7
 8003e44:	2201      	movs	r2, #1
 8003e46:	f003 f95e 	bl	8007106 <HAL_SPI_Transmit>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <ST7789_WriteSmallData+0x36>
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <ST7789_WriteSmallData+0x48>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	f043 0310 	orr.w	r3, r3, #16
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <ST7789_WriteSmallData+0x48>)
 8003e5c:	801a      	strh	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	20000074 	.word	0x20000074
 8003e70:	20000354 	.word	0x20000354

08003e74 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <ipsOn+0x18>
 8003e84:	2029      	movs	r0, #41	; 0x29
 8003e86:	f7ff fef5 	bl	8003c74 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003e8a:	e002      	b.n	8003e92 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003e8c:	2028      	movs	r0, #40	; 0x28
 8003e8e:	f7ff fef1 	bl	8003c74 <ST7789_WriteCommand>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003ea6:	2036      	movs	r0, #54	; 0x36
 8003ea8:	f7ff fee4 	bl	8003c74 <ST7789_WriteCommand>
	switch (m) {
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d81a      	bhi.n	8003ee8 <ST7789_SetRotation+0x4c>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <ST7789_SetRotation+0x1c>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ed1 	.word	0x08003ed1
 8003ec0:	08003ed9 	.word	0x08003ed9
 8003ec4:	08003ee1 	.word	0x08003ee1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003ec8:	20c0      	movs	r0, #192	; 0xc0
 8003eca:	f7ff ffad 	bl	8003e28 <ST7789_WriteSmallData>
		break;
 8003ece:	e00c      	b.n	8003eea <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003ed0:	20a0      	movs	r0, #160	; 0xa0
 8003ed2:	f7ff ffa9 	bl	8003e28 <ST7789_WriteSmallData>
		break;
 8003ed6:	e008      	b.n	8003eea <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7ff ffa5 	bl	8003e28 <ST7789_WriteSmallData>
		break;
 8003ede:	e004      	b.n	8003eea <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003ee0:	2060      	movs	r0, #96	; 0x60
 8003ee2:	f7ff ffa1 	bl	8003e28 <ST7789_WriteSmallData>
		break;
 8003ee6:	e000      	b.n	8003eea <ST7789_SetRotation+0x4e>
	default:
		break;
 8003ee8:	bf00      	nop
	}
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop

08003ef4 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4604      	mov	r4, r0
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	80fb      	strh	r3, [r7, #6]
 8003f06:	4603      	mov	r3, r0
 8003f08:	80bb      	strh	r3, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	807b      	strh	r3, [r7, #2]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	82fb      	strh	r3, [r7, #22]
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003f1a:	88bb      	ldrh	r3, [r7, #4]
 8003f1c:	827b      	strh	r3, [r7, #18]
 8003f1e:	883b      	ldrh	r3, [r7, #0]
 8003f20:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003f22:	202a      	movs	r0, #42	; 0x2a
 8003f24:	f7ff fea6 	bl	8003c74 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003f28:	8afb      	ldrh	r3, [r7, #22]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	733b      	strb	r3, [r7, #12]
 8003f32:	8afb      	ldrh	r3, [r7, #22]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	737b      	strb	r3, [r7, #13]
 8003f38:	8abb      	ldrh	r3, [r7, #20]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	73bb      	strb	r3, [r7, #14]
 8003f42:	8abb      	ldrh	r3, [r7, #20]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	2104      	movs	r1, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fee0 	bl	8003d14 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003f54:	202b      	movs	r0, #43	; 0x2b
 8003f56:	f7ff fe8d 	bl	8003c74 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003f5a:	8a7b      	ldrh	r3, [r7, #18]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	723b      	strb	r3, [r7, #8]
 8003f64:	8a7b      	ldrh	r3, [r7, #18]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	727b      	strb	r3, [r7, #9]
 8003f6a:	8a3b      	ldrh	r3, [r7, #16]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	72bb      	strb	r3, [r7, #10]
 8003f74:	8a3b      	ldrh	r3, [r7, #16]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	2104      	movs	r1, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fec7 	bl	8003d14 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003f86:	202c      	movs	r0, #44	; 0x2c
 8003f88:	f7ff fe74 	bl	8003c74 <ST7789_WriteCommand>
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}

08003f94 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003f98:	2014      	movs	r0, #20
 8003f9a:	f000 fdc9 	bl	8004b30 <HAL_Delay>
    ST7789_RST_Clr();
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4808      	ldr	r0, [pc, #32]	; (8003fc4 <ST7789_Reset+0x30>)
 8003fa4:	f001 fc68 	bl	8005878 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003fa8:	200a      	movs	r0, #10
 8003faa:	f000 fdc1 	bl	8004b30 <HAL_Delay>
    ST7789_RST_Set();
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <ST7789_Reset+0x30>)
 8003fb4:	f001 fc60 	bl	8005878 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003fb8:	2014      	movs	r0, #20
 8003fba:	f000 fdb9 	bl	8004b30 <HAL_Delay>
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40020000 	.word	0x40020000

08003fc8 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b08f      	sub	sp, #60	; 0x3c
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003fd2:	203a      	movs	r0, #58	; 0x3a
 8003fd4:	f7ff fe4e 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003fd8:	2055      	movs	r0, #85	; 0x55
 8003fda:	f7ff ff25 	bl	8003e28 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003fde:	20b2      	movs	r0, #178	; 0xb2
 8003fe0:	f7ff fe48 	bl	8003c74 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003fe4:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <ST7789_Init+0x108>)
 8003fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fee:	6018      	str	r0, [r3, #0]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff8:	2105      	movs	r1, #5
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fe8a 	bl	8003d14 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8004000:	2003      	movs	r0, #3
 8004002:	f7ff ff4b 	bl	8003e9c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8004006:	20b7      	movs	r0, #183	; 0xb7
 8004008:	f7ff fe34 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800400c:	2035      	movs	r0, #53	; 0x35
 800400e:	f7ff ff0b 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8004012:	20bb      	movs	r0, #187	; 0xbb
 8004014:	f7ff fe2e 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004018:	2019      	movs	r0, #25
 800401a:	f7ff ff05 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800401e:	20c0      	movs	r0, #192	; 0xc0
 8004020:	f7ff fe28 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8004024:	202c      	movs	r0, #44	; 0x2c
 8004026:	f7ff feff 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 800402a:	20c2      	movs	r0, #194	; 0xc2
 800402c:	f7ff fe22 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004030:	2001      	movs	r0, #1
 8004032:	f7ff fef9 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8004036:	20ff      	movs	r0, #255	; 0xff
 8004038:	f7ff fef6 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 800403c:	20c3      	movs	r0, #195	; 0xc3
 800403e:	f7ff fe19 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8004042:	2012      	movs	r0, #18
 8004044:	f7ff fef0 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004048:	20c4      	movs	r0, #196	; 0xc4
 800404a:	f7ff fe13 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 800404e:	2020      	movs	r0, #32
 8004050:	f7ff feea 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8004054:	20c6      	movs	r0, #198	; 0xc6
 8004056:	f7ff fe0d 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 800405a:	200f      	movs	r0, #15
 800405c:	f7ff fee4 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8004060:	20d0      	movs	r0, #208	; 0xd0
 8004062:	f7ff fe07 	bl	8003c74 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8004066:	20a4      	movs	r0, #164	; 0xa4
 8004068:	f7ff fede 	bl	8003e28 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 800406c:	20a1      	movs	r0, #161	; 0xa1
 800406e:	f7ff fedb 	bl	8003e28 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8004072:	20e0      	movs	r0, #224	; 0xe0
 8004074:	f7ff fdfe 	bl	8003c74 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004078:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <ST7789_Init+0x10c>)
 800407a:	f107 041c 	add.w	r4, r7, #28
 800407e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004080:	c407      	stmia	r4!, {r0, r1, r2}
 8004082:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	210e      	movs	r1, #14
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fe42 	bl	8003d14 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8004090:	20e1      	movs	r0, #225	; 0xe1
 8004092:	f7ff fdef 	bl	8003c74 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <ST7789_Init+0x110>)
 8004098:	f107 040c 	add.w	r4, r7, #12
 800409c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800409e:	c407      	stmia	r4!, {r0, r1, r2}
 80040a0:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	210e      	movs	r1, #14
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fe33 	bl	8003d14 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <ST7789_Init+0x114>)
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 80040b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040b6:	2104      	movs	r1, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fe01 	bl	8003cc0 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f80d 	bl	80040e0 <ST7789_Fill_Color>
}
 80040c6:	bf00      	nop
 80040c8:	373c      	adds	r7, #60	; 0x3c
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	bf00      	nop
 80040d0:	0800de10 	.word	0x0800de10
 80040d4:	0800de18 	.word	0x0800de18
 80040d8:	0800de28 	.word	0x0800de28
 80040dc:	28131121 	.word	0x28131121

080040e0 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b0fc      	sub	sp, #496	; 0x1f0
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4602      	mov	r2, r0
 80040e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80040ec:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80040f0:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80040f2:	23ef      	movs	r3, #239	; 0xef
 80040f4:	22ef      	movs	r2, #239	; 0xef
 80040f6:	2100      	movs	r1, #0
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7ff fefb 	bl	8003ef4 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004104:	2300      	movs	r3, #0
 8004106:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800410a:	e024      	b.n	8004156 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 800410c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004110:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	b21a      	sxth	r2, r3
 800411c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004120:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	b21b      	sxth	r3, r3
 800412a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800412e:	b21b      	sxth	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b219      	sxth	r1, r3
 8004134:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004138:	f107 020c 	add.w	r2, r7, #12
 800413c:	4413      	add	r3, r2
 800413e:	b28a      	uxth	r2, r1
 8004140:	801a      	strh	r2, [r3, #0]
		i += 2;
 8004142:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004146:	3302      	adds	r3, #2
 8004148:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800414c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004150:	3301      	adds	r3, #1
 8004152:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004156:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800415a:	2bef      	cmp	r3, #239	; 0xef
 800415c:	d9d6      	bls.n	800410c <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800415e:	2300      	movs	r3, #0
 8004160:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004164:	e00b      	b.n	800417e <ST7789_Fill_Color+0x9e>
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fe20 	bl	8003db4 <ST7789_WriteDataLine>
 8004174:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004178:	3301      	adds	r3, #1
 800417a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800417e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004182:	2bef      	cmp	r3, #239	; 0xef
 8004184:	d9ef      	bls.n	8004166 <ST7789_Fill_Color+0x86>

//#endif
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8004192:	b590      	push	{r4, r7, lr}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	4604      	mov	r4, r0
 800419a:	4608      	mov	r0, r1
 800419c:	4611      	mov	r1, r2
 800419e:	461a      	mov	r2, r3
 80041a0:	4623      	mov	r3, r4
 80041a2:	80fb      	strh	r3, [r7, #6]
 80041a4:	4603      	mov	r3, r0
 80041a6:	80bb      	strh	r3, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
 80041ac:	4613      	mov	r3, r2
 80041ae:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	2bef      	cmp	r3, #239	; 0xef
 80041b4:	d82b      	bhi.n	800420e <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80041b6:	883b      	ldrh	r3, [r7, #0]
 80041b8:	2bef      	cmp	r3, #239	; 0xef
 80041ba:	d828      	bhi.n	800420e <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80041bc:	8c3b      	ldrh	r3, [r7, #32]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	723b      	strb	r3, [r7, #8]
 80041c6:	8c3b      	ldrh	r3, [r7, #32]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80041cc:	883b      	ldrh	r3, [r7, #0]
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	88b9      	ldrh	r1, [r7, #4]
 80041d2:	88f8      	ldrh	r0, [r7, #6]
 80041d4:	f7ff fe8e 	bl	8003ef4 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80041d8:	88bb      	ldrh	r3, [r7, #4]
 80041da:	81fb      	strh	r3, [r7, #14]
 80041dc:	e012      	b.n	8004204 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	81bb      	strh	r3, [r7, #12]
 80041e2:	e008      	b.n	80041f6 <ST7789_Fill+0x64>
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fd92 	bl	8003d14 <ST7789_WriteData>
 80041f0:	89bb      	ldrh	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	81bb      	strh	r3, [r7, #12]
 80041f6:	89ba      	ldrh	r2, [r7, #12]
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d9f2      	bls.n	80041e4 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 80041fe:	89fb      	ldrh	r3, [r7, #14]
 8004200:	3301      	adds	r3, #1
 8004202:	81fb      	strh	r3, [r7, #14]
 8004204:	89fa      	ldrh	r2, [r7, #14]
 8004206:	883b      	ldrh	r3, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d9e8      	bls.n	80041de <ST7789_Fill+0x4c>
 800420c:	e000      	b.n	8004210 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800420e:	bf00      	nop
	}
}
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bd90      	pop	{r4, r7, pc}

08004216 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004216:	b082      	sub	sp, #8
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
 8004220:	4603      	mov	r3, r0
 8004222:	80fb      	strh	r3, [r7, #6]
 8004224:	460b      	mov	r3, r1
 8004226:	80bb      	strh	r3, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800422c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004230:	b29a      	uxth	r2, r3
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	4413      	add	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29c      	uxth	r4, r3
 800423c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004240:	b29a      	uxth	r2, r3
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29b      	uxth	r3, r3
 800424c:	88b9      	ldrh	r1, [r7, #4]
 800424e:	88f8      	ldrh	r0, [r7, #6]
 8004250:	4622      	mov	r2, r4
 8004252:	f7ff fe4f 	bl	8003ef4 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004256:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	b29b      	uxth	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	733b      	strb	r3, [r7, #12]
 8004260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004262:	b2db      	uxtb	r3, r3
 8004264:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	b29b      	uxth	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	723b      	strb	r3, [r7, #8]
 8004272:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e02f      	b.n	80042e4 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	3b20      	subs	r3, #32
 800428a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4619      	mov	r1, r3
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	440b      	add	r3, r1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e015      	b.n	80042d2 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <ST7789_WriteChar+0xa8>
				uk = cdata;
 80042b6:	f107 030c 	add.w	r3, r7, #12
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e002      	b.n	80042c4 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80042c4:	2102      	movs	r1, #2
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7ff fd24 	bl	8003d14 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	3301      	adds	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80042d6:	461a      	mov	r2, r3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4293      	cmp	r3, r2
 80042dc:	d3e3      	bcc.n	80042a6 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80042e8:	461a      	mov	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d3c9      	bcc.n	8004284 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80042fc:	b002      	add	sp, #8
 80042fe:	4770      	bx	lr

08004300 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004300:	b082      	sub	sp, #8
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af04      	add	r7, sp, #16
 8004308:	603a      	str	r2, [r7, #0]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	4603      	mov	r3, r0
 800430e:	80fb      	strh	r3, [r7, #6]
 8004310:	460b      	mov	r3, r1
 8004312:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03f      	beq.n	800439a <ST7789_WriteString+0x9a>

	while (*str) {
 800431a:	e039      	b.n	8004390 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	7d3a      	ldrb	r2, [r7, #20]
 8004320:	4413      	add	r3, r2
 8004322:	2bef      	cmp	r3, #239	; 0xef
 8004324:	dd13      	ble.n	800434e <ST7789_WriteString+0x4e>
			x = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800432a:	7d7b      	ldrb	r3, [r7, #21]
 800432c:	b29a      	uxth	r2, r3
 800432e:	88bb      	ldrh	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004334:	88bb      	ldrh	r3, [r7, #4]
 8004336:	7d7a      	ldrb	r2, [r7, #21]
 8004338:	4413      	add	r3, r2
 800433a:	2bef      	cmp	r3, #239	; 0xef
 800433c:	dc2f      	bgt.n	800439e <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b20      	cmp	r3, #32
 8004344:	d103      	bne.n	800434e <ST7789_WriteString+0x4e>
				str++;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	603b      	str	r3, [r7, #0]
				continue;
 800434c:	e020      	b.n	8004390 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b0a      	cmp	r3, #10
 8004354:	d012      	beq.n	800437c <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	88b9      	ldrh	r1, [r7, #4]
 800435c:	88f8      	ldrh	r0, [r7, #6]
 800435e:	8c3b      	ldrh	r3, [r7, #32]
 8004360:	9302      	str	r3, [sp, #8]
 8004362:	8bbb      	ldrh	r3, [r7, #28]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f7ff ff53 	bl	8004216 <ST7789_WriteChar>
			x += font.width;
 8004370:	7d3b      	ldrb	r3, [r7, #20]
 8004372:	b29a      	uxth	r2, r3
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	4413      	add	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
 800437a:	e006      	b.n	800438a <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004380:	7d7b      	ldrb	r3, [r7, #21]
 8004382:	b29a      	uxth	r2, r3
 8004384:	88bb      	ldrh	r3, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1c1      	bne.n	800431c <ST7789_WriteString+0x1c>
 8004398:	e002      	b.n	80043a0 <ST7789_WriteString+0xa0>
	if (!str) return;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 800439e:	bf00      	nop
	}
}
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043a8:	b002      	add	sp, #8
 80043aa:	4770      	bx	lr

080043ac <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0a4      	sub	sp, #144	; 0x90
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	f107 0310 	add.w	r3, r7, #16
 80043c0:	227c      	movs	r2, #124	; 0x7c
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f008 fb4f 	bl	800ca68 <memset>

	memset(st, 0x20, 127);
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	227f      	movs	r2, #127	; 0x7f
 80043d0:	2120      	movs	r1, #32
 80043d2:	4618      	mov	r0, r3
 80043d4:	f008 fb48 	bl	800ca68 <memset>
	int8_t k = strlen(str);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fb fef9 	bl	80001d0 <strlen>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80043e4:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80043e8:	887b      	ldrh	r3, [r7, #2]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	da25      	bge.n	800443a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	0fda      	lsrs	r2, r3, #31
 80043f8:	4413      	add	r3, r2
 80043fa:	105b      	asrs	r3, r3, #1
 80043fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004400:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004404:	f107 020c 	add.w	r2, r7, #12
 8004408:	4413      	add	r3, r2
 800440a:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4618      	mov	r0, r3
 8004412:	f008 fb1b 	bl	800ca4c <memcpy>
		st[k + n*2 + 1] = '\0';
 8004416:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800441a:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	3301      	adds	r3, #1
 8004424:	3390      	adds	r3, #144	; 0x90
 8004426:	443b      	add	r3, r7
 8004428:	2200      	movs	r2, #0
 800442a:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f008 fccb 	bl	800cdd0 <strcpy>
	}

	return str;
 800443a:	687b      	ldr	r3, [r7, #4]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3790      	adds	r7, #144	; 0x90
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_MspInit+0x74>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_MspInit+0x74>)
 8004454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004458:	6453      	str	r3, [r2, #68]	; 0x44
 800445a:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_MspInit+0x74>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_MspInit+0x74>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <HAL_MspInit+0x74>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_MspInit+0x74>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	210f      	movs	r1, #15
 8004486:	f06f 0001 	mvn.w	r0, #1
 800448a:	f000 fc2d 	bl	8004ce8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800448e:	2200      	movs	r2, #0
 8004490:	2105      	movs	r1, #5
 8004492:	2005      	movs	r0, #5
 8004494:	f000 fc28 	bl	8004ce8 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004498:	2005      	movs	r0, #5
 800449a:	f000 fc41 	bl	8004d20 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2105      	movs	r1, #5
 80044a2:	2005      	movs	r0, #5
 80044a4:	f000 fc20 	bl	8004ce8 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80044a8:	2005      	movs	r0, #5
 80044aa:	f000 fc39 	bl	8004d20 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800

080044bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044c4:	f107 0308 	add.w	r3, r7, #8
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <HAL_RTC_MspInit+0x4c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d110      	bne.n	80044fe <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80044dc:	2302      	movs	r3, #2
 80044de:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <HAL_RTC_MspInit+0x50>)
 80044e2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4618      	mov	r0, r3
 80044ea:	f002 f9a3 	bl	8006834 <HAL_RCCEx_PeriphCLKConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80044f4:	f7ff fbae 	bl	8003c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RTC_MspInit+0x54>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40002800 	.word	0x40002800
 800450c:	00190300 	.word	0x00190300
 8004510:	42470e3c 	.word	0x42470e3c

08004514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a39      	ldr	r2, [pc, #228]	; (8004618 <HAL_SPI_MspInit+0x104>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d16b      	bne.n	800460e <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_SPI_MspInit+0x108>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_SPI_MspInit+0x108>)
 8004540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004544:	6453      	str	r3, [r2, #68]	; 0x44
 8004546:	4b35      	ldr	r3, [pc, #212]	; (800461c <HAL_SPI_MspInit+0x108>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_SPI_MspInit+0x108>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a30      	ldr	r2, [pc, #192]	; (800461c <HAL_SPI_MspInit+0x108>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_SPI_MspInit+0x108>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800456e:	23a0      	movs	r3, #160	; 0xa0
 8004570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800457e:	2305      	movs	r3, #5
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	4619      	mov	r1, r3
 8004588:	4825      	ldr	r0, [pc, #148]	; (8004620 <HAL_SPI_MspInit+0x10c>)
 800458a:	f000 ffd9 	bl	8005540 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <HAL_SPI_MspInit+0x110>)
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_SPI_MspInit+0x114>)
 8004592:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004594:	4b23      	ldr	r3, [pc, #140]	; (8004624 <HAL_SPI_MspInit+0x110>)
 8004596:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800459a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <HAL_SPI_MspInit+0x110>)
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045a2:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80045c2:	4b18      	ldr	r3, [pc, #96]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80045ca:	4b16      	ldr	r3, [pc, #88]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045cc:	2204      	movs	r2, #4
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045d2:	2203      	movs	r2, #3
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045d8:	2200      	movs	r2, #0
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80045e2:	4810      	ldr	r0, [pc, #64]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045e4:	f000 fbaa 	bl	8004d3c <HAL_DMA_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80045ee:	f7ff fb31 	bl	8003c54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045f6:	649a      	str	r2, [r3, #72]	; 0x48
 80045f8:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <HAL_SPI_MspInit+0x110>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2102      	movs	r1, #2
 8004602:	2023      	movs	r0, #35	; 0x23
 8004604:	f000 fb70 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004608:	2023      	movs	r0, #35	; 0x23
 800460a:	f000 fb89 	bl	8004d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800460e:	bf00      	nop
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40013000 	.word	0x40013000
 800461c:	40023800 	.word	0x40023800
 8004620:	40020000 	.word	0x40020000
 8004624:	200001bc 	.word	0x200001bc
 8004628:	40026458 	.word	0x40026458

0800462c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d115      	bne.n	800466a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <HAL_TIM_Base_MspInit+0x48>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <HAL_TIM_Base_MspInit+0x48>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_TIM_Base_MspInit+0x48>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2101      	movs	r1, #1
 800465e:	201c      	movs	r0, #28
 8004660:	f000 fb42 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004664:	201c      	movs	r0, #28
 8004666:	f000 fb5b 	bl	8004d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800

08004678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a35      	ldr	r2, [pc, #212]	; (800476c <HAL_UART_MspInit+0xf4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d163      	bne.n	8004762 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_UART_MspInit+0xf8>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a33      	ldr	r2, [pc, #204]	; (8004770 <HAL_UART_MspInit+0xf8>)
 80046a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_UART_MspInit+0xf8>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_UART_MspInit+0xf8>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a2c      	ldr	r2, [pc, #176]	; (8004770 <HAL_UART_MspInit+0xf8>)
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_UART_MspInit+0xf8>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80046d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2302      	movs	r3, #2
 80046da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e0:	2303      	movs	r3, #3
 80046e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046e4:	2307      	movs	r3, #7
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	4619      	mov	r1, r3
 80046ee:	4821      	ldr	r0, [pc, #132]	; (8004774 <HAL_UART_MspInit+0xfc>)
 80046f0:	f000 ff26 	bl	8005540 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_UART_MspInit+0x100>)
 80046f6:	4a21      	ldr	r2, [pc, #132]	; (800477c <HAL_UART_MspInit+0x104>)
 80046f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_UART_MspInit+0x100>)
 80046fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004700:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_UART_MspInit+0x100>)
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_UART_MspInit+0x100>)
 800470a:	2200      	movs	r2, #0
 800470c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_UART_MspInit+0x100>)
 8004710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004714:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_UART_MspInit+0x100>)
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_UART_MspInit+0x100>)
 800471e:	2200      	movs	r2, #0
 8004720:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_UART_MspInit+0x100>)
 8004724:	2200      	movs	r2, #0
 8004726:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_UART_MspInit+0x100>)
 800472a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800472e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_UART_MspInit+0x100>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004736:	4810      	ldr	r0, [pc, #64]	; (8004778 <HAL_UART_MspInit+0x100>)
 8004738:	f000 fb00 	bl	8004d3c <HAL_DMA_Init>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004742:	f7ff fa87 	bl	8003c54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <HAL_UART_MspInit+0x100>)
 800474a:	635a      	str	r2, [r3, #52]	; 0x34
 800474c:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <HAL_UART_MspInit+0x100>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004752:	2200      	movs	r2, #0
 8004754:	2105      	movs	r1, #5
 8004756:	2027      	movs	r0, #39	; 0x27
 8004758:	f000 fac6 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800475c:	2027      	movs	r0, #39	; 0x27
 800475e:	f000 fadf 	bl	8004d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004762:	bf00      	nop
 8004764:	3728      	adds	r7, #40	; 0x28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40004800 	.word	0x40004800
 8004770:	40023800 	.word	0x40023800
 8004774:	40020400 	.word	0x40020400
 8004778:	200002a8 	.word	0x200002a8
 800477c:	40026058 	.word	0x40026058

08004780 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004794:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_FSMC_MspInit+0x98>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d139      	bne.n	8004810 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 800479c:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_FSMC_MspInit+0x98>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4b1d      	ldr	r3, [pc, #116]	; (800481c <HAL_FSMC_MspInit+0x9c>)
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	4a1c      	ldr	r2, [pc, #112]	; (800481c <HAL_FSMC_MspInit+0x9c>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6393      	str	r3, [r2, #56]	; 0x38
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_FSMC_MspInit+0x9c>)
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80047be:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80047c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047cc:	2303      	movs	r3, #3
 80047ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80047d0:	230c      	movs	r3, #12
 80047d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4811      	ldr	r0, [pc, #68]	; (8004820 <HAL_FSMC_MspInit+0xa0>)
 80047da:	f000 feb1 	bl	8005540 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80047de:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80047e2:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	2302      	movs	r3, #2
 80047e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ec:	2303      	movs	r3, #3
 80047ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80047f0:	230c      	movs	r3, #12
 80047f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	4619      	mov	r1, r3
 80047f8:	480a      	ldr	r0, [pc, #40]	; (8004824 <HAL_FSMC_MspInit+0xa4>)
 80047fa:	f000 fea1 	bl	8005540 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2105      	movs	r1, #5
 8004802:	2030      	movs	r0, #48	; 0x30
 8004804:	f000 fa70 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f000 fa89 	bl	8004d20 <HAL_NVIC_EnableIRQ>
 800480e:	e000      	b.n	8004812 <HAL_FSMC_MspInit+0x92>
    return;
 8004810:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20001bbc 	.word	0x20001bbc
 800481c:	40023800 	.word	0x40023800
 8004820:	40021000 	.word	0x40021000
 8004824:	40020c00 	.word	0x40020c00

08004828 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004830:	f7ff ffa6 	bl	8004780 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	; 0x30
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800484c:	2200      	movs	r2, #0
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	2019      	movs	r0, #25
 8004852:	f000 fa49 	bl	8004ce8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004856:	2019      	movs	r0, #25
 8004858:	f000 fa62 	bl	8004d20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <HAL_InitTick+0xa4>)
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <HAL_InitTick+0xa4>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6453      	str	r3, [r2, #68]	; 0x44
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <HAL_InitTick+0xa4>)
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004878:	f107 0210 	add.w	r2, r7, #16
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f001 ffa4 	bl	80067d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004888:	f001 ff8e 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 800488c:	4603      	mov	r3, r0
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <HAL_InitTick+0xa8>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	0c9b      	lsrs	r3, r3, #18
 800489c:	3b01      	subs	r3, #1
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_InitTick+0xac>)
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_InitTick+0xb0>)
 80048a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_InitTick+0xac>)
 80048a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80048ae:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <HAL_InitTick+0xac>)
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_InitTick+0xac>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_InitTick+0xac>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80048c0:	4809      	ldr	r0, [pc, #36]	; (80048e8 <HAL_InitTick+0xac>)
 80048c2:	f003 f887 	bl	80079d4 <HAL_TIM_Base_Init>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80048cc:	4806      	ldr	r0, [pc, #24]	; (80048e8 <HAL_InitTick+0xac>)
 80048ce:	f003 f8d1 	bl	8007a74 <HAL_TIM_Base_Start_IT>
 80048d2:	4603      	mov	r3, r0
 80048d4:	e000      	b.n	80048d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3730      	adds	r7, #48	; 0x30
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	431bde83 	.word	0x431bde83
 80048e8:	20001bc0 	.word	0x20001bc0
 80048ec:	40010000 	.word	0x40010000

080048f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004902:	e7fe      	b.n	8004902 <HardFault_Handler+0x4>

08004904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004908:	e7fe      	b.n	8004908 <MemManage_Handler+0x4>

0800490a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800490e:	e7fe      	b.n	800490e <BusFault_Handler+0x4>

08004910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004914:	e7fe      	b.n	8004914 <UsageFault_Handler+0x4>

08004916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004916:	b480      	push	{r7}
 8004918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004938:	4802      	ldr	r0, [pc, #8]	; (8004944 <DMA1_Stream3_IRQHandler+0x10>)
 800493a:	f000 fb97 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200002a8 	.word	0x200002a8

08004948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800494c:	4802      	ldr	r0, [pc, #8]	; (8004958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800494e:	f003 f901 	bl	8007b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20001bc0 	.word	0x20001bc0

0800495c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <TIM2_IRQHandler+0x10>)
 8004962:	f003 f8f7 	bl	8007b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2000021c 	.word	0x2000021c

08004970 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <SPI1_IRQHandler+0x10>)
 8004976:	f002 fdb9 	bl	80074ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000164 	.word	0x20000164

08004984 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <USART3_IRQHandler+0x10>)
 800498a:	f003 fda1 	bl	80084d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000264 	.word	0x20000264

08004998 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <FSMC_IRQHandler+0x10>)
 800499e:	f000 ffec 	bl	800597a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000308 	.word	0x20000308

080049ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80049b0:	4802      	ldr	r0, [pc, #8]	; (80049bc <DMA2_Stream3_IRQHandler+0x10>)
 80049b2:	f000 fb5b 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200001bc 	.word	0x200001bc

080049c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <_sbrk+0x5c>)
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <_sbrk+0x60>)
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <_sbrk+0x64>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <_sbrk+0x64>)
 80049de:	4a12      	ldr	r2, [pc, #72]	; (8004a28 <_sbrk+0x68>)
 80049e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <_sbrk+0x64>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d207      	bcs.n	8004a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049f0:	f007 ff4c 	bl	800c88c <__errno>
 80049f4:	4603      	mov	r3, r0
 80049f6:	220c      	movs	r2, #12
 80049f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049fe:	e009      	b.n	8004a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a00:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <_sbrk+0x64>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <_sbrk+0x64>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <_sbrk+0x64>)
 8004a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20020000 	.word	0x20020000
 8004a20:	00000800 	.word	0x00000800
 8004a24:	20001c08 	.word	0x20001c08
 8004a28:	20006a30 	.word	0x20006a30

08004a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <SystemInit+0x28>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <SystemInit+0x28>)
 8004a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <SystemInit+0x28>)
 8004a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a46:	609a      	str	r2, [r3, #8]
#endif
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a5e:	e003      	b.n	8004a68 <LoopCopyDataInit>

08004a60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a66:	3104      	adds	r1, #4

08004a68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a68:	480b      	ldr	r0, [pc, #44]	; (8004a98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a70:	d3f6      	bcc.n	8004a60 <CopyDataInit>
  ldr  r2, =_sbss
 8004a72:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a74:	e002      	b.n	8004a7c <LoopFillZerobss>

08004a76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a78:	f842 3b04 	str.w	r3, [r2], #4

08004a7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a80:	d3f9      	bcc.n	8004a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a82:	f7ff ffd3 	bl	8004a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a86:	f007 ffb3 	bl	800c9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a8a:	f7fc f8e7 	bl	8000c5c <main>
  bx  lr    
 8004a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a94:	08010178 	.word	0x08010178
  ldr  r0, =_sdata
 8004a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a9c:	20000128 	.word	0x20000128
  ldr  r2, =_sbss
 8004aa0:	20000128 	.word	0x20000128
  ldr  r3, = _ebss
 8004aa4:	20006a30 	.word	0x20006a30

08004aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004aa8:	e7fe      	b.n	8004aa8 <ADC_IRQHandler>
	...

08004aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_Init+0x40>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <HAL_Init+0x40>)
 8004ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_Init+0x40>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <HAL_Init+0x40>)
 8004ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <HAL_Init+0x40>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a07      	ldr	r2, [pc, #28]	; (8004aec <HAL_Init+0x40>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	f000 f8fc 	bl	8004cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ada:	200f      	movs	r0, #15
 8004adc:	f7ff feae 	bl	800483c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ae0:	f7ff fcb0 	bl	8004444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023c00 	.word	0x40023c00

08004af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_IncTick+0x20>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_IncTick+0x24>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	200000ac 	.word	0x200000ac
 8004b14:	20001c0c 	.word	0x20001c0c

08004b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_GetTick+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20001c0c 	.word	0x20001c0c

08004b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff ffee 	bl	8004b18 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b48:	d005      	beq.n	8004b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_Delay+0x44>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b56:	bf00      	nop
 8004b58:	f7ff ffde 	bl	8004b18 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f7      	bhi.n	8004b58 <HAL_Delay+0x28>
  {
  }
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200000ac 	.word	0x200000ac

08004b78 <__NVIC_SetPriorityGrouping>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <__NVIC_SetPriorityGrouping+0x44>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004baa:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <__NVIC_SetPriorityGrouping+0x44>)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	60d3      	str	r3, [r2, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <__NVIC_GetPriorityGrouping>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	0a1b      	lsrs	r3, r3, #8
 8004bca:	f003 0307 	and.w	r3, r3, #7
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <__NVIC_EnableIRQ>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	db0b      	blt.n	8004c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	f003 021f 	and.w	r2, r3, #31
 8004bf4:	4907      	ldr	r1, [pc, #28]	; (8004c14 <__NVIC_EnableIRQ+0x38>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_SetPriority>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db0a      	blt.n	8004c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	490c      	ldr	r1, [pc, #48]	; (8004c64 <__NVIC_SetPriority+0x4c>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c40:	e00a      	b.n	8004c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4908      	ldr	r1, [pc, #32]	; (8004c68 <__NVIC_SetPriority+0x50>)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	440b      	add	r3, r1
 8004c56:	761a      	strb	r2, [r3, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <NVIC_EncodePriority>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	bf28      	it	cs
 8004c8a:	2304      	movcs	r3, #4
 8004c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d902      	bls.n	8004c9c <NVIC_EncodePriority+0x30>
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3b03      	subs	r3, #3
 8004c9a:	e000      	b.n	8004c9e <NVIC_EncodePriority+0x32>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	401a      	ands	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	43d9      	mvns	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	4313      	orrs	r3, r2
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3724      	adds	r7, #36	; 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff4c 	bl	8004b78 <__NVIC_SetPriorityGrouping>
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cfa:	f7ff ff61 	bl	8004bc0 <__NVIC_GetPriorityGrouping>
 8004cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6978      	ldr	r0, [r7, #20]
 8004d06:	f7ff ffb1 	bl	8004c6c <NVIC_EncodePriority>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff80 	bl	8004c18 <__NVIC_SetPriority>
}
 8004d18:	bf00      	nop
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ff54 	bl	8004bdc <__NVIC_EnableIRQ>
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7ff fee6 	bl	8004b18 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e099      	b.n	8004e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d78:	e00f      	b.n	8004d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7a:	f7ff fecd 	bl	8004b18 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d908      	bls.n	8004d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2203      	movs	r2, #3
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e078      	b.n	8004e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e8      	bne.n	8004d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4b38      	ldr	r3, [pc, #224]	; (8004e94 <HAL_DMA_Init+0x158>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d107      	bne.n	8004e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0307 	bic.w	r3, r3, #7
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d117      	bne.n	8004e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb01 	bl	8005448 <DMA_CheckFifoParam>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e016      	b.n	8004e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fab8 	bl	80053dc <DMA_CalcBaseAndBitshift>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	223f      	movs	r2, #63	; 0x3f
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	f010803f 	.word	0xf010803f

08004e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_DMA_Start_IT+0x26>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e040      	b.n	8004f40 <HAL_DMA_Start_IT+0xa8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d12f      	bne.n	8004f32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fa4a 	bl	8005380 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	223f      	movs	r2, #63	; 0x3f
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0216 	orr.w	r2, r2, #22
 8004f06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e005      	b.n	8004f3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f56:	f7ff fddf 	bl	8004b18 <HAL_GetTick>
 8004f5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d008      	beq.n	8004f7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e052      	b.n	8005020 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0216 	bic.w	r2, r2, #22
 8004f88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_DMA_Abort+0x62>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0208 	bic.w	r2, r2, #8
 8004fb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fca:	e013      	b.n	8004ff4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fcc:	f7ff fda4 	bl	8004b18 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d90c      	bls.n	8004ff4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e015      	b.n	8005020 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e4      	bne.n	8004fcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	223f      	movs	r2, #63	; 0x3f
 8005008:	409a      	lsls	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e00c      	b.n	8005060 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2205      	movs	r2, #5
 800504a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005078:	4b8e      	ldr	r3, [pc, #568]	; (80052b4 <HAL_DMA_IRQHandler+0x248>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a8e      	ldr	r2, [pc, #568]	; (80052b8 <HAL_DMA_IRQHandler+0x24c>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	2208      	movs	r2, #8
 8005098:	409a      	lsls	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01a      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c4:	2208      	movs	r2, #8
 80050c6:	409a      	lsls	r2, r3
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f043 0201 	orr.w	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	2201      	movs	r2, #1
 80050fc:	409a      	lsls	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f043 0202 	orr.w	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005112:	2204      	movs	r2, #4
 8005114:	409a      	lsls	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d012      	beq.n	8005144 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00b      	beq.n	8005144 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005130:	2204      	movs	r2, #4
 8005132:	409a      	lsls	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005148:	2210      	movs	r2, #16
 800514a:	409a      	lsls	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d043      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d03c      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	2210      	movs	r2, #16
 8005168:	409a      	lsls	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d018      	beq.n	80051ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d024      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
 800519a:	e01f      	b.n	80051dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
 80051ac:	e016      	b.n	80051dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0208 	bic.w	r2, r2, #8
 80051ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2220      	movs	r2, #32
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 808f 	beq.w	800530c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8087 	beq.w	800530c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005202:	2220      	movs	r2, #32
 8005204:	409a      	lsls	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b05      	cmp	r3, #5
 8005214:	d136      	bne.n	8005284 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0216 	bic.w	r2, r2, #22
 8005224:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_DMA_IRQHandler+0x1da>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0208 	bic.w	r2, r2, #8
 8005254:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	223f      	movs	r2, #63	; 0x3f
 800525c:	409a      	lsls	r2, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	2b00      	cmp	r3, #0
 8005278:	d07e      	beq.n	8005378 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
        }
        return;
 8005282:	e079      	b.n	8005378 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10d      	bne.n	80052bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d031      	beq.n	800530c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
 80052b0:	e02c      	b.n	800530c <HAL_DMA_IRQHandler+0x2a0>
 80052b2:	bf00      	nop
 80052b4:	200000a4 	.word	0x200000a4
 80052b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	e01e      	b.n	800530c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10f      	bne.n	80052fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0210 	bic.w	r2, r2, #16
 80052ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	2b00      	cmp	r3, #0
 8005312:	d032      	beq.n	800537a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d022      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2205      	movs	r2, #5
 8005324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3301      	adds	r3, #1
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	429a      	cmp	r2, r3
 8005342:	d307      	bcc.n	8005354 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f2      	bne.n	8005338 <HAL_DMA_IRQHandler+0x2cc>
 8005352:	e000      	b.n	8005356 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005354:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
 8005376:	e000      	b.n	800537a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005378:	bf00      	nop
    }
  }
}
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800539c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d108      	bne.n	80053c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053be:	e007      	b.n	80053d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	3b10      	subs	r3, #16
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <DMA_CalcBaseAndBitshift+0x64>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <DMA_CalcBaseAndBitshift+0x68>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d909      	bls.n	800541e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	659a      	str	r2, [r3, #88]	; 0x58
 800541c:	e007      	b.n	800542e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	aaaaaaab 	.word	0xaaaaaaab
 8005444:	0800ffcc 	.word	0x0800ffcc

08005448 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11f      	bne.n	80054a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d856      	bhi.n	8005516 <DMA_CheckFifoParam+0xce>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <DMA_CheckFifoParam+0x28>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005481 	.word	0x08005481
 8005474:	08005493 	.word	0x08005493
 8005478:	08005481 	.word	0x08005481
 800547c:	08005517 	.word	0x08005517
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d046      	beq.n	800551a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005490:	e043      	b.n	800551a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800549a:	d140      	bne.n	800551e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a0:	e03d      	b.n	800551e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054aa:	d121      	bne.n	80054f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d837      	bhi.n	8005522 <DMA_CheckFifoParam+0xda>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <DMA_CheckFifoParam+0x70>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054cf 	.word	0x080054cf
 80054c0:	080054c9 	.word	0x080054c9
 80054c4:	080054e1 	.word	0x080054e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      break;
 80054cc:	e030      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d025      	beq.n	8005526 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054de:	e022      	b.n	8005526 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054e8:	d11f      	bne.n	800552a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054ee:	e01c      	b.n	800552a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d903      	bls.n	80054fe <DMA_CheckFifoParam+0xb6>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d003      	beq.n	8005504 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054fc:	e018      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
      break;
 8005502:	e015      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00e      	beq.n	800552e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e00b      	b.n	800552e <DMA_CheckFifoParam+0xe6>
      break;
 8005516:	bf00      	nop
 8005518:	e00a      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 800551a:	bf00      	nop
 800551c:	e008      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 800551e:	bf00      	nop
 8005520:	e006      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 8005522:	bf00      	nop
 8005524:	e004      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;   
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 800552e:	bf00      	nop
    }
  } 
  
  return status; 
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	e16b      	b.n	8005834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800555c:	2201      	movs	r2, #1
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4013      	ands	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	f040 815a 	bne.w	800582e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d005      	beq.n	8005592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800558e:	2b02      	cmp	r3, #2
 8005590:	d130      	bne.n	80055f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	2203      	movs	r2, #3
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055c8:	2201      	movs	r2, #1
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	f003 0201 	and.w	r2, r3, #1
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d017      	beq.n	8005630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	2203      	movs	r2, #3
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d123      	bne.n	8005684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	08da      	lsrs	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3208      	adds	r2, #8
 8005644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	220f      	movs	r2, #15
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	08da      	lsrs	r2, r3, #3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3208      	adds	r2, #8
 800567e:	69b9      	ldr	r1, [r7, #24]
 8005680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	2203      	movs	r2, #3
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 0203 	and.w	r2, r3, #3
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80b4 	beq.w	800582e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	4b60      	ldr	r3, [pc, #384]	; (800584c <HAL_GPIO_Init+0x30c>)
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	4a5f      	ldr	r2, [pc, #380]	; (800584c <HAL_GPIO_Init+0x30c>)
 80056d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056d4:	6453      	str	r3, [r2, #68]	; 0x44
 80056d6:	4b5d      	ldr	r3, [pc, #372]	; (800584c <HAL_GPIO_Init+0x30c>)
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056e2:	4a5b      	ldr	r2, [pc, #364]	; (8005850 <HAL_GPIO_Init+0x310>)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	3302      	adds	r3, #2
 80056ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	220f      	movs	r2, #15
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a52      	ldr	r2, [pc, #328]	; (8005854 <HAL_GPIO_Init+0x314>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d02b      	beq.n	8005766 <HAL_GPIO_Init+0x226>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a51      	ldr	r2, [pc, #324]	; (8005858 <HAL_GPIO_Init+0x318>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d025      	beq.n	8005762 <HAL_GPIO_Init+0x222>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a50      	ldr	r2, [pc, #320]	; (800585c <HAL_GPIO_Init+0x31c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01f      	beq.n	800575e <HAL_GPIO_Init+0x21e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a4f      	ldr	r2, [pc, #316]	; (8005860 <HAL_GPIO_Init+0x320>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d019      	beq.n	800575a <HAL_GPIO_Init+0x21a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a4e      	ldr	r2, [pc, #312]	; (8005864 <HAL_GPIO_Init+0x324>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <HAL_GPIO_Init+0x216>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a4d      	ldr	r2, [pc, #308]	; (8005868 <HAL_GPIO_Init+0x328>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00d      	beq.n	8005752 <HAL_GPIO_Init+0x212>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a4c      	ldr	r2, [pc, #304]	; (800586c <HAL_GPIO_Init+0x32c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <HAL_GPIO_Init+0x20e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a4b      	ldr	r2, [pc, #300]	; (8005870 <HAL_GPIO_Init+0x330>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <HAL_GPIO_Init+0x20a>
 8005746:	2307      	movs	r3, #7
 8005748:	e00e      	b.n	8005768 <HAL_GPIO_Init+0x228>
 800574a:	2308      	movs	r3, #8
 800574c:	e00c      	b.n	8005768 <HAL_GPIO_Init+0x228>
 800574e:	2306      	movs	r3, #6
 8005750:	e00a      	b.n	8005768 <HAL_GPIO_Init+0x228>
 8005752:	2305      	movs	r3, #5
 8005754:	e008      	b.n	8005768 <HAL_GPIO_Init+0x228>
 8005756:	2304      	movs	r3, #4
 8005758:	e006      	b.n	8005768 <HAL_GPIO_Init+0x228>
 800575a:	2303      	movs	r3, #3
 800575c:	e004      	b.n	8005768 <HAL_GPIO_Init+0x228>
 800575e:	2302      	movs	r3, #2
 8005760:	e002      	b.n	8005768 <HAL_GPIO_Init+0x228>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_GPIO_Init+0x228>
 8005766:	2300      	movs	r3, #0
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	f002 0203 	and.w	r2, r2, #3
 800576e:	0092      	lsls	r2, r2, #2
 8005770:	4093      	lsls	r3, r2
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005778:	4935      	ldr	r1, [pc, #212]	; (8005850 <HAL_GPIO_Init+0x310>)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	3302      	adds	r3, #2
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005786:	4b3b      	ldr	r3, [pc, #236]	; (8005874 <HAL_GPIO_Init+0x334>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057aa:	4a32      	ldr	r2, [pc, #200]	; (8005874 <HAL_GPIO_Init+0x334>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057b0:	4b30      	ldr	r3, [pc, #192]	; (8005874 <HAL_GPIO_Init+0x334>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057d4:	4a27      	ldr	r2, [pc, #156]	; (8005874 <HAL_GPIO_Init+0x334>)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057da:	4b26      	ldr	r3, [pc, #152]	; (8005874 <HAL_GPIO_Init+0x334>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_GPIO_Init+0x334>)
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_GPIO_Init+0x334>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005828:	4a12      	ldr	r2, [pc, #72]	; (8005874 <HAL_GPIO_Init+0x334>)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3301      	adds	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	f67f ae90 	bls.w	800555c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3724      	adds	r7, #36	; 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	40013800 	.word	0x40013800
 8005854:	40020000 	.word	0x40020000
 8005858:	40020400 	.word	0x40020400
 800585c:	40020800 	.word	0x40020800
 8005860:	40020c00 	.word	0x40020c00
 8005864:	40021000 	.word	0x40021000
 8005868:	40021400 	.word	0x40021400
 800586c:	40021800 	.word	0x40021800
 8005870:	40021c00 	.word	0x40021c00
 8005874:	40013c00 	.word	0x40013c00

08005878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
 8005884:	4613      	mov	r3, r2
 8005886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005888:	787b      	ldrb	r3, [r7, #1]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005894:	e003      	b.n	800589e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	041a      	lsls	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	619a      	str	r2, [r3, #24]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058bc:	887a      	ldrh	r2, [r7, #2]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4013      	ands	r3, r2
 80058c2:	041a      	lsls	r2, r3, #16
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	43d9      	mvns	r1, r3
 80058c8:	887b      	ldrh	r3, [r7, #2]
 80058ca:	400b      	ands	r3, r1
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	619a      	str	r2, [r3, #24]
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e03e      	b.n	8005972 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7fe ff8d 	bl	8004828 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f003 fda1 	bl	8009460 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	461a      	mov	r2, r3
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	f003 fde5 	bl	80094f8 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	461a      	mov	r2, r3
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	f003 fe12 	bl	8009562 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b10      	cmp	r3, #16
 8005944:	d108      	bne.n	8005958 <HAL_NAND_Init+0x7a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0204 	orr.w	r2, r2, #4
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e007      	b.n	8005968 <HAL_NAND_Init+0x8a>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0204 	orr.w	r2, r2, #4
 8005966:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b10      	cmp	r3, #16
 8005988:	d10a      	bne.n	80059a0 <HAL_NAND_IRQHandler+0x26>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e009      	b.n	80059b4 <HAL_NAND_IRQHandler+0x3a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d017      	beq.n	80059e8 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8b2 	bl	8005b22 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d108      	bne.n	80059d8 <HAL_NAND_IRQHandler+0x5e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	e007      	b.n	80059e8 <HAL_NAND_IRQHandler+0x6e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d10a      	bne.n	8005a06 <HAL_NAND_IRQHandler+0x8c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e009      	b.n	8005a1a <HAL_NAND_IRQHandler+0xa0>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d017      	beq.n	8005a4e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f87f 	bl	8005b22 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d108      	bne.n	8005a3e <HAL_NAND_IRQHandler+0xc4>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0202 	bic.w	r2, r2, #2
 8005a3a:	605a      	str	r2, [r3, #4]
 8005a3c:	e007      	b.n	8005a4e <HAL_NAND_IRQHandler+0xd4>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0202 	bic.w	r2, r2, #2
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d10a      	bne.n	8005a6c <HAL_NAND_IRQHandler+0xf2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e009      	b.n	8005a80 <HAL_NAND_IRQHandler+0x106>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d017      	beq.n	8005ab4 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f84c 	bl	8005b22 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d108      	bne.n	8005aa4 <HAL_NAND_IRQHandler+0x12a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0204 	bic.w	r2, r2, #4
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	e007      	b.n	8005ab4 <HAL_NAND_IRQHandler+0x13a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d10a      	bne.n	8005ad2 <HAL_NAND_IRQHandler+0x158>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	e009      	b.n	8005ae6 <HAL_NAND_IRQHandler+0x16c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d017      	beq.n	8005b1a <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f819 	bl	8005b22 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d108      	bne.n	8005b0a <HAL_NAND_IRQHandler+0x190>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b06:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005b08:	e007      	b.n	8005b1a <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer,
                                         uint32_t NumPageToWrite)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b08c      	sub	sp, #48	; 0x30
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d101      	bne.n	8005b60 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e13e      	b.n	8005dde <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 8137 	bne.w	8005ddc <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_NAND_Write_Page_8b+0x46>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e130      	b.n	8005dde <HAL_NAND_Write_Page_8b+0x2a8>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8005b8c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005b90:	61bb      	str	r3, [r7, #24]
#endif

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	4619      	mov	r1, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	889b      	ldrh	r3, [r3, #4]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	885b      	ldrh	r3, [r3, #2]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	fb00 f303 	mul.w	r3, r0, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005bba:	e0f8      	b.n	8005dae <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bc6:	f3bf 8f4f 	dsb	sy
}
 8005bca:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bd6:	f3bf 8f4f 	dsb	sy
}
 8005bda:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be4:	d848      	bhi.n	8005c78 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf6:	d21a      	bcs.n	8005c2e <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c02:	f3bf 8f4f 	dsb	sy
}
 8005c06:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c14:	f3bf 8f4f 	dsb	sy
}
 8005c18:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	0a1a      	lsrs	r2, r3, #8
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c28:	f3bf 8f4f 	dsb	sy
}
 8005c2c:	e07d      	b.n	8005d2a <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c38:	f3bf 8f4f 	dsb	sy
}
 8005c3c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c4a:	f3bf 8f4f 	dsb	sy
}
 8005c4e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	0a1a      	lsrs	r2, r3, #8
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c5e:	f3bf 8f4f 	dsb	sy
}
 8005c62:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	0c1a      	lsrs	r2, r3, #16
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c72:	f3bf 8f4f 	dsb	sy
}
 8005c76:	e058      	b.n	8005d2a <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c88:	d222      	bcs.n	8005cd0 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c94:	f3bf 8f4f 	dsb	sy
}
 8005c98:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca4:	f3bf 8f4f 	dsb	sy
}
 8005ca8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cb6:	f3bf 8f4f 	dsb	sy
}
 8005cba:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	0a1a      	lsrs	r2, r3, #8
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cca:	f3bf 8f4f 	dsb	sy
}
 8005cce:	e02c      	b.n	8005d2a <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cda:	f3bf 8f4f 	dsb	sy
}
 8005cde:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cea:	f3bf 8f4f 	dsb	sy
}
 8005cee:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cfc:	f3bf 8f4f 	dsb	sy
}
 8005d00:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	0a1a      	lsrs	r2, r3, #8
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d10:	f3bf 8f4f 	dsb	sy
}
 8005d14:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	0c1a      	lsrs	r2, r3, #16
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d24:	f3bf 8f4f 	dsb	sy
}
 8005d28:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2e:	e00c      	b.n	8005d4a <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
        buff++;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d3e:	f3bf 8f4f 	dsb	sy
}
 8005d42:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	3301      	adds	r3, #1
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d3ed      	bcc.n	8005d30 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d5e:	f3bf 8f4f 	dsb	sy
}
 8005d62:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005d64:	f7fe fed8 	bl	8004b18 <HAL_GetTick>
 8005d68:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005d6a:	e011      	b.n	8005d90 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005d6c:	f7fe fed4 	bl	8004b18 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d7a:	d909      	bls.n	8005d90 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2203      	movs	r2, #3
 8005d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e026      	b.n	8005dde <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f85f 	bl	8005e54 <HAL_NAND_Read_Status>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d1e7      	bne.n	8005d6c <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	3301      	adds	r3, #1
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Decrement pages to write */
      nbpages--;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	3301      	adds	r3, #1
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <HAL_NAND_Write_Page_8b+0x292>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f4ff aefa 	bcc.w	8005bbc <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e000      	b.n	8005dde <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3730      	adds	r7, #48	; 0x30
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d101      	bne.n	8005dfe <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e018      	b.n	8005e30 <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d111      	bne.n	8005e2e <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f003 fbd5 	bl	80095cc <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e46:	b2db      	uxtb	r3, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005e5c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005e60:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e68:	2270      	movs	r2, #112	; 0x70
 8005e6a:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e007      	b.n	8005e92 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	e000      	b.n	8005e92 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005e90:	2300      	movs	r3, #0
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e267      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d075      	beq.n	8005faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ebe:	4b88      	ldr	r3, [pc, #544]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eca:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d112      	bne.n	8005efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed6:	4b82      	ldr	r3, [pc, #520]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee2:	d10b      	bne.n	8005efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	4b7e      	ldr	r3, [pc, #504]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05b      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x108>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d157      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e242      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d106      	bne.n	8005f14 <HAL_RCC_OscConfig+0x74>
 8005f06:	4b76      	ldr	r3, [pc, #472]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a75      	ldr	r2, [pc, #468]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e01d      	b.n	8005f50 <HAL_RCC_OscConfig+0xb0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x98>
 8005f1e:	4b70      	ldr	r3, [pc, #448]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6f      	ldr	r2, [pc, #444]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	4b6d      	ldr	r3, [pc, #436]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6c      	ldr	r2, [pc, #432]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0xb0>
 8005f38:	4b69      	ldr	r3, [pc, #420]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a68      	ldr	r2, [pc, #416]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	4b66      	ldr	r3, [pc, #408]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a65      	ldr	r2, [pc, #404]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fe fdde 	bl	8004b18 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f60:	f7fe fdda 	bl	8004b18 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	; 0x64
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e207      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	4b5b      	ldr	r3, [pc, #364]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0xc0>
 8005f7e:	e014      	b.n	8005faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fe fdca 	bl	8004b18 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fe fdc6 	bl	8004b18 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	; 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e1f3      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9a:	4b51      	ldr	r3, [pc, #324]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0xe8>
 8005fa6:	e000      	b.n	8005faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d063      	beq.n	800607e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fb6:	4b4a      	ldr	r3, [pc, #296]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc2:	4b47      	ldr	r3, [pc, #284]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d11c      	bne.n	8006008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fce:	4b44      	ldr	r3, [pc, #272]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d116      	bne.n	8006008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x152>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d001      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e1c7      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff2:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4937      	ldr	r1, [pc, #220]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006006:	e03a      	b.n	800607e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d020      	beq.n	8006052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006010:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <HAL_RCC_OscConfig+0x244>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006016:	f7fe fd7f 	bl	8004b18 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601e:	f7fe fd7b 	bl	8004b18 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e1a8      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006030:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4925      	ldr	r1, [pc, #148]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]
 8006050:	e015      	b.n	800607e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006052:	4b24      	ldr	r3, [pc, #144]	; (80060e4 <HAL_RCC_OscConfig+0x244>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fe fd5e 	bl	8004b18 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006060:	f7fe fd5a 	bl	8004b18 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e187      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006072:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d036      	beq.n	80060f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <HAL_RCC_OscConfig+0x248>)
 8006094:	2201      	movs	r2, #1
 8006096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fe fd3e 	bl	8004b18 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a0:	f7fe fd3a 	bl	8004b18 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e167      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b2:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_OscConfig+0x240>)
 80060b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f0      	beq.n	80060a0 <HAL_RCC_OscConfig+0x200>
 80060be:	e01b      	b.n	80060f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c0:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <HAL_RCC_OscConfig+0x248>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c6:	f7fe fd27 	bl	8004b18 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060cc:	e00e      	b.n	80060ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ce:	f7fe fd23 	bl	8004b18 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d907      	bls.n	80060ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e150      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
 80060e0:	40023800 	.word	0x40023800
 80060e4:	42470000 	.word	0x42470000
 80060e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060ec:	4b88      	ldr	r3, [pc, #544]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80060ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ea      	bne.n	80060ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8097 	beq.w	8006234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800610a:	4b81      	ldr	r3, [pc, #516]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10f      	bne.n	8006136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	4b7d      	ldr	r3, [pc, #500]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	4a7c      	ldr	r2, [pc, #496]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006124:	6413      	str	r3, [r2, #64]	; 0x40
 8006126:	4b7a      	ldr	r3, [pc, #488]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612e:	60bb      	str	r3, [r7, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006136:	4b77      	ldr	r3, [pc, #476]	; (8006314 <HAL_RCC_OscConfig+0x474>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d118      	bne.n	8006174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006142:	4b74      	ldr	r3, [pc, #464]	; (8006314 <HAL_RCC_OscConfig+0x474>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a73      	ldr	r2, [pc, #460]	; (8006314 <HAL_RCC_OscConfig+0x474>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800614e:	f7fe fce3 	bl	8004b18 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006156:	f7fe fcdf 	bl	8004b18 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e10c      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006168:	4b6a      	ldr	r3, [pc, #424]	; (8006314 <HAL_RCC_OscConfig+0x474>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d106      	bne.n	800618a <HAL_RCC_OscConfig+0x2ea>
 800617c:	4b64      	ldr	r3, [pc, #400]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4a63      	ldr	r2, [pc, #396]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6713      	str	r3, [r2, #112]	; 0x70
 8006188:	e01c      	b.n	80061c4 <HAL_RCC_OscConfig+0x324>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b05      	cmp	r3, #5
 8006190:	d10c      	bne.n	80061ac <HAL_RCC_OscConfig+0x30c>
 8006192:	4b5f      	ldr	r3, [pc, #380]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a5e      	ldr	r2, [pc, #376]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006198:	f043 0304 	orr.w	r3, r3, #4
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
 800619e:	4b5c      	ldr	r3, [pc, #368]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4a5b      	ldr	r2, [pc, #364]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	6713      	str	r3, [r2, #112]	; 0x70
 80061aa:	e00b      	b.n	80061c4 <HAL_RCC_OscConfig+0x324>
 80061ac:	4b58      	ldr	r3, [pc, #352]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	4a57      	ldr	r2, [pc, #348]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	6713      	str	r3, [r2, #112]	; 0x70
 80061b8:	4b55      	ldr	r3, [pc, #340]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	4a54      	ldr	r2, [pc, #336]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061be:	f023 0304 	bic.w	r3, r3, #4
 80061c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fe fca4 	bl	8004b18 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d2:	e00a      	b.n	80061ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d4:	f7fe fca0 	bl	8004b18 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e0cb      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ea:	4b49      	ldr	r3, [pc, #292]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0ee      	beq.n	80061d4 <HAL_RCC_OscConfig+0x334>
 80061f6:	e014      	b.n	8006222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f8:	f7fe fc8e 	bl	8004b18 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061fe:	e00a      	b.n	8006216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fe fc8a 	bl	8004b18 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e0b5      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006216:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1ee      	bne.n	8006200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	4a38      	ldr	r2, [pc, #224]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 800622e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80a1 	beq.w	8006380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800623e:	4b34      	ldr	r3, [pc, #208]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
 8006246:	2b08      	cmp	r3, #8
 8006248:	d05c      	beq.n	8006304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d141      	bne.n	80062d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006252:	4b31      	ldr	r3, [pc, #196]	; (8006318 <HAL_RCC_OscConfig+0x478>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fe fc5e 	bl	8004b18 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006260:	f7fe fc5a 	bl	8004b18 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e087      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	4b27      	ldr	r3, [pc, #156]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f0      	bne.n	8006260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69da      	ldr	r2, [r3, #28]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	3b01      	subs	r3, #1
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	061b      	lsls	r3, r3, #24
 80062a2:	491b      	ldr	r1, [pc, #108]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_RCC_OscConfig+0x478>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ae:	f7fe fc33 	bl	8004b18 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b6:	f7fe fc2f 	bl	8004b18 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e05c      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f0      	beq.n	80062b6 <HAL_RCC_OscConfig+0x416>
 80062d4:	e054      	b.n	8006380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d6:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_RCC_OscConfig+0x478>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062dc:	f7fe fc1c 	bl	8004b18 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e4:	f7fe fc18 	bl	8004b18 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e045      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f6:	4b06      	ldr	r3, [pc, #24]	; (8006310 <HAL_RCC_OscConfig+0x470>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x444>
 8006302:	e03d      	b.n	8006380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d107      	bne.n	800631c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e038      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
 8006310:	40023800 	.word	0x40023800
 8006314:	40007000 	.word	0x40007000
 8006318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800631c:	4b1b      	ldr	r3, [pc, #108]	; (800638c <HAL_RCC_OscConfig+0x4ec>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d028      	beq.n	800637c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d121      	bne.n	800637c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006342:	429a      	cmp	r2, r3
 8006344:	d11a      	bne.n	800637c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800634c:	4013      	ands	r3, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006354:	4293      	cmp	r3, r2
 8006356:	d111      	bne.n	800637c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	3b01      	subs	r3, #1
 8006366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d107      	bne.n	800637c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d001      	beq.n	8006380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800

08006390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0cc      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a4:	4b68      	ldr	r3, [pc, #416]	; (8006548 <HAL_RCC_ClockConfig+0x1b8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d90c      	bls.n	80063cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	4b65      	ldr	r3, [pc, #404]	; (8006548 <HAL_RCC_ClockConfig+0x1b8>)
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ba:	4b63      	ldr	r3, [pc, #396]	; (8006548 <HAL_RCC_ClockConfig+0x1b8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0b8      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d020      	beq.n	800641a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e4:	4b59      	ldr	r3, [pc, #356]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4a58      	ldr	r2, [pc, #352]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063fc:	4b53      	ldr	r3, [pc, #332]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	4a52      	ldr	r2, [pc, #328]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006408:	4b50      	ldr	r3, [pc, #320]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	494d      	ldr	r1, [pc, #308]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d044      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d107      	bne.n	800643e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	4b47      	ldr	r3, [pc, #284]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d119      	bne.n	800646e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e07f      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d003      	beq.n	800644e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800644a:	2b03      	cmp	r3, #3
 800644c:	d107      	bne.n	800645e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644e:	4b3f      	ldr	r3, [pc, #252]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e06f      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645e:	4b3b      	ldr	r3, [pc, #236]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e067      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f023 0203 	bic.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	4934      	ldr	r1, [pc, #208]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	4313      	orrs	r3, r2
 800647e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006480:	f7fe fb4a 	bl	8004b18 <HAL_GetTick>
 8006484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006486:	e00a      	b.n	800649e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006488:	f7fe fb46 	bl	8004b18 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f241 3288 	movw	r2, #5000	; 0x1388
 8006496:	4293      	cmp	r3, r2
 8006498:	d901      	bls.n	800649e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e04f      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 020c 	and.w	r2, r3, #12
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d1eb      	bne.n	8006488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064b0:	4b25      	ldr	r3, [pc, #148]	; (8006548 <HAL_RCC_ClockConfig+0x1b8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d20c      	bcs.n	80064d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064be:	4b22      	ldr	r3, [pc, #136]	; (8006548 <HAL_RCC_ClockConfig+0x1b8>)
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b20      	ldr	r3, [pc, #128]	; (8006548 <HAL_RCC_ClockConfig+0x1b8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e032      	b.n	800653e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e4:	4b19      	ldr	r3, [pc, #100]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4916      	ldr	r1, [pc, #88]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	490e      	ldr	r1, [pc, #56]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	4313      	orrs	r3, r2
 8006514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006516:	f000 f821 	bl	800655c <HAL_RCC_GetSysClockFreq>
 800651a:	4602      	mov	r2, r0
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	490a      	ldr	r1, [pc, #40]	; (8006550 <HAL_RCC_ClockConfig+0x1c0>)
 8006528:	5ccb      	ldrb	r3, [r1, r3]
 800652a:	fa22 f303 	lsr.w	r3, r2, r3
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <HAL_RCC_ClockConfig+0x1c4>)
 8006530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <HAL_RCC_ClockConfig+0x1c8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe f980 	bl	800483c <HAL_InitTick>

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40023c00 	.word	0x40023c00
 800654c:	40023800 	.word	0x40023800
 8006550:	0800ffb4 	.word	0x0800ffb4
 8006554:	200000a4 	.word	0x200000a4
 8006558:	200000a8 	.word	0x200000a8

0800655c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800655c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006560:	b094      	sub	sp, #80	; 0x50
 8006562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	647b      	str	r3, [r7, #68]	; 0x44
 8006568:	2300      	movs	r3, #0
 800656a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800656c:	2300      	movs	r3, #0
 800656e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006574:	4b79      	ldr	r3, [pc, #484]	; (800675c <HAL_RCC_GetSysClockFreq+0x200>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b08      	cmp	r3, #8
 800657e:	d00d      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x40>
 8006580:	2b08      	cmp	r3, #8
 8006582:	f200 80e1 	bhi.w	8006748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x34>
 800658a:	2b04      	cmp	r3, #4
 800658c:	d003      	beq.n	8006596 <HAL_RCC_GetSysClockFreq+0x3a>
 800658e:	e0db      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006590:	4b73      	ldr	r3, [pc, #460]	; (8006760 <HAL_RCC_GetSysClockFreq+0x204>)
 8006592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006594:	e0db      	b.n	800674e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006596:	4b73      	ldr	r3, [pc, #460]	; (8006764 <HAL_RCC_GetSysClockFreq+0x208>)
 8006598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800659a:	e0d8      	b.n	800674e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800659c:	4b6f      	ldr	r3, [pc, #444]	; (800675c <HAL_RCC_GetSysClockFreq+0x200>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065a6:	4b6d      	ldr	r3, [pc, #436]	; (800675c <HAL_RCC_GetSysClockFreq+0x200>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d063      	beq.n	800667a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b2:	4b6a      	ldr	r3, [pc, #424]	; (800675c <HAL_RCC_GetSysClockFreq+0x200>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	099b      	lsrs	r3, r3, #6
 80065b8:	2200      	movs	r2, #0
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80065bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f04f 0100 	mov.w	r1, #0
 80065da:	0159      	lsls	r1, r3, #5
 80065dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e0:	0150      	lsls	r0, r2, #5
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4621      	mov	r1, r4
 80065e8:	1a51      	subs	r1, r2, r1
 80065ea:	6139      	str	r1, [r7, #16]
 80065ec:	4629      	mov	r1, r5
 80065ee:	eb63 0301 	sbc.w	r3, r3, r1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006600:	4659      	mov	r1, fp
 8006602:	018b      	lsls	r3, r1, #6
 8006604:	4651      	mov	r1, sl
 8006606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800660a:	4651      	mov	r1, sl
 800660c:	018a      	lsls	r2, r1, #6
 800660e:	4651      	mov	r1, sl
 8006610:	ebb2 0801 	subs.w	r8, r2, r1
 8006614:	4659      	mov	r1, fp
 8006616:	eb63 0901 	sbc.w	r9, r3, r1
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800662a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800662e:	4690      	mov	r8, r2
 8006630:	4699      	mov	r9, r3
 8006632:	4623      	mov	r3, r4
 8006634:	eb18 0303 	adds.w	r3, r8, r3
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	462b      	mov	r3, r5
 800663c:	eb49 0303 	adc.w	r3, r9, r3
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800664e:	4629      	mov	r1, r5
 8006650:	024b      	lsls	r3, r1, #9
 8006652:	4621      	mov	r1, r4
 8006654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006658:	4621      	mov	r1, r4
 800665a:	024a      	lsls	r2, r1, #9
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006662:	2200      	movs	r2, #0
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
 8006666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800666c:	f7fa f95e 	bl	800092c <__aeabi_uldivmod>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4613      	mov	r3, r2
 8006676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006678:	e058      	b.n	800672c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800667a:	4b38      	ldr	r3, [pc, #224]	; (800675c <HAL_RCC_GetSysClockFreq+0x200>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	2200      	movs	r2, #0
 8006682:	4618      	mov	r0, r3
 8006684:	4611      	mov	r1, r2
 8006686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006694:	4642      	mov	r2, r8
 8006696:	464b      	mov	r3, r9
 8006698:	f04f 0000 	mov.w	r0, #0
 800669c:	f04f 0100 	mov.w	r1, #0
 80066a0:	0159      	lsls	r1, r3, #5
 80066a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066a6:	0150      	lsls	r0, r2, #5
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4641      	mov	r1, r8
 80066ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80066b2:	4649      	mov	r1, r9
 80066b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066cc:	ebb2 040a 	subs.w	r4, r2, sl
 80066d0:	eb63 050b 	sbc.w	r5, r3, fp
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	00eb      	lsls	r3, r5, #3
 80066de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066e2:	00e2      	lsls	r2, r4, #3
 80066e4:	4614      	mov	r4, r2
 80066e6:	461d      	mov	r5, r3
 80066e8:	4643      	mov	r3, r8
 80066ea:	18e3      	adds	r3, r4, r3
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	464b      	mov	r3, r9
 80066f0:	eb45 0303 	adc.w	r3, r5, r3
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006702:	4629      	mov	r1, r5
 8006704:	028b      	lsls	r3, r1, #10
 8006706:	4621      	mov	r1, r4
 8006708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800670c:	4621      	mov	r1, r4
 800670e:	028a      	lsls	r2, r1, #10
 8006710:	4610      	mov	r0, r2
 8006712:	4619      	mov	r1, r3
 8006714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006716:	2200      	movs	r2, #0
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	61fa      	str	r2, [r7, #28]
 800671c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006720:	f7fa f904 	bl	800092c <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4613      	mov	r3, r2
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <HAL_RCC_GetSysClockFreq+0x200>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	3301      	adds	r3, #1
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800673c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800673e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006746:	e002      	b.n	800674e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_RCC_GetSysClockFreq+0x204>)
 800674a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800674c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800674e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006750:	4618      	mov	r0, r3
 8006752:	3750      	adds	r7, #80	; 0x50
 8006754:	46bd      	mov	sp, r7
 8006756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	00f42400 	.word	0x00f42400
 8006764:	007a1200 	.word	0x007a1200

08006768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <HAL_RCC_GetHCLKFreq+0x14>)
 800676e:	681b      	ldr	r3, [r3, #0]
}
 8006770:	4618      	mov	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	200000a4 	.word	0x200000a4

08006780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006784:	f7ff fff0 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0a9b      	lsrs	r3, r3, #10
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4903      	ldr	r1, [pc, #12]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40023800 	.word	0x40023800
 80067a4:	0800ffc4 	.word	0x0800ffc4

080067a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067ac:	f7ff ffdc 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	0b5b      	lsrs	r3, r3, #13
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	4903      	ldr	r1, [pc, #12]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40023800 	.word	0x40023800
 80067cc:	0800ffc4 	.word	0x0800ffc4

080067d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	220f      	movs	r2, #15
 80067de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_RCC_GetClockConfig+0x5c>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0203 	and.w	r2, r3, #3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <HAL_RCC_GetClockConfig+0x5c>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <HAL_RCC_GetClockConfig+0x5c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCC_GetClockConfig+0x5c>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	08db      	lsrs	r3, r3, #3
 800680a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <HAL_RCC_GetClockConfig+0x60>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0207 	and.w	r2, r3, #7
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	40023c00 	.word	0x40023c00

08006834 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006858:	2b00      	cmp	r3, #0
 800685a:	d035      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800685c:	4b62      	ldr	r3, [pc, #392]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006862:	f7fe f959 	bl	8004b18 <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006868:	e008      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800686a:	f7fe f955 	bl	8004b18 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e0b0      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800687c:	4b5b      	ldr	r3, [pc, #364]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f0      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	019a      	lsls	r2, r3, #6
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	071b      	lsls	r3, r3, #28
 8006894:	4955      	ldr	r1, [pc, #340]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800689c:	4b52      	ldr	r3, [pc, #328]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068a2:	f7fe f939 	bl	8004b18 <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068a8:	e008      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068aa:	f7fe f935 	bl	8004b18 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e090      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068bc:	4b4b      	ldr	r3, [pc, #300]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8083 	beq.w	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	4b44      	ldr	r3, [pc, #272]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	4a43      	ldr	r2, [pc, #268]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e4:	6413      	str	r3, [r2, #64]	; 0x40
 80068e6:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068f2:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a3e      	ldr	r2, [pc, #248]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068fe:	f7fe f90b 	bl	8004b18 <HAL_GetTick>
 8006902:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006904:	e008      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006906:	f7fe f907 	bl	8004b18 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e062      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006918:	4b35      	ldr	r3, [pc, #212]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006924:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d02f      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	429a      	cmp	r2, r3
 8006940:	d028      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006942:	4b2a      	ldr	r3, [pc, #168]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800694c:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006952:	4b28      	ldr	r3, [pc, #160]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006958:	4a24      	ldr	r2, [pc, #144]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800695e:	4b23      	ldr	r3, [pc, #140]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d114      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800696a:	f7fe f8d5 	bl	8004b18 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006970:	e00a      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006972:	f7fe f8d1 	bl	8004b18 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006980:	4293      	cmp	r3, r2
 8006982:	d901      	bls.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e02a      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006988:	4b18      	ldr	r3, [pc, #96]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0ee      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a0:	d10d      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069a2:	4b12      	ldr	r3, [pc, #72]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b6:	490d      	ldr	r1, [pc, #52]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	608b      	str	r3, [r1, #8]
 80069bc:	e005      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069c8:	6093      	str	r3, [r2, #8]
 80069ca:	4b08      	ldr	r3, [pc, #32]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d6:	4905      	ldr	r1, [pc, #20]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	42470068 	.word	0x42470068
 80069ec:	40023800 	.word	0x40023800
 80069f0:	40007000 	.word	0x40007000
 80069f4:	42470e40 	.word	0x42470e40

080069f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e066      	b.n	8006adc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7f5b      	ldrb	r3, [r3, #29]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fd fd4c 	bl	80044bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	22ca      	movs	r2, #202	; 0xca
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2253      	movs	r2, #83	; 0x53
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa45 	bl	8006eca <RTC_EnterInitMode>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d12c      	bne.n	8006aa4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6899      	ldr	r1, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68d2      	ldr	r2, [r2, #12]
 8006a84:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6919      	ldr	r1, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	041a      	lsls	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa4c 	bl	8006f38 <RTC_ExitInitMode>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d113      	bne.n	8006ad2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	7f1b      	ldrb	r3, [r3, #28]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_RTC_SetTime+0x1c>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e087      	b.n	8006c10 <HAL_RTC_SetTime+0x12c>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d126      	bne.n	8006b60 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fa29 	bl	8006f82 <RTC_ByteToBcd2>
 8006b30:	4603      	mov	r3, r0
 8006b32:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fa22 	bl	8006f82 <RTC_ByteToBcd2>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b42:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fa1a 	bl	8006f82 <RTC_ByteToBcd2>
 8006b4e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b50:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	78db      	ldrb	r3, [r3, #3]
 8006b58:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e018      	b.n	8006b92 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2200      	movs	r2, #0
 8006b72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b80:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	78db      	ldrb	r3, [r3, #3]
 8006b8c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	22ca      	movs	r2, #202	; 0xca
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2253      	movs	r2, #83	; 0x53
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f991 	bl	8006eca <RTC_EnterInitMode>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006bac:	7cfb      	ldrb	r3, [r7, #19]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d120      	bne.n	8006bf4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bbc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bc0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6899      	ldr	r1, [r3, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f9a4 	bl	8006f38 <RTC_ExitInitMode>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006bf4:	7cfb      	ldrb	r3, [r7, #19]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	22ff      	movs	r2, #255	; 0xff
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	771a      	strb	r2, [r3, #28]

  return status;
 8006c0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd90      	pop	{r4, r7, pc}

08006c18 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	0c1b      	lsrs	r3, r3, #16
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	0a1b      	lsrs	r3, r3, #8
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	0d9b      	lsrs	r3, r3, #22
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11a      	bne.n	8006cca <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 f98f 	bl	8006fbc <RTC_Bcd2ToByte>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f986 	bl	8006fbc <RTC_Bcd2ToByte>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f97d 	bl	8006fbc <RTC_Bcd2ToByte>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cd4:	b590      	push	{r4, r7, lr}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	7f1b      	ldrb	r3, [r3, #28]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_RTC_SetDate+0x1c>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e071      	b.n	8006dd4 <HAL_RTC_SetDate+0x100>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10e      	bne.n	8006d20 <HAL_RTC_SetDate+0x4c>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	330a      	adds	r3, #10
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d11c      	bne.n	8006d60 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	78db      	ldrb	r3, [r3, #3]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f929 	bl	8006f82 <RTC_ByteToBcd2>
 8006d30:	4603      	mov	r3, r0
 8006d32:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f922 	bl	8006f82 <RTC_ByteToBcd2>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d42:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	789b      	ldrb	r3, [r3, #2]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f91a 	bl	8006f82 <RTC_ByteToBcd2>
 8006d4e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d50:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	e00e      	b.n	8006d7e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	78db      	ldrb	r3, [r3, #3]
 8006d64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	785b      	ldrb	r3, [r3, #1]
 8006d6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d6c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	22ca      	movs	r2, #202	; 0xca
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2253      	movs	r2, #83	; 0x53
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f89b 	bl	8006eca <RTC_EnterInitMode>
 8006d94:	4603      	mov	r3, r0
 8006d96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d98:	7cfb      	ldrb	r3, [r7, #19]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006da8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f8c2 	bl	8006f38 <RTC_ExitInitMode>
 8006db4:	4603      	mov	r3, r0
 8006db6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	22ff      	movs	r2, #255	; 0xff
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	771a      	strb	r2, [r3, #28]

  return status;
 8006dd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd90      	pop	{r4, r7, pc}

08006ddc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006df6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	0c1b      	lsrs	r3, r3, #16
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	0b5b      	lsrs	r3, r3, #13
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d11a      	bne.n	8006e70 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	78db      	ldrb	r3, [r3, #3]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f8bc 	bl	8006fbc <RTC_Bcd2ToByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 f8b3 	bl	8006fbc <RTC_Bcd2ToByte>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	789b      	ldrb	r3, [r3, #2]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f8aa 	bl	8006fbc <RTC_Bcd2ToByte>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e94:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e96:	f7fd fe3f 	bl	8004b18 <HAL_GetTick>
 8006e9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e9c:	e009      	b.n	8006eb2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e9e:	f7fd fe3b 	bl	8004b18 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eac:	d901      	bls.n	8006eb2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e007      	b.n	8006ec2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ee      	beq.n	8006e9e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d122      	bne.n	8006f2e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ef6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef8:	f7fd fe0e 	bl	8004b18 <HAL_GetTick>
 8006efc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006efe:	e00c      	b.n	8006f1a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f00:	f7fd fe0a 	bl	8004b18 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0e:	d904      	bls.n	8006f1a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2204      	movs	r2, #4
 8006f14:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <RTC_EnterInitMode+0x64>
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d1e8      	bne.n	8006f00 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f52:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff ff89 	bl	8006e7a <HAL_RTC_WaitForSynchro>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	4603      	mov	r3, r0
 8006f8a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006f90:	e005      	b.n	8006f9e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	3301      	adds	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	3b0a      	subs	r3, #10
 8006f9c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	2b09      	cmp	r3, #9
 8006fa2:	d8f6      	bhi.n	8006f92 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	b2db      	uxtb	r3, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	0092      	lsls	r2, r2, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	b2db      	uxtb	r3, r3
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e07b      	b.n	80070fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b00      	cmp	r3, #0
 800700c:	d108      	bne.n	8007020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007016:	d009      	beq.n	800702c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	61da      	str	r2, [r3, #28]
 800701e:	e005      	b.n	800702c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fd fa64 	bl	8004514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b0:	ea42 0103 	orr.w	r1, r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	f003 0104 	and.w	r1, r3, #4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	f003 0210 	and.w	r2, r3, #16
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b088      	sub	sp, #32
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_SPI_Transmit+0x22>
 8007124:	2302      	movs	r3, #2
 8007126:	e126      	b.n	8007376 <HAL_SPI_Transmit+0x270>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007130:	f7fd fcf2 	bl	8004b18 <HAL_GetTick>
 8007134:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d002      	beq.n	800714c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007146:	2302      	movs	r3, #2
 8007148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800714a:	e10b      	b.n	8007364 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_SPI_Transmit+0x52>
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800715c:	e102      	b.n	8007364 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2203      	movs	r2, #3
 8007162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	88fa      	ldrh	r2, [r7, #6]
 8007176:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a4:	d10f      	bne.n	80071c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d007      	beq.n	80071e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ec:	d14b      	bne.n	8007286 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_SPI_Transmit+0xf6>
 80071f6:	8afb      	ldrh	r3, [r7, #22]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d13e      	bne.n	800727a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	881a      	ldrh	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	1c9a      	adds	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007220:	e02b      	b.n	800727a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d112      	bne.n	8007256 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	881a      	ldrh	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	1c9a      	adds	r2, r3, #2
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	86da      	strh	r2, [r3, #54]	; 0x36
 8007254:	e011      	b.n	800727a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007256:	f7fd fc5f 	bl	8004b18 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d803      	bhi.n	800726e <HAL_SPI_Transmit+0x168>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726c:	d102      	bne.n	8007274 <HAL_SPI_Transmit+0x16e>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007278:	e074      	b.n	8007364 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1ce      	bne.n	8007222 <HAL_SPI_Transmit+0x11c>
 8007284:	e04c      	b.n	8007320 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_SPI_Transmit+0x18e>
 800728e:	8afb      	ldrh	r3, [r7, #22]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d140      	bne.n	8007316 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072ba:	e02c      	b.n	8007316 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d113      	bne.n	80072f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	7812      	ldrb	r2, [r2, #0]
 80072d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80072f0:	e011      	b.n	8007316 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f2:	f7fd fc11 	bl	8004b18 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d803      	bhi.n	800730a <HAL_SPI_Transmit+0x204>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007308:	d102      	bne.n	8007310 <HAL_SPI_Transmit+0x20a>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007314:	e026      	b.n	8007364 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1cd      	bne.n	80072bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fb13 	bl	8007950 <SPI_EndRxTxTransaction>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e000      	b.n	8007364 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007362:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007374:	7ffb      	ldrb	r3, [r7, #31]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_SPI_Transmit_DMA+0x20>
 800739c:	2302      	movs	r3, #2
 800739e:	e09b      	b.n	80074d8 <HAL_SPI_Transmit_DMA+0x158>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d002      	beq.n	80073ba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
 80073b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073b8:	e089      	b.n	80074ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_SPI_Transmit_DMA+0x46>
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073ca:	e080      	b.n	80074ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2203      	movs	r2, #3
 80073d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007412:	d10f      	bne.n	8007434 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007422:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007432:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007438:	4a29      	ldr	r2, [pc, #164]	; (80074e0 <HAL_SPI_Transmit_DMA+0x160>)
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007440:	4a28      	ldr	r2, [pc, #160]	; (80074e4 <HAL_SPI_Transmit_DMA+0x164>)
 8007442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007448:	4a27      	ldr	r2, [pc, #156]	; (80074e8 <HAL_SPI_Transmit_DMA+0x168>)
 800744a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	2200      	movs	r2, #0
 8007452:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	4619      	mov	r1, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800746c:	f7fd fd14 	bl	8004e98 <HAL_DMA_Start_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	f043 0210 	orr.w	r2, r3, #16
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800748e:	e01e      	b.n	80074ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d007      	beq.n	80074ae <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ac:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0220 	orr.w	r2, r2, #32
 80074bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0202 	orr.w	r2, r2, #2
 80074cc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	080077bd 	.word	0x080077bd
 80074e4:	08007715 	.word	0x08007715
 80074e8:	080077d9 	.word	0x080077d9

080074ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10f      	bne.n	8007530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	099b      	lsrs	r3, r3, #6
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
    return;
 800752e:	e0d7      	b.n	80076e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <HAL_SPI_IRQHandler+0x66>
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	09db      	lsrs	r3, r3, #7
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
    return;
 8007550:	e0c6      	b.n	80076e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10c      	bne.n	8007578 <HAL_SPI_IRQHandler+0x8c>
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	099b      	lsrs	r3, r3, #6
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 80b4 	beq.w	80076e0 <HAL_SPI_IRQHandler+0x1f4>
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80ad 	beq.w	80076e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	099b      	lsrs	r3, r3, #6
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d023      	beq.n	80075da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b03      	cmp	r3, #3
 800759c:	d011      	beq.n	80075c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	f043 0204 	orr.w	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	e00b      	b.n	80075da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075c2:	2300      	movs	r3, #0
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	693b      	ldr	r3, [r7, #16]
        return;
 80075d8:	e082      	b.n	80076e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d014      	beq.n	8007610 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f043 0201 	orr.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00c      	beq.n	8007636 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	f043 0208 	orr.w	r2, r3, #8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007628:	2300      	movs	r3, #0
 800762a:	60bb      	str	r3, [r7, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04f      	beq.n	80076de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800764c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <HAL_SPI_IRQHandler+0x17e>
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d034      	beq.n	80076d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0203 	bic.w	r2, r2, #3
 8007678:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d011      	beq.n	80076a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007686:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <HAL_SPI_IRQHandler+0x1fc>)
 8007688:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768e:	4618      	mov	r0, r3
 8007690:	f7fd fcca 	bl	8005028 <HAL_DMA_Abort_IT>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d016      	beq.n	80076dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b2:	4a0d      	ldr	r2, [pc, #52]	; (80076e8 <HAL_SPI_IRQHandler+0x1fc>)
 80076b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fd fcb4 	bl	8005028 <HAL_DMA_Abort_IT>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80076d2:	e003      	b.n	80076dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f813 	bl	8007700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80076da:	e000      	b.n	80076de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80076dc:	bf00      	nop
    return;
 80076de:	bf00      	nop
  }
}
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	08007819 	.word	0x08007819

080076ec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007722:	f7fd f9f9 	bl	8004b18 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007736:	d03b      	beq.n	80077b0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0220 	bic.w	r2, r2, #32
 8007746:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0202 	bic.w	r2, r2, #2
 8007756:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	2164      	movs	r1, #100	; 0x64
 800775c:	6978      	ldr	r0, [r7, #20]
 800775e:	f000 f8f7 	bl	8007950 <SPI_EndRxTxTransaction>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776c:	f043 0220 	orr.w	r2, r3, #32
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2200      	movs	r2, #0
 8007796:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80077a8:	6978      	ldr	r0, [r7, #20]
 80077aa:	f7ff ffa9 	bl	8007700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80077ae:	e002      	b.n	80077b6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80077b0:	6978      	ldr	r0, [r7, #20]
 80077b2:	f7fb f93d 	bl	8002a30 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff ff8e 	bl	80076ec <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0203 	bic.w	r2, r2, #3
 80077f4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f043 0210 	orr.w	r2, r3, #16
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff ff78 	bl	8007700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff ff64 	bl	8007700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007850:	f7fd f962 	bl	8004b18 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	4413      	add	r3, r2
 800785e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007860:	f7fd f95a 	bl	8004b18 <HAL_GetTick>
 8007864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007866:	4b39      	ldr	r3, [pc, #228]	; (800794c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	015b      	lsls	r3, r3, #5
 800786c:	0d1b      	lsrs	r3, r3, #20
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	fb02 f303 	mul.w	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007876:	e054      	b.n	8007922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787e:	d050      	beq.n	8007922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007880:	f7fd f94a 	bl	8004b18 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	429a      	cmp	r2, r3
 800788e:	d902      	bls.n	8007896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d13d      	bne.n	8007912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ae:	d111      	bne.n	80078d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b8:	d004      	beq.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c2:	d107      	bne.n	80078d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078dc:	d10f      	bne.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e017      	b.n	8007942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	3b01      	subs	r3, #1
 8007920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4013      	ands	r3, r2
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	429a      	cmp	r2, r3
 8007930:	bf0c      	ite	eq
 8007932:	2301      	moveq	r3, #1
 8007934:	2300      	movne	r3, #0
 8007936:	b2db      	uxtb	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	429a      	cmp	r2, r3
 800793e:	d19b      	bne.n	8007878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200000a4 	.word	0x200000a4

08007950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800795c:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <SPI_EndRxTxTransaction+0x7c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <SPI_EndRxTxTransaction+0x80>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	0d5b      	lsrs	r3, r3, #21
 8007968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800796c:	fb02 f303 	mul.w	r3, r2, r3
 8007970:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800797a:	d112      	bne.n	80079a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ff5a 	bl	8007840 <SPI_WaitFlagStateUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d016      	beq.n	80079c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e00f      	b.n	80079c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d0f2      	beq.n	80079a2 <SPI_EndRxTxTransaction+0x52>
 80079bc:	e000      	b.n	80079c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80079be:	bf00      	nop
  }

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200000a4 	.word	0x200000a4
 80079d0:	165e9f81 	.word	0x165e9f81

080079d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e041      	b.n	8007a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fc fe16 	bl	800462c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f000 fa96 	bl	8007f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e04e      	b.n	8007b2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a23      	ldr	r2, [pc, #140]	; (8007b38 <HAL_TIM_Base_Start_IT+0xc4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d022      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d01d      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <HAL_TIM_Base_Start_IT+0xc8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d018      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d013      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00e      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <HAL_TIM_Base_Start_IT+0xd4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <HAL_TIM_Base_Start_IT+0xdc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d111      	bne.n	8007b18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b06      	cmp	r3, #6
 8007b04:	d010      	beq.n	8007b28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0201 	orr.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b16:	e007      	b.n	8007b28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40010000 	.word	0x40010000
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40010400 	.word	0x40010400
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40001800 	.word	0x40001800

08007b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d122      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d11b      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0202 	mvn.w	r2, #2
 8007b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9b5 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e005      	b.n	8007baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9a7 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f9b8 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d122      	bne.n	8007c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d11b      	bne.n	8007c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0204 	mvn.w	r2, #4
 8007bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f98b 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e005      	b.n	8007bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f97d 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f98e 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	d122      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d11b      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0208 	mvn.w	r2, #8
 8007c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f961 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007c44:	e005      	b.n	8007c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f953 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f964 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d122      	bne.n	8007cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d11b      	bne.n	8007cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0210 	mvn.w	r2, #16
 8007c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2208      	movs	r2, #8
 8007c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f937 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007c98:	e005      	b.n	8007ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f929 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f93a 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d107      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0201 	mvn.w	r2, #1
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fb ff92 	bl	8003bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d10e      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf0:	2b80      	cmp	r3, #128	; 0x80
 8007cf2:	d107      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fae0 	bl	80082c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d10e      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	d107      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8ff 	bl	8007f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0320 	and.w	r3, r3, #32
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d10e      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d107      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0220 	mvn.w	r2, #32
 8007d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 faaa 	bl	80082b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_TIM_ConfigClockSource+0x1c>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e0b4      	b.n	8007eea <HAL_TIM_ConfigClockSource+0x186>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db8:	d03e      	beq.n	8007e38 <HAL_TIM_ConfigClockSource+0xd4>
 8007dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbe:	f200 8087 	bhi.w	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc6:	f000 8086 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x172>
 8007dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dce:	d87f      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b70      	cmp	r3, #112	; 0x70
 8007dd2:	d01a      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0xa6>
 8007dd4:	2b70      	cmp	r3, #112	; 0x70
 8007dd6:	d87b      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd8:	2b60      	cmp	r3, #96	; 0x60
 8007dda:	d050      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x11a>
 8007ddc:	2b60      	cmp	r3, #96	; 0x60
 8007dde:	d877      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007de0:	2b50      	cmp	r3, #80	; 0x50
 8007de2:	d03c      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0xfa>
 8007de4:	2b50      	cmp	r3, #80	; 0x50
 8007de6:	d873      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d058      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x13a>
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d86f      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	d064      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007df4:	2b30      	cmp	r3, #48	; 0x30
 8007df6:	d86b      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d060      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d867      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d05c      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d05a      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007e08:	e062      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6899      	ldr	r1, [r3, #8]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f000 f9ad 	bl	8008178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	609a      	str	r2, [r3, #8]
      break;
 8007e36:	e04f      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	6899      	ldr	r1, [r3, #8]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f000 f996 	bl	8008178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e5a:	609a      	str	r2, [r3, #8]
      break;
 8007e5c:	e03c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f000 f90a 	bl	8008084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2150      	movs	r1, #80	; 0x50
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f963 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007e7c:	e02c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6859      	ldr	r1, [r3, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f000 f929 	bl	80080e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2160      	movs	r1, #96	; 0x60
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f953 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007e9c:	e01c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6859      	ldr	r1, [r3, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f000 f8ea 	bl	8008084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2140      	movs	r1, #64	; 0x40
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f943 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007ebc:	e00c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f000 f93a 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007ece:	e003      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed4:	e000      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a40      	ldr	r2, [pc, #256]	; (8008058 <TIM_Base_SetConfig+0x114>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d013      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f62:	d00f      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a3d      	ldr	r2, [pc, #244]	; (800805c <TIM_Base_SetConfig+0x118>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3c      	ldr	r2, [pc, #240]	; (8008060 <TIM_Base_SetConfig+0x11c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3b      	ldr	r2, [pc, #236]	; (8008064 <TIM_Base_SetConfig+0x120>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3a      	ldr	r2, [pc, #232]	; (8008068 <TIM_Base_SetConfig+0x124>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d108      	bne.n	8007f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2f      	ldr	r2, [pc, #188]	; (8008058 <TIM_Base_SetConfig+0x114>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d02b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa4:	d027      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2c      	ldr	r2, [pc, #176]	; (800805c <TIM_Base_SetConfig+0x118>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d023      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2b      	ldr	r2, [pc, #172]	; (8008060 <TIM_Base_SetConfig+0x11c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01f      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2a      	ldr	r2, [pc, #168]	; (8008064 <TIM_Base_SetConfig+0x120>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a29      	ldr	r2, [pc, #164]	; (8008068 <TIM_Base_SetConfig+0x124>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d017      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a28      	ldr	r2, [pc, #160]	; (800806c <TIM_Base_SetConfig+0x128>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a27      	ldr	r2, [pc, #156]	; (8008070 <TIM_Base_SetConfig+0x12c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00f      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a26      	ldr	r2, [pc, #152]	; (8008074 <TIM_Base_SetConfig+0x130>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a25      	ldr	r2, [pc, #148]	; (8008078 <TIM_Base_SetConfig+0x134>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d007      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a24      	ldr	r2, [pc, #144]	; (800807c <TIM_Base_SetConfig+0x138>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a23      	ldr	r2, [pc, #140]	; (8008080 <TIM_Base_SetConfig+0x13c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d108      	bne.n	8008008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a0a      	ldr	r2, [pc, #40]	; (8008058 <TIM_Base_SetConfig+0x114>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_Base_SetConfig+0xf8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <TIM_Base_SetConfig+0x124>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d103      	bne.n	8008044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	615a      	str	r2, [r3, #20]
}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	40010400 	.word	0x40010400
 800806c:	40014000 	.word	0x40014000
 8008070:	40014400 	.word	0x40014400
 8008074:	40014800 	.word	0x40014800
 8008078:	40001800 	.word	0x40001800
 800807c:	40001c00 	.word	0x40001c00
 8008080:	40002000 	.word	0x40002000

08008084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 030a 	bic.w	r3, r3, #10
 80080c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0210 	bic.w	r2, r3, #16
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800811e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	621a      	str	r2, [r3, #32]
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	f043 0307 	orr.w	r3, r3, #7
 8008164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	609a      	str	r2, [r3, #8]
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	021a      	lsls	r2, r3, #8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	431a      	orrs	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4313      	orrs	r3, r2
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	609a      	str	r2, [r3, #8]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e05a      	b.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a21      	ldr	r2, [pc, #132]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d022      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d01d      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d018      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1a      	ldr	r2, [pc, #104]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00e      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d004      	beq.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a15      	ldr	r2, [pc, #84]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d10c      	bne.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4313      	orrs	r3, r2
 800826a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40010000 	.word	0x40010000
 8008298:	40000400 	.word	0x40000400
 800829c:	40000800 	.word	0x40000800
 80082a0:	40000c00 	.word	0x40000c00
 80082a4:	40010400 	.word	0x40010400
 80082a8:	40014000 	.word	0x40014000
 80082ac:	40001800 	.word	0x40001800

080082b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e03f      	b.n	800836a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fc f9ba 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2224      	movs	r2, #36	; 0x24
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800831a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fe2b 	bl	8008f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	4613      	mov	r3, r2
 800837e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b20      	cmp	r3, #32
 800838a:	d11d      	bne.n	80083c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_UART_Receive_IT+0x26>
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e016      	b.n	80083ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_UART_Receive_IT+0x38>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e00f      	b.n	80083ca <HAL_UART_Receive_IT+0x58>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	461a      	mov	r2, r3
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fbd9 	bl	8008b76 <UART_Start_Receive_IT>
 80083c4:	4603      	mov	r3, r0
 80083c6:	e000      	b.n	80083ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083c8:	2302      	movs	r3, #2
  }
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08c      	sub	sp, #48	; 0x30
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d165      	bne.n	80084ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_UART_Transmit_DMA+0x26>
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e05e      	b.n	80084bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_UART_Transmit_DMA+0x38>
 8008408:	2302      	movs	r3, #2
 800840a:	e057      	b.n	80084bc <HAL_UART_Transmit_DMA+0xe8>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2221      	movs	r2, #33	; 0x21
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	4a22      	ldr	r2, [pc, #136]	; (80084c4 <HAL_UART_Transmit_DMA+0xf0>)
 800843a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	4a21      	ldr	r2, [pc, #132]	; (80084c8 <HAL_UART_Transmit_DMA+0xf4>)
 8008442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	4a20      	ldr	r2, [pc, #128]	; (80084cc <HAL_UART_Transmit_DMA+0xf8>)
 800844a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008450:	2200      	movs	r2, #0
 8008452:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008454:	f107 0308 	add.w	r3, r7, #8
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3304      	adds	r3, #4
 8008468:	461a      	mov	r2, r3
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	f7fc fd14 	bl	8004e98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008478:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3314      	adds	r3, #20
 8008488:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	617b      	str	r3, [r7, #20]
   return(result);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	62bb      	str	r3, [r7, #40]	; 0x28
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a2:	627a      	str	r2, [r7, #36]	; 0x24
 80084a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6a39      	ldr	r1, [r7, #32]
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e5      	bne.n	8008482 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e000      	b.n	80084bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80084ba:	2302      	movs	r3, #2
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3730      	adds	r7, #48	; 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	08008a2d 	.word	0x08008a2d
 80084c8:	08008ac7 	.word	0x08008ac7
 80084cc:	08008ae3 	.word	0x08008ae3

080084d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b0ba      	sub	sp, #232	; 0xe8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800850e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10f      	bne.n	8008536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <HAL_UART_IRQHandler+0x66>
 8008522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fc66 	bl	8008e00 <UART_Receive_IT>
      return;
 8008534:	e256      	b.n	80089e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 80de 	beq.w	80086fc <HAL_UART_IRQHandler+0x22c>
 8008540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800854c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008550:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80d1 	beq.w	80086fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_UART_IRQHandler+0xae>
 8008566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f043 0201 	orr.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_UART_IRQHandler+0xd2>
 800858a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	f043 0202 	orr.w	r2, r3, #2
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <HAL_UART_IRQHandler+0xf6>
 80085ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f043 0204 	orr.w	r2, r3, #4
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d011      	beq.n	80085f6 <HAL_UART_IRQHandler+0x126>
 80085d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f043 0208 	orr.w	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 81ed 	beq.w	80089da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d008      	beq.n	800861e <HAL_UART_IRQHandler+0x14e>
 800860c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fbf1 	bl	8008e00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	bf0c      	ite	eq
 800862c:	2301      	moveq	r3, #1
 800862e:	2300      	movne	r3, #0
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f003 0308 	and.w	r3, r3, #8
 800863e:	2b00      	cmp	r3, #0
 8008640:	d103      	bne.n	800864a <HAL_UART_IRQHandler+0x17a>
 8008642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d04f      	beq.n	80086ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 faf9 	bl	8008c42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b40      	cmp	r3, #64	; 0x40
 800865c:	d141      	bne.n	80086e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008674:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800868a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800868e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d9      	bne.n	800865e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d013      	beq.n	80086da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	4a7d      	ldr	r2, [pc, #500]	; (80088ac <HAL_UART_IRQHandler+0x3dc>)
 80086b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fc fcb2 	bl	8005028 <HAL_DMA_Abort_IT>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d016      	beq.n	80086f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e00e      	b.n	80086f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f990 	bl	8008a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e0:	e00a      	b.n	80086f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f98c 	bl	8008a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	e006      	b.n	80086f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f988 	bl	8008a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80086f6:	e170      	b.n	80089da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	bf00      	nop
    return;
 80086fa:	e16e      	b.n	80089da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	2b01      	cmp	r3, #1
 8008702:	f040 814a 	bne.w	800899a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870a:	f003 0310 	and.w	r3, r3, #16
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 8143 	beq.w	800899a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 813c 	beq.w	800899a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008722:	2300      	movs	r3, #0
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	f040 80b4 	bne.w	80088b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8140 	beq.w	80089de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008766:	429a      	cmp	r2, r3
 8008768:	f080 8139 	bcs.w	80089de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008772:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877e:	f000 8088 	beq.w	8008892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	330c      	adds	r3, #12
 8008788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800879c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1d9      	bne.n	8008782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3314      	adds	r3, #20
 80087d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3314      	adds	r3, #20
 80087ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e1      	bne.n	80087ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3314      	adds	r3, #20
 8008810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800881a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3314      	adds	r3, #20
 800882a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800882e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e3      	bne.n	800880a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008874:	65ba      	str	r2, [r7, #88]	; 0x58
 8008876:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800887a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e3      	bne.n	8008850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	4618      	mov	r0, r3
 800888e:	f7fc fb5b 	bl	8004f48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800889a:	b29b      	uxth	r3, r3
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	b29b      	uxth	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8b6 	bl	8008a14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088a8:	e099      	b.n	80089de <HAL_UART_IRQHandler+0x50e>
 80088aa:	bf00      	nop
 80088ac:	08008d09 	.word	0x08008d09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 808b 	beq.w	80089e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80088cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 8086 	beq.w	80089e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80088fa:	647a      	str	r2, [r7, #68]	; 0x44
 80088fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e3      	bne.n	80088d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3314      	adds	r3, #20
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	623b      	str	r3, [r7, #32]
   return(result);
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3314      	adds	r3, #20
 800892e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008932:	633a      	str	r2, [r7, #48]	; 0x30
 8008934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e3      	bne.n	800890e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	330c      	adds	r3, #12
 800895a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	60fb      	str	r3, [r7, #12]
   return(result);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0310 	bic.w	r3, r3, #16
 800896a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	330c      	adds	r3, #12
 8008974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008978:	61fa      	str	r2, [r7, #28]
 800897a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	69b9      	ldr	r1, [r7, #24]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	617b      	str	r3, [r7, #20]
   return(result);
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e3      	bne.n	8008954 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800898c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f83e 	bl	8008a14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008998:	e023      	b.n	80089e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <HAL_UART_IRQHandler+0x4ea>
 80089a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9bc 	bl	8008d30 <UART_Transmit_IT>
    return;
 80089b8:	e014      	b.n	80089e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00e      	beq.n	80089e4 <HAL_UART_IRQHandler+0x514>
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f9fc 	bl	8008dd0 <UART_EndTransmit_IT>
    return;
 80089d8:	e004      	b.n	80089e4 <HAL_UART_IRQHandler+0x514>
    return;
 80089da:	bf00      	nop
 80089dc:	e002      	b.n	80089e4 <HAL_UART_IRQHandler+0x514>
      return;
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <HAL_UART_IRQHandler+0x514>
      return;
 80089e2:	bf00      	nop
  }
}
 80089e4:	37e8      	adds	r7, #232	; 0xe8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop

080089ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b090      	sub	sp, #64	; 0x40
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d137      	bne.n	8008ab8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3314      	adds	r3, #20
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3314      	adds	r3, #20
 8008a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e5      	bne.n	8008a4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa2:	61fa      	str	r2, [r7, #28]
 8008aa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	69b9      	ldr	r1, [r7, #24]
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e5      	bne.n	8008a82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ab6:	e002      	b.n	8008abe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ab8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008aba:	f7f9 ffa3 	bl	8002a04 <HAL_UART_TxCpltCallback>
}
 8008abe:	bf00      	nop
 8008ac0:	3740      	adds	r7, #64	; 0x40
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff ff89 	bl	80089ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	bf0c      	ite	eq
 8008b02:	2301      	moveq	r3, #1
 8008b04:	2300      	movne	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b21      	cmp	r3, #33	; 0x21
 8008b14:	d108      	bne.n	8008b28 <UART_DMAError+0x46>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008b22:	68b8      	ldr	r0, [r7, #8]
 8008b24:	f000 f865 	bl	8008bf2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	bf0c      	ite	eq
 8008b36:	2301      	moveq	r3, #1
 8008b38:	2300      	movne	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b22      	cmp	r3, #34	; 0x22
 8008b48:	d108      	bne.n	8008b5c <UART_DMAError+0x7a>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2200      	movs	r2, #0
 8008b54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008b56:	68b8      	ldr	r0, [r7, #8]
 8008b58:	f000 f873 	bl	8008c42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b60:	f043 0210 	orr.w	r2, r3, #16
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b68:	68b8      	ldr	r0, [r7, #8]
 8008b6a:	f7ff ff49 	bl	8008a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	4613      	mov	r3, r2
 8008b82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2222      	movs	r2, #34	; 0x22
 8008ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695a      	ldr	r2, [r3, #20]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0201 	orr.w	r2, r2, #1
 8008bd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0220 	orr.w	r2, r2, #32
 8008be2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b089      	sub	sp, #36	; 0x24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	330c      	adds	r3, #12
 8008c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	330c      	adds	r3, #12
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	61ba      	str	r2, [r7, #24]
 8008c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6979      	ldr	r1, [r7, #20]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	613b      	str	r3, [r7, #16]
   return(result);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e5      	bne.n	8008bfa <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c36:	bf00      	nop
 8008c38:	3724      	adds	r7, #36	; 0x24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b095      	sub	sp, #84	; 0x54
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	330c      	adds	r3, #12
 8008c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c6a:	643a      	str	r2, [r7, #64]	; 0x40
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3314      	adds	r3, #20
 8008c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3314      	adds	r3, #20
 8008c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e5      	bne.n	8008c7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d119      	bne.n	8008cee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f023 0310 	bic.w	r3, r3, #16
 8008cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cda:	61ba      	str	r2, [r7, #24]
 8008cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	6979      	ldr	r1, [r7, #20]
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e5      	bne.n	8008cba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cfc:	bf00      	nop
 8008cfe:	3754      	adds	r7, #84	; 0x54
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff fe6c 	bl	8008a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b21      	cmp	r3, #33	; 0x21
 8008d42:	d13e      	bne.n	8008dc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4c:	d114      	bne.n	8008d78 <UART_Transmit_IT+0x48>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d110      	bne.n	8008d78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	1c9a      	adds	r2, r3, #2
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	621a      	str	r2, [r3, #32]
 8008d76:	e008      	b.n	8008d8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	1c59      	adds	r1, r3, #1
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6211      	str	r1, [r2, #32]
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4619      	mov	r1, r3
 8008d98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10f      	bne.n	8008dbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e000      	b.n	8008dc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008dc2:	2302      	movs	r3, #2
  }
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7f9 fe07 	bl	8002a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08c      	sub	sp, #48	; 0x30
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b22      	cmp	r3, #34	; 0x22
 8008e12:	f040 80ab 	bne.w	8008f6c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e1e:	d117      	bne.n	8008e50 <UART_Receive_IT+0x50>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d113      	bne.n	8008e50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e30:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e48:	1c9a      	adds	r2, r3, #2
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	629a      	str	r2, [r3, #40]	; 0x28
 8008e4e:	e026      	b.n	8008e9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e62:	d007      	beq.n	8008e74 <UART_Receive_IT+0x74>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <UART_Receive_IT+0x82>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e008      	b.n	8008e94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d15a      	bne.n	8008f68 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0220 	bic.w	r2, r2, #32
 8008ec0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	695a      	ldr	r2, [r3, #20]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 0201 	bic.w	r2, r2, #1
 8008ee0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d135      	bne.n	8008f5e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	613b      	str	r3, [r7, #16]
   return(result);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 0310 	bic.w	r3, r3, #16
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f18:	623a      	str	r2, [r7, #32]
 8008f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	69f9      	ldr	r1, [r7, #28]
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b10      	cmp	r3, #16
 8008f38:	d10a      	bne.n	8008f50 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fd5c 	bl	8008a14 <HAL_UARTEx_RxEventCallback>
 8008f5c:	e002      	b.n	8008f64 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7f9 faaa 	bl	80024b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e002      	b.n	8008f6e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e000      	b.n	8008f6e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f6c:	2302      	movs	r3, #2
  }
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3730      	adds	r7, #48	; 0x30
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f7c:	b0c0      	sub	sp, #256	; 0x100
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f94:	68d9      	ldr	r1, [r3, #12]
 8008f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	ea40 0301 	orr.w	r3, r0, r1
 8008fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa6:	689a      	ldr	r2, [r3, #8]
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fd0:	f021 010c 	bic.w	r1, r1, #12
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fde:	430b      	orrs	r3, r1
 8008fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff2:	6999      	ldr	r1, [r3, #24]
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	ea40 0301 	orr.w	r3, r0, r1
 8008ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4b8f      	ldr	r3, [pc, #572]	; (8009244 <UART_SetConfig+0x2cc>)
 8009008:	429a      	cmp	r2, r3
 800900a:	d005      	beq.n	8009018 <UART_SetConfig+0xa0>
 800900c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b8d      	ldr	r3, [pc, #564]	; (8009248 <UART_SetConfig+0x2d0>)
 8009014:	429a      	cmp	r2, r3
 8009016:	d104      	bne.n	8009022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009018:	f7fd fbc6 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 800901c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009020:	e003      	b.n	800902a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009022:	f7fd fbad 	bl	8006780 <HAL_RCC_GetPCLK1Freq>
 8009026:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800902a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009034:	f040 810c 	bne.w	8009250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800903c:	2200      	movs	r2, #0
 800903e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009042:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800904a:	4622      	mov	r2, r4
 800904c:	462b      	mov	r3, r5
 800904e:	1891      	adds	r1, r2, r2
 8009050:	65b9      	str	r1, [r7, #88]	; 0x58
 8009052:	415b      	adcs	r3, r3
 8009054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800905a:	4621      	mov	r1, r4
 800905c:	eb12 0801 	adds.w	r8, r2, r1
 8009060:	4629      	mov	r1, r5
 8009062:	eb43 0901 	adc.w	r9, r3, r1
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800907a:	4690      	mov	r8, r2
 800907c:	4699      	mov	r9, r3
 800907e:	4623      	mov	r3, r4
 8009080:	eb18 0303 	adds.w	r3, r8, r3
 8009084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009088:	462b      	mov	r3, r5
 800908a:	eb49 0303 	adc.w	r3, r9, r3
 800908e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800909e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090a6:	460b      	mov	r3, r1
 80090a8:	18db      	adds	r3, r3, r3
 80090aa:	653b      	str	r3, [r7, #80]	; 0x50
 80090ac:	4613      	mov	r3, r2
 80090ae:	eb42 0303 	adc.w	r3, r2, r3
 80090b2:	657b      	str	r3, [r7, #84]	; 0x54
 80090b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090bc:	f7f7 fc36 	bl	800092c <__aeabi_uldivmod>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4b61      	ldr	r3, [pc, #388]	; (800924c <UART_SetConfig+0x2d4>)
 80090c6:	fba3 2302 	umull	r2, r3, r3, r2
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	011c      	lsls	r4, r3, #4
 80090ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80090dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	1891      	adds	r1, r2, r2
 80090e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80090e8:	415b      	adcs	r3, r3
 80090ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80090f0:	4641      	mov	r1, r8
 80090f2:	eb12 0a01 	adds.w	sl, r2, r1
 80090f6:	4649      	mov	r1, r9
 80090f8:	eb43 0b01 	adc.w	fp, r3, r1
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800910c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009110:	4692      	mov	sl, r2
 8009112:	469b      	mov	fp, r3
 8009114:	4643      	mov	r3, r8
 8009116:	eb1a 0303 	adds.w	r3, sl, r3
 800911a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800911e:	464b      	mov	r3, r9
 8009120:	eb4b 0303 	adc.w	r3, fp, r3
 8009124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009134:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800913c:	460b      	mov	r3, r1
 800913e:	18db      	adds	r3, r3, r3
 8009140:	643b      	str	r3, [r7, #64]	; 0x40
 8009142:	4613      	mov	r3, r2
 8009144:	eb42 0303 	adc.w	r3, r2, r3
 8009148:	647b      	str	r3, [r7, #68]	; 0x44
 800914a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800914e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009152:	f7f7 fbeb 	bl	800092c <__aeabi_uldivmod>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4611      	mov	r1, r2
 800915c:	4b3b      	ldr	r3, [pc, #236]	; (800924c <UART_SetConfig+0x2d4>)
 800915e:	fba3 2301 	umull	r2, r3, r3, r1
 8009162:	095b      	lsrs	r3, r3, #5
 8009164:	2264      	movs	r2, #100	; 0x64
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	1acb      	subs	r3, r1, r3
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009172:	4b36      	ldr	r3, [pc, #216]	; (800924c <UART_SetConfig+0x2d4>)
 8009174:	fba3 2302 	umull	r2, r3, r3, r2
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009180:	441c      	add	r4, r3
 8009182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009186:	2200      	movs	r2, #0
 8009188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800918c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	1891      	adds	r1, r2, r2
 800919a:	63b9      	str	r1, [r7, #56]	; 0x38
 800919c:	415b      	adcs	r3, r3
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091a4:	4641      	mov	r1, r8
 80091a6:	1851      	adds	r1, r2, r1
 80091a8:	6339      	str	r1, [r7, #48]	; 0x30
 80091aa:	4649      	mov	r1, r9
 80091ac:	414b      	adcs	r3, r1
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091bc:	4659      	mov	r1, fp
 80091be:	00cb      	lsls	r3, r1, #3
 80091c0:	4651      	mov	r1, sl
 80091c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091c6:	4651      	mov	r1, sl
 80091c8:	00ca      	lsls	r2, r1, #3
 80091ca:	4610      	mov	r0, r2
 80091cc:	4619      	mov	r1, r3
 80091ce:	4603      	mov	r3, r0
 80091d0:	4642      	mov	r2, r8
 80091d2:	189b      	adds	r3, r3, r2
 80091d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091d8:	464b      	mov	r3, r9
 80091da:	460a      	mov	r2, r1
 80091dc:	eb42 0303 	adc.w	r3, r2, r3
 80091e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80091f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80091f8:	460b      	mov	r3, r1
 80091fa:	18db      	adds	r3, r3, r3
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80091fe:	4613      	mov	r3, r2
 8009200:	eb42 0303 	adc.w	r3, r2, r3
 8009204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800920a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800920e:	f7f7 fb8d 	bl	800092c <__aeabi_uldivmod>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <UART_SetConfig+0x2d4>)
 8009218:	fba3 1302 	umull	r1, r3, r3, r2
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	2164      	movs	r1, #100	; 0x64
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	3332      	adds	r3, #50	; 0x32
 800922a:	4a08      	ldr	r2, [pc, #32]	; (800924c <UART_SetConfig+0x2d4>)
 800922c:	fba2 2303 	umull	r2, r3, r2, r3
 8009230:	095b      	lsrs	r3, r3, #5
 8009232:	f003 0207 	and.w	r2, r3, #7
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4422      	add	r2, r4
 800923e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009240:	e105      	b.n	800944e <UART_SetConfig+0x4d6>
 8009242:	bf00      	nop
 8009244:	40011000 	.word	0x40011000
 8009248:	40011400 	.word	0x40011400
 800924c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009254:	2200      	movs	r2, #0
 8009256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800925a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800925e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009262:	4642      	mov	r2, r8
 8009264:	464b      	mov	r3, r9
 8009266:	1891      	adds	r1, r2, r2
 8009268:	6239      	str	r1, [r7, #32]
 800926a:	415b      	adcs	r3, r3
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
 800926e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009272:	4641      	mov	r1, r8
 8009274:	1854      	adds	r4, r2, r1
 8009276:	4649      	mov	r1, r9
 8009278:	eb43 0501 	adc.w	r5, r3, r1
 800927c:	f04f 0200 	mov.w	r2, #0
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	00eb      	lsls	r3, r5, #3
 8009286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800928a:	00e2      	lsls	r2, r4, #3
 800928c:	4614      	mov	r4, r2
 800928e:	461d      	mov	r5, r3
 8009290:	4643      	mov	r3, r8
 8009292:	18e3      	adds	r3, r4, r3
 8009294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009298:	464b      	mov	r3, r9
 800929a:	eb45 0303 	adc.w	r3, r5, r3
 800929e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092be:	4629      	mov	r1, r5
 80092c0:	008b      	lsls	r3, r1, #2
 80092c2:	4621      	mov	r1, r4
 80092c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092c8:	4621      	mov	r1, r4
 80092ca:	008a      	lsls	r2, r1, #2
 80092cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092d0:	f7f7 fb2c 	bl	800092c <__aeabi_uldivmod>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4b60      	ldr	r3, [pc, #384]	; (800945c <UART_SetConfig+0x4e4>)
 80092da:	fba3 2302 	umull	r2, r3, r3, r2
 80092de:	095b      	lsrs	r3, r3, #5
 80092e0:	011c      	lsls	r4, r3, #4
 80092e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80092f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	1891      	adds	r1, r2, r2
 80092fa:	61b9      	str	r1, [r7, #24]
 80092fc:	415b      	adcs	r3, r3
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009304:	4641      	mov	r1, r8
 8009306:	1851      	adds	r1, r2, r1
 8009308:	6139      	str	r1, [r7, #16]
 800930a:	4649      	mov	r1, r9
 800930c:	414b      	adcs	r3, r1
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800931c:	4659      	mov	r1, fp
 800931e:	00cb      	lsls	r3, r1, #3
 8009320:	4651      	mov	r1, sl
 8009322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009326:	4651      	mov	r1, sl
 8009328:	00ca      	lsls	r2, r1, #3
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	4603      	mov	r3, r0
 8009330:	4642      	mov	r2, r8
 8009332:	189b      	adds	r3, r3, r2
 8009334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009338:	464b      	mov	r3, r9
 800933a:	460a      	mov	r2, r1
 800933c:	eb42 0303 	adc.w	r3, r2, r3
 8009340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	67bb      	str	r3, [r7, #120]	; 0x78
 800934e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009350:	f04f 0200 	mov.w	r2, #0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800935c:	4649      	mov	r1, r9
 800935e:	008b      	lsls	r3, r1, #2
 8009360:	4641      	mov	r1, r8
 8009362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009366:	4641      	mov	r1, r8
 8009368:	008a      	lsls	r2, r1, #2
 800936a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800936e:	f7f7 fadd 	bl	800092c <__aeabi_uldivmod>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4b39      	ldr	r3, [pc, #228]	; (800945c <UART_SetConfig+0x4e4>)
 8009378:	fba3 1302 	umull	r1, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	2164      	movs	r1, #100	; 0x64
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	3332      	adds	r3, #50	; 0x32
 800938a:	4a34      	ldr	r2, [pc, #208]	; (800945c <UART_SetConfig+0x4e4>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009396:	441c      	add	r4, r3
 8009398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800939c:	2200      	movs	r2, #0
 800939e:	673b      	str	r3, [r7, #112]	; 0x70
 80093a0:	677a      	str	r2, [r7, #116]	; 0x74
 80093a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093a6:	4642      	mov	r2, r8
 80093a8:	464b      	mov	r3, r9
 80093aa:	1891      	adds	r1, r2, r2
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	415b      	adcs	r3, r3
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093b6:	4641      	mov	r1, r8
 80093b8:	1851      	adds	r1, r2, r1
 80093ba:	6039      	str	r1, [r7, #0]
 80093bc:	4649      	mov	r1, r9
 80093be:	414b      	adcs	r3, r1
 80093c0:	607b      	str	r3, [r7, #4]
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	f04f 0300 	mov.w	r3, #0
 80093ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093ce:	4659      	mov	r1, fp
 80093d0:	00cb      	lsls	r3, r1, #3
 80093d2:	4651      	mov	r1, sl
 80093d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d8:	4651      	mov	r1, sl
 80093da:	00ca      	lsls	r2, r1, #3
 80093dc:	4610      	mov	r0, r2
 80093de:	4619      	mov	r1, r3
 80093e0:	4603      	mov	r3, r0
 80093e2:	4642      	mov	r2, r8
 80093e4:	189b      	adds	r3, r3, r2
 80093e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093e8:	464b      	mov	r3, r9
 80093ea:	460a      	mov	r2, r1
 80093ec:	eb42 0303 	adc.w	r3, r2, r3
 80093f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	663b      	str	r3, [r7, #96]	; 0x60
 80093fc:	667a      	str	r2, [r7, #100]	; 0x64
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800940a:	4649      	mov	r1, r9
 800940c:	008b      	lsls	r3, r1, #2
 800940e:	4641      	mov	r1, r8
 8009410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009414:	4641      	mov	r1, r8
 8009416:	008a      	lsls	r2, r1, #2
 8009418:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800941c:	f7f7 fa86 	bl	800092c <__aeabi_uldivmod>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4b0d      	ldr	r3, [pc, #52]	; (800945c <UART_SetConfig+0x4e4>)
 8009426:	fba3 1302 	umull	r1, r3, r3, r2
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	2164      	movs	r1, #100	; 0x64
 800942e:	fb01 f303 	mul.w	r3, r1, r3
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	3332      	adds	r3, #50	; 0x32
 8009438:	4a08      	ldr	r2, [pc, #32]	; (800945c <UART_SetConfig+0x4e4>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4422      	add	r2, r4
 800944c:	609a      	str	r2, [r3, #8]
}
 800944e:	bf00      	nop
 8009450:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009454:	46bd      	mov	sp, r7
 8009456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800945a:	bf00      	nop
 800945c:	51eb851f 	.word	0x51eb851f

08009460 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b10      	cmp	r3, #16
 8009470:	d11c      	bne.n	80094ac <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	4b1f      	ldr	r3, [pc, #124]	; (80094f4 <FSMC_NAND_Init+0x94>)
 8009478:	4013      	ands	r3, r2
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	6851      	ldr	r1, [r2, #4]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	6892      	ldr	r2, [r2, #8]
 8009482:	4311      	orrs	r1, r2
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	68d2      	ldr	r2, [r2, #12]
 8009488:	4311      	orrs	r1, r2
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	6912      	ldr	r2, [r2, #16]
 800948e:	4311      	orrs	r1, r2
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	6952      	ldr	r2, [r2, #20]
 8009494:	0252      	lsls	r2, r2, #9
 8009496:	4311      	orrs	r1, r2
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	6992      	ldr	r2, [r2, #24]
 800949c:	0352      	lsls	r2, r2, #13
 800949e:	430a      	orrs	r2, r1
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f043 0208 	orr.w	r2, r3, #8
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e01b      	b.n	80094e4 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <FSMC_NAND_Init+0x94>)
 80094b2:	4013      	ands	r3, r2
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	6851      	ldr	r1, [r2, #4]
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	6892      	ldr	r2, [r2, #8]
 80094bc:	4311      	orrs	r1, r2
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	68d2      	ldr	r2, [r2, #12]
 80094c2:	4311      	orrs	r1, r2
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	6912      	ldr	r2, [r2, #16]
 80094c8:	4311      	orrs	r1, r2
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	6952      	ldr	r2, [r2, #20]
 80094ce:	0252      	lsls	r2, r2, #9
 80094d0:	4311      	orrs	r1, r2
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	6992      	ldr	r2, [r2, #24]
 80094d6:	0352      	lsls	r2, r2, #13
 80094d8:	430a      	orrs	r2, r1
 80094da:	4313      	orrs	r3, r2
 80094dc:	f043 0208 	orr.w	r2, r3, #8
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	fff00181 	.word	0xfff00181

080094f8 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b10      	cmp	r3, #16
 8009508:	d112      	bne.n	8009530 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	431a      	orrs	r2, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	431a      	orrs	r2, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	061b      	lsls	r3, r3, #24
 8009528:	431a      	orrs	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	609a      	str	r2, [r3, #8]
 800952e:	e011      	b.n	8009554 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	431a      	orrs	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	041b      	lsls	r3, r3, #16
 8009546:	431a      	orrs	r2, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	061b      	lsls	r3, r3, #24
 800954e:	431a      	orrs	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b10      	cmp	r3, #16
 8009572:	d112      	bne.n	800959a <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	431a      	orrs	r2, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	431a      	orrs	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	061b      	lsls	r3, r3, #24
 8009592:	431a      	orrs	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	60da      	str	r2, [r3, #12]
 8009598:	e011      	b.n	80095be <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	431a      	orrs	r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	061b      	lsls	r3, r3, #24
 80095b8:	431a      	orrs	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b10      	cmp	r3, #16
 80095da:	d106      	bne.n	80095ea <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	e005      	b.n	80095f6 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <__NVIC_SetPriority>:
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	6039      	str	r1, [r7, #0]
 800960e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009614:	2b00      	cmp	r3, #0
 8009616:	db0a      	blt.n	800962e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	b2da      	uxtb	r2, r3
 800961c:	490c      	ldr	r1, [pc, #48]	; (8009650 <__NVIC_SetPriority+0x4c>)
 800961e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009622:	0112      	lsls	r2, r2, #4
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	440b      	add	r3, r1
 8009628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800962c:	e00a      	b.n	8009644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	b2da      	uxtb	r2, r3
 8009632:	4908      	ldr	r1, [pc, #32]	; (8009654 <__NVIC_SetPriority+0x50>)
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	3b04      	subs	r3, #4
 800963c:	0112      	lsls	r2, r2, #4
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	440b      	add	r3, r1
 8009642:	761a      	strb	r2, [r3, #24]
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	e000e100 	.word	0xe000e100
 8009654:	e000ed00 	.word	0xe000ed00

08009658 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800965c:	4b05      	ldr	r3, [pc, #20]	; (8009674 <SysTick_Handler+0x1c>)
 800965e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009660:	f002 f856 	bl	800b710 <xTaskGetSchedulerState>
 8009664:	4603      	mov	r3, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	d001      	beq.n	800966e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800966a:	f002 fe3d 	bl	800c2e8 <xPortSysTickHandler>
  }
}
 800966e:	bf00      	nop
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	e000e010 	.word	0xe000e010

08009678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800967c:	2100      	movs	r1, #0
 800967e:	f06f 0004 	mvn.w	r0, #4
 8009682:	f7ff ffbf 	bl	8009604 <__NVIC_SetPriority>
#endif
}
 8009686:	bf00      	nop
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009692:	f3ef 8305 	mrs	r3, IPSR
 8009696:	603b      	str	r3, [r7, #0]
  return(result);
 8009698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800969e:	f06f 0305 	mvn.w	r3, #5
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	e00f      	b.n	80096c6 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <osKernelInitialize+0x44>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d108      	bne.n	80096c0 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80096ae:	4809      	ldr	r0, [pc, #36]	; (80096d4 <osKernelInitialize+0x48>)
 80096b0:	f003 f816 	bl	800c6e0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <osKernelInitialize+0x44>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	e002      	b.n	80096c6 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80096c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096c4:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096c6:	687b      	ldr	r3, [r7, #4]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20001c10 	.word	0x20001c10
 80096d4:	200000b0 	.word	0x200000b0

080096d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096de:	f3ef 8305 	mrs	r3, IPSR
 80096e2:	603b      	str	r3, [r7, #0]
  return(result);
 80096e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80096ea:	f06f 0305 	mvn.w	r3, #5
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	e010      	b.n	8009714 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096f2:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <osKernelStart+0x48>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d109      	bne.n	800970e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096fa:	f7ff ffbd 	bl	8009678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096fe:	4b08      	ldr	r3, [pc, #32]	; (8009720 <osKernelStart+0x48>)
 8009700:	2202      	movs	r2, #2
 8009702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009704:	f001 fba8 	bl	800ae58 <vTaskStartScheduler>
      stat = osOK;
 8009708:	2300      	movs	r3, #0
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	e002      	b.n	8009714 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800970e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009714:	687b      	ldr	r3, [r7, #4]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20001c10 	.word	0x20001c10

08009724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	; 0x38
 8009728:	af04      	add	r7, sp, #16
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009734:	f3ef 8305 	mrs	r3, IPSR
 8009738:	617b      	str	r3, [r7, #20]
  return(result);
 800973a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800973c:	2b00      	cmp	r3, #0
 800973e:	d17e      	bne.n	800983e <osThreadNew+0x11a>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d07b      	beq.n	800983e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009746:	2380      	movs	r3, #128	; 0x80
 8009748:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800974a:	2318      	movs	r3, #24
 800974c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800974e:	2300      	movs	r3, #0
 8009750:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009756:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d045      	beq.n	80097ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <osThreadNew+0x48>
        name = attr->name;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <osThreadNew+0x6e>
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	2b38      	cmp	r3, #56	; 0x38
 8009784:	d805      	bhi.n	8009792 <osThreadNew+0x6e>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <osThreadNew+0x72>
        return (NULL);
 8009792:	2300      	movs	r3, #0
 8009794:	e054      	b.n	8009840 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	089b      	lsrs	r3, r3, #2
 80097a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00e      	beq.n	80097cc <osThreadNew+0xa8>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	2bbb      	cmp	r3, #187	; 0xbb
 80097b4:	d90a      	bls.n	80097cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d006      	beq.n	80097cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <osThreadNew+0xa8>
        mem = 1;
 80097c6:	2301      	movs	r3, #1
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	e010      	b.n	80097ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10c      	bne.n	80097ee <osThreadNew+0xca>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d108      	bne.n	80097ee <osThreadNew+0xca>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d104      	bne.n	80097ee <osThreadNew+0xca>
          mem = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
 80097e8:	e001      	b.n	80097ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d110      	bne.n	8009816 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097fc:	9202      	str	r2, [sp, #8]
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6a3a      	ldr	r2, [r7, #32]
 8009808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f001 f938 	bl	800aa80 <xTaskCreateStatic>
 8009810:	4603      	mov	r3, r0
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	e013      	b.n	800983e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d110      	bne.n	800983e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	b29a      	uxth	r2, r3
 8009820:	f107 0310 	add.w	r3, r7, #16
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f001 f983 	bl	800ab3a <xTaskCreate>
 8009834:	4603      	mov	r3, r0
 8009836:	2b01      	cmp	r3, #1
 8009838:	d001      	beq.n	800983e <osThreadNew+0x11a>
            hTask = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800983e:	693b      	ldr	r3, [r7, #16]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3728      	adds	r7, #40	; 0x28
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009850:	f3ef 8305 	mrs	r3, IPSR
 8009854:	60bb      	str	r3, [r7, #8]
  return(result);
 8009856:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <osDelay+0x1c>
    stat = osErrorISR;
 800985c:	f06f 0305 	mvn.w	r3, #5
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	e007      	b.n	8009874 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <osDelay+0x2c>
      vTaskDelay(ticks);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fabe 	bl	800adf0 <vTaskDelay>
    }
  }

  return (stat);
 8009874:	68fb      	ldr	r3, [r7, #12]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800987e:	b580      	push	{r7, lr}
 8009880:	b08a      	sub	sp, #40	; 0x28
 8009882:	af02      	add	r7, sp, #8
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800988a:	2300      	movs	r3, #0
 800988c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	613b      	str	r3, [r7, #16]
  return(result);
 8009894:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009896:	2b00      	cmp	r3, #0
 8009898:	d175      	bne.n	8009986 <osSemaphoreNew+0x108>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d072      	beq.n	8009986 <osSemaphoreNew+0x108>
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d86e      	bhi.n	8009986 <osSemaphoreNew+0x108>
    mem = -1;
 80098a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d015      	beq.n	80098e0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d006      	beq.n	80098ca <osSemaphoreNew+0x4c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b4f      	cmp	r3, #79	; 0x4f
 80098c2:	d902      	bls.n	80098ca <osSemaphoreNew+0x4c>
        mem = 1;
 80098c4:	2301      	movs	r3, #1
 80098c6:	61bb      	str	r3, [r7, #24]
 80098c8:	e00c      	b.n	80098e4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d108      	bne.n	80098e4 <osSemaphoreNew+0x66>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d104      	bne.n	80098e4 <osSemaphoreNew+0x66>
          mem = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e001      	b.n	80098e4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ea:	d04c      	beq.n	8009986 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d128      	bne.n	8009944 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10a      	bne.n	800990e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2203      	movs	r2, #3
 80098fe:	9200      	str	r2, [sp, #0]
 8009900:	2200      	movs	r2, #0
 8009902:	2100      	movs	r1, #0
 8009904:	2001      	movs	r0, #1
 8009906:	f000 fac5 	bl	8009e94 <xQueueGenericCreateStatic>
 800990a:	61f8      	str	r0, [r7, #28]
 800990c:	e005      	b.n	800991a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800990e:	2203      	movs	r2, #3
 8009910:	2100      	movs	r1, #0
 8009912:	2001      	movs	r0, #1
 8009914:	f000 fb36 	bl	8009f84 <xQueueGenericCreate>
 8009918:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d022      	beq.n	8009966 <osSemaphoreNew+0xe8>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d01f      	beq.n	8009966 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009926:	2300      	movs	r3, #0
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	69f8      	ldr	r0, [r7, #28]
 800992e:	f000 fbf1 	bl	800a114 <xQueueGenericSend>
 8009932:	4603      	mov	r3, r0
 8009934:	2b01      	cmp	r3, #1
 8009936:	d016      	beq.n	8009966 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009938:	69f8      	ldr	r0, [r7, #28]
 800993a:	f000 fee5 	bl	800a708 <vQueueDelete>
            hSemaphore = NULL;
 800993e:	2300      	movs	r3, #0
 8009940:	61fb      	str	r3, [r7, #28]
 8009942:	e010      	b.n	8009966 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d108      	bne.n	800995c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	461a      	mov	r2, r3
 8009950:	68b9      	ldr	r1, [r7, #8]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fb73 	bl	800a03e <xQueueCreateCountingSemaphoreStatic>
 8009958:	61f8      	str	r0, [r7, #28]
 800995a:	e004      	b.n	8009966 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fba4 	bl	800a0ac <xQueueCreateCountingSemaphore>
 8009964:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00c      	beq.n	8009986 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e001      	b.n	800997e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800997e:	6979      	ldr	r1, [r7, #20]
 8009980:	69f8      	ldr	r0, [r7, #28]
 8009982:	f000 fff5 	bl	800a970 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009990:	b580      	push	{r7, lr}
 8009992:	b08a      	sub	sp, #40	; 0x28
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a0:	f3ef 8305 	mrs	r3, IPSR
 80099a4:	613b      	str	r3, [r7, #16]
  return(result);
 80099a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d15f      	bne.n	8009a6c <osMessageQueueNew+0xdc>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d05c      	beq.n	8009a6c <osMessageQueueNew+0xdc>
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d059      	beq.n	8009a6c <osMessageQueueNew+0xdc>
    mem = -1;
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d029      	beq.n	8009a18 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d012      	beq.n	80099f2 <osMessageQueueNew+0x62>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	2b4f      	cmp	r3, #79	; 0x4f
 80099d2:	d90e      	bls.n	80099f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	695a      	ldr	r2, [r3, #20]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	fb01 f303 	mul.w	r3, r1, r3
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d302      	bcc.n	80099f2 <osMessageQueueNew+0x62>
        mem = 1;
 80099ec:	2301      	movs	r3, #1
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	e014      	b.n	8009a1c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d110      	bne.n	8009a1c <osMessageQueueNew+0x8c>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10c      	bne.n	8009a1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d108      	bne.n	8009a1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d104      	bne.n	8009a1c <osMessageQueueNew+0x8c>
          mem = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	e001      	b.n	8009a1c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d10b      	bne.n	8009a3a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	9100      	str	r1, [sp, #0]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 fa2f 	bl	8009e94 <xQueueGenericCreateStatic>
 8009a36:	61f8      	str	r0, [r7, #28]
 8009a38:	e008      	b.n	8009a4c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009a40:	2200      	movs	r2, #0
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fa9d 	bl	8009f84 <xQueueGenericCreate>
 8009a4a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00c      	beq.n	8009a6c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e001      	b.n	8009a64 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009a64:	6979      	ldr	r1, [r7, #20]
 8009a66:	69f8      	ldr	r0, [r7, #28]
 8009a68:	f000 ff82 	bl	800a970 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009a6c:	69fb      	ldr	r3, [r7, #28]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3720      	adds	r7, #32
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a90:	f3ef 8305 	mrs	r3, IPSR
 8009a94:	617b      	str	r3, [r7, #20]
  return(result);
 8009a96:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d028      	beq.n	8009aee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <osMessageQueuePut+0x36>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <osMessageQueuePut+0x36>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009aae:	f06f 0303 	mvn.w	r3, #3
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	e038      	b.n	8009b28 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009aba:	f107 0210 	add.w	r2, r7, #16
 8009abe:	2300      	movs	r3, #0
 8009ac0:	68b9      	ldr	r1, [r7, #8]
 8009ac2:	69b8      	ldr	r0, [r7, #24]
 8009ac4:	f000 fc24 	bl	800a310 <xQueueGenericSendFromISR>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d003      	beq.n	8009ad6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009ace:	f06f 0302 	mvn.w	r3, #2
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	e028      	b.n	8009b28 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d025      	beq.n	8009b28 <osMessageQueuePut+0xb0>
 8009adc:	4b15      	ldr	r3, [pc, #84]	; (8009b34 <osMessageQueuePut+0xbc>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	e01c      	b.n	8009b28 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <osMessageQueuePut+0x82>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d103      	bne.n	8009b02 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009afa:	f06f 0303 	mvn.w	r3, #3
 8009afe:	61fb      	str	r3, [r7, #28]
 8009b00:	e012      	b.n	8009b28 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b02:	2300      	movs	r3, #0
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	69b8      	ldr	r0, [r7, #24]
 8009b0a:	f000 fb03 	bl	800a114 <xQueueGenericSend>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d009      	beq.n	8009b28 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009b1a:	f06f 0301 	mvn.w	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	e002      	b.n	8009b28 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009b22:	f06f 0302 	mvn.w	r3, #2
 8009b26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b28:	69fb      	ldr	r3, [r7, #28]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3720      	adds	r7, #32
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b4e:	f3ef 8305 	mrs	r3, IPSR
 8009b52:	617b      	str	r3, [r7, #20]
  return(result);
 8009b54:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d028      	beq.n	8009bac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <osMessageQueueGet+0x34>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <osMessageQueueGet+0x34>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009b6c:	f06f 0303 	mvn.w	r3, #3
 8009b70:	61fb      	str	r3, [r7, #28]
 8009b72:	e037      	b.n	8009be4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009b78:	f107 0310 	add.w	r3, r7, #16
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	69b8      	ldr	r0, [r7, #24]
 8009b82:	f000 fd41 	bl	800a608 <xQueueReceiveFromISR>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d003      	beq.n	8009b94 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009b8c:	f06f 0302 	mvn.w	r3, #2
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	e027      	b.n	8009be4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d024      	beq.n	8009be4 <osMessageQueueGet+0xac>
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <osMessageQueueGet+0xb8>)
 8009b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	e01b      	b.n	8009be4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <osMessageQueueGet+0x80>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d103      	bne.n	8009bc0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009bb8:	f06f 0303 	mvn.w	r3, #3
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	e011      	b.n	8009be4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	69b8      	ldr	r0, [r7, #24]
 8009bc6:	f000 fc3f 	bl	800a448 <xQueueReceive>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d009      	beq.n	8009be4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009bd6:	f06f 0301 	mvn.w	r3, #1
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e002      	b.n	8009be4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009bde:	f06f 0302 	mvn.w	r3, #2
 8009be2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009be4:	69fb      	ldr	r3, [r7, #28]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4a07      	ldr	r2, [pc, #28]	; (8009c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4a06      	ldr	r2, [pc, #24]	; (8009c24 <vApplicationGetIdleTaskMemory+0x30>)
 8009c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2280      	movs	r2, #128	; 0x80
 8009c10:	601a      	str	r2, [r3, #0]
}
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20005c14 	.word	0x20005c14
 8009c24:	20005cd0 	.word	0x20005cd0

08009c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4a07      	ldr	r2, [pc, #28]	; (8009c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4a06      	ldr	r2, [pc, #24]	; (8009c58 <vApplicationGetTimerTaskMemory+0x30>)
 8009c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c46:	601a      	str	r2, [r3, #0]
}
 8009c48:	bf00      	nop
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	20005ed0 	.word	0x20005ed0
 8009c58:	20005f8c 	.word	0x20005f8c

08009c5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f103 0208 	add.w	r2, r3, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f103 0208 	add.w	r2, r3, #8
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f103 0208 	add.w	r2, r3, #8
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b085      	sub	sp, #20
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d14:	d103      	bne.n	8009d1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e00c      	b.n	8009d38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3308      	adds	r3, #8
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e002      	b.n	8009d2c <vListInsert+0x2e>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d2f6      	bcs.n	8009d26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6892      	ldr	r2, [r2, #8]
 8009d86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	6852      	ldr	r2, [r2, #4]
 8009d90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d103      	bne.n	8009da4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	1e5a      	subs	r2, r3, #1
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009dee:	f002 f9e9 	bl	800c1c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfa:	68f9      	ldr	r1, [r7, #12]
 8009dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dfe:	fb01 f303 	mul.w	r3, r1, r3
 8009e02:	441a      	add	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	68f9      	ldr	r1, [r7, #12]
 8009e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e24:	fb01 f303 	mul.w	r3, r1, r3
 8009e28:	441a      	add	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	22ff      	movs	r2, #255	; 0xff
 8009e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	22ff      	movs	r2, #255	; 0xff
 8009e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d114      	bne.n	8009e6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01a      	beq.n	8009e82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3310      	adds	r3, #16
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fa9b 	bl	800b38c <xTaskRemoveFromEventList>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d012      	beq.n	8009e82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <xQueueGenericReset+0xcc>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	e009      	b.n	8009e82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3310      	adds	r3, #16
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fef2 	bl	8009c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3324      	adds	r3, #36	; 0x24
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff feed 	bl	8009c5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e82:	f002 f9cf 	bl	800c224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e86:	2301      	movs	r3, #1
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08e      	sub	sp, #56	; 0x38
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <xQueueGenericCreateStatic+0x52>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <xQueueGenericCreateStatic+0x56>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <xQueueGenericCreateStatic+0x58>
 8009eea:	2300      	movs	r3, #0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	623b      	str	r3, [r7, #32]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <xQueueGenericCreateStatic+0x7e>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <xQueueGenericCreateStatic+0x82>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e000      	b.n	8009f18 <xQueueGenericCreateStatic+0x84>
 8009f16:	2300      	movs	r3, #0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61fb      	str	r3, [r7, #28]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f32:	2350      	movs	r3, #80	; 0x50
 8009f34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b50      	cmp	r3, #80	; 0x50
 8009f3a:	d00a      	beq.n	8009f52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61bb      	str	r3, [r7, #24]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00d      	beq.n	8009f7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f83f 	bl	8009ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3730      	adds	r7, #48	; 0x30
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	613b      	str	r3, [r7, #16]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
 8009fb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	3350      	adds	r3, #80	; 0x50
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 fa23 	bl	800c408 <pvPortMalloc>
 8009fc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	3350      	adds	r3, #80	; 0x50
 8009fd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fdc:	79fa      	ldrb	r2, [r7, #7]
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f805 	bl	8009ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fee:	69bb      	ldr	r3, [r7, #24]
	}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3720      	adds	r7, #32
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	e002      	b.n	800a01a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a026:	2101      	movs	r1, #1
 800a028:	69b8      	ldr	r0, [r7, #24]
 800a02a:	f7ff fecb 	bl	8009dc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	78fa      	ldrb	r2, [r7, #3]
 800a032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b08a      	sub	sp, #40	; 0x28
 800a042:	af02      	add	r7, sp, #8
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	61bb      	str	r3, [r7, #24]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d90a      	bls.n	800a084 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	617b      	str	r3, [r7, #20]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a084:	2302      	movs	r3, #2
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff ff00 	bl	8009e94 <xQueueGenericCreateStatic>
 800a094:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
	}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	613b      	str	r3, [r7, #16]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d90a      	bls.n	800a0f0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60fb      	str	r3, [r7, #12]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ff45 	bl	8009f84 <xQueueGenericCreate>
 800a0fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a108:	697b      	ldr	r3, [r7, #20]
	}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3718      	adds	r7, #24
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	; 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xQueueGenericSend+0x32>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <xQueueGenericSend+0x40>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <xQueueGenericSend+0x44>
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <xQueueGenericSend+0x46>
 800a158:	2300      	movs	r3, #0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <xQueueGenericSend+0x60>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d103      	bne.n	800a182 <xQueueGenericSend+0x6e>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d101      	bne.n	800a186 <xQueueGenericSend+0x72>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <xQueueGenericSend+0x74>
 800a186:	2300      	movs	r3, #0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	623b      	str	r3, [r7, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a2:	f001 fab5 	bl	800b710 <xTaskGetSchedulerState>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <xQueueGenericSend+0x9e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <xQueueGenericSend+0xa2>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericSend+0xa4>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	61fb      	str	r3, [r7, #28]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1d2:	f001 fff7 	bl	800c1c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d302      	bcc.n	800a1e8 <xQueueGenericSend+0xd4>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d129      	bne.n	800a23c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ee:	f000 faae 	bl	800a74e <prvCopyDataToQueue>
 800a1f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d010      	beq.n	800a21e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	3324      	adds	r3, #36	; 0x24
 800a200:	4618      	mov	r0, r3
 800a202:	f001 f8c3 	bl	800b38c <xTaskRemoveFromEventList>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d013      	beq.n	800a234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a20c:	4b3f      	ldr	r3, [pc, #252]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	e00a      	b.n	800a234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a224:	4b39      	ldr	r3, [pc, #228]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a234:	f001 fff6 	bl	800c224 <vPortExitCritical>
				return pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	e063      	b.n	800a304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d103      	bne.n	800a24a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a242:	f001 ffef 	bl	800c224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a246:	2300      	movs	r3, #0
 800a248:	e05c      	b.n	800a304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f8fd 	bl	800b454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a25a:	2301      	movs	r3, #1
 800a25c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a25e:	f001 ffe1 	bl	800c224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a262:	f000 fe69 	bl	800af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a266:	f001 ffad 	bl	800c1c4 <vPortEnterCritical>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a270:	b25b      	sxtb	r3, r3
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a276:	d103      	bne.n	800a280 <xQueueGenericSend+0x16c>
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a286:	b25b      	sxtb	r3, r3
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28c:	d103      	bne.n	800a296 <xQueueGenericSend+0x182>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a296:	f001 ffc5 	bl	800c224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a29a:	1d3a      	adds	r2, r7, #4
 800a29c:	f107 0314 	add.w	r3, r7, #20
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 f8ec 	bl	800b480 <xTaskCheckForTimeOut>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d124      	bne.n	800a2f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b0:	f000 fb45 	bl	800a93e <prvIsQueueFull>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d018      	beq.n	800a2ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	3310      	adds	r3, #16
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 f812 	bl	800b2ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ca:	f000 fad0 	bl	800a86e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2ce:	f000 fe41 	bl	800af54 <xTaskResumeAll>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f47f af7c 	bne.w	800a1d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2da:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	e772      	b.n	800a1d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ee:	f000 fabe 	bl	800a86e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2f2:	f000 fe2f 	bl	800af54 <xTaskResumeAll>
 800a2f6:	e76c      	b.n	800a1d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 fab8 	bl	800a86e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2fe:	f000 fe29 	bl	800af54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a304:	4618      	mov	r0, r3
 800a306:	3738      	adds	r7, #56	; 0x38
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b090      	sub	sp, #64	; 0x40
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <xQueueGenericSendFromISR+0x3c>
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <xQueueGenericSendFromISR+0x40>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <xQueueGenericSendFromISR+0x42>
 800a350:	2300      	movs	r3, #0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d103      	bne.n	800a37a <xQueueGenericSendFromISR+0x6a>
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <xQueueGenericSendFromISR+0x6e>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <xQueueGenericSendFromISR+0x70>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	623b      	str	r3, [r7, #32]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39a:	f001 fff5 	bl	800c388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a39e:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	61fa      	str	r2, [r7, #28]
 800a3b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d302      	bcc.n	800a3cc <xQueueGenericSendFromISR+0xbc>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d12f      	bne.n	800a42c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3e2:	f000 f9b4 	bl	800a74e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ee:	d112      	bne.n	800a416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d016      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	3324      	adds	r3, #36	; 0x24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 ffc5 	bl	800b38c <xTaskRemoveFromEventList>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00e      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e007      	b.n	800a426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a41a:	3301      	adds	r3, #1
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	b25a      	sxtb	r2, r3
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a426:	2301      	movs	r3, #1
 800a428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a42a:	e001      	b.n	800a430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a43a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3740      	adds	r7, #64	; 0x40
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08c      	sub	sp, #48	; 0x30
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a454:	2300      	movs	r3, #0
 800a456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <xQueueReceive+0x30>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	623b      	str	r3, [r7, #32]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d103      	bne.n	800a486 <xQueueReceive+0x3e>
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <xQueueReceive+0x42>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <xQueueReceive+0x44>
 800a48a:	2300      	movs	r3, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xQueueReceive+0x5e>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61fb      	str	r3, [r7, #28]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4a6:	f001 f933 	bl	800b710 <xTaskGetSchedulerState>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <xQueueReceive+0x6e>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <xQueueReceive+0x72>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueReceive+0x74>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueReceive+0x8e>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	61bb      	str	r3, [r7, #24]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4d6:	f001 fe75 	bl	800c1c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01f      	beq.n	800a526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4e6:	68b9      	ldr	r1, [r7, #8]
 800a4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ea:	f000 f99a 	bl	800a822 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	1e5a      	subs	r2, r3, #1
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00f      	beq.n	800a51e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	3310      	adds	r3, #16
 800a502:	4618      	mov	r0, r3
 800a504:	f000 ff42 	bl	800b38c <xTaskRemoveFromEventList>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d007      	beq.n	800a51e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a50e:	4b3d      	ldr	r3, [pc, #244]	; (800a604 <xQueueReceive+0x1bc>)
 800a510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a51e:	f001 fe81 	bl	800c224 <vPortExitCritical>
				return pdPASS;
 800a522:	2301      	movs	r3, #1
 800a524:	e069      	b.n	800a5fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a52c:	f001 fe7a 	bl	800c224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a530:	2300      	movs	r3, #0
 800a532:	e062      	b.n	800a5fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 ff88 	bl	800b454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a548:	f001 fe6c 	bl	800c224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a54c:	f000 fcf4 	bl	800af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a550:	f001 fe38 	bl	800c1c4 <vPortEnterCritical>
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a55a:	b25b      	sxtb	r3, r3
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a560:	d103      	bne.n	800a56a <xQueueReceive+0x122>
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a570:	b25b      	sxtb	r3, r3
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a576:	d103      	bne.n	800a580 <xQueueReceive+0x138>
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a580:	f001 fe50 	bl	800c224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a584:	1d3a      	adds	r2, r7, #4
 800a586:	f107 0310 	add.w	r3, r7, #16
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 ff77 	bl	800b480 <xTaskCheckForTimeOut>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d123      	bne.n	800a5e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59a:	f000 f9ba 	bl	800a912 <prvIsQueueEmpty>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d017      	beq.n	800a5d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	3324      	adds	r3, #36	; 0x24
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fe9d 	bl	800b2ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b4:	f000 f95b 	bl	800a86e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5b8:	f000 fccc 	bl	800af54 <xTaskResumeAll>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d189      	bne.n	800a4d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5c2:	4b10      	ldr	r3, [pc, #64]	; (800a604 <xQueueReceive+0x1bc>)
 800a5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	e780      	b.n	800a4d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d6:	f000 f94a 	bl	800a86e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5da:	f000 fcbb 	bl	800af54 <xTaskResumeAll>
 800a5de:	e77a      	b.n	800a4d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e2:	f000 f944 	bl	800a86e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5e6:	f000 fcb5 	bl	800af54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ec:	f000 f991 	bl	800a912 <prvIsQueueEmpty>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f43f af6f 	beq.w	800a4d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3730      	adds	r7, #48	; 0x30
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08e      	sub	sp, #56	; 0x38
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10a      	bne.n	800a634 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	623b      	str	r3, [r7, #32]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <xQueueReceiveFromISR+0x3a>
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <xQueueReceiveFromISR+0x3e>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <xQueueReceiveFromISR+0x40>
 800a646:	2300      	movs	r3, #0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61fb      	str	r3, [r7, #28]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a662:	f001 fe91 	bl	800c388 <vPortValidateInterruptPriority>
	__asm volatile
 800a666:	f3ef 8211 	mrs	r2, BASEPRI
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	61ba      	str	r2, [r7, #24]
 800a67c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a67e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d02f      	beq.n	800a6ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a69c:	f000 f8c1 	bl	800a822 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	1e5a      	subs	r2, r3, #1
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b0:	d112      	bne.n	800a6d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d016      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fe64 	bl	800b38c <xTaskRemoveFromEventList>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00e      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	e007      	b.n	800a6e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6dc:	3301      	adds	r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	b25a      	sxtb	r2, r3
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ec:	e001      	b.n	800a6f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f383 8811 	msr	BASEPRI, r3
}
 800a6fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a700:	4618      	mov	r0, r3
 800a702:	3738      	adds	r7, #56	; 0x38
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <vQueueDelete+0x28>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60bb      	str	r3, [r7, #8]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 f947 	bl	800a9c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f001 ff05 	bl	800c550 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10d      	bne.n	800a788 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d14d      	bne.n	800a810 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 ffe7 	bl	800b74c <xTaskPriorityDisinherit>
 800a77e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	609a      	str	r2, [r3, #8]
 800a786:	e043      	b.n	800a810 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d119      	bne.n	800a7c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6858      	ldr	r0, [r3, #4]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	461a      	mov	r2, r3
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	f002 f957 	bl	800ca4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	441a      	add	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d32b      	bcc.n	800a810 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	605a      	str	r2, [r3, #4]
 800a7c0:	e026      	b.n	800a810 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68d8      	ldr	r0, [r3, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	f002 f93d 	bl	800ca4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	425b      	negs	r3, r3
 800a7dc:	441a      	add	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d207      	bcs.n	800a7fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	425b      	negs	r3, r3
 800a7f8:	441a      	add	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b02      	cmp	r3, #2
 800a802:	d105      	bne.n	800a810 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a818:	697b      	ldr	r3, [r7, #20]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	d018      	beq.n	800a866 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68da      	ldr	r2, [r3, #12]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	441a      	add	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d303      	bcc.n	800a856 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68d9      	ldr	r1, [r3, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	461a      	mov	r2, r3
 800a860:	6838      	ldr	r0, [r7, #0]
 800a862:	f002 f8f3 	bl	800ca4c <memcpy>
	}
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a876:	f001 fca5 	bl	800c1c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a880:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a882:	e011      	b.n	800a8a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d012      	beq.n	800a8b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fd7b 	bl	800b38c <xTaskRemoveFromEventList>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a89c:	f000 fe52 	bl	800b544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dce9      	bgt.n	800a884 <prvUnlockQueue+0x16>
 800a8b0:	e000      	b.n	800a8b4 <prvUnlockQueue+0x46>
					break;
 800a8b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	22ff      	movs	r2, #255	; 0xff
 800a8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8bc:	f001 fcb2 	bl	800c224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8c0:	f001 fc80 	bl	800c1c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8cc:	e011      	b.n	800a8f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d012      	beq.n	800a8fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3310      	adds	r3, #16
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fd56 	bl	800b38c <xTaskRemoveFromEventList>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8e6:	f000 fe2d 	bl	800b544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dce9      	bgt.n	800a8ce <prvUnlockQueue+0x60>
 800a8fa:	e000      	b.n	800a8fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	22ff      	movs	r2, #255	; 0xff
 800a902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a906:	f001 fc8d 	bl	800c224 <vPortExitCritical>
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a91a:	f001 fc53 	bl	800c1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a926:	2301      	movs	r3, #1
 800a928:	60fb      	str	r3, [r7, #12]
 800a92a:	e001      	b.n	800a930 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a930:	f001 fc78 	bl	800c224 <vPortExitCritical>

	return xReturn;
 800a934:	68fb      	ldr	r3, [r7, #12]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a946:	f001 fc3d 	bl	800c1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	429a      	cmp	r2, r3
 800a954:	d102      	bne.n	800a95c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a956:	2301      	movs	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e001      	b.n	800a960 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a960:	f001 fc60 	bl	800c224 <vPortExitCritical>

	return xReturn;
 800a964:	68fb      	ldr	r3, [r7, #12]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	e014      	b.n	800a9aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a980:	4a0f      	ldr	r2, [pc, #60]	; (800a9c0 <vQueueAddToRegistry+0x50>)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a98c:	490c      	ldr	r1, [pc, #48]	; (800a9c0 <vQueueAddToRegistry+0x50>)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a996:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <vQueueAddToRegistry+0x50>)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4413      	add	r3, r2
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9a2:	e006      	b.n	800a9b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b07      	cmp	r3, #7
 800a9ae:	d9e7      	bls.n	800a980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	2000638c 	.word	0x2000638c

0800a9c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e016      	b.n	800aa00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a9d2:	4a10      	ldr	r2, [pc, #64]	; (800aa14 <vQueueUnregisterQueue+0x50>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	4413      	add	r3, r2
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d10b      	bne.n	800a9fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a9e2:	4a0c      	ldr	r2, [pc, #48]	; (800aa14 <vQueueUnregisterQueue+0x50>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a9ec:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <vQueueUnregisterQueue+0x50>)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	4413      	add	r3, r2
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	605a      	str	r2, [r3, #4]
				break;
 800a9f8:	e006      	b.n	800aa08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b07      	cmp	r3, #7
 800aa04:	d9e5      	bls.n	800a9d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa06:	bf00      	nop
 800aa08:	bf00      	nop
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	2000638c 	.word	0x2000638c

0800aa18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa28:	f001 fbcc 	bl	800c1c4 <vPortEnterCritical>
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa32:	b25b      	sxtb	r3, r3
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa38:	d103      	bne.n	800aa42 <vQueueWaitForMessageRestricted+0x2a>
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa4e:	d103      	bne.n	800aa58 <vQueueWaitForMessageRestricted+0x40>
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa58:	f001 fbe4 	bl	800c224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	3324      	adds	r3, #36	; 0x24
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fc61 	bl	800b334 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa72:	6978      	ldr	r0, [r7, #20]
 800aa74:	f7ff fefb 	bl	800a86e <prvUnlockQueue>
	}
 800aa78:	bf00      	nop
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08e      	sub	sp, #56	; 0x38
 800aa84:	af04      	add	r7, sp, #16
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	623b      	str	r3, [r7, #32]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <xTaskCreateStatic+0x46>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	61fb      	str	r3, [r7, #28]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aac6:	23bc      	movs	r3, #188	; 0xbc
 800aac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2bbc      	cmp	r3, #188	; 0xbc
 800aace:	d00a      	beq.n	800aae6 <xTaskCreateStatic+0x66>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	61bb      	str	r3, [r7, #24]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aae6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d01e      	beq.n	800ab2c <xTaskCreateStatic+0xac>
 800aaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01b      	beq.n	800ab2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aafc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	2202      	movs	r2, #2
 800ab02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab06:	2300      	movs	r3, #0
 800ab08:	9303      	str	r3, [sp, #12]
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	9302      	str	r3, [sp, #8]
 800ab0e:	f107 0314 	add.w	r3, r7, #20
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	68b9      	ldr	r1, [r7, #8]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 f850 	bl	800abc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab26:	f000 f8f3 	bl	800ad10 <prvAddNewTaskToReadyList>
 800ab2a:	e001      	b.n	800ab30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab30:	697b      	ldr	r3, [r7, #20]
	}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3728      	adds	r7, #40	; 0x28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b08c      	sub	sp, #48	; 0x30
 800ab3e:	af04      	add	r7, sp, #16
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	4613      	mov	r3, r2
 800ab48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab4a:	88fb      	ldrh	r3, [r7, #6]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 fc5a 	bl	800c408 <pvPortMalloc>
 800ab54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab5c:	20bc      	movs	r0, #188	; 0xbc
 800ab5e:	f001 fc53 	bl	800c408 <pvPortMalloc>
 800ab62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab70:	e005      	b.n	800ab7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab72:	6978      	ldr	r0, [r7, #20]
 800ab74:	f001 fcec 	bl	800c550 <vPortFree>
 800ab78:	e001      	b.n	800ab7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d017      	beq.n	800abb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab8c:	88fa      	ldrh	r2, [r7, #6]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	9303      	str	r3, [sp, #12]
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	9302      	str	r3, [sp, #8]
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68b9      	ldr	r1, [r7, #8]
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 f80e 	bl	800abc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aba8:	69f8      	ldr	r0, [r7, #28]
 800abaa:	f000 f8b1 	bl	800ad10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abae:	2301      	movs	r3, #1
 800abb0:	61bb      	str	r3, [r7, #24]
 800abb2:	e002      	b.n	800abba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abba:	69bb      	ldr	r3, [r7, #24]
	}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	461a      	mov	r2, r3
 800abdc:	21a5      	movs	r1, #165	; 0xa5
 800abde:	f001 ff43 	bl	800ca68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800abec:	3b01      	subs	r3, #1
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	617b      	str	r3, [r7, #20]
}
 800ac18:	bf00      	nop
 800ac1a:	e7fe      	b.n	800ac1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01f      	beq.n	800ac62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]
 800ac26:	e012      	b.n	800ac4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	7819      	ldrb	r1, [r3, #0]
 800ac30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	4413      	add	r3, r2
 800ac36:	3334      	adds	r3, #52	; 0x34
 800ac38:	460a      	mov	r2, r1
 800ac3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	4413      	add	r3, r2
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d006      	beq.n	800ac56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	61fb      	str	r3, [r7, #28]
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	2b0f      	cmp	r3, #15
 800ac52:	d9e9      	bls.n	800ac28 <prvInitialiseNewTask+0x64>
 800ac54:	e000      	b.n	800ac58 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac60:	e003      	b.n	800ac6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	2b37      	cmp	r3, #55	; 0x37
 800ac6e:	d901      	bls.n	800ac74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac70:	2337      	movs	r3, #55	; 0x37
 800ac72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	2200      	movs	r2, #0
 800ac84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	3304      	adds	r3, #4
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff f806 	bl	8009c9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	3318      	adds	r3, #24
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7ff f801 	bl	8009c9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	3354      	adds	r3, #84	; 0x54
 800acc4:	2260      	movs	r2, #96	; 0x60
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fecd 	bl	800ca68 <memset>
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	4a0c      	ldr	r2, [pc, #48]	; (800ad04 <prvInitialiseNewTask+0x140>)
 800acd2:	659a      	str	r2, [r3, #88]	; 0x58
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	4a0c      	ldr	r2, [pc, #48]	; (800ad08 <prvInitialiseNewTask+0x144>)
 800acd8:	65da      	str	r2, [r3, #92]	; 0x5c
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	4a0b      	ldr	r2, [pc, #44]	; (800ad0c <prvInitialiseNewTask+0x148>)
 800acde:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	68f9      	ldr	r1, [r7, #12]
 800ace4:	69b8      	ldr	r0, [r7, #24]
 800ace6:	f001 f941 	bl	800bf6c <pxPortInitialiseStack>
 800acea:	4602      	mov	r2, r0
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acfc:	bf00      	nop
 800acfe:	3720      	adds	r7, #32
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	0800fff4 	.word	0x0800fff4
 800ad08:	08010014 	.word	0x08010014
 800ad0c:	0800ffd4 	.word	0x0800ffd4

0800ad10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad18:	f001 fa54 	bl	800c1c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad1c:	4b2d      	ldr	r3, [pc, #180]	; (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3301      	adds	r3, #1
 800ad22:	4a2c      	ldr	r2, [pc, #176]	; (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad26:	4b2c      	ldr	r3, [pc, #176]	; (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad2e:	4a2a      	ldr	r2, [pc, #168]	; (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad34:	4b27      	ldr	r3, [pc, #156]	; (800add4 <prvAddNewTaskToReadyList+0xc4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d110      	bne.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad3c:	f000 fc26 	bl	800b58c <prvInitialiseTaskLists>
 800ad40:	e00d      	b.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad42:	4b26      	ldr	r3, [pc, #152]	; (800addc <prvAddNewTaskToReadyList+0xcc>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d109      	bne.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad4a:	4b23      	ldr	r3, [pc, #140]	; (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d802      	bhi.n	800ad5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad58:	4a1f      	ldr	r2, [pc, #124]	; (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad5e:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad68:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <prvAddNewTaskToReadyList+0xd0>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad74:	4b1b      	ldr	r3, [pc, #108]	; (800ade4 <prvAddNewTaskToReadyList+0xd4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <prvAddNewTaskToReadyList+0x74>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4a18      	ldr	r2, [pc, #96]	; (800ade4 <prvAddNewTaskToReadyList+0xd4>)
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <prvAddNewTaskToReadyList+0xd8>)
 800ad92:	441a      	add	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fe ff8b 	bl	8009cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ada0:	f001 fa40 	bl	800c224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ada4:	4b0d      	ldr	r3, [pc, #52]	; (800addc <prvAddNewTaskToReadyList+0xcc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <prvAddNewTaskToReadyList+0xc8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d207      	bcs.n	800adca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <prvAddNewTaskToReadyList+0xdc>)
 800adbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	200068a0 	.word	0x200068a0
 800add8:	200063cc 	.word	0x200063cc
 800addc:	200068ac 	.word	0x200068ac
 800ade0:	200068bc 	.word	0x200068bc
 800ade4:	200068a8 	.word	0x200068a8
 800ade8:	200063d0 	.word	0x200063d0
 800adec:	e000ed04 	.word	0xe000ed04

0800adf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d017      	beq.n	800ae32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae02:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <vTaskDelay+0x60>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <vTaskDelay+0x30>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	60bb      	str	r3, [r7, #8]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae20:	f000 f88a 	bl	800af38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae24:	2100      	movs	r1, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fcfe 	bl	800b828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae2c:	f000 f892 	bl	800af54 <xTaskResumeAll>
 800ae30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d107      	bne.n	800ae48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae38:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <vTaskDelay+0x64>)
 800ae3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	200068c8 	.word	0x200068c8
 800ae54:	e000ed04 	.word	0xe000ed04

0800ae58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08a      	sub	sp, #40	; 0x28
 800ae5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae66:	463a      	mov	r2, r7
 800ae68:	1d39      	adds	r1, r7, #4
 800ae6a:	f107 0308 	add.w	r3, r7, #8
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fec0 	bl	8009bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	9202      	str	r2, [sp, #8]
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	2300      	movs	r3, #0
 800ae84:	460a      	mov	r2, r1
 800ae86:	4924      	ldr	r1, [pc, #144]	; (800af18 <vTaskStartScheduler+0xc0>)
 800ae88:	4824      	ldr	r0, [pc, #144]	; (800af1c <vTaskStartScheduler+0xc4>)
 800ae8a:	f7ff fdf9 	bl	800aa80 <xTaskCreateStatic>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	4a23      	ldr	r2, [pc, #140]	; (800af20 <vTaskStartScheduler+0xc8>)
 800ae92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae94:	4b22      	ldr	r3, [pc, #136]	; (800af20 <vTaskStartScheduler+0xc8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	e001      	b.n	800aea6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d102      	bne.n	800aeb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aeac:	f000 fd10 	bl	800b8d0 <xTimerCreateTimerTask>
 800aeb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d11b      	bne.n	800aef0 <vTaskStartScheduler+0x98>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	613b      	str	r3, [r7, #16]
}
 800aeca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aecc:	4b15      	ldr	r3, [pc, #84]	; (800af24 <vTaskStartScheduler+0xcc>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3354      	adds	r3, #84	; 0x54
 800aed2:	4a15      	ldr	r2, [pc, #84]	; (800af28 <vTaskStartScheduler+0xd0>)
 800aed4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aed6:	4b15      	ldr	r3, [pc, #84]	; (800af2c <vTaskStartScheduler+0xd4>)
 800aed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aedc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aede:	4b14      	ldr	r3, [pc, #80]	; (800af30 <vTaskStartScheduler+0xd8>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aee4:	4b13      	ldr	r3, [pc, #76]	; (800af34 <vTaskStartScheduler+0xdc>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aeea:	f001 f8c9 	bl	800c080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aeee:	e00e      	b.n	800af0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aef6:	d10a      	bne.n	800af0e <vTaskStartScheduler+0xb6>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	60fb      	str	r3, [r7, #12]
}
 800af0a:	bf00      	nop
 800af0c:	e7fe      	b.n	800af0c <vTaskStartScheduler+0xb4>
}
 800af0e:	bf00      	nop
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	0800de38 	.word	0x0800de38
 800af1c:	0800b55d 	.word	0x0800b55d
 800af20:	200068c4 	.word	0x200068c4
 800af24:	200063cc 	.word	0x200063cc
 800af28:	200000c4 	.word	0x200000c4
 800af2c:	200068c0 	.word	0x200068c0
 800af30:	200068ac 	.word	0x200068ac
 800af34:	200068a4 	.word	0x200068a4

0800af38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af3c:	4b04      	ldr	r3, [pc, #16]	; (800af50 <vTaskSuspendAll+0x18>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	4a03      	ldr	r2, [pc, #12]	; (800af50 <vTaskSuspendAll+0x18>)
 800af44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af46:	bf00      	nop
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	200068c8 	.word	0x200068c8

0800af54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af5e:	2300      	movs	r3, #0
 800af60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af62:	4b42      	ldr	r3, [pc, #264]	; (800b06c <xTaskResumeAll+0x118>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xTaskResumeAll+0x2c>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	603b      	str	r3, [r7, #0]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af80:	f001 f920 	bl	800c1c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af84:	4b39      	ldr	r3, [pc, #228]	; (800b06c <xTaskResumeAll+0x118>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3b01      	subs	r3, #1
 800af8a:	4a38      	ldr	r2, [pc, #224]	; (800b06c <xTaskResumeAll+0x118>)
 800af8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af8e:	4b37      	ldr	r3, [pc, #220]	; (800b06c <xTaskResumeAll+0x118>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d162      	bne.n	800b05c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af96:	4b36      	ldr	r3, [pc, #216]	; (800b070 <xTaskResumeAll+0x11c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d05e      	beq.n	800b05c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af9e:	e02f      	b.n	800b000 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa0:	4b34      	ldr	r3, [pc, #208]	; (800b074 <xTaskResumeAll+0x120>)
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3318      	adds	r3, #24
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe fedf 	bl	8009d70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe feda 	bl	8009d70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	4b2d      	ldr	r3, [pc, #180]	; (800b078 <xTaskResumeAll+0x124>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d903      	bls.n	800afd0 <xTaskResumeAll+0x7c>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	4a2a      	ldr	r2, [pc, #168]	; (800b078 <xTaskResumeAll+0x124>)
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4a27      	ldr	r2, [pc, #156]	; (800b07c <xTaskResumeAll+0x128>)
 800afde:	441a      	add	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fe fe65 	bl	8009cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	4b23      	ldr	r3, [pc, #140]	; (800b080 <xTaskResumeAll+0x12c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d302      	bcc.n	800b000 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800affa:	4b22      	ldr	r3, [pc, #136]	; (800b084 <xTaskResumeAll+0x130>)
 800affc:	2201      	movs	r2, #1
 800affe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b000:	4b1c      	ldr	r3, [pc, #112]	; (800b074 <xTaskResumeAll+0x120>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1cb      	bne.n	800afa0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b00e:	f000 fb5f 	bl	800b6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <xTaskResumeAll+0x134>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d010      	beq.n	800b040 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b01e:	f000 f847 	bl	800b0b0 <xTaskIncrementTick>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b028:	4b16      	ldr	r3, [pc, #88]	; (800b084 <xTaskResumeAll+0x130>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3b01      	subs	r3, #1
 800b032:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1f1      	bne.n	800b01e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b03a:	4b13      	ldr	r3, [pc, #76]	; (800b088 <xTaskResumeAll+0x134>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b040:	4b10      	ldr	r3, [pc, #64]	; (800b084 <xTaskResumeAll+0x130>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b048:	2301      	movs	r3, #1
 800b04a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b04c:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <xTaskResumeAll+0x138>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b05c:	f001 f8e2 	bl	800c224 <vPortExitCritical>

	return xAlreadyYielded;
 800b060:	68bb      	ldr	r3, [r7, #8]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	200068c8 	.word	0x200068c8
 800b070:	200068a0 	.word	0x200068a0
 800b074:	20006860 	.word	0x20006860
 800b078:	200068a8 	.word	0x200068a8
 800b07c:	200063d0 	.word	0x200063d0
 800b080:	200063cc 	.word	0x200063cc
 800b084:	200068b4 	.word	0x200068b4
 800b088:	200068b0 	.word	0x200068b0
 800b08c:	e000ed04 	.word	0xe000ed04

0800b090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <xTaskGetTickCount+0x1c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b09c:	687b      	ldr	r3, [r7, #4]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	200068a4 	.word	0x200068a4

0800b0b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ba:	4b4f      	ldr	r3, [pc, #316]	; (800b1f8 <xTaskIncrementTick+0x148>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f040 808f 	bne.w	800b1e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0c4:	4b4d      	ldr	r3, [pc, #308]	; (800b1fc <xTaskIncrementTick+0x14c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0cc:	4a4b      	ldr	r2, [pc, #300]	; (800b1fc <xTaskIncrementTick+0x14c>)
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d120      	bne.n	800b11a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0d8:	4b49      	ldr	r3, [pc, #292]	; (800b200 <xTaskIncrementTick+0x150>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	603b      	str	r3, [r7, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xTaskIncrementTick+0x46>
 800b0f8:	4b41      	ldr	r3, [pc, #260]	; (800b200 <xTaskIncrementTick+0x150>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	4b41      	ldr	r3, [pc, #260]	; (800b204 <xTaskIncrementTick+0x154>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a3f      	ldr	r2, [pc, #252]	; (800b200 <xTaskIncrementTick+0x150>)
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	4a3f      	ldr	r2, [pc, #252]	; (800b204 <xTaskIncrementTick+0x154>)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	4b3e      	ldr	r3, [pc, #248]	; (800b208 <xTaskIncrementTick+0x158>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3301      	adds	r3, #1
 800b112:	4a3d      	ldr	r2, [pc, #244]	; (800b208 <xTaskIncrementTick+0x158>)
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	f000 fadb 	bl	800b6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b11a:	4b3c      	ldr	r3, [pc, #240]	; (800b20c <xTaskIncrementTick+0x15c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	429a      	cmp	r2, r3
 800b122:	d349      	bcc.n	800b1b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b124:	4b36      	ldr	r3, [pc, #216]	; (800b200 <xTaskIncrementTick+0x150>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d104      	bne.n	800b138 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b12e:	4b37      	ldr	r3, [pc, #220]	; (800b20c <xTaskIncrementTick+0x15c>)
 800b130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b134:	601a      	str	r2, [r3, #0]
					break;
 800b136:	e03f      	b.n	800b1b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b138:	4b31      	ldr	r3, [pc, #196]	; (800b200 <xTaskIncrementTick+0x150>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d203      	bcs.n	800b158 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b150:	4a2e      	ldr	r2, [pc, #184]	; (800b20c <xTaskIncrementTick+0x15c>)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b156:	e02f      	b.n	800b1b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	3304      	adds	r3, #4
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe fe07 	bl	8009d70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	3318      	adds	r3, #24
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fdfe 	bl	8009d70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4b25      	ldr	r3, [pc, #148]	; (800b210 <xTaskIncrementTick+0x160>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d903      	bls.n	800b188 <xTaskIncrementTick+0xd8>
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	4a22      	ldr	r2, [pc, #136]	; (800b210 <xTaskIncrementTick+0x160>)
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4a1f      	ldr	r2, [pc, #124]	; (800b214 <xTaskIncrementTick+0x164>)
 800b196:	441a      	add	r2, r3
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f7fe fd89 	bl	8009cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	4b1b      	ldr	r3, [pc, #108]	; (800b218 <xTaskIncrementTick+0x168>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3b8      	bcc.n	800b124 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b6:	e7b5      	b.n	800b124 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1b8:	4b17      	ldr	r3, [pc, #92]	; (800b218 <xTaskIncrementTick+0x168>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1be:	4915      	ldr	r1, [pc, #84]	; (800b214 <xTaskIncrementTick+0x164>)
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d901      	bls.n	800b1d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1d4:	4b11      	ldr	r3, [pc, #68]	; (800b21c <xTaskIncrementTick+0x16c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e004      	b.n	800b1ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <xTaskIncrementTick+0x170>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	4a0d      	ldr	r2, [pc, #52]	; (800b220 <xTaskIncrementTick+0x170>)
 800b1ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	200068c8 	.word	0x200068c8
 800b1fc:	200068a4 	.word	0x200068a4
 800b200:	20006858 	.word	0x20006858
 800b204:	2000685c 	.word	0x2000685c
 800b208:	200068b8 	.word	0x200068b8
 800b20c:	200068c0 	.word	0x200068c0
 800b210:	200068a8 	.word	0x200068a8
 800b214:	200063d0 	.word	0x200063d0
 800b218:	200063cc 	.word	0x200063cc
 800b21c:	200068b4 	.word	0x200068b4
 800b220:	200068b0 	.word	0x200068b0

0800b224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b22a:	4b2a      	ldr	r3, [pc, #168]	; (800b2d4 <vTaskSwitchContext+0xb0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b232:	4b29      	ldr	r3, [pc, #164]	; (800b2d8 <vTaskSwitchContext+0xb4>)
 800b234:	2201      	movs	r2, #1
 800b236:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b238:	e046      	b.n	800b2c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b23a:	4b27      	ldr	r3, [pc, #156]	; (800b2d8 <vTaskSwitchContext+0xb4>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b26      	ldr	r3, [pc, #152]	; (800b2dc <vTaskSwitchContext+0xb8>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	e010      	b.n	800b26a <vTaskSwitchContext+0x46>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <vTaskSwitchContext+0x40>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <vTaskSwitchContext+0x3e>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3b01      	subs	r3, #1
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	491d      	ldr	r1, [pc, #116]	; (800b2e0 <vTaskSwitchContext+0xbc>)
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	440b      	add	r3, r1
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0e4      	beq.n	800b248 <vTaskSwitchContext+0x24>
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4a15      	ldr	r2, [pc, #84]	; (800b2e0 <vTaskSwitchContext+0xbc>)
 800b28a:	4413      	add	r3, r2
 800b28c:	60bb      	str	r3, [r7, #8]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	605a      	str	r2, [r3, #4]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d104      	bne.n	800b2ae <vTaskSwitchContext+0x8a>
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	605a      	str	r2, [r3, #4]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	4a0b      	ldr	r2, [pc, #44]	; (800b2e4 <vTaskSwitchContext+0xc0>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <vTaskSwitchContext+0xb8>)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <vTaskSwitchContext+0xc0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3354      	adds	r3, #84	; 0x54
 800b2c4:	4a08      	ldr	r2, [pc, #32]	; (800b2e8 <vTaskSwitchContext+0xc4>)
 800b2c6:	6013      	str	r3, [r2, #0]
}
 800b2c8:	bf00      	nop
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	200068c8 	.word	0x200068c8
 800b2d8:	200068b4 	.word	0x200068b4
 800b2dc:	200068a8 	.word	0x200068a8
 800b2e0:	200063d0 	.word	0x200063d0
 800b2e4:	200063cc 	.word	0x200063cc
 800b2e8:	200000c4 	.word	0x200000c4

0800b2ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	60fb      	str	r3, [r7, #12]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b312:	4b07      	ldr	r3, [pc, #28]	; (800b330 <vTaskPlaceOnEventList+0x44>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3318      	adds	r3, #24
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7fe fcef 	bl	8009cfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b320:	2101      	movs	r1, #1
 800b322:	6838      	ldr	r0, [r7, #0]
 800b324:	f000 fa80 	bl	800b828 <prvAddCurrentTaskToDelayedList>
}
 800b328:	bf00      	nop
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	200063cc 	.word	0x200063cc

0800b334 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	617b      	str	r3, [r7, #20]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b35c:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <vTaskPlaceOnEventListRestricted+0x54>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3318      	adds	r3, #24
 800b362:	4619      	mov	r1, r3
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7fe fca6 	bl	8009cb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b374:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f000 fa55 	bl	800b828 <prvAddCurrentTaskToDelayedList>
	}
 800b37e:	bf00      	nop
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	200063cc 	.word	0x200063cc

0800b38c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10a      	bne.n	800b3b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	60fb      	str	r3, [r7, #12]
}
 800b3b4:	bf00      	nop
 800b3b6:	e7fe      	b.n	800b3b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	3318      	adds	r3, #24
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fcd7 	bl	8009d70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3c2:	4b1e      	ldr	r3, [pc, #120]	; (800b43c <xTaskRemoveFromEventList+0xb0>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d11d      	bne.n	800b406 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fcce 	bl	8009d70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b19      	ldr	r3, [pc, #100]	; (800b440 <xTaskRemoveFromEventList+0xb4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <xTaskRemoveFromEventList+0x5c>
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a16      	ldr	r2, [pc, #88]	; (800b440 <xTaskRemoveFromEventList+0xb4>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a13      	ldr	r2, [pc, #76]	; (800b444 <xTaskRemoveFromEventList+0xb8>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe fc59 	bl	8009cb6 <vListInsertEnd>
 800b404:	e005      	b.n	800b412 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	3318      	adds	r3, #24
 800b40a:	4619      	mov	r1, r3
 800b40c:	480e      	ldr	r0, [pc, #56]	; (800b448 <xTaskRemoveFromEventList+0xbc>)
 800b40e:	f7fe fc52 	bl	8009cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b416:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <xTaskRemoveFromEventList+0xc0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d905      	bls.n	800b42c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b420:	2301      	movs	r3, #1
 800b422:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <xTaskRemoveFromEventList+0xc4>)
 800b426:	2201      	movs	r2, #1
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	e001      	b.n	800b430 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b430:	697b      	ldr	r3, [r7, #20]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	200068c8 	.word	0x200068c8
 800b440:	200068a8 	.word	0x200068a8
 800b444:	200063d0 	.word	0x200063d0
 800b448:	20006860 	.word	0x20006860
 800b44c:	200063cc 	.word	0x200063cc
 800b450:	200068b4 	.word	0x200068b4

0800b454 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <vTaskInternalSetTimeOutState+0x24>)
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b464:	4b05      	ldr	r3, [pc, #20]	; (800b47c <vTaskInternalSetTimeOutState+0x28>)
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	605a      	str	r2, [r3, #4]
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	200068b8 	.word	0x200068b8
 800b47c:	200068a4 	.word	0x200068a4

0800b480 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	613b      	str	r3, [r7, #16]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	60fb      	str	r3, [r7, #12]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4c2:	f000 fe7f 	bl	800c1c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4c6:	4b1d      	ldr	r3, [pc, #116]	; (800b53c <xTaskCheckForTimeOut+0xbc>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4de:	d102      	bne.n	800b4e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	61fb      	str	r3, [r7, #28]
 800b4e4:	e023      	b.n	800b52e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <xTaskCheckForTimeOut+0xc0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d007      	beq.n	800b502 <xTaskCheckForTimeOut+0x82>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	69ba      	ldr	r2, [r7, #24]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d302      	bcc.n	800b502 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	61fb      	str	r3, [r7, #28]
 800b500:	e015      	b.n	800b52e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d20b      	bcs.n	800b524 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	1ad2      	subs	r2, r2, r3
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff ff9b 	bl	800b454 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b51e:	2300      	movs	r3, #0
 800b520:	61fb      	str	r3, [r7, #28]
 800b522:	e004      	b.n	800b52e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b52a:	2301      	movs	r3, #1
 800b52c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b52e:	f000 fe79 	bl	800c224 <vPortExitCritical>

	return xReturn;
 800b532:	69fb      	ldr	r3, [r7, #28]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3720      	adds	r7, #32
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	200068a4 	.word	0x200068a4
 800b540:	200068b8 	.word	0x200068b8

0800b544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b544:	b480      	push	{r7}
 800b546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b548:	4b03      	ldr	r3, [pc, #12]	; (800b558 <vTaskMissedYield+0x14>)
 800b54a:	2201      	movs	r2, #1
 800b54c:	601a      	str	r2, [r3, #0]
}
 800b54e:	bf00      	nop
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	200068b4 	.word	0x200068b4

0800b55c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b564:	f000 f852 	bl	800b60c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b568:	4b06      	ldr	r3, [pc, #24]	; (800b584 <prvIdleTask+0x28>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d9f9      	bls.n	800b564 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b570:	4b05      	ldr	r3, [pc, #20]	; (800b588 <prvIdleTask+0x2c>)
 800b572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b580:	e7f0      	b.n	800b564 <prvIdleTask+0x8>
 800b582:	bf00      	nop
 800b584:	200063d0 	.word	0x200063d0
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b592:	2300      	movs	r3, #0
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	e00c      	b.n	800b5b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4a12      	ldr	r2, [pc, #72]	; (800b5ec <prvInitialiseTaskLists+0x60>)
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe fb58 	bl	8009c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b37      	cmp	r3, #55	; 0x37
 800b5b6:	d9ef      	bls.n	800b598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5b8:	480d      	ldr	r0, [pc, #52]	; (800b5f0 <prvInitialiseTaskLists+0x64>)
 800b5ba:	f7fe fb4f 	bl	8009c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5be:	480d      	ldr	r0, [pc, #52]	; (800b5f4 <prvInitialiseTaskLists+0x68>)
 800b5c0:	f7fe fb4c 	bl	8009c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5c4:	480c      	ldr	r0, [pc, #48]	; (800b5f8 <prvInitialiseTaskLists+0x6c>)
 800b5c6:	f7fe fb49 	bl	8009c5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5ca:	480c      	ldr	r0, [pc, #48]	; (800b5fc <prvInitialiseTaskLists+0x70>)
 800b5cc:	f7fe fb46 	bl	8009c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5d0:	480b      	ldr	r0, [pc, #44]	; (800b600 <prvInitialiseTaskLists+0x74>)
 800b5d2:	f7fe fb43 	bl	8009c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5d6:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <prvInitialiseTaskLists+0x78>)
 800b5d8:	4a05      	ldr	r2, [pc, #20]	; (800b5f0 <prvInitialiseTaskLists+0x64>)
 800b5da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	; (800b608 <prvInitialiseTaskLists+0x7c>)
 800b5de:	4a05      	ldr	r2, [pc, #20]	; (800b5f4 <prvInitialiseTaskLists+0x68>)
 800b5e0:	601a      	str	r2, [r3, #0]
}
 800b5e2:	bf00      	nop
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	200063d0 	.word	0x200063d0
 800b5f0:	20006830 	.word	0x20006830
 800b5f4:	20006844 	.word	0x20006844
 800b5f8:	20006860 	.word	0x20006860
 800b5fc:	20006874 	.word	0x20006874
 800b600:	2000688c 	.word	0x2000688c
 800b604:	20006858 	.word	0x20006858
 800b608:	2000685c 	.word	0x2000685c

0800b60c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b612:	e019      	b.n	800b648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b614:	f000 fdd6 	bl	800c1c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b618:	4b10      	ldr	r3, [pc, #64]	; (800b65c <prvCheckTasksWaitingTermination+0x50>)
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3304      	adds	r3, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fba3 	bl	8009d70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b62a:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <prvCheckTasksWaitingTermination+0x54>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3b01      	subs	r3, #1
 800b630:	4a0b      	ldr	r2, [pc, #44]	; (800b660 <prvCheckTasksWaitingTermination+0x54>)
 800b632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b634:	4b0b      	ldr	r3, [pc, #44]	; (800b664 <prvCheckTasksWaitingTermination+0x58>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3b01      	subs	r3, #1
 800b63a:	4a0a      	ldr	r2, [pc, #40]	; (800b664 <prvCheckTasksWaitingTermination+0x58>)
 800b63c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b63e:	f000 fdf1 	bl	800c224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f810 	bl	800b668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b648:	4b06      	ldr	r3, [pc, #24]	; (800b664 <prvCheckTasksWaitingTermination+0x58>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e1      	bne.n	800b614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20006874 	.word	0x20006874
 800b660:	200068a0 	.word	0x200068a0
 800b664:	20006888 	.word	0x20006888

0800b668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3354      	adds	r3, #84	; 0x54
 800b674:	4618      	mov	r0, r3
 800b676:	f001 fb03 	bl	800cc80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b680:	2b00      	cmp	r3, #0
 800b682:	d108      	bne.n	800b696 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 ff61 	bl	800c550 <vPortFree>
				vPortFree( pxTCB );
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 ff5e 	bl	800c550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b694:	e018      	b.n	800b6c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d103      	bne.n	800b6a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 ff55 	bl	800c550 <vPortFree>
	}
 800b6a6:	e00f      	b.n	800b6c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d00a      	beq.n	800b6c8 <prvDeleteTCB+0x60>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	60fb      	str	r3, [r7, #12]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <prvDeleteTCB+0x5e>
	}
 800b6c8:	bf00      	nop
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6d6:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvResetNextTaskUnblockTime+0x38>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d104      	bne.n	800b6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <prvResetNextTaskUnblockTime+0x3c>)
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6e8:	e008      	b.n	800b6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ea:	4b07      	ldr	r3, [pc, #28]	; (800b708 <prvResetNextTaskUnblockTime+0x38>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4a04      	ldr	r2, [pc, #16]	; (800b70c <prvResetNextTaskUnblockTime+0x3c>)
 800b6fa:	6013      	str	r3, [r2, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	20006858 	.word	0x20006858
 800b70c:	200068c0 	.word	0x200068c0

0800b710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <xTaskGetSchedulerState+0x34>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b71e:	2301      	movs	r3, #1
 800b720:	607b      	str	r3, [r7, #4]
 800b722:	e008      	b.n	800b736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b724:	4b08      	ldr	r3, [pc, #32]	; (800b748 <xTaskGetSchedulerState+0x38>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b72c:	2302      	movs	r3, #2
 800b72e:	607b      	str	r3, [r7, #4]
 800b730:	e001      	b.n	800b736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b732:	2300      	movs	r3, #0
 800b734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b736:	687b      	ldr	r3, [r7, #4]
	}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	200068ac 	.word	0x200068ac
 800b748:	200068c8 	.word	0x200068c8

0800b74c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b758:	2300      	movs	r3, #0
 800b75a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d056      	beq.n	800b810 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b762:	4b2e      	ldr	r3, [pc, #184]	; (800b81c <xTaskPriorityDisinherit+0xd0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d00a      	beq.n	800b782 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	60fb      	str	r3, [r7, #12]
}
 800b77e:	bf00      	nop
 800b780:	e7fe      	b.n	800b780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	60bb      	str	r3, [r7, #8]
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d02c      	beq.n	800b810 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d128      	bne.n	800b810 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fad4 	bl	8009d70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <xTaskPriorityDisinherit+0xd4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d903      	bls.n	800b7f0 <xTaskPriorityDisinherit+0xa4>
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	4a0c      	ldr	r2, [pc, #48]	; (800b820 <xTaskPriorityDisinherit+0xd4>)
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4a09      	ldr	r2, [pc, #36]	; (800b824 <xTaskPriorityDisinherit+0xd8>)
 800b7fe:	441a      	add	r2, r3
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	3304      	adds	r3, #4
 800b804:	4619      	mov	r1, r3
 800b806:	4610      	mov	r0, r2
 800b808:	f7fe fa55 	bl	8009cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b80c:	2301      	movs	r3, #1
 800b80e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b810:	697b      	ldr	r3, [r7, #20]
	}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	200063cc 	.word	0x200063cc
 800b820:	200068a8 	.word	0x200068a8
 800b824:	200063d0 	.word	0x200063d0

0800b828 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b832:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b838:	4b20      	ldr	r3, [pc, #128]	; (800b8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fa96 	bl	8009d70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b84a:	d10a      	bne.n	800b862 <prvAddCurrentTaskToDelayedList+0x3a>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d007      	beq.n	800b862 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b852:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3304      	adds	r3, #4
 800b858:	4619      	mov	r1, r3
 800b85a:	4819      	ldr	r0, [pc, #100]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b85c:	f7fe fa2b 	bl	8009cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b860:	e026      	b.n	800b8b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4413      	add	r3, r2
 800b868:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b86a:	4b14      	ldr	r3, [pc, #80]	; (800b8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	429a      	cmp	r2, r3
 800b878:	d209      	bcs.n	800b88e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b87a:	4b12      	ldr	r3, [pc, #72]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3304      	adds	r3, #4
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7fe fa39 	bl	8009cfe <vListInsert>
}
 800b88c:	e010      	b.n	800b8b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b88e:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3304      	adds	r3, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f7fe fa2f 	bl	8009cfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8a0:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d202      	bcs.n	800b8b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8aa:	4a08      	ldr	r2, [pc, #32]	; (800b8cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	6013      	str	r3, [r2, #0]
}
 800b8b0:	bf00      	nop
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	200068a4 	.word	0x200068a4
 800b8bc:	200063cc 	.word	0x200063cc
 800b8c0:	2000688c 	.word	0x2000688c
 800b8c4:	2000685c 	.word	0x2000685c
 800b8c8:	20006858 	.word	0x20006858
 800b8cc:	200068c0 	.word	0x200068c0

0800b8d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08a      	sub	sp, #40	; 0x28
 800b8d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8da:	f000 fb07 	bl	800beec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8de:	4b1c      	ldr	r3, [pc, #112]	; (800b950 <xTimerCreateTimerTask+0x80>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d021      	beq.n	800b92a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8ee:	1d3a      	adds	r2, r7, #4
 800b8f0:	f107 0108 	add.w	r1, r7, #8
 800b8f4:	f107 030c 	add.w	r3, r7, #12
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe f995 	bl	8009c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8fe:	6879      	ldr	r1, [r7, #4]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	9202      	str	r2, [sp, #8]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	2302      	movs	r3, #2
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	2300      	movs	r3, #0
 800b90e:	460a      	mov	r2, r1
 800b910:	4910      	ldr	r1, [pc, #64]	; (800b954 <xTimerCreateTimerTask+0x84>)
 800b912:	4811      	ldr	r0, [pc, #68]	; (800b958 <xTimerCreateTimerTask+0x88>)
 800b914:	f7ff f8b4 	bl	800aa80 <xTaskCreateStatic>
 800b918:	4603      	mov	r3, r0
 800b91a:	4a10      	ldr	r2, [pc, #64]	; (800b95c <xTimerCreateTimerTask+0x8c>)
 800b91c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <xTimerCreateTimerTask+0x8c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b926:	2301      	movs	r3, #1
 800b928:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	613b      	str	r3, [r7, #16]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b946:	697b      	ldr	r3, [r7, #20]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	200068fc 	.word	0x200068fc
 800b954:	0800de40 	.word	0x0800de40
 800b958:	0800ba95 	.word	0x0800ba95
 800b95c:	20006900 	.word	0x20006900

0800b960 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b96e:	2300      	movs	r3, #0
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10a      	bne.n	800b98e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	623b      	str	r3, [r7, #32]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b98e:	4b1a      	ldr	r3, [pc, #104]	; (800b9f8 <xTimerGenericCommand+0x98>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d02a      	beq.n	800b9ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b05      	cmp	r3, #5
 800b9a6:	dc18      	bgt.n	800b9da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9a8:	f7ff feb2 	bl	800b710 <xTaskGetSchedulerState>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d109      	bne.n	800b9c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9b2:	4b11      	ldr	r3, [pc, #68]	; (800b9f8 <xTimerGenericCommand+0x98>)
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	f107 0110 	add.w	r1, r7, #16
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9be:	f7fe fba9 	bl	800a114 <xQueueGenericSend>
 800b9c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b9c4:	e012      	b.n	800b9ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9c6:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <xTimerGenericCommand+0x98>)
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f107 0110 	add.w	r1, r7, #16
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f7fe fb9f 	bl	800a114 <xQueueGenericSend>
 800b9d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b9d8:	e008      	b.n	800b9ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9da:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <xTimerGenericCommand+0x98>)
 800b9dc:	6818      	ldr	r0, [r3, #0]
 800b9de:	f107 0110 	add.w	r1, r7, #16
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	f7fe fc93 	bl	800a310 <xQueueGenericSendFromISR>
 800b9ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3728      	adds	r7, #40	; 0x28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	200068fc 	.word	0x200068fc

0800b9fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba06:	4b22      	ldr	r3, [pc, #136]	; (800ba90 <prvProcessExpiredTimer+0x94>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe f9ab 	bl	8009d70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba20:	f003 0304 	and.w	r3, r3, #4
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d022      	beq.n	800ba6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	699a      	ldr	r2, [r3, #24]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	18d1      	adds	r1, r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	6978      	ldr	r0, [r7, #20]
 800ba36:	f000 f8d1 	bl	800bbdc <prvInsertTimerInActiveList>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01f      	beq.n	800ba80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba40:	2300      	movs	r3, #0
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	2300      	movs	r3, #0
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6978      	ldr	r0, [r7, #20]
 800ba4c:	f7ff ff88 	bl	800b960 <xTimerGenericCommand>
 800ba50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d113      	bne.n	800ba80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	60fb      	str	r3, [r7, #12]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba74:	f023 0301 	bic.w	r3, r3, #1
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	6978      	ldr	r0, [r7, #20]
 800ba86:	4798      	blx	r3
}
 800ba88:	bf00      	nop
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	200068f4 	.word	0x200068f4

0800ba94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba9c:	f107 0308 	add.w	r3, r7, #8
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 f857 	bl	800bb54 <prvGetNextExpireTime>
 800baa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	4619      	mov	r1, r3
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 f803 	bl	800bab8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bab2:	f000 f8d5 	bl	800bc60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bab6:	e7f1      	b.n	800ba9c <prvTimerTask+0x8>

0800bab8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bac2:	f7ff fa39 	bl	800af38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bac6:	f107 0308 	add.w	r3, r7, #8
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 f866 	bl	800bb9c <prvSampleTimeNow>
 800bad0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d130      	bne.n	800bb3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <prvProcessTimerOrBlockTask+0x3c>
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d806      	bhi.n	800baf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bae6:	f7ff fa35 	bl	800af54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ff85 	bl	800b9fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800baf2:	e024      	b.n	800bb3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d008      	beq.n	800bb0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bafa:	4b13      	ldr	r3, [pc, #76]	; (800bb48 <prvProcessTimerOrBlockTask+0x90>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <prvProcessTimerOrBlockTask+0x50>
 800bb04:	2301      	movs	r3, #1
 800bb06:	e000      	b.n	800bb0a <prvProcessTimerOrBlockTask+0x52>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb0c:	4b0f      	ldr	r3, [pc, #60]	; (800bb4c <prvProcessTimerOrBlockTask+0x94>)
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f7fe ff7d 	bl	800aa18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb1e:	f7ff fa19 	bl	800af54 <xTaskResumeAll>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <prvProcessTimerOrBlockTask+0x98>)
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	f3bf 8f6f 	isb	sy
}
 800bb38:	e001      	b.n	800bb3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb3a:	f7ff fa0b 	bl	800af54 <xTaskResumeAll>
}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	200068f8 	.word	0x200068f8
 800bb4c:	200068fc 	.word	0x200068fc
 800bb50:	e000ed04 	.word	0xe000ed04

0800bb54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb5c:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <prvGetNextExpireTime+0x44>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <prvGetNextExpireTime+0x16>
 800bb66:	2201      	movs	r2, #1
 800bb68:	e000      	b.n	800bb6c <prvGetNextExpireTime+0x18>
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d105      	bne.n	800bb84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <prvGetNextExpireTime+0x44>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	e001      	b.n	800bb88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb84:	2300      	movs	r3, #0
 800bb86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb88:	68fb      	ldr	r3, [r7, #12]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	200068f4 	.word	0x200068f4

0800bb9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bba4:	f7ff fa74 	bl	800b090 <xTaskGetTickCount>
 800bba8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <prvSampleTimeNow+0x3c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d205      	bcs.n	800bbc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbb4:	f000 f936 	bl	800be24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	e002      	b.n	800bbc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbc6:	4a04      	ldr	r2, [pc, #16]	; (800bbd8 <prvSampleTimeNow+0x3c>)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20006904 	.word	0x20006904

0800bbdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bbea:	2300      	movs	r3, #0
 800bbec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d812      	bhi.n	800bc28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	1ad2      	subs	r2, r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d302      	bcc.n	800bc16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc10:	2301      	movs	r3, #1
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	e01b      	b.n	800bc4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc16:	4b10      	ldr	r3, [pc, #64]	; (800bc58 <prvInsertTimerInActiveList+0x7c>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4610      	mov	r0, r2
 800bc22:	f7fe f86c 	bl	8009cfe <vListInsert>
 800bc26:	e012      	b.n	800bc4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d206      	bcs.n	800bc3e <prvInsertTimerInActiveList+0x62>
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d302      	bcc.n	800bc3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e007      	b.n	800bc4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc3e:	4b07      	ldr	r3, [pc, #28]	; (800bc5c <prvInsertTimerInActiveList+0x80>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4619      	mov	r1, r3
 800bc48:	4610      	mov	r0, r2
 800bc4a:	f7fe f858 	bl	8009cfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc4e:	697b      	ldr	r3, [r7, #20]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	200068f8 	.word	0x200068f8
 800bc5c:	200068f4 	.word	0x200068f4

0800bc60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08e      	sub	sp, #56	; 0x38
 800bc64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc66:	e0ca      	b.n	800bdfe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	da18      	bge.n	800bca0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc6e:	1d3b      	adds	r3, r7, #4
 800bc70:	3304      	adds	r3, #4
 800bc72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	61fb      	str	r3, [r7, #28]
}
 800bc8c:	bf00      	nop
 800bc8e:	e7fe      	b.n	800bc8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc96:	6850      	ldr	r0, [r2, #4]
 800bc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc9a:	6892      	ldr	r2, [r2, #8]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f2c0 80aa 	blt.w	800bdfc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fe f859 	bl	8009d70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcbe:	463b      	mov	r3, r7
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff ff6b 	bl	800bb9c <prvSampleTimeNow>
 800bcc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b09      	cmp	r3, #9
 800bccc:	f200 8097 	bhi.w	800bdfe <prvProcessReceivedCommands+0x19e>
 800bcd0:	a201      	add	r2, pc, #4	; (adr r2, 800bcd8 <prvProcessReceivedCommands+0x78>)
 800bcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd6:	bf00      	nop
 800bcd8:	0800bd01 	.word	0x0800bd01
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd01 	.word	0x0800bd01
 800bce4:	0800bd75 	.word	0x0800bd75
 800bce8:	0800bd89 	.word	0x0800bd89
 800bcec:	0800bdd3 	.word	0x0800bdd3
 800bcf0:	0800bd01 	.word	0x0800bd01
 800bcf4:	0800bd01 	.word	0x0800bd01
 800bcf8:	0800bd75 	.word	0x0800bd75
 800bcfc:	0800bd89 	.word	0x0800bd89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd06:	f043 0301 	orr.w	r3, r3, #1
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	18d1      	adds	r1, r2, r3
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd20:	f7ff ff5c 	bl	800bbdc <prvInsertTimerInActiveList>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d069      	beq.n	800bdfe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd38:	f003 0304 	and.w	r3, r3, #4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d05e      	beq.n	800bdfe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	441a      	add	r2, r3
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	2100      	movs	r1, #0
 800bd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd52:	f7ff fe05 	bl	800b960 <xTimerGenericCommand>
 800bd56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d14f      	bne.n	800bdfe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	61bb      	str	r3, [r7, #24]
}
 800bd70:	bf00      	nop
 800bd72:	e7fe      	b.n	800bd72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7a:	f023 0301 	bic.w	r3, r3, #1
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd86:	e03a      	b.n	800bdfe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8e:	f043 0301 	orr.w	r3, r3, #1
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	617b      	str	r3, [r7, #20]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	699a      	ldr	r2, [r3, #24]
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	18d1      	adds	r1, r2, r3
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdcc:	f7ff ff06 	bl	800bbdc <prvInsertTimerInActiveList>
					break;
 800bdd0:	e015      	b.n	800bdfe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdd8:	f003 0302 	and.w	r3, r3, #2
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde2:	f000 fbb5 	bl	800c550 <vPortFree>
 800bde6:	e00a      	b.n	800bdfe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdee:	f023 0301 	bic.w	r3, r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bdfa:	e000      	b.n	800bdfe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bdfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdfe:	4b08      	ldr	r3, [pc, #32]	; (800be20 <prvProcessReceivedCommands+0x1c0>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	1d39      	adds	r1, r7, #4
 800be04:	2200      	movs	r2, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe fb1e 	bl	800a448 <xQueueReceive>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f47f af2a 	bne.w	800bc68 <prvProcessReceivedCommands+0x8>
	}
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	3730      	adds	r7, #48	; 0x30
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	200068fc 	.word	0x200068fc

0800be24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be2a:	e048      	b.n	800bebe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be2c:	4b2d      	ldr	r3, [pc, #180]	; (800bee4 <prvSwitchTimerLists+0xc0>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be36:	4b2b      	ldr	r3, [pc, #172]	; (800bee4 <prvSwitchTimerLists+0xc0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3304      	adds	r3, #4
 800be44:	4618      	mov	r0, r3
 800be46:	f7fd ff93 	bl	8009d70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d02e      	beq.n	800bebe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	4413      	add	r3, r2
 800be68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d90e      	bls.n	800be90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be7e:	4b19      	ldr	r3, [pc, #100]	; (800bee4 <prvSwitchTimerLists+0xc0>)
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3304      	adds	r3, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7fd ff38 	bl	8009cfe <vListInsert>
 800be8e:	e016      	b.n	800bebe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be90:	2300      	movs	r3, #0
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	2300      	movs	r3, #0
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	2100      	movs	r1, #0
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fd60 	bl	800b960 <xTimerGenericCommand>
 800bea0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10a      	bne.n	800bebe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	603b      	str	r3, [r7, #0]
}
 800beba:	bf00      	nop
 800bebc:	e7fe      	b.n	800bebc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <prvSwitchTimerLists+0xc0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1b1      	bne.n	800be2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bec8:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <prvSwitchTimerLists+0xc0>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bece:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <prvSwitchTimerLists+0xc4>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a04      	ldr	r2, [pc, #16]	; (800bee4 <prvSwitchTimerLists+0xc0>)
 800bed4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bed6:	4a04      	ldr	r2, [pc, #16]	; (800bee8 <prvSwitchTimerLists+0xc4>)
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	6013      	str	r3, [r2, #0]
}
 800bedc:	bf00      	nop
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	200068f4 	.word	0x200068f4
 800bee8:	200068f8 	.word	0x200068f8

0800beec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bef2:	f000 f967 	bl	800c1c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bef6:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <prvCheckForValidListAndQueue+0x60>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d120      	bne.n	800bf40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800befe:	4814      	ldr	r0, [pc, #80]	; (800bf50 <prvCheckForValidListAndQueue+0x64>)
 800bf00:	f7fd feac 	bl	8009c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf04:	4813      	ldr	r0, [pc, #76]	; (800bf54 <prvCheckForValidListAndQueue+0x68>)
 800bf06:	f7fd fea9 	bl	8009c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf0a:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <prvCheckForValidListAndQueue+0x6c>)
 800bf0c:	4a10      	ldr	r2, [pc, #64]	; (800bf50 <prvCheckForValidListAndQueue+0x64>)
 800bf0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf10:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <prvCheckForValidListAndQueue+0x70>)
 800bf12:	4a10      	ldr	r2, [pc, #64]	; (800bf54 <prvCheckForValidListAndQueue+0x68>)
 800bf14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf16:	2300      	movs	r3, #0
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <prvCheckForValidListAndQueue+0x74>)
 800bf1c:	4a11      	ldr	r2, [pc, #68]	; (800bf64 <prvCheckForValidListAndQueue+0x78>)
 800bf1e:	2110      	movs	r1, #16
 800bf20:	200a      	movs	r0, #10
 800bf22:	f7fd ffb7 	bl	8009e94 <xQueueGenericCreateStatic>
 800bf26:	4603      	mov	r3, r0
 800bf28:	4a08      	ldr	r2, [pc, #32]	; (800bf4c <prvCheckForValidListAndQueue+0x60>)
 800bf2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf2c:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <prvCheckForValidListAndQueue+0x60>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <prvCheckForValidListAndQueue+0x60>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	490b      	ldr	r1, [pc, #44]	; (800bf68 <prvCheckForValidListAndQueue+0x7c>)
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fd18 	bl	800a970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf40:	f000 f970 	bl	800c224 <vPortExitCritical>
}
 800bf44:	bf00      	nop
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200068fc 	.word	0x200068fc
 800bf50:	200068cc 	.word	0x200068cc
 800bf54:	200068e0 	.word	0x200068e0
 800bf58:	200068f4 	.word	0x200068f4
 800bf5c:	200068f8 	.word	0x200068f8
 800bf60:	200069a8 	.word	0x200069a8
 800bf64:	20006908 	.word	0x20006908
 800bf68:	0800de48 	.word	0x0800de48

0800bf6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3b04      	subs	r3, #4
 800bf7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3b04      	subs	r3, #4
 800bf8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	f023 0201 	bic.w	r2, r3, #1
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	3b04      	subs	r3, #4
 800bf9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf9c:	4a0c      	ldr	r2, [pc, #48]	; (800bfd0 <pxPortInitialiseStack+0x64>)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3b14      	subs	r3, #20
 800bfa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3b04      	subs	r3, #4
 800bfb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f06f 0202 	mvn.w	r2, #2
 800bfba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3b20      	subs	r3, #32
 800bfc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	0800bfd5 	.word	0x0800bfd5

0800bfd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfde:	4b12      	ldr	r3, [pc, #72]	; (800c028 <prvTaskExitError+0x54>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfe6:	d00a      	beq.n	800bffe <prvTaskExitError+0x2a>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	60fb      	str	r3, [r7, #12]
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <prvTaskExitError+0x28>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	60bb      	str	r3, [r7, #8]
}
 800c010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c012:	bf00      	nop
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0fc      	beq.n	800c014 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	200000c0 	.word	0x200000c0
 800c02c:	00000000 	.word	0x00000000

0800c030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c030:	4b07      	ldr	r3, [pc, #28]	; (800c050 <pxCurrentTCBConst2>)
 800c032:	6819      	ldr	r1, [r3, #0]
 800c034:	6808      	ldr	r0, [r1, #0]
 800c036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03a:	f380 8809 	msr	PSP, r0
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f04f 0000 	mov.w	r0, #0
 800c046:	f380 8811 	msr	BASEPRI, r0
 800c04a:	4770      	bx	lr
 800c04c:	f3af 8000 	nop.w

0800c050 <pxCurrentTCBConst2>:
 800c050:	200063cc 	.word	0x200063cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop

0800c058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c058:	4808      	ldr	r0, [pc, #32]	; (800c07c <prvPortStartFirstTask+0x24>)
 800c05a:	6800      	ldr	r0, [r0, #0]
 800c05c:	6800      	ldr	r0, [r0, #0]
 800c05e:	f380 8808 	msr	MSP, r0
 800c062:	f04f 0000 	mov.w	r0, #0
 800c066:	f380 8814 	msr	CONTROL, r0
 800c06a:	b662      	cpsie	i
 800c06c:	b661      	cpsie	f
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	df00      	svc	0
 800c078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c07a:	bf00      	nop
 800c07c:	e000ed08 	.word	0xe000ed08

0800c080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c086:	4b46      	ldr	r3, [pc, #280]	; (800c1a0 <xPortStartScheduler+0x120>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a46      	ldr	r2, [pc, #280]	; (800c1a4 <xPortStartScheduler+0x124>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d10a      	bne.n	800c0a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	613b      	str	r3, [r7, #16]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0a6:	4b3e      	ldr	r3, [pc, #248]	; (800c1a0 <xPortStartScheduler+0x120>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a3f      	ldr	r2, [pc, #252]	; (800c1a8 <xPortStartScheduler+0x128>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d10a      	bne.n	800c0c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	60fb      	str	r3, [r7, #12]
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0c6:	4b39      	ldr	r3, [pc, #228]	; (800c1ac <xPortStartScheduler+0x12c>)
 800c0c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	22ff      	movs	r2, #255	; 0xff
 800c0d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	4b31      	ldr	r3, [pc, #196]	; (800c1b0 <xPortStartScheduler+0x130>)
 800c0ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0ee:	4b31      	ldr	r3, [pc, #196]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c0f0:	2207      	movs	r2, #7
 800c0f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0f4:	e009      	b.n	800c10a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c0f6:	4b2f      	ldr	r3, [pc, #188]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	4a2d      	ldr	r2, [pc, #180]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c0fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	b2db      	uxtb	r3, r3
 800c108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c10a:	78fb      	ldrb	r3, [r7, #3]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c112:	2b80      	cmp	r3, #128	; 0x80
 800c114:	d0ef      	beq.n	800c0f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c116:	4b27      	ldr	r3, [pc, #156]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1c3 0307 	rsb	r3, r3, #7
 800c11e:	2b04      	cmp	r3, #4
 800c120:	d00a      	beq.n	800c138 <xPortStartScheduler+0xb8>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	60bb      	str	r3, [r7, #8]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c138:	4b1e      	ldr	r3, [pc, #120]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	021b      	lsls	r3, r3, #8
 800c13e:	4a1d      	ldr	r2, [pc, #116]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c14a:	4a1a      	ldr	r2, [pc, #104]	; (800c1b4 <xPortStartScheduler+0x134>)
 800c14c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	b2da      	uxtb	r2, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c156:	4b18      	ldr	r3, [pc, #96]	; (800c1b8 <xPortStartScheduler+0x138>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <xPortStartScheduler+0x138>)
 800c15c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c162:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <xPortStartScheduler+0x138>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a14      	ldr	r2, [pc, #80]	; (800c1b8 <xPortStartScheduler+0x138>)
 800c168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c16c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c16e:	f000 f8dd 	bl	800c32c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c172:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <xPortStartScheduler+0x13c>)
 800c174:	2200      	movs	r2, #0
 800c176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c178:	f000 f8fc 	bl	800c374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c17c:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <xPortStartScheduler+0x140>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a0f      	ldr	r2, [pc, #60]	; (800c1c0 <xPortStartScheduler+0x140>)
 800c182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c188:	f7ff ff66 	bl	800c058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c18c:	f7ff f84a 	bl	800b224 <vTaskSwitchContext>
	prvTaskExitError();
 800c190:	f7ff ff20 	bl	800bfd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	e000ed00 	.word	0xe000ed00
 800c1a4:	410fc271 	.word	0x410fc271
 800c1a8:	410fc270 	.word	0x410fc270
 800c1ac:	e000e400 	.word	0xe000e400
 800c1b0:	200069f8 	.word	0x200069f8
 800c1b4:	200069fc 	.word	0x200069fc
 800c1b8:	e000ed20 	.word	0xe000ed20
 800c1bc:	200000c0 	.word	0x200000c0
 800c1c0:	e000ef34 	.word	0xe000ef34

0800c1c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	607b      	str	r3, [r7, #4]
}
 800c1dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1de:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <vPortEnterCritical+0x58>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	4a0d      	ldr	r2, [pc, #52]	; (800c21c <vPortEnterCritical+0x58>)
 800c1e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1e8:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <vPortEnterCritical+0x58>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d10f      	bne.n	800c210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1f0:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <vPortEnterCritical+0x5c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <vPortEnterCritical+0x4c>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	603b      	str	r3, [r7, #0]
}
 800c20c:	bf00      	nop
 800c20e:	e7fe      	b.n	800c20e <vPortEnterCritical+0x4a>
	}
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	200000c0 	.word	0x200000c0
 800c220:	e000ed04 	.word	0xe000ed04

0800c224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c22a:	4b12      	ldr	r3, [pc, #72]	; (800c274 <vPortExitCritical+0x50>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10a      	bne.n	800c248 <vPortExitCritical+0x24>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	607b      	str	r3, [r7, #4]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c248:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <vPortExitCritical+0x50>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	4a09      	ldr	r2, [pc, #36]	; (800c274 <vPortExitCritical+0x50>)
 800c250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c252:	4b08      	ldr	r3, [pc, #32]	; (800c274 <vPortExitCritical+0x50>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d105      	bne.n	800c266 <vPortExitCritical+0x42>
 800c25a:	2300      	movs	r3, #0
 800c25c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	f383 8811 	msr	BASEPRI, r3
}
 800c264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c266:	bf00      	nop
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	200000c0 	.word	0x200000c0
	...

0800c280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c280:	f3ef 8009 	mrs	r0, PSP
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	4b15      	ldr	r3, [pc, #84]	; (800c2e0 <pxCurrentTCBConst>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	f01e 0f10 	tst.w	lr, #16
 800c290:	bf08      	it	eq
 800c292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29a:	6010      	str	r0, [r2, #0]
 800c29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2a4:	f380 8811 	msr	BASEPRI, r0
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f7fe ffb8 	bl	800b224 <vTaskSwitchContext>
 800c2b4:	f04f 0000 	mov.w	r0, #0
 800c2b8:	f380 8811 	msr	BASEPRI, r0
 800c2bc:	bc09      	pop	{r0, r3}
 800c2be:	6819      	ldr	r1, [r3, #0]
 800c2c0:	6808      	ldr	r0, [r1, #0]
 800c2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c6:	f01e 0f10 	tst.w	lr, #16
 800c2ca:	bf08      	it	eq
 800c2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2d0:	f380 8809 	msr	PSP, r0
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	f3af 8000 	nop.w

0800c2e0 <pxCurrentTCBConst>:
 800c2e0:	200063cc 	.word	0x200063cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop

0800c2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	607b      	str	r3, [r7, #4]
}
 800c300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c302:	f7fe fed5 	bl	800b0b0 <xTaskIncrementTick>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d003      	beq.n	800c314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c30c:	4b06      	ldr	r3, [pc, #24]	; (800c328 <xPortSysTickHandler+0x40>)
 800c30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	2300      	movs	r3, #0
 800c316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	f383 8811 	msr	BASEPRI, r3
}
 800c31e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c32c:	b480      	push	{r7}
 800c32e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c330:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <vPortSetupTimerInterrupt+0x34>)
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c336:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <vPortSetupTimerInterrupt+0x38>)
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c33c:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <vPortSetupTimerInterrupt+0x3c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a0a      	ldr	r2, [pc, #40]	; (800c36c <vPortSetupTimerInterrupt+0x40>)
 800c342:	fba2 2303 	umull	r2, r3, r2, r3
 800c346:	099b      	lsrs	r3, r3, #6
 800c348:	4a09      	ldr	r2, [pc, #36]	; (800c370 <vPortSetupTimerInterrupt+0x44>)
 800c34a:	3b01      	subs	r3, #1
 800c34c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c34e:	4b04      	ldr	r3, [pc, #16]	; (800c360 <vPortSetupTimerInterrupt+0x34>)
 800c350:	2207      	movs	r2, #7
 800c352:	601a      	str	r2, [r3, #0]
}
 800c354:	bf00      	nop
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	e000e010 	.word	0xe000e010
 800c364:	e000e018 	.word	0xe000e018
 800c368:	200000a4 	.word	0x200000a4
 800c36c:	10624dd3 	.word	0x10624dd3
 800c370:	e000e014 	.word	0xe000e014

0800c374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c384 <vPortEnableVFP+0x10>
 800c378:	6801      	ldr	r1, [r0, #0]
 800c37a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c37e:	6001      	str	r1, [r0, #0]
 800c380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c382:	bf00      	nop
 800c384:	e000ed88 	.word	0xe000ed88

0800c388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c38e:	f3ef 8305 	mrs	r3, IPSR
 800c392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2b0f      	cmp	r3, #15
 800c398:	d914      	bls.n	800c3c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c39a:	4a17      	ldr	r2, [pc, #92]	; (800c3f8 <vPortValidateInterruptPriority+0x70>)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4413      	add	r3, r2
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3a4:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <vPortValidateInterruptPriority+0x74>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	7afa      	ldrb	r2, [r7, #11]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d20a      	bcs.n	800c3c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	607b      	str	r3, [r7, #4]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3c4:	4b0e      	ldr	r3, [pc, #56]	; (800c400 <vPortValidateInterruptPriority+0x78>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3cc:	4b0d      	ldr	r3, [pc, #52]	; (800c404 <vPortValidateInterruptPriority+0x7c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d90a      	bls.n	800c3ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	603b      	str	r3, [r7, #0]
}
 800c3e6:	bf00      	nop
 800c3e8:	e7fe      	b.n	800c3e8 <vPortValidateInterruptPriority+0x60>
	}
 800c3ea:	bf00      	nop
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	e000e3f0 	.word	0xe000e3f0
 800c3fc:	200069f8 	.word	0x200069f8
 800c400:	e000ed0c 	.word	0xe000ed0c
 800c404:	200069fc 	.word	0x200069fc

0800c408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800c414:	4b48      	ldr	r3, [pc, #288]	; (800c538 <pvPortMalloc+0x130>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10a      	bne.n	800c432 <pvPortMalloc+0x2a>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60fb      	str	r3, [r7, #12]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800c432:	f7fe fd81 	bl	800af38 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c436:	4b41      	ldr	r3, [pc, #260]	; (800c53c <pvPortMalloc+0x134>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4013      	ands	r3, r2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d172      	bne.n	800c528 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00d      	beq.n	800c464 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c448:	2208      	movs	r2, #8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4413      	add	r3, r2
 800c44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	2b00      	cmp	r3, #0
 800c458:	d004      	beq.n	800c464 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	3308      	adds	r3, #8
 800c462:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d05e      	beq.n	800c528 <pvPortMalloc+0x120>
 800c46a:	4b35      	ldr	r3, [pc, #212]	; (800c540 <pvPortMalloc+0x138>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d859      	bhi.n	800c528 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c474:	4b33      	ldr	r3, [pc, #204]	; (800c544 <pvPortMalloc+0x13c>)
 800c476:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800c478:	4b32      	ldr	r3, [pc, #200]	; (800c544 <pvPortMalloc+0x13c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c47e:	e004      	b.n	800c48a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d903      	bls.n	800c49c <pvPortMalloc+0x94>
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f1      	bne.n	800c480 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c49c:	4b26      	ldr	r3, [pc, #152]	; (800c538 <pvPortMalloc+0x130>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	69fa      	ldr	r2, [r7, #28]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d040      	beq.n	800c528 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	4413      	add	r3, r2
 800c4ae:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d90f      	bls.n	800c4e8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4c8:	69fa      	ldr	r2, [r7, #28]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c4e2:	6938      	ldr	r0, [r7, #16]
 800c4e4:	f000 f8a2 	bl	800c62c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <pvPortMalloc+0x138>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	4a13      	ldr	r2, [pc, #76]	; (800c540 <pvPortMalloc+0x138>)
 800c4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4f6:	4b12      	ldr	r3, [pc, #72]	; (800c540 <pvPortMalloc+0x138>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b13      	ldr	r3, [pc, #76]	; (800c548 <pvPortMalloc+0x140>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d203      	bcs.n	800c50a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c502:	4b0f      	ldr	r3, [pc, #60]	; (800c540 <pvPortMalloc+0x138>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a10      	ldr	r2, [pc, #64]	; (800c548 <pvPortMalloc+0x140>)
 800c508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <pvPortMalloc+0x134>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	431a      	orrs	r2, r3
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c51e:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <pvPortMalloc+0x144>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3301      	adds	r3, #1
 800c524:	4a09      	ldr	r2, [pc, #36]	; (800c54c <pvPortMalloc+0x144>)
 800c526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c528:	f7fe fd14 	bl	800af54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c52c:	697b      	ldr	r3, [r7, #20]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3720      	adds	r7, #32
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20006a08 	.word	0x20006a08
 800c53c:	20006a1c 	.word	0x20006a1c
 800c540:	20006a0c 	.word	0x20006a0c
 800c544:	20006a00 	.word	0x20006a00
 800c548:	20006a10 	.word	0x20006a10
 800c54c:	20006a14 	.word	0x20006a14

0800c550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d04d      	beq.n	800c5fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c562:	2308      	movs	r3, #8
 800c564:	425b      	negs	r3, r3
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	4413      	add	r3, r2
 800c56a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	4b24      	ldr	r3, [pc, #144]	; (800c608 <vPortFree+0xb8>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4013      	ands	r3, r2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <vPortFree+0x44>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	60fb      	str	r3, [r7, #12]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <vPortFree+0x62>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	60bb      	str	r3, [r7, #8]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	4b14      	ldr	r3, [pc, #80]	; (800c608 <vPortFree+0xb8>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01e      	beq.n	800c5fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d11a      	bne.n	800c5fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	4b0e      	ldr	r3, [pc, #56]	; (800c608 <vPortFree+0xb8>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	43db      	mvns	r3, r3
 800c5d2:	401a      	ands	r2, r3
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5d8:	f7fe fcae 	bl	800af38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <vPortFree+0xbc>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	4a09      	ldr	r2, [pc, #36]	; (800c60c <vPortFree+0xbc>)
 800c5e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5ea:	6938      	ldr	r0, [r7, #16]
 800c5ec:	f000 f81e 	bl	800c62c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5f0:	4b07      	ldr	r3, [pc, #28]	; (800c610 <vPortFree+0xc0>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	4a06      	ldr	r2, [pc, #24]	; (800c610 <vPortFree+0xc0>)
 800c5f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5fa:	f7fe fcab 	bl	800af54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5fe:	bf00      	nop
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	20006a1c 	.word	0x20006a1c
 800c60c:	20006a0c 	.word	0x20006a0c
 800c610:	20006a18 	.word	0x20006a18

0800c614 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c618:	4b03      	ldr	r3, [pc, #12]	; (800c628 <xPortGetFreeHeapSize+0x14>)
 800c61a:	681b      	ldr	r3, [r3, #0]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	20006a0c 	.word	0x20006a0c

0800c62c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c634:	4b28      	ldr	r3, [pc, #160]	; (800c6d8 <prvInsertBlockIntoFreeList+0xac>)
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e002      	b.n	800c640 <prvInsertBlockIntoFreeList+0x14>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	429a      	cmp	r2, r3
 800c648:	d8f7      	bhi.n	800c63a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	4413      	add	r3, r2
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d108      	bne.n	800c66e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	441a      	add	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d118      	bne.n	800c6b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	4b15      	ldr	r3, [pc, #84]	; (800c6dc <prvInsertBlockIntoFreeList+0xb0>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d00d      	beq.n	800c6aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	441a      	add	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	e008      	b.n	800c6bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6aa:	4b0c      	ldr	r3, [pc, #48]	; (800c6dc <prvInsertBlockIntoFreeList+0xb0>)
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	601a      	str	r2, [r3, #0]
 800c6b2:	e003      	b.n	800c6bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d002      	beq.n	800c6ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20006a00 	.word	0x20006a00
 800c6dc:	20006a08 	.word	0x20006a08

0800c6e0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b08f      	sub	sp, #60	; 0x3c
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c6f4:	4b5a      	ldr	r3, [pc, #360]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00a      	beq.n	800c712 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	617b      	str	r3, [r7, #20]
}
 800c70e:	bf00      	nop
 800c710:	e7fe      	b.n	800c710 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	4413      	add	r3, r2
 800c71a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c71c:	e07d      	b.n	800c81a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72c:	f003 0307 	and.w	r3, r3, #7
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00e      	beq.n	800c752 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	3307      	adds	r3, #7
 800c738:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c74e:	4413      	add	r3, r2
 800c750:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d106      	bne.n	800c76a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	4a41      	ldr	r2, [pc, #260]	; (800c864 <vPortDefineHeapRegions+0x184>)
 800c760:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c762:	4b40      	ldr	r3, [pc, #256]	; (800c864 <vPortDefineHeapRegions+0x184>)
 800c764:	2200      	movs	r2, #0
 800c766:	605a      	str	r2, [r3, #4]
 800c768:	e01f      	b.n	800c7aa <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c76a:	4b3d      	ldr	r3, [pc, #244]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10a      	bne.n	800c788 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	613b      	str	r3, [r7, #16]
}
 800c784:	bf00      	nop
 800c786:	e7fe      	b.n	800c786 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c788:	4b35      	ldr	r3, [pc, #212]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	4293      	cmp	r3, r2
 800c792:	d80a      	bhi.n	800c7aa <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	60fb      	str	r3, [r7, #12]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c7aa:	4b2d      	ldr	r3, [pc, #180]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c7b0:	69fa      	ldr	r2, [r7, #28]
 800c7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b4:	4413      	add	r3, r2
 800c7b6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c7b8:	2208      	movs	r2, #8
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f023 0307 	bic.w	r3, r3, #7
 800c7c6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	4a25      	ldr	r2, [pc, #148]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c7cc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c7ce:	4b24      	ldr	r3, [pc, #144]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c7d6:	4b22      	ldr	r3, [pc, #136]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e6:	1ad2      	subs	r2, r2, r3
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c7ec:	4b1c      	ldr	r3, [pc, #112]	; (800c860 <vPortDefineHeapRegions+0x180>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d002      	beq.n	800c800 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	6a3a      	ldr	r2, [r7, #32]
 800c7fe:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c806:	4413      	add	r3, r2
 800c808:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80c:	3301      	adds	r3, #1
 800c80e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	4413      	add	r3, r2
 800c818:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f47f af7d 	bne.w	800c71e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c824:	4a10      	ldr	r2, [pc, #64]	; (800c868 <vPortDefineHeapRegions+0x188>)
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c82a:	4a10      	ldr	r2, [pc, #64]	; (800c86c <vPortDefineHeapRegions+0x18c>)
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10a      	bne.n	800c84c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	60bb      	str	r3, [r7, #8]
}
 800c848:	bf00      	nop
 800c84a:	e7fe      	b.n	800c84a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c84c:	4b08      	ldr	r3, [pc, #32]	; (800c870 <vPortDefineHeapRegions+0x190>)
 800c84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c852:	601a      	str	r2, [r3, #0]
}
 800c854:	bf00      	nop
 800c856:	373c      	adds	r7, #60	; 0x3c
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	20006a08 	.word	0x20006a08
 800c864:	20006a00 	.word	0x20006a00
 800c868:	20006a10 	.word	0x20006a10
 800c86c:	20006a0c 	.word	0x20006a0c
 800c870:	20006a1c 	.word	0x20006a1c

0800c874 <atol>:
 800c874:	220a      	movs	r2, #10
 800c876:	2100      	movs	r1, #0
 800c878:	f000 bb5e 	b.w	800cf38 <strtol>

0800c87c <calloc>:
 800c87c:	4b02      	ldr	r3, [pc, #8]	; (800c888 <calloc+0xc>)
 800c87e:	460a      	mov	r2, r1
 800c880:	4601      	mov	r1, r0
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	f000 b8f8 	b.w	800ca78 <_calloc_r>
 800c888:	200000c4 	.word	0x200000c4

0800c88c <__errno>:
 800c88c:	4b01      	ldr	r3, [pc, #4]	; (800c894 <__errno+0x8>)
 800c88e:	6818      	ldr	r0, [r3, #0]
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	200000c4 	.word	0x200000c4

0800c898 <gmtime_r>:
 800c898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	4a4f      	ldr	r2, [pc, #316]	; (800c9e0 <gmtime_r+0x148>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 ffef 	bl	800088c <__aeabi_ldivmod>
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	4a4b      	ldr	r2, [pc, #300]	; (800c9e0 <gmtime_r+0x148>)
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f7f3 ffe8 	bl	800088c <__aeabi_ldivmod>
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c8c2:	bfb7      	itett	lt
 800c8c4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c8c8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c8cc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c8d0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c8d4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c8d8:	fbb2 f1f0 	udiv	r1, r2, r0
 800c8dc:	fb00 2211 	mls	r2, r0, r1, r2
 800c8e0:	203c      	movs	r0, #60	; 0x3c
 800c8e2:	60a1      	str	r1, [r4, #8]
 800c8e4:	fbb2 f1f0 	udiv	r1, r2, r0
 800c8e8:	fb00 2211 	mls	r2, r0, r1, r2
 800c8ec:	6061      	str	r1, [r4, #4]
 800c8ee:	6022      	str	r2, [r4, #0]
 800c8f0:	2107      	movs	r1, #7
 800c8f2:	1cda      	adds	r2, r3, #3
 800c8f4:	fb92 f1f1 	sdiv	r1, r2, r1
 800c8f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c8fc:	1a52      	subs	r2, r2, r1
 800c8fe:	bf48      	it	mi
 800c900:	3207      	addmi	r2, #7
 800c902:	4d38      	ldr	r5, [pc, #224]	; (800c9e4 <gmtime_r+0x14c>)
 800c904:	4838      	ldr	r0, [pc, #224]	; (800c9e8 <gmtime_r+0x150>)
 800c906:	61a2      	str	r2, [r4, #24]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bfb7      	itett	lt
 800c90c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c910:	fb93 f5f5 	sdivge	r5, r3, r5
 800c914:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c918:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c91c:	fb00 3005 	mla	r0, r0, r5, r3
 800c920:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c924:	fbb0 f2f2 	udiv	r2, r0, r2
 800c928:	4402      	add	r2, r0
 800c92a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c92e:	fbb0 f1f3 	udiv	r1, r0, r3
 800c932:	1a52      	subs	r2, r2, r1
 800c934:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c938:	492c      	ldr	r1, [pc, #176]	; (800c9ec <gmtime_r+0x154>)
 800c93a:	fbb0 f1f1 	udiv	r1, r0, r1
 800c93e:	2764      	movs	r7, #100	; 0x64
 800c940:	1a52      	subs	r2, r2, r1
 800c942:	fbb2 f1fc 	udiv	r1, r2, ip
 800c946:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94a:	fbb1 f6f7 	udiv	r6, r1, r7
 800c94e:	1af3      	subs	r3, r6, r3
 800c950:	4403      	add	r3, r0
 800c952:	fb0c 3311 	mls	r3, ip, r1, r3
 800c956:	2299      	movs	r2, #153	; 0x99
 800c958:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c95c:	f10e 0e02 	add.w	lr, lr, #2
 800c960:	f103 0c01 	add.w	ip, r3, #1
 800c964:	fbbe f0f2 	udiv	r0, lr, r2
 800c968:	4342      	muls	r2, r0
 800c96a:	3202      	adds	r2, #2
 800c96c:	f04f 0805 	mov.w	r8, #5
 800c970:	fbb2 f2f8 	udiv	r2, r2, r8
 800c974:	ebac 0c02 	sub.w	ip, ip, r2
 800c978:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c97c:	4596      	cmp	lr, r2
 800c97e:	bf94      	ite	ls
 800c980:	2202      	movls	r2, #2
 800c982:	f06f 0209 	mvnhi.w	r2, #9
 800c986:	4410      	add	r0, r2
 800c988:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c98c:	fb02 1505 	mla	r5, r2, r5, r1
 800c990:	2801      	cmp	r0, #1
 800c992:	bf98      	it	ls
 800c994:	3501      	addls	r5, #1
 800c996:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c99a:	d30d      	bcc.n	800c9b8 <gmtime_r+0x120>
 800c99c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c9a0:	61e3      	str	r3, [r4, #28]
 800c9a2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c9ac:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c9b0:	6223      	str	r3, [r4, #32]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b8:	078a      	lsls	r2, r1, #30
 800c9ba:	d102      	bne.n	800c9c2 <gmtime_r+0x12a>
 800c9bc:	fb07 1616 	mls	r6, r7, r6, r1
 800c9c0:	b95e      	cbnz	r6, 800c9da <gmtime_r+0x142>
 800c9c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c9c6:	fbb1 f6f2 	udiv	r6, r1, r2
 800c9ca:	fb02 1216 	mls	r2, r2, r6, r1
 800c9ce:	fab2 f282 	clz	r2, r2
 800c9d2:	0952      	lsrs	r2, r2, #5
 800c9d4:	333b      	adds	r3, #59	; 0x3b
 800c9d6:	4413      	add	r3, r2
 800c9d8:	e7e2      	b.n	800c9a0 <gmtime_r+0x108>
 800c9da:	2201      	movs	r2, #1
 800c9dc:	e7fa      	b.n	800c9d4 <gmtime_r+0x13c>
 800c9de:	bf00      	nop
 800c9e0:	00015180 	.word	0x00015180
 800c9e4:	00023ab1 	.word	0x00023ab1
 800c9e8:	fffdc54f 	.word	0xfffdc54f
 800c9ec:	00023ab0 	.word	0x00023ab0

0800c9f0 <__libc_init_array>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4d0d      	ldr	r5, [pc, #52]	; (800ca28 <__libc_init_array+0x38>)
 800c9f4:	4c0d      	ldr	r4, [pc, #52]	; (800ca2c <__libc_init_array+0x3c>)
 800c9f6:	1b64      	subs	r4, r4, r5
 800c9f8:	10a4      	asrs	r4, r4, #2
 800c9fa:	2600      	movs	r6, #0
 800c9fc:	42a6      	cmp	r6, r4
 800c9fe:	d109      	bne.n	800ca14 <__libc_init_array+0x24>
 800ca00:	4d0b      	ldr	r5, [pc, #44]	; (800ca30 <__libc_init_array+0x40>)
 800ca02:	4c0c      	ldr	r4, [pc, #48]	; (800ca34 <__libc_init_array+0x44>)
 800ca04:	f000 fe2a 	bl	800d65c <_init>
 800ca08:	1b64      	subs	r4, r4, r5
 800ca0a:	10a4      	asrs	r4, r4, #2
 800ca0c:	2600      	movs	r6, #0
 800ca0e:	42a6      	cmp	r6, r4
 800ca10:	d105      	bne.n	800ca1e <__libc_init_array+0x2e>
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca18:	4798      	blx	r3
 800ca1a:	3601      	adds	r6, #1
 800ca1c:	e7ee      	b.n	800c9fc <__libc_init_array+0xc>
 800ca1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca22:	4798      	blx	r3
 800ca24:	3601      	adds	r6, #1
 800ca26:	e7f2      	b.n	800ca0e <__libc_init_array+0x1e>
 800ca28:	08010170 	.word	0x08010170
 800ca2c:	08010170 	.word	0x08010170
 800ca30:	08010170 	.word	0x08010170
 800ca34:	08010174 	.word	0x08010174

0800ca38 <__retarget_lock_acquire_recursive>:
 800ca38:	4770      	bx	lr

0800ca3a <__retarget_lock_release_recursive>:
 800ca3a:	4770      	bx	lr

0800ca3c <free>:
 800ca3c:	4b02      	ldr	r3, [pc, #8]	; (800ca48 <free+0xc>)
 800ca3e:	4601      	mov	r1, r0
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f000 b82f 	b.w	800caa4 <_free_r>
 800ca46:	bf00      	nop
 800ca48:	200000c4 	.word	0x200000c4

0800ca4c <memcpy>:
 800ca4c:	440a      	add	r2, r1
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ca54:	d100      	bne.n	800ca58 <memcpy+0xc>
 800ca56:	4770      	bx	lr
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca62:	4291      	cmp	r1, r2
 800ca64:	d1f9      	bne.n	800ca5a <memcpy+0xe>
 800ca66:	bd10      	pop	{r4, pc}

0800ca68 <memset>:
 800ca68:	4402      	add	r2, r0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d100      	bne.n	800ca72 <memset+0xa>
 800ca70:	4770      	bx	lr
 800ca72:	f803 1b01 	strb.w	r1, [r3], #1
 800ca76:	e7f9      	b.n	800ca6c <memset+0x4>

0800ca78 <_calloc_r>:
 800ca78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca7a:	fba1 2402 	umull	r2, r4, r1, r2
 800ca7e:	b94c      	cbnz	r4, 800ca94 <_calloc_r+0x1c>
 800ca80:	4611      	mov	r1, r2
 800ca82:	9201      	str	r2, [sp, #4]
 800ca84:	f000 f87a 	bl	800cb7c <_malloc_r>
 800ca88:	9a01      	ldr	r2, [sp, #4]
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	b930      	cbnz	r0, 800ca9c <_calloc_r+0x24>
 800ca8e:	4628      	mov	r0, r5
 800ca90:	b003      	add	sp, #12
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	220c      	movs	r2, #12
 800ca96:	6002      	str	r2, [r0, #0]
 800ca98:	2500      	movs	r5, #0
 800ca9a:	e7f8      	b.n	800ca8e <_calloc_r+0x16>
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	f7ff ffe3 	bl	800ca68 <memset>
 800caa2:	e7f4      	b.n	800ca8e <_calloc_r+0x16>

0800caa4 <_free_r>:
 800caa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d044      	beq.n	800cb34 <_free_r+0x90>
 800caaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caae:	9001      	str	r0, [sp, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f1a1 0404 	sub.w	r4, r1, #4
 800cab6:	bfb8      	it	lt
 800cab8:	18e4      	addlt	r4, r4, r3
 800caba:	f000 fa81 	bl	800cfc0 <__malloc_lock>
 800cabe:	4a1e      	ldr	r2, [pc, #120]	; (800cb38 <_free_r+0x94>)
 800cac0:	9801      	ldr	r0, [sp, #4]
 800cac2:	6813      	ldr	r3, [r2, #0]
 800cac4:	b933      	cbnz	r3, 800cad4 <_free_r+0x30>
 800cac6:	6063      	str	r3, [r4, #4]
 800cac8:	6014      	str	r4, [r2, #0]
 800caca:	b003      	add	sp, #12
 800cacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cad0:	f000 ba7c 	b.w	800cfcc <__malloc_unlock>
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	d908      	bls.n	800caea <_free_r+0x46>
 800cad8:	6825      	ldr	r5, [r4, #0]
 800cada:	1961      	adds	r1, r4, r5
 800cadc:	428b      	cmp	r3, r1
 800cade:	bf01      	itttt	eq
 800cae0:	6819      	ldreq	r1, [r3, #0]
 800cae2:	685b      	ldreq	r3, [r3, #4]
 800cae4:	1949      	addeq	r1, r1, r5
 800cae6:	6021      	streq	r1, [r4, #0]
 800cae8:	e7ed      	b.n	800cac6 <_free_r+0x22>
 800caea:	461a      	mov	r2, r3
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	b10b      	cbz	r3, 800caf4 <_free_r+0x50>
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	d9fa      	bls.n	800caea <_free_r+0x46>
 800caf4:	6811      	ldr	r1, [r2, #0]
 800caf6:	1855      	adds	r5, r2, r1
 800caf8:	42a5      	cmp	r5, r4
 800cafa:	d10b      	bne.n	800cb14 <_free_r+0x70>
 800cafc:	6824      	ldr	r4, [r4, #0]
 800cafe:	4421      	add	r1, r4
 800cb00:	1854      	adds	r4, r2, r1
 800cb02:	42a3      	cmp	r3, r4
 800cb04:	6011      	str	r1, [r2, #0]
 800cb06:	d1e0      	bne.n	800caca <_free_r+0x26>
 800cb08:	681c      	ldr	r4, [r3, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	6053      	str	r3, [r2, #4]
 800cb0e:	4421      	add	r1, r4
 800cb10:	6011      	str	r1, [r2, #0]
 800cb12:	e7da      	b.n	800caca <_free_r+0x26>
 800cb14:	d902      	bls.n	800cb1c <_free_r+0x78>
 800cb16:	230c      	movs	r3, #12
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	e7d6      	b.n	800caca <_free_r+0x26>
 800cb1c:	6825      	ldr	r5, [r4, #0]
 800cb1e:	1961      	adds	r1, r4, r5
 800cb20:	428b      	cmp	r3, r1
 800cb22:	bf04      	itt	eq
 800cb24:	6819      	ldreq	r1, [r3, #0]
 800cb26:	685b      	ldreq	r3, [r3, #4]
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	bf04      	itt	eq
 800cb2c:	1949      	addeq	r1, r1, r5
 800cb2e:	6021      	streq	r1, [r4, #0]
 800cb30:	6054      	str	r4, [r2, #4]
 800cb32:	e7ca      	b.n	800caca <_free_r+0x26>
 800cb34:	b003      	add	sp, #12
 800cb36:	bd30      	pop	{r4, r5, pc}
 800cb38:	20006a24 	.word	0x20006a24

0800cb3c <sbrk_aligned>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4e0e      	ldr	r6, [pc, #56]	; (800cb78 <sbrk_aligned+0x3c>)
 800cb40:	460c      	mov	r4, r1
 800cb42:	6831      	ldr	r1, [r6, #0]
 800cb44:	4605      	mov	r5, r0
 800cb46:	b911      	cbnz	r1, 800cb4e <sbrk_aligned+0x12>
 800cb48:	f000 f8f6 	bl	800cd38 <_sbrk_r>
 800cb4c:	6030      	str	r0, [r6, #0]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f8f1 	bl	800cd38 <_sbrk_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d00a      	beq.n	800cb70 <sbrk_aligned+0x34>
 800cb5a:	1cc4      	adds	r4, r0, #3
 800cb5c:	f024 0403 	bic.w	r4, r4, #3
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d007      	beq.n	800cb74 <sbrk_aligned+0x38>
 800cb64:	1a21      	subs	r1, r4, r0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 f8e6 	bl	800cd38 <_sbrk_r>
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d101      	bne.n	800cb74 <sbrk_aligned+0x38>
 800cb70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb74:	4620      	mov	r0, r4
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	20006a28 	.word	0x20006a28

0800cb7c <_malloc_r>:
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	1ccd      	adds	r5, r1, #3
 800cb82:	f025 0503 	bic.w	r5, r5, #3
 800cb86:	3508      	adds	r5, #8
 800cb88:	2d0c      	cmp	r5, #12
 800cb8a:	bf38      	it	cc
 800cb8c:	250c      	movcc	r5, #12
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	4607      	mov	r7, r0
 800cb92:	db01      	blt.n	800cb98 <_malloc_r+0x1c>
 800cb94:	42a9      	cmp	r1, r5
 800cb96:	d905      	bls.n	800cba4 <_malloc_r+0x28>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	4630      	mov	r0, r6
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	4e2e      	ldr	r6, [pc, #184]	; (800cc60 <_malloc_r+0xe4>)
 800cba6:	f000 fa0b 	bl	800cfc0 <__malloc_lock>
 800cbaa:	6833      	ldr	r3, [r6, #0]
 800cbac:	461c      	mov	r4, r3
 800cbae:	bb34      	cbnz	r4, 800cbfe <_malloc_r+0x82>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	f7ff ffc2 	bl	800cb3c <sbrk_aligned>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	4604      	mov	r4, r0
 800cbbc:	d14d      	bne.n	800cc5a <_malloc_r+0xde>
 800cbbe:	6834      	ldr	r4, [r6, #0]
 800cbc0:	4626      	mov	r6, r4
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	d140      	bne.n	800cc48 <_malloc_r+0xcc>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4638      	mov	r0, r7
 800cbcc:	eb04 0803 	add.w	r8, r4, r3
 800cbd0:	f000 f8b2 	bl	800cd38 <_sbrk_r>
 800cbd4:	4580      	cmp	r8, r0
 800cbd6:	d13a      	bne.n	800cc4e <_malloc_r+0xd2>
 800cbd8:	6821      	ldr	r1, [r4, #0]
 800cbda:	3503      	adds	r5, #3
 800cbdc:	1a6d      	subs	r5, r5, r1
 800cbde:	f025 0503 	bic.w	r5, r5, #3
 800cbe2:	3508      	adds	r5, #8
 800cbe4:	2d0c      	cmp	r5, #12
 800cbe6:	bf38      	it	cc
 800cbe8:	250c      	movcc	r5, #12
 800cbea:	4629      	mov	r1, r5
 800cbec:	4638      	mov	r0, r7
 800cbee:	f7ff ffa5 	bl	800cb3c <sbrk_aligned>
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d02b      	beq.n	800cc4e <_malloc_r+0xd2>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	442b      	add	r3, r5
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	e00e      	b.n	800cc1c <_malloc_r+0xa0>
 800cbfe:	6822      	ldr	r2, [r4, #0]
 800cc00:	1b52      	subs	r2, r2, r5
 800cc02:	d41e      	bmi.n	800cc42 <_malloc_r+0xc6>
 800cc04:	2a0b      	cmp	r2, #11
 800cc06:	d916      	bls.n	800cc36 <_malloc_r+0xba>
 800cc08:	1961      	adds	r1, r4, r5
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	6025      	str	r5, [r4, #0]
 800cc0e:	bf18      	it	ne
 800cc10:	6059      	strne	r1, [r3, #4]
 800cc12:	6863      	ldr	r3, [r4, #4]
 800cc14:	bf08      	it	eq
 800cc16:	6031      	streq	r1, [r6, #0]
 800cc18:	5162      	str	r2, [r4, r5]
 800cc1a:	604b      	str	r3, [r1, #4]
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f104 060b 	add.w	r6, r4, #11
 800cc22:	f000 f9d3 	bl	800cfcc <__malloc_unlock>
 800cc26:	f026 0607 	bic.w	r6, r6, #7
 800cc2a:	1d23      	adds	r3, r4, #4
 800cc2c:	1af2      	subs	r2, r6, r3
 800cc2e:	d0b6      	beq.n	800cb9e <_malloc_r+0x22>
 800cc30:	1b9b      	subs	r3, r3, r6
 800cc32:	50a3      	str	r3, [r4, r2]
 800cc34:	e7b3      	b.n	800cb9e <_malloc_r+0x22>
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	bf0c      	ite	eq
 800cc3c:	6032      	streq	r2, [r6, #0]
 800cc3e:	605a      	strne	r2, [r3, #4]
 800cc40:	e7ec      	b.n	800cc1c <_malloc_r+0xa0>
 800cc42:	4623      	mov	r3, r4
 800cc44:	6864      	ldr	r4, [r4, #4]
 800cc46:	e7b2      	b.n	800cbae <_malloc_r+0x32>
 800cc48:	4634      	mov	r4, r6
 800cc4a:	6876      	ldr	r6, [r6, #4]
 800cc4c:	e7b9      	b.n	800cbc2 <_malloc_r+0x46>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	4638      	mov	r0, r7
 800cc54:	f000 f9ba 	bl	800cfcc <__malloc_unlock>
 800cc58:	e7a1      	b.n	800cb9e <_malloc_r+0x22>
 800cc5a:	6025      	str	r5, [r4, #0]
 800cc5c:	e7de      	b.n	800cc1c <_malloc_r+0xa0>
 800cc5e:	bf00      	nop
 800cc60:	20006a24 	.word	0x20006a24

0800cc64 <cleanup_glue>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	460c      	mov	r4, r1
 800cc68:	6809      	ldr	r1, [r1, #0]
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	b109      	cbz	r1, 800cc72 <cleanup_glue+0xe>
 800cc6e:	f7ff fff9 	bl	800cc64 <cleanup_glue>
 800cc72:	4621      	mov	r1, r4
 800cc74:	4628      	mov	r0, r5
 800cc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc7a:	f7ff bf13 	b.w	800caa4 <_free_r>
	...

0800cc80 <_reclaim_reent>:
 800cc80:	4b2c      	ldr	r3, [pc, #176]	; (800cd34 <_reclaim_reent+0xb4>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4283      	cmp	r3, r0
 800cc86:	b570      	push	{r4, r5, r6, lr}
 800cc88:	4604      	mov	r4, r0
 800cc8a:	d051      	beq.n	800cd30 <_reclaim_reent+0xb0>
 800cc8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cc8e:	b143      	cbz	r3, 800cca2 <_reclaim_reent+0x22>
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d14a      	bne.n	800cd2c <_reclaim_reent+0xac>
 800cc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc98:	6819      	ldr	r1, [r3, #0]
 800cc9a:	b111      	cbz	r1, 800cca2 <_reclaim_reent+0x22>
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7ff ff01 	bl	800caa4 <_free_r>
 800cca2:	6961      	ldr	r1, [r4, #20]
 800cca4:	b111      	cbz	r1, 800ccac <_reclaim_reent+0x2c>
 800cca6:	4620      	mov	r0, r4
 800cca8:	f7ff fefc 	bl	800caa4 <_free_r>
 800ccac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ccae:	b111      	cbz	r1, 800ccb6 <_reclaim_reent+0x36>
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f7ff fef7 	bl	800caa4 <_free_r>
 800ccb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ccb8:	b111      	cbz	r1, 800ccc0 <_reclaim_reent+0x40>
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f7ff fef2 	bl	800caa4 <_free_r>
 800ccc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ccc2:	b111      	cbz	r1, 800ccca <_reclaim_reent+0x4a>
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7ff feed 	bl	800caa4 <_free_r>
 800ccca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cccc:	b111      	cbz	r1, 800ccd4 <_reclaim_reent+0x54>
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f7ff fee8 	bl	800caa4 <_free_r>
 800ccd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ccd6:	b111      	cbz	r1, 800ccde <_reclaim_reent+0x5e>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f7ff fee3 	bl	800caa4 <_free_r>
 800ccde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cce0:	b111      	cbz	r1, 800cce8 <_reclaim_reent+0x68>
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7ff fede 	bl	800caa4 <_free_r>
 800cce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccea:	b111      	cbz	r1, 800ccf2 <_reclaim_reent+0x72>
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7ff fed9 	bl	800caa4 <_free_r>
 800ccf2:	69a3      	ldr	r3, [r4, #24]
 800ccf4:	b1e3      	cbz	r3, 800cd30 <_reclaim_reent+0xb0>
 800ccf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	4798      	blx	r3
 800ccfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ccfe:	b1b9      	cbz	r1, 800cd30 <_reclaim_reent+0xb0>
 800cd00:	4620      	mov	r0, r4
 800cd02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd06:	f7ff bfad 	b.w	800cc64 <cleanup_glue>
 800cd0a:	5949      	ldr	r1, [r1, r5]
 800cd0c:	b941      	cbnz	r1, 800cd20 <_reclaim_reent+0xa0>
 800cd0e:	3504      	adds	r5, #4
 800cd10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd12:	2d80      	cmp	r5, #128	; 0x80
 800cd14:	68d9      	ldr	r1, [r3, #12]
 800cd16:	d1f8      	bne.n	800cd0a <_reclaim_reent+0x8a>
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7ff fec3 	bl	800caa4 <_free_r>
 800cd1e:	e7ba      	b.n	800cc96 <_reclaim_reent+0x16>
 800cd20:	680e      	ldr	r6, [r1, #0]
 800cd22:	4620      	mov	r0, r4
 800cd24:	f7ff febe 	bl	800caa4 <_free_r>
 800cd28:	4631      	mov	r1, r6
 800cd2a:	e7ef      	b.n	800cd0c <_reclaim_reent+0x8c>
 800cd2c:	2500      	movs	r5, #0
 800cd2e:	e7ef      	b.n	800cd10 <_reclaim_reent+0x90>
 800cd30:	bd70      	pop	{r4, r5, r6, pc}
 800cd32:	bf00      	nop
 800cd34:	200000c4 	.word	0x200000c4

0800cd38 <_sbrk_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	; (800cd54 <_sbrk_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f7 fe3c 	bl	80049c0 <_sbrk>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_sbrk_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_sbrk_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20006a2c 	.word	0x20006a2c

0800cd58 <siprintf>:
 800cd58:	b40e      	push	{r1, r2, r3}
 800cd5a:	b500      	push	{lr}
 800cd5c:	b09c      	sub	sp, #112	; 0x70
 800cd5e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd60:	9002      	str	r0, [sp, #8]
 800cd62:	9006      	str	r0, [sp, #24]
 800cd64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd68:	4809      	ldr	r0, [pc, #36]	; (800cd90 <siprintf+0x38>)
 800cd6a:	9107      	str	r1, [sp, #28]
 800cd6c:	9104      	str	r1, [sp, #16]
 800cd6e:	4909      	ldr	r1, [pc, #36]	; (800cd94 <siprintf+0x3c>)
 800cd70:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd74:	9105      	str	r1, [sp, #20]
 800cd76:	6800      	ldr	r0, [r0, #0]
 800cd78:	9301      	str	r3, [sp, #4]
 800cd7a:	a902      	add	r1, sp, #8
 800cd7c:	f000 f988 	bl	800d090 <_svfiprintf_r>
 800cd80:	9b02      	ldr	r3, [sp, #8]
 800cd82:	2200      	movs	r2, #0
 800cd84:	701a      	strb	r2, [r3, #0]
 800cd86:	b01c      	add	sp, #112	; 0x70
 800cd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd8c:	b003      	add	sp, #12
 800cd8e:	4770      	bx	lr
 800cd90:	200000c4 	.word	0x200000c4
 800cd94:	ffff0208 	.word	0xffff0208

0800cd98 <strcat>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	7814      	ldrb	r4, [r2, #0]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	3201      	adds	r2, #1
 800cda2:	2c00      	cmp	r4, #0
 800cda4:	d1fa      	bne.n	800cd9c <strcat+0x4>
 800cda6:	3b01      	subs	r3, #1
 800cda8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdb0:	2a00      	cmp	r2, #0
 800cdb2:	d1f9      	bne.n	800cda8 <strcat+0x10>
 800cdb4:	bd10      	pop	{r4, pc}

0800cdb6 <strchr>:
 800cdb6:	b2c9      	uxtb	r1, r1
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdbe:	b11a      	cbz	r2, 800cdc8 <strchr+0x12>
 800cdc0:	428a      	cmp	r2, r1
 800cdc2:	d1f9      	bne.n	800cdb8 <strchr+0x2>
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	4770      	bx	lr
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	bf18      	it	ne
 800cdcc:	2300      	movne	r3, #0
 800cdce:	e7f9      	b.n	800cdc4 <strchr+0xe>

0800cdd0 <strcpy>:
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdd6:	f803 2b01 	strb.w	r2, [r3], #1
 800cdda:	2a00      	cmp	r2, #0
 800cddc:	d1f9      	bne.n	800cdd2 <strcpy+0x2>
 800cdde:	4770      	bx	lr

0800cde0 <strncpy>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	3901      	subs	r1, #1
 800cde4:	4603      	mov	r3, r0
 800cde6:	b132      	cbz	r2, 800cdf6 <strncpy+0x16>
 800cde8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cdec:	f803 4b01 	strb.w	r4, [r3], #1
 800cdf0:	3a01      	subs	r2, #1
 800cdf2:	2c00      	cmp	r4, #0
 800cdf4:	d1f7      	bne.n	800cde6 <strncpy+0x6>
 800cdf6:	441a      	add	r2, r3
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d100      	bne.n	800ce00 <strncpy+0x20>
 800cdfe:	bd10      	pop	{r4, pc}
 800ce00:	f803 1b01 	strb.w	r1, [r3], #1
 800ce04:	e7f9      	b.n	800cdfa <strncpy+0x1a>

0800ce06 <strstr>:
 800ce06:	780a      	ldrb	r2, [r1, #0]
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	b96a      	cbnz	r2, 800ce28 <strstr+0x22>
 800ce0c:	bd70      	pop	{r4, r5, r6, pc}
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d109      	bne.n	800ce26 <strstr+0x20>
 800ce12:	460c      	mov	r4, r1
 800ce14:	4605      	mov	r5, r0
 800ce16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d0f6      	beq.n	800ce0c <strstr+0x6>
 800ce1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ce22:	429e      	cmp	r6, r3
 800ce24:	d0f7      	beq.n	800ce16 <strstr+0x10>
 800ce26:	3001      	adds	r0, #1
 800ce28:	7803      	ldrb	r3, [r0, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1ef      	bne.n	800ce0e <strstr+0x8>
 800ce2e:	4618      	mov	r0, r3
 800ce30:	e7ec      	b.n	800ce0c <strstr+0x6>
	...

0800ce34 <_strtol_l.constprop.0>:
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3a:	d001      	beq.n	800ce40 <_strtol_l.constprop.0+0xc>
 800ce3c:	2b24      	cmp	r3, #36	; 0x24
 800ce3e:	d906      	bls.n	800ce4e <_strtol_l.constprop.0+0x1a>
 800ce40:	f7ff fd24 	bl	800c88c <__errno>
 800ce44:	2316      	movs	r3, #22
 800ce46:	6003      	str	r3, [r0, #0]
 800ce48:	2000      	movs	r0, #0
 800ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf34 <_strtol_l.constprop.0+0x100>
 800ce52:	460d      	mov	r5, r1
 800ce54:	462e      	mov	r6, r5
 800ce56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ce5e:	f017 0708 	ands.w	r7, r7, #8
 800ce62:	d1f7      	bne.n	800ce54 <_strtol_l.constprop.0+0x20>
 800ce64:	2c2d      	cmp	r4, #45	; 0x2d
 800ce66:	d132      	bne.n	800cece <_strtol_l.constprop.0+0x9a>
 800ce68:	782c      	ldrb	r4, [r5, #0]
 800ce6a:	2701      	movs	r7, #1
 800ce6c:	1cb5      	adds	r5, r6, #2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d05b      	beq.n	800cf2a <_strtol_l.constprop.0+0xf6>
 800ce72:	2b10      	cmp	r3, #16
 800ce74:	d109      	bne.n	800ce8a <_strtol_l.constprop.0+0x56>
 800ce76:	2c30      	cmp	r4, #48	; 0x30
 800ce78:	d107      	bne.n	800ce8a <_strtol_l.constprop.0+0x56>
 800ce7a:	782c      	ldrb	r4, [r5, #0]
 800ce7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce80:	2c58      	cmp	r4, #88	; 0x58
 800ce82:	d14d      	bne.n	800cf20 <_strtol_l.constprop.0+0xec>
 800ce84:	786c      	ldrb	r4, [r5, #1]
 800ce86:	2310      	movs	r3, #16
 800ce88:	3502      	adds	r5, #2
 800ce8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ce8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ce92:	f04f 0c00 	mov.w	ip, #0
 800ce96:	fbb8 f9f3 	udiv	r9, r8, r3
 800ce9a:	4666      	mov	r6, ip
 800ce9c:	fb03 8a19 	mls	sl, r3, r9, r8
 800cea0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cea4:	f1be 0f09 	cmp.w	lr, #9
 800cea8:	d816      	bhi.n	800ced8 <_strtol_l.constprop.0+0xa4>
 800ceaa:	4674      	mov	r4, lr
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	dd24      	ble.n	800cefa <_strtol_l.constprop.0+0xc6>
 800ceb0:	f1bc 0f00 	cmp.w	ip, #0
 800ceb4:	db1e      	blt.n	800cef4 <_strtol_l.constprop.0+0xc0>
 800ceb6:	45b1      	cmp	r9, r6
 800ceb8:	d31c      	bcc.n	800cef4 <_strtol_l.constprop.0+0xc0>
 800ceba:	d101      	bne.n	800cec0 <_strtol_l.constprop.0+0x8c>
 800cebc:	45a2      	cmp	sl, r4
 800cebe:	db19      	blt.n	800cef4 <_strtol_l.constprop.0+0xc0>
 800cec0:	fb06 4603 	mla	r6, r6, r3, r4
 800cec4:	f04f 0c01 	mov.w	ip, #1
 800cec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cecc:	e7e8      	b.n	800cea0 <_strtol_l.constprop.0+0x6c>
 800cece:	2c2b      	cmp	r4, #43	; 0x2b
 800ced0:	bf04      	itt	eq
 800ced2:	782c      	ldrbeq	r4, [r5, #0]
 800ced4:	1cb5      	addeq	r5, r6, #2
 800ced6:	e7ca      	b.n	800ce6e <_strtol_l.constprop.0+0x3a>
 800ced8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cedc:	f1be 0f19 	cmp.w	lr, #25
 800cee0:	d801      	bhi.n	800cee6 <_strtol_l.constprop.0+0xb2>
 800cee2:	3c37      	subs	r4, #55	; 0x37
 800cee4:	e7e2      	b.n	800ceac <_strtol_l.constprop.0+0x78>
 800cee6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ceea:	f1be 0f19 	cmp.w	lr, #25
 800ceee:	d804      	bhi.n	800cefa <_strtol_l.constprop.0+0xc6>
 800cef0:	3c57      	subs	r4, #87	; 0x57
 800cef2:	e7db      	b.n	800ceac <_strtol_l.constprop.0+0x78>
 800cef4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cef8:	e7e6      	b.n	800cec8 <_strtol_l.constprop.0+0x94>
 800cefa:	f1bc 0f00 	cmp.w	ip, #0
 800cefe:	da05      	bge.n	800cf0c <_strtol_l.constprop.0+0xd8>
 800cf00:	2322      	movs	r3, #34	; 0x22
 800cf02:	6003      	str	r3, [r0, #0]
 800cf04:	4646      	mov	r6, r8
 800cf06:	b942      	cbnz	r2, 800cf1a <_strtol_l.constprop.0+0xe6>
 800cf08:	4630      	mov	r0, r6
 800cf0a:	e79e      	b.n	800ce4a <_strtol_l.constprop.0+0x16>
 800cf0c:	b107      	cbz	r7, 800cf10 <_strtol_l.constprop.0+0xdc>
 800cf0e:	4276      	negs	r6, r6
 800cf10:	2a00      	cmp	r2, #0
 800cf12:	d0f9      	beq.n	800cf08 <_strtol_l.constprop.0+0xd4>
 800cf14:	f1bc 0f00 	cmp.w	ip, #0
 800cf18:	d000      	beq.n	800cf1c <_strtol_l.constprop.0+0xe8>
 800cf1a:	1e69      	subs	r1, r5, #1
 800cf1c:	6011      	str	r1, [r2, #0]
 800cf1e:	e7f3      	b.n	800cf08 <_strtol_l.constprop.0+0xd4>
 800cf20:	2430      	movs	r4, #48	; 0x30
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1b1      	bne.n	800ce8a <_strtol_l.constprop.0+0x56>
 800cf26:	2308      	movs	r3, #8
 800cf28:	e7af      	b.n	800ce8a <_strtol_l.constprop.0+0x56>
 800cf2a:	2c30      	cmp	r4, #48	; 0x30
 800cf2c:	d0a5      	beq.n	800ce7a <_strtol_l.constprop.0+0x46>
 800cf2e:	230a      	movs	r3, #10
 800cf30:	e7ab      	b.n	800ce8a <_strtol_l.constprop.0+0x56>
 800cf32:	bf00      	nop
 800cf34:	08010035 	.word	0x08010035

0800cf38 <strtol>:
 800cf38:	4613      	mov	r3, r2
 800cf3a:	460a      	mov	r2, r1
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	4802      	ldr	r0, [pc, #8]	; (800cf48 <strtol+0x10>)
 800cf40:	6800      	ldr	r0, [r0, #0]
 800cf42:	f7ff bf77 	b.w	800ce34 <_strtol_l.constprop.0>
 800cf46:	bf00      	nop
 800cf48:	200000c4 	.word	0x200000c4

0800cf4c <_vsniprintf_r>:
 800cf4c:	b530      	push	{r4, r5, lr}
 800cf4e:	4614      	mov	r4, r2
 800cf50:	2c00      	cmp	r4, #0
 800cf52:	b09b      	sub	sp, #108	; 0x6c
 800cf54:	4605      	mov	r5, r0
 800cf56:	461a      	mov	r2, r3
 800cf58:	da05      	bge.n	800cf66 <_vsniprintf_r+0x1a>
 800cf5a:	238b      	movs	r3, #139	; 0x8b
 800cf5c:	6003      	str	r3, [r0, #0]
 800cf5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf62:	b01b      	add	sp, #108	; 0x6c
 800cf64:	bd30      	pop	{r4, r5, pc}
 800cf66:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf6a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf6e:	bf14      	ite	ne
 800cf70:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cf74:	4623      	moveq	r3, r4
 800cf76:	9302      	str	r3, [sp, #8]
 800cf78:	9305      	str	r3, [sp, #20]
 800cf7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf7e:	9100      	str	r1, [sp, #0]
 800cf80:	9104      	str	r1, [sp, #16]
 800cf82:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cf86:	4669      	mov	r1, sp
 800cf88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf8a:	f000 f881 	bl	800d090 <_svfiprintf_r>
 800cf8e:	1c43      	adds	r3, r0, #1
 800cf90:	bfbc      	itt	lt
 800cf92:	238b      	movlt	r3, #139	; 0x8b
 800cf94:	602b      	strlt	r3, [r5, #0]
 800cf96:	2c00      	cmp	r4, #0
 800cf98:	d0e3      	beq.n	800cf62 <_vsniprintf_r+0x16>
 800cf9a:	9b00      	ldr	r3, [sp, #0]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	e7df      	b.n	800cf62 <_vsniprintf_r+0x16>
	...

0800cfa4 <vsniprintf>:
 800cfa4:	b507      	push	{r0, r1, r2, lr}
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	460a      	mov	r2, r1
 800cfac:	4601      	mov	r1, r0
 800cfae:	4803      	ldr	r0, [pc, #12]	; (800cfbc <vsniprintf+0x18>)
 800cfb0:	6800      	ldr	r0, [r0, #0]
 800cfb2:	f7ff ffcb 	bl	800cf4c <_vsniprintf_r>
 800cfb6:	b003      	add	sp, #12
 800cfb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfbc:	200000c4 	.word	0x200000c4

0800cfc0 <__malloc_lock>:
 800cfc0:	4801      	ldr	r0, [pc, #4]	; (800cfc8 <__malloc_lock+0x8>)
 800cfc2:	f7ff bd39 	b.w	800ca38 <__retarget_lock_acquire_recursive>
 800cfc6:	bf00      	nop
 800cfc8:	20006a20 	.word	0x20006a20

0800cfcc <__malloc_unlock>:
 800cfcc:	4801      	ldr	r0, [pc, #4]	; (800cfd4 <__malloc_unlock+0x8>)
 800cfce:	f7ff bd34 	b.w	800ca3a <__retarget_lock_release_recursive>
 800cfd2:	bf00      	nop
 800cfd4:	20006a20 	.word	0x20006a20

0800cfd8 <__ssputs_r>:
 800cfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfdc:	688e      	ldr	r6, [r1, #8]
 800cfde:	429e      	cmp	r6, r3
 800cfe0:	4682      	mov	sl, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	4690      	mov	r8, r2
 800cfe6:	461f      	mov	r7, r3
 800cfe8:	d838      	bhi.n	800d05c <__ssputs_r+0x84>
 800cfea:	898a      	ldrh	r2, [r1, #12]
 800cfec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cff0:	d032      	beq.n	800d058 <__ssputs_r+0x80>
 800cff2:	6825      	ldr	r5, [r4, #0]
 800cff4:	6909      	ldr	r1, [r1, #16]
 800cff6:	eba5 0901 	sub.w	r9, r5, r1
 800cffa:	6965      	ldr	r5, [r4, #20]
 800cffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d004:	3301      	adds	r3, #1
 800d006:	444b      	add	r3, r9
 800d008:	106d      	asrs	r5, r5, #1
 800d00a:	429d      	cmp	r5, r3
 800d00c:	bf38      	it	cc
 800d00e:	461d      	movcc	r5, r3
 800d010:	0553      	lsls	r3, r2, #21
 800d012:	d531      	bpl.n	800d078 <__ssputs_r+0xa0>
 800d014:	4629      	mov	r1, r5
 800d016:	f7ff fdb1 	bl	800cb7c <_malloc_r>
 800d01a:	4606      	mov	r6, r0
 800d01c:	b950      	cbnz	r0, 800d034 <__ssputs_r+0x5c>
 800d01e:	230c      	movs	r3, #12
 800d020:	f8ca 3000 	str.w	r3, [sl]
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d02a:	81a3      	strh	r3, [r4, #12]
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d034:	6921      	ldr	r1, [r4, #16]
 800d036:	464a      	mov	r2, r9
 800d038:	f7ff fd08 	bl	800ca4c <memcpy>
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d046:	81a3      	strh	r3, [r4, #12]
 800d048:	6126      	str	r6, [r4, #16]
 800d04a:	6165      	str	r5, [r4, #20]
 800d04c:	444e      	add	r6, r9
 800d04e:	eba5 0509 	sub.w	r5, r5, r9
 800d052:	6026      	str	r6, [r4, #0]
 800d054:	60a5      	str	r5, [r4, #8]
 800d056:	463e      	mov	r6, r7
 800d058:	42be      	cmp	r6, r7
 800d05a:	d900      	bls.n	800d05e <__ssputs_r+0x86>
 800d05c:	463e      	mov	r6, r7
 800d05e:	6820      	ldr	r0, [r4, #0]
 800d060:	4632      	mov	r2, r6
 800d062:	4641      	mov	r1, r8
 800d064:	f000 faa8 	bl	800d5b8 <memmove>
 800d068:	68a3      	ldr	r3, [r4, #8]
 800d06a:	1b9b      	subs	r3, r3, r6
 800d06c:	60a3      	str	r3, [r4, #8]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	4433      	add	r3, r6
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	2000      	movs	r0, #0
 800d076:	e7db      	b.n	800d030 <__ssputs_r+0x58>
 800d078:	462a      	mov	r2, r5
 800d07a:	f000 fab7 	bl	800d5ec <_realloc_r>
 800d07e:	4606      	mov	r6, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d1e1      	bne.n	800d048 <__ssputs_r+0x70>
 800d084:	6921      	ldr	r1, [r4, #16]
 800d086:	4650      	mov	r0, sl
 800d088:	f7ff fd0c 	bl	800caa4 <_free_r>
 800d08c:	e7c7      	b.n	800d01e <__ssputs_r+0x46>
	...

0800d090 <_svfiprintf_r>:
 800d090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d094:	4698      	mov	r8, r3
 800d096:	898b      	ldrh	r3, [r1, #12]
 800d098:	061b      	lsls	r3, r3, #24
 800d09a:	b09d      	sub	sp, #116	; 0x74
 800d09c:	4607      	mov	r7, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	4614      	mov	r4, r2
 800d0a2:	d50e      	bpl.n	800d0c2 <_svfiprintf_r+0x32>
 800d0a4:	690b      	ldr	r3, [r1, #16]
 800d0a6:	b963      	cbnz	r3, 800d0c2 <_svfiprintf_r+0x32>
 800d0a8:	2140      	movs	r1, #64	; 0x40
 800d0aa:	f7ff fd67 	bl	800cb7c <_malloc_r>
 800d0ae:	6028      	str	r0, [r5, #0]
 800d0b0:	6128      	str	r0, [r5, #16]
 800d0b2:	b920      	cbnz	r0, 800d0be <_svfiprintf_r+0x2e>
 800d0b4:	230c      	movs	r3, #12
 800d0b6:	603b      	str	r3, [r7, #0]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0bc:	e0d1      	b.n	800d262 <_svfiprintf_r+0x1d2>
 800d0be:	2340      	movs	r3, #64	; 0x40
 800d0c0:	616b      	str	r3, [r5, #20]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c6:	2320      	movs	r3, #32
 800d0c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d0:	2330      	movs	r3, #48	; 0x30
 800d0d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d27c <_svfiprintf_r+0x1ec>
 800d0d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0da:	f04f 0901 	mov.w	r9, #1
 800d0de:	4623      	mov	r3, r4
 800d0e0:	469a      	mov	sl, r3
 800d0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e6:	b10a      	cbz	r2, 800d0ec <_svfiprintf_r+0x5c>
 800d0e8:	2a25      	cmp	r2, #37	; 0x25
 800d0ea:	d1f9      	bne.n	800d0e0 <_svfiprintf_r+0x50>
 800d0ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f0:	d00b      	beq.n	800d10a <_svfiprintf_r+0x7a>
 800d0f2:	465b      	mov	r3, fp
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff ff6d 	bl	800cfd8 <__ssputs_r>
 800d0fe:	3001      	adds	r0, #1
 800d100:	f000 80aa 	beq.w	800d258 <_svfiprintf_r+0x1c8>
 800d104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d106:	445a      	add	r2, fp
 800d108:	9209      	str	r2, [sp, #36]	; 0x24
 800d10a:	f89a 3000 	ldrb.w	r3, [sl]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f000 80a2 	beq.w	800d258 <_svfiprintf_r+0x1c8>
 800d114:	2300      	movs	r3, #0
 800d116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d11e:	f10a 0a01 	add.w	sl, sl, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	9307      	str	r3, [sp, #28]
 800d126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d12a:	931a      	str	r3, [sp, #104]	; 0x68
 800d12c:	4654      	mov	r4, sl
 800d12e:	2205      	movs	r2, #5
 800d130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d134:	4851      	ldr	r0, [pc, #324]	; (800d27c <_svfiprintf_r+0x1ec>)
 800d136:	f7f3 f853 	bl	80001e0 <memchr>
 800d13a:	9a04      	ldr	r2, [sp, #16]
 800d13c:	b9d8      	cbnz	r0, 800d176 <_svfiprintf_r+0xe6>
 800d13e:	06d0      	lsls	r0, r2, #27
 800d140:	bf44      	itt	mi
 800d142:	2320      	movmi	r3, #32
 800d144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d148:	0711      	lsls	r1, r2, #28
 800d14a:	bf44      	itt	mi
 800d14c:	232b      	movmi	r3, #43	; 0x2b
 800d14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d152:	f89a 3000 	ldrb.w	r3, [sl]
 800d156:	2b2a      	cmp	r3, #42	; 0x2a
 800d158:	d015      	beq.n	800d186 <_svfiprintf_r+0xf6>
 800d15a:	9a07      	ldr	r2, [sp, #28]
 800d15c:	4654      	mov	r4, sl
 800d15e:	2000      	movs	r0, #0
 800d160:	f04f 0c0a 	mov.w	ip, #10
 800d164:	4621      	mov	r1, r4
 800d166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d16a:	3b30      	subs	r3, #48	; 0x30
 800d16c:	2b09      	cmp	r3, #9
 800d16e:	d94e      	bls.n	800d20e <_svfiprintf_r+0x17e>
 800d170:	b1b0      	cbz	r0, 800d1a0 <_svfiprintf_r+0x110>
 800d172:	9207      	str	r2, [sp, #28]
 800d174:	e014      	b.n	800d1a0 <_svfiprintf_r+0x110>
 800d176:	eba0 0308 	sub.w	r3, r0, r8
 800d17a:	fa09 f303 	lsl.w	r3, r9, r3
 800d17e:	4313      	orrs	r3, r2
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	46a2      	mov	sl, r4
 800d184:	e7d2      	b.n	800d12c <_svfiprintf_r+0x9c>
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	1d19      	adds	r1, r3, #4
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	9103      	str	r1, [sp, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	bfbb      	ittet	lt
 800d192:	425b      	neglt	r3, r3
 800d194:	f042 0202 	orrlt.w	r2, r2, #2
 800d198:	9307      	strge	r3, [sp, #28]
 800d19a:	9307      	strlt	r3, [sp, #28]
 800d19c:	bfb8      	it	lt
 800d19e:	9204      	strlt	r2, [sp, #16]
 800d1a0:	7823      	ldrb	r3, [r4, #0]
 800d1a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1a4:	d10c      	bne.n	800d1c0 <_svfiprintf_r+0x130>
 800d1a6:	7863      	ldrb	r3, [r4, #1]
 800d1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1aa:	d135      	bne.n	800d218 <_svfiprintf_r+0x188>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	1d1a      	adds	r2, r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	9203      	str	r2, [sp, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	bfb8      	it	lt
 800d1b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d1bc:	3402      	adds	r4, #2
 800d1be:	9305      	str	r3, [sp, #20]
 800d1c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d28c <_svfiprintf_r+0x1fc>
 800d1c4:	7821      	ldrb	r1, [r4, #0]
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	f7f3 f809 	bl	80001e0 <memchr>
 800d1ce:	b140      	cbz	r0, 800d1e2 <_svfiprintf_r+0x152>
 800d1d0:	2340      	movs	r3, #64	; 0x40
 800d1d2:	eba0 000a 	sub.w	r0, r0, sl
 800d1d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	4303      	orrs	r3, r0
 800d1de:	3401      	adds	r4, #1
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e6:	4826      	ldr	r0, [pc, #152]	; (800d280 <_svfiprintf_r+0x1f0>)
 800d1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ec:	2206      	movs	r2, #6
 800d1ee:	f7f2 fff7 	bl	80001e0 <memchr>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d038      	beq.n	800d268 <_svfiprintf_r+0x1d8>
 800d1f6:	4b23      	ldr	r3, [pc, #140]	; (800d284 <_svfiprintf_r+0x1f4>)
 800d1f8:	bb1b      	cbnz	r3, 800d242 <_svfiprintf_r+0x1b2>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	3307      	adds	r3, #7
 800d1fe:	f023 0307 	bic.w	r3, r3, #7
 800d202:	3308      	adds	r3, #8
 800d204:	9303      	str	r3, [sp, #12]
 800d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d208:	4433      	add	r3, r6
 800d20a:	9309      	str	r3, [sp, #36]	; 0x24
 800d20c:	e767      	b.n	800d0de <_svfiprintf_r+0x4e>
 800d20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d212:	460c      	mov	r4, r1
 800d214:	2001      	movs	r0, #1
 800d216:	e7a5      	b.n	800d164 <_svfiprintf_r+0xd4>
 800d218:	2300      	movs	r3, #0
 800d21a:	3401      	adds	r4, #1
 800d21c:	9305      	str	r3, [sp, #20]
 800d21e:	4619      	mov	r1, r3
 800d220:	f04f 0c0a 	mov.w	ip, #10
 800d224:	4620      	mov	r0, r4
 800d226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d22a:	3a30      	subs	r2, #48	; 0x30
 800d22c:	2a09      	cmp	r2, #9
 800d22e:	d903      	bls.n	800d238 <_svfiprintf_r+0x1a8>
 800d230:	2b00      	cmp	r3, #0
 800d232:	d0c5      	beq.n	800d1c0 <_svfiprintf_r+0x130>
 800d234:	9105      	str	r1, [sp, #20]
 800d236:	e7c3      	b.n	800d1c0 <_svfiprintf_r+0x130>
 800d238:	fb0c 2101 	mla	r1, ip, r1, r2
 800d23c:	4604      	mov	r4, r0
 800d23e:	2301      	movs	r3, #1
 800d240:	e7f0      	b.n	800d224 <_svfiprintf_r+0x194>
 800d242:	ab03      	add	r3, sp, #12
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	462a      	mov	r2, r5
 800d248:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <_svfiprintf_r+0x1f8>)
 800d24a:	a904      	add	r1, sp, #16
 800d24c:	4638      	mov	r0, r7
 800d24e:	f3af 8000 	nop.w
 800d252:	1c42      	adds	r2, r0, #1
 800d254:	4606      	mov	r6, r0
 800d256:	d1d6      	bne.n	800d206 <_svfiprintf_r+0x176>
 800d258:	89ab      	ldrh	r3, [r5, #12]
 800d25a:	065b      	lsls	r3, r3, #25
 800d25c:	f53f af2c 	bmi.w	800d0b8 <_svfiprintf_r+0x28>
 800d260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d262:	b01d      	add	sp, #116	; 0x74
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	ab03      	add	r3, sp, #12
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	462a      	mov	r2, r5
 800d26e:	4b06      	ldr	r3, [pc, #24]	; (800d288 <_svfiprintf_r+0x1f8>)
 800d270:	a904      	add	r1, sp, #16
 800d272:	4638      	mov	r0, r7
 800d274:	f000 f87a 	bl	800d36c <_printf_i>
 800d278:	e7eb      	b.n	800d252 <_svfiprintf_r+0x1c2>
 800d27a:	bf00      	nop
 800d27c:	08010135 	.word	0x08010135
 800d280:	0801013f 	.word	0x0801013f
 800d284:	00000000 	.word	0x00000000
 800d288:	0800cfd9 	.word	0x0800cfd9
 800d28c:	0801013b 	.word	0x0801013b

0800d290 <_printf_common>:
 800d290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d294:	4616      	mov	r6, r2
 800d296:	4699      	mov	r9, r3
 800d298:	688a      	ldr	r2, [r1, #8]
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	bfb8      	it	lt
 800d2a4:	4613      	movlt	r3, r2
 800d2a6:	6033      	str	r3, [r6, #0]
 800d2a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	b10a      	cbz	r2, 800d2b6 <_printf_common+0x26>
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	6033      	str	r3, [r6, #0]
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	0699      	lsls	r1, r3, #26
 800d2ba:	bf42      	ittt	mi
 800d2bc:	6833      	ldrmi	r3, [r6, #0]
 800d2be:	3302      	addmi	r3, #2
 800d2c0:	6033      	strmi	r3, [r6, #0]
 800d2c2:	6825      	ldr	r5, [r4, #0]
 800d2c4:	f015 0506 	ands.w	r5, r5, #6
 800d2c8:	d106      	bne.n	800d2d8 <_printf_common+0x48>
 800d2ca:	f104 0a19 	add.w	sl, r4, #25
 800d2ce:	68e3      	ldr	r3, [r4, #12]
 800d2d0:	6832      	ldr	r2, [r6, #0]
 800d2d2:	1a9b      	subs	r3, r3, r2
 800d2d4:	42ab      	cmp	r3, r5
 800d2d6:	dc26      	bgt.n	800d326 <_printf_common+0x96>
 800d2d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2dc:	1e13      	subs	r3, r2, #0
 800d2de:	6822      	ldr	r2, [r4, #0]
 800d2e0:	bf18      	it	ne
 800d2e2:	2301      	movne	r3, #1
 800d2e4:	0692      	lsls	r2, r2, #26
 800d2e6:	d42b      	bmi.n	800d340 <_printf_common+0xb0>
 800d2e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	47c0      	blx	r8
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d01e      	beq.n	800d334 <_printf_common+0xa4>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	68e5      	ldr	r5, [r4, #12]
 800d2fa:	6832      	ldr	r2, [r6, #0]
 800d2fc:	f003 0306 	and.w	r3, r3, #6
 800d300:	2b04      	cmp	r3, #4
 800d302:	bf08      	it	eq
 800d304:	1aad      	subeq	r5, r5, r2
 800d306:	68a3      	ldr	r3, [r4, #8]
 800d308:	6922      	ldr	r2, [r4, #16]
 800d30a:	bf0c      	ite	eq
 800d30c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d310:	2500      	movne	r5, #0
 800d312:	4293      	cmp	r3, r2
 800d314:	bfc4      	itt	gt
 800d316:	1a9b      	subgt	r3, r3, r2
 800d318:	18ed      	addgt	r5, r5, r3
 800d31a:	2600      	movs	r6, #0
 800d31c:	341a      	adds	r4, #26
 800d31e:	42b5      	cmp	r5, r6
 800d320:	d11a      	bne.n	800d358 <_printf_common+0xc8>
 800d322:	2000      	movs	r0, #0
 800d324:	e008      	b.n	800d338 <_printf_common+0xa8>
 800d326:	2301      	movs	r3, #1
 800d328:	4652      	mov	r2, sl
 800d32a:	4649      	mov	r1, r9
 800d32c:	4638      	mov	r0, r7
 800d32e:	47c0      	blx	r8
 800d330:	3001      	adds	r0, #1
 800d332:	d103      	bne.n	800d33c <_printf_common+0xac>
 800d334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33c:	3501      	adds	r5, #1
 800d33e:	e7c6      	b.n	800d2ce <_printf_common+0x3e>
 800d340:	18e1      	adds	r1, r4, r3
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	2030      	movs	r0, #48	; 0x30
 800d346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d34a:	4422      	add	r2, r4
 800d34c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d354:	3302      	adds	r3, #2
 800d356:	e7c7      	b.n	800d2e8 <_printf_common+0x58>
 800d358:	2301      	movs	r3, #1
 800d35a:	4622      	mov	r2, r4
 800d35c:	4649      	mov	r1, r9
 800d35e:	4638      	mov	r0, r7
 800d360:	47c0      	blx	r8
 800d362:	3001      	adds	r0, #1
 800d364:	d0e6      	beq.n	800d334 <_printf_common+0xa4>
 800d366:	3601      	adds	r6, #1
 800d368:	e7d9      	b.n	800d31e <_printf_common+0x8e>
	...

0800d36c <_printf_i>:
 800d36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d370:	7e0f      	ldrb	r7, [r1, #24]
 800d372:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d374:	2f78      	cmp	r7, #120	; 0x78
 800d376:	4691      	mov	r9, r2
 800d378:	4680      	mov	r8, r0
 800d37a:	460c      	mov	r4, r1
 800d37c:	469a      	mov	sl, r3
 800d37e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d382:	d807      	bhi.n	800d394 <_printf_i+0x28>
 800d384:	2f62      	cmp	r7, #98	; 0x62
 800d386:	d80a      	bhi.n	800d39e <_printf_i+0x32>
 800d388:	2f00      	cmp	r7, #0
 800d38a:	f000 80d8 	beq.w	800d53e <_printf_i+0x1d2>
 800d38e:	2f58      	cmp	r7, #88	; 0x58
 800d390:	f000 80a3 	beq.w	800d4da <_printf_i+0x16e>
 800d394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d39c:	e03a      	b.n	800d414 <_printf_i+0xa8>
 800d39e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3a2:	2b15      	cmp	r3, #21
 800d3a4:	d8f6      	bhi.n	800d394 <_printf_i+0x28>
 800d3a6:	a101      	add	r1, pc, #4	; (adr r1, 800d3ac <_printf_i+0x40>)
 800d3a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3ac:	0800d405 	.word	0x0800d405
 800d3b0:	0800d419 	.word	0x0800d419
 800d3b4:	0800d395 	.word	0x0800d395
 800d3b8:	0800d395 	.word	0x0800d395
 800d3bc:	0800d395 	.word	0x0800d395
 800d3c0:	0800d395 	.word	0x0800d395
 800d3c4:	0800d419 	.word	0x0800d419
 800d3c8:	0800d395 	.word	0x0800d395
 800d3cc:	0800d395 	.word	0x0800d395
 800d3d0:	0800d395 	.word	0x0800d395
 800d3d4:	0800d395 	.word	0x0800d395
 800d3d8:	0800d525 	.word	0x0800d525
 800d3dc:	0800d449 	.word	0x0800d449
 800d3e0:	0800d507 	.word	0x0800d507
 800d3e4:	0800d395 	.word	0x0800d395
 800d3e8:	0800d395 	.word	0x0800d395
 800d3ec:	0800d547 	.word	0x0800d547
 800d3f0:	0800d395 	.word	0x0800d395
 800d3f4:	0800d449 	.word	0x0800d449
 800d3f8:	0800d395 	.word	0x0800d395
 800d3fc:	0800d395 	.word	0x0800d395
 800d400:	0800d50f 	.word	0x0800d50f
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	1d1a      	adds	r2, r3, #4
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	602a      	str	r2, [r5, #0]
 800d40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d414:	2301      	movs	r3, #1
 800d416:	e0a3      	b.n	800d560 <_printf_i+0x1f4>
 800d418:	6820      	ldr	r0, [r4, #0]
 800d41a:	6829      	ldr	r1, [r5, #0]
 800d41c:	0606      	lsls	r6, r0, #24
 800d41e:	f101 0304 	add.w	r3, r1, #4
 800d422:	d50a      	bpl.n	800d43a <_printf_i+0xce>
 800d424:	680e      	ldr	r6, [r1, #0]
 800d426:	602b      	str	r3, [r5, #0]
 800d428:	2e00      	cmp	r6, #0
 800d42a:	da03      	bge.n	800d434 <_printf_i+0xc8>
 800d42c:	232d      	movs	r3, #45	; 0x2d
 800d42e:	4276      	negs	r6, r6
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d434:	485e      	ldr	r0, [pc, #376]	; (800d5b0 <_printf_i+0x244>)
 800d436:	230a      	movs	r3, #10
 800d438:	e019      	b.n	800d46e <_printf_i+0x102>
 800d43a:	680e      	ldr	r6, [r1, #0]
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d442:	bf18      	it	ne
 800d444:	b236      	sxthne	r6, r6
 800d446:	e7ef      	b.n	800d428 <_printf_i+0xbc>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	6820      	ldr	r0, [r4, #0]
 800d44c:	1d19      	adds	r1, r3, #4
 800d44e:	6029      	str	r1, [r5, #0]
 800d450:	0601      	lsls	r1, r0, #24
 800d452:	d501      	bpl.n	800d458 <_printf_i+0xec>
 800d454:	681e      	ldr	r6, [r3, #0]
 800d456:	e002      	b.n	800d45e <_printf_i+0xf2>
 800d458:	0646      	lsls	r6, r0, #25
 800d45a:	d5fb      	bpl.n	800d454 <_printf_i+0xe8>
 800d45c:	881e      	ldrh	r6, [r3, #0]
 800d45e:	4854      	ldr	r0, [pc, #336]	; (800d5b0 <_printf_i+0x244>)
 800d460:	2f6f      	cmp	r7, #111	; 0x6f
 800d462:	bf0c      	ite	eq
 800d464:	2308      	moveq	r3, #8
 800d466:	230a      	movne	r3, #10
 800d468:	2100      	movs	r1, #0
 800d46a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d46e:	6865      	ldr	r5, [r4, #4]
 800d470:	60a5      	str	r5, [r4, #8]
 800d472:	2d00      	cmp	r5, #0
 800d474:	bfa2      	ittt	ge
 800d476:	6821      	ldrge	r1, [r4, #0]
 800d478:	f021 0104 	bicge.w	r1, r1, #4
 800d47c:	6021      	strge	r1, [r4, #0]
 800d47e:	b90e      	cbnz	r6, 800d484 <_printf_i+0x118>
 800d480:	2d00      	cmp	r5, #0
 800d482:	d04d      	beq.n	800d520 <_printf_i+0x1b4>
 800d484:	4615      	mov	r5, r2
 800d486:	fbb6 f1f3 	udiv	r1, r6, r3
 800d48a:	fb03 6711 	mls	r7, r3, r1, r6
 800d48e:	5dc7      	ldrb	r7, [r0, r7]
 800d490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d494:	4637      	mov	r7, r6
 800d496:	42bb      	cmp	r3, r7
 800d498:	460e      	mov	r6, r1
 800d49a:	d9f4      	bls.n	800d486 <_printf_i+0x11a>
 800d49c:	2b08      	cmp	r3, #8
 800d49e:	d10b      	bne.n	800d4b8 <_printf_i+0x14c>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	07de      	lsls	r6, r3, #31
 800d4a4:	d508      	bpl.n	800d4b8 <_printf_i+0x14c>
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	4299      	cmp	r1, r3
 800d4ac:	bfde      	ittt	le
 800d4ae:	2330      	movle	r3, #48	; 0x30
 800d4b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d4b8:	1b52      	subs	r2, r2, r5
 800d4ba:	6122      	str	r2, [r4, #16]
 800d4bc:	f8cd a000 	str.w	sl, [sp]
 800d4c0:	464b      	mov	r3, r9
 800d4c2:	aa03      	add	r2, sp, #12
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	f7ff fee2 	bl	800d290 <_printf_common>
 800d4cc:	3001      	adds	r0, #1
 800d4ce:	d14c      	bne.n	800d56a <_printf_i+0x1fe>
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4d4:	b004      	add	sp, #16
 800d4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4da:	4835      	ldr	r0, [pc, #212]	; (800d5b0 <_printf_i+0x244>)
 800d4dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d4e0:	6829      	ldr	r1, [r5, #0]
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4e8:	6029      	str	r1, [r5, #0]
 800d4ea:	061d      	lsls	r5, r3, #24
 800d4ec:	d514      	bpl.n	800d518 <_printf_i+0x1ac>
 800d4ee:	07df      	lsls	r7, r3, #31
 800d4f0:	bf44      	itt	mi
 800d4f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d4f6:	6023      	strmi	r3, [r4, #0]
 800d4f8:	b91e      	cbnz	r6, 800d502 <_printf_i+0x196>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	f023 0320 	bic.w	r3, r3, #32
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	2310      	movs	r3, #16
 800d504:	e7b0      	b.n	800d468 <_printf_i+0xfc>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	f043 0320 	orr.w	r3, r3, #32
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	2378      	movs	r3, #120	; 0x78
 800d510:	4828      	ldr	r0, [pc, #160]	; (800d5b4 <_printf_i+0x248>)
 800d512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d516:	e7e3      	b.n	800d4e0 <_printf_i+0x174>
 800d518:	0659      	lsls	r1, r3, #25
 800d51a:	bf48      	it	mi
 800d51c:	b2b6      	uxthmi	r6, r6
 800d51e:	e7e6      	b.n	800d4ee <_printf_i+0x182>
 800d520:	4615      	mov	r5, r2
 800d522:	e7bb      	b.n	800d49c <_printf_i+0x130>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	6826      	ldr	r6, [r4, #0]
 800d528:	6961      	ldr	r1, [r4, #20]
 800d52a:	1d18      	adds	r0, r3, #4
 800d52c:	6028      	str	r0, [r5, #0]
 800d52e:	0635      	lsls	r5, r6, #24
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	d501      	bpl.n	800d538 <_printf_i+0x1cc>
 800d534:	6019      	str	r1, [r3, #0]
 800d536:	e002      	b.n	800d53e <_printf_i+0x1d2>
 800d538:	0670      	lsls	r0, r6, #25
 800d53a:	d5fb      	bpl.n	800d534 <_printf_i+0x1c8>
 800d53c:	8019      	strh	r1, [r3, #0]
 800d53e:	2300      	movs	r3, #0
 800d540:	6123      	str	r3, [r4, #16]
 800d542:	4615      	mov	r5, r2
 800d544:	e7ba      	b.n	800d4bc <_printf_i+0x150>
 800d546:	682b      	ldr	r3, [r5, #0]
 800d548:	1d1a      	adds	r2, r3, #4
 800d54a:	602a      	str	r2, [r5, #0]
 800d54c:	681d      	ldr	r5, [r3, #0]
 800d54e:	6862      	ldr	r2, [r4, #4]
 800d550:	2100      	movs	r1, #0
 800d552:	4628      	mov	r0, r5
 800d554:	f7f2 fe44 	bl	80001e0 <memchr>
 800d558:	b108      	cbz	r0, 800d55e <_printf_i+0x1f2>
 800d55a:	1b40      	subs	r0, r0, r5
 800d55c:	6060      	str	r0, [r4, #4]
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	6123      	str	r3, [r4, #16]
 800d562:	2300      	movs	r3, #0
 800d564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d568:	e7a8      	b.n	800d4bc <_printf_i+0x150>
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	462a      	mov	r2, r5
 800d56e:	4649      	mov	r1, r9
 800d570:	4640      	mov	r0, r8
 800d572:	47d0      	blx	sl
 800d574:	3001      	adds	r0, #1
 800d576:	d0ab      	beq.n	800d4d0 <_printf_i+0x164>
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	079b      	lsls	r3, r3, #30
 800d57c:	d413      	bmi.n	800d5a6 <_printf_i+0x23a>
 800d57e:	68e0      	ldr	r0, [r4, #12]
 800d580:	9b03      	ldr	r3, [sp, #12]
 800d582:	4298      	cmp	r0, r3
 800d584:	bfb8      	it	lt
 800d586:	4618      	movlt	r0, r3
 800d588:	e7a4      	b.n	800d4d4 <_printf_i+0x168>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4632      	mov	r2, r6
 800d58e:	4649      	mov	r1, r9
 800d590:	4640      	mov	r0, r8
 800d592:	47d0      	blx	sl
 800d594:	3001      	adds	r0, #1
 800d596:	d09b      	beq.n	800d4d0 <_printf_i+0x164>
 800d598:	3501      	adds	r5, #1
 800d59a:	68e3      	ldr	r3, [r4, #12]
 800d59c:	9903      	ldr	r1, [sp, #12]
 800d59e:	1a5b      	subs	r3, r3, r1
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	dcf2      	bgt.n	800d58a <_printf_i+0x21e>
 800d5a4:	e7eb      	b.n	800d57e <_printf_i+0x212>
 800d5a6:	2500      	movs	r5, #0
 800d5a8:	f104 0619 	add.w	r6, r4, #25
 800d5ac:	e7f5      	b.n	800d59a <_printf_i+0x22e>
 800d5ae:	bf00      	nop
 800d5b0:	08010146 	.word	0x08010146
 800d5b4:	08010157 	.word	0x08010157

0800d5b8 <memmove>:
 800d5b8:	4288      	cmp	r0, r1
 800d5ba:	b510      	push	{r4, lr}
 800d5bc:	eb01 0402 	add.w	r4, r1, r2
 800d5c0:	d902      	bls.n	800d5c8 <memmove+0x10>
 800d5c2:	4284      	cmp	r4, r0
 800d5c4:	4623      	mov	r3, r4
 800d5c6:	d807      	bhi.n	800d5d8 <memmove+0x20>
 800d5c8:	1e43      	subs	r3, r0, #1
 800d5ca:	42a1      	cmp	r1, r4
 800d5cc:	d008      	beq.n	800d5e0 <memmove+0x28>
 800d5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5d6:	e7f8      	b.n	800d5ca <memmove+0x12>
 800d5d8:	4402      	add	r2, r0
 800d5da:	4601      	mov	r1, r0
 800d5dc:	428a      	cmp	r2, r1
 800d5de:	d100      	bne.n	800d5e2 <memmove+0x2a>
 800d5e0:	bd10      	pop	{r4, pc}
 800d5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5ea:	e7f7      	b.n	800d5dc <memmove+0x24>

0800d5ec <_realloc_r>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	4614      	mov	r4, r2
 800d5f4:	460e      	mov	r6, r1
 800d5f6:	b921      	cbnz	r1, 800d602 <_realloc_r+0x16>
 800d5f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	f7ff babd 	b.w	800cb7c <_malloc_r>
 800d602:	b92a      	cbnz	r2, 800d610 <_realloc_r+0x24>
 800d604:	f7ff fa4e 	bl	800caa4 <_free_r>
 800d608:	4625      	mov	r5, r4
 800d60a:	4628      	mov	r0, r5
 800d60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d610:	f000 f81b 	bl	800d64a <_malloc_usable_size_r>
 800d614:	4284      	cmp	r4, r0
 800d616:	4607      	mov	r7, r0
 800d618:	d802      	bhi.n	800d620 <_realloc_r+0x34>
 800d61a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d61e:	d812      	bhi.n	800d646 <_realloc_r+0x5a>
 800d620:	4621      	mov	r1, r4
 800d622:	4640      	mov	r0, r8
 800d624:	f7ff faaa 	bl	800cb7c <_malloc_r>
 800d628:	4605      	mov	r5, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d0ed      	beq.n	800d60a <_realloc_r+0x1e>
 800d62e:	42bc      	cmp	r4, r7
 800d630:	4622      	mov	r2, r4
 800d632:	4631      	mov	r1, r6
 800d634:	bf28      	it	cs
 800d636:	463a      	movcs	r2, r7
 800d638:	f7ff fa08 	bl	800ca4c <memcpy>
 800d63c:	4631      	mov	r1, r6
 800d63e:	4640      	mov	r0, r8
 800d640:	f7ff fa30 	bl	800caa4 <_free_r>
 800d644:	e7e1      	b.n	800d60a <_realloc_r+0x1e>
 800d646:	4635      	mov	r5, r6
 800d648:	e7df      	b.n	800d60a <_realloc_r+0x1e>

0800d64a <_malloc_usable_size_r>:
 800d64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64e:	1f18      	subs	r0, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	bfbc      	itt	lt
 800d654:	580b      	ldrlt	r3, [r1, r0]
 800d656:	18c0      	addlt	r0, r0, r3
 800d658:	4770      	bx	lr
	...

0800d65c <_init>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	bf00      	nop
 800d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d662:	bc08      	pop	{r3}
 800d664:	469e      	mov	lr, r3
 800d666:	4770      	bx	lr

0800d668 <_fini>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	bf00      	nop
 800d66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66e:	bc08      	pop	{r3}
 800d670:	469e      	mov	lr, r3
 800d672:	4770      	bx	lr
