
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d034  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a34  0800d1c4  0800d1c4  0001d1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbf8  0800fbf8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbf8  0800fbf8  0001fbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc00  0800fc00  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc00  0800fc00  0001fc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc04  0800fc04  0001fc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800fc08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002010c  2**0
                  CONTENTS
 10 .bss          00006900  20000110  20000110  00020110  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20006a10  20006a10  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e50  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004279  00000000  00000000  00043f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b48  00000000  00000000  00048208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc6  00000000  00000000  00049d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204c2  00000000  00000000  0004fb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f3f  00000000  00000000  0006ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153f17  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000019f0  00000000  00000000  00153f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007cb8  00000000  00000000  00155958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1ac 	.word	0x0800d1ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800d1ac 	.word	0x0800d1ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 fdc7 	bl	80047f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f881 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e3 	bl	8000e40 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 fdf3 	bl	8004878 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xdc>)
 8000c98:	f004 fc92 	bl	80055c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0xe0>)
 8000ca4:	f004 fc8c 	bl	80055c0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 fde5 	bl	8004878 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xdc>)
 8000cb4:	f004 fc84 	bl	80055c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xe0>)
 8000cc0:	f004 fc7e 	bl	80055c0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fc8d 	bl	80075f4 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0xe8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0xec>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 f905 	bl	8007ef2 <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000ce8:	f002 fff8 	bl	8003cdc <ST7789_Reset>
  ST7789_Init(back_color);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0xf0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f80d 	bl	8003d10 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf6:	f008 fa6d 	bl	80091d4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <main+0xf4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 fb61 	bl	80093c6 <osSemaphoreNew>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <main+0xf8>)
 8000d08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xfc>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f008 fbe2 	bl	80094d8 <osMessageQueueNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <main+0x100>)
 8000d18:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x108>)
 8000d20:	f008 faa4 	bl	800926c <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <main+0x10c>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2a:	f008 fa79 	bl	8009220 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 fda2 	bl	8004878 <HAL_Delay>
 8000d34:	e7fb      	b.n	8000d2e <main+0xd2>
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	2000005c 	.word	0x2000005c
 8000d44:	20000060 	.word	0x20000060
 8000d48:	20001350 	.word	0x20001350
 8000d4c:	20001356 	.word	0x20001356
 8000d50:	0800f9d8 	.word	0x0800f9d8
 8000d54:	20000338 	.word	0x20000338
 8000d58:	0800f9c0 	.word	0x0800f9c0
 8000d5c:	20000334 	.word	0x20000334
 8000d60:	0800f99c 	.word	0x0800f99c
 8000d64:	08002bb1 	.word	0x08002bb1
 8000d68:	20000330 	.word	0x20000330

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b fc1c 	bl	800c5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fe14 	bl	8005a20 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f002 fdd5 	bl	80039ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 f875 	bl	8005f10 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f002 fdbe 	bl	80039ac <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_RTC_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e6c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e86:	f005 fb77 	bl	8006578 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e90:	f002 fd8c 	bl	80039ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000e98:	2334      	movs	r3, #52	; 0x34
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000eb0:	f005 fbd8 	bl	8006664 <HAL_RTC_SetTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f002 fd77 	bl	80039ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000ed6:	f005 fcbd 	bl	8006854 <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f002 fd64 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f8ed 	bl	80020c8 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000012c 	.word	0x2000012c
 8000efc:	40002800 	.word	0x40002800
 8000f00:	20000054 	.word	0x20000054

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f005 fe0d 	bl	8006b74 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f002 fd24 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000014c 	.word	0x2000014c
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f006 facd 	bl	8007554 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f002 fcf4 	bl	80039ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 fc87 	bl	80078e4 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f002 fce6 	bl	80039ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f006 fea3 	bl	8007d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f002 fcd8 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000204 	.word	0x20000204

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f006 ff0a 	bl	8007e58 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f002 fcaf 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000024c 	.word	0x2000024c
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 fcc6 	bl	8004a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f003 fcdf 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f003 fcbe 	bl	8004a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f003 fcd7 	bl	8004a68 <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 fa18 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 fa12 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 fa0d 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f004 f863 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f004 f854 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f004 f846 	bl	8005288 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b58      	ldr	r3, [pc, #352]	; (800137c <MX_FSMC_Init+0x168>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b51      	ldr	r3, [pc, #324]	; (8001380 <MX_FSMC_Init+0x16c>)
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <MX_FSMC_Init+0x170>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_FSMC_Init+0x16c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <MX_FSMC_Init+0x16c>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <MX_FSMC_Init+0x16c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_FSMC_Init+0x16c>)
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <MX_FSMC_Init+0x16c>)
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012ba:	23fc      	movs	r3, #252	; 0xfc
 80012bc:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012c8:	f004 f9ad 	bl	8005626 <HAL_NAND_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012d2:	f002 fb6b 	bl	80039ac <Error_Handler>

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
  if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

  if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <MX_FSMC_Init+0x174>)
 80012d8:	4829      	ldr	r0, [pc, #164]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012da:	f000 f861 	bl	80013a0 <NAND_Read_ID>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d147      	bne.n	8001374 <MX_FSMC_Init+0x160>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012e4:	4826      	ldr	r0, [pc, #152]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012e6:	f004 fb67 	bl	80059b8 <HAL_NAND_GetState>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_FSMC_Init+0x178>)
 80012f0:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <MX_FSMC_Init+0x17c>)
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012f6:	4615      	mov	r5, r2
 80012f8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001304:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_FSMC_Init+0x17c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d028      	beq.n	8001362 <MX_FSMC_Init+0x14e>
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_FSMC_Init+0x17c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001318:	d823      	bhi.n	8001362 <MX_FSMC_Init+0x14e>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_FSMC_Init+0x17c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	2001      	movs	r0, #1
 8001322:	f00b f853 	bl	800c3cc <calloc>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_FSMC_Init+0x180>)
 800132c:	601a      	str	r2, [r3, #0]
		  wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_FSMC_Init+0x17c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	2001      	movs	r0, #1
 8001336:	f00b f849 	bl	800c3cc <calloc>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_FSMC_Init+0x184>)
 8001340:	601a      	str	r2, [r3, #0]

		  if (!rdBuf || !wrBuf) devError |= devMEM;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_FSMC_Init+0x180>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <MX_FSMC_Init+0x13e>
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_FSMC_Init+0x184>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <MX_FSMC_Init+0x15e>
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_FSMC_Init+0x188>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_FSMC_Init+0x188>)
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e007      	b.n	8001372 <MX_FSMC_Init+0x15e>
	  } else {
		  devError |= devNAND;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_FSMC_Init+0x188>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_FSMC_Init+0x188>)
 800136e:	701a      	strb	r2, [r3, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 8001370:	e000      	b.n	8001374 <MX_FSMC_Init+0x160>
		  if (!rdBuf || !wrBuf) devError |= devMEM;
 8001372:	bf00      	nop
}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	2000136c 	.word	0x2000136c
 8001380:	200002f0 	.word	0x200002f0
 8001384:	a0000060 	.word	0xa0000060
 8001388:	20001370 	.word	0x20001370
 800138c:	20000071 	.word	0x20000071
 8001390:	20001378 	.word	0x20001378
 8001394:	20001390 	.word	0x20001390
 8001398:	20001394 	.word	0x20001394
 800139c:	2000033c 	.word	0x2000033c

080013a0 <NAND_Read_ID>:
/* USER CODE BEGIN 4 */

//-----------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d101      	bne.n	80013ba <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	e059      	b.n	800146e <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d152      	bne.n	800146c <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <NAND_Read_ID+0x34>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e04c      	b.n	800146e <NAND_Read_ID+0xce>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]

	    hnand->State = HAL_NAND_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <NAND_Read_ID+0xdc>)
 80013e6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013ea:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <NAND_Read_ID+0xdc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	2290      	movs	r2, #144	; 0x90
 80013f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013f8:	f3bf 8f4f 	dsb	sy
}
 80013fc:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <NAND_Read_ID+0xdc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800140a:	f3bf 8f4f 	dsb	sy
}
 800140e:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d123      	bne.n	8001460 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <NAND_Read_ID+0xdc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <NAND_Read_ID+0xdc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3310      	adds	r3, #16
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b2da      	uxtb	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	b2da      	uxtb	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	0e1b      	lsrs	r3, r3, #24
 800144a:	b2da      	uxtb	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20001358 	.word	0x20001358

08001480 <NAND_Read_Page_8bit>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Read_Page_8bit(NAND_HandleTypeDef *hnand,
									   NAND_AddressTypeDef *pAddress,
									   uint8_t *pBuffer,
                                       uint32_t NumPageToRead)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b090      	sub	sp, #64	; 0x40
 8001484:	af04      	add	r7, sp, #16
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
uint32_t numpagesread = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToRead;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	627b      	str	r3, [r7, #36]	; 0x24

	// Check the NAND controller state
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d101      	bne.n	80014aa <NAND_Read_Page_8bit+0x2a>
		return HAL_BUSY;
 80014a6:	2302      	movs	r3, #2
 80014a8:	e0e8      	b.n	800167c <NAND_Read_Page_8bit+0x1fc>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	f040 80e1 	bne.w	800167a <NAND_Read_Page_8bit+0x1fa>
		__HAL_LOCK(hnand);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <NAND_Read_Page_8bit+0x46>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e0da      	b.n	800167c <NAND_Read_Page_8bit+0x1fc>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 80014d6:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <NAND_Read_Page_8bit+0x204>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	889b      	ldrh	r3, [r3, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	4618      	mov	r0, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	fb00 f303 	mul.w	r3, r0, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	440b      	add	r3, r1
 8001502:	623b      	str	r3, [r7, #32]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    		  __func__,
				  nandaddress,
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	881b      	ldrh	r3, [r3, #0]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001508:	461a      	mov	r2, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	885b      	ldrh	r3, [r3, #2]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800150e:	4619      	mov	r1, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	889b      	ldrh	r3, [r3, #4]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001514:	4618      	mov	r0, r3
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <NAND_Read_Page_8bit+0x208>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	9002      	str	r0, [sp, #8]
 800151e:	9101      	str	r1, [sp, #4]
 8001520:	9200      	str	r2, [sp, #0]
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	4a59      	ldr	r2, [pc, #356]	; (800168c <NAND_Read_Page_8bit+0x20c>)
 8001526:	495a      	ldr	r1, [pc, #360]	; (8001690 <NAND_Read_Page_8bit+0x210>)
 8001528:	2001      	movs	r0, #1
 800152a:	f000 fec7 	bl	80022bc <Report>

	    // Page(s) read loop
	    while (nbpages && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)))) {
 800152e:	e08d      	b.n	800164c <NAND_Read_Page_8bit+0x1cc>
	    	// Send read page command sequence
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800153a:	f3bf 8f4f 	dsb	sy
}
 800153e:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800154a:	f3bf 8f4f 	dsb	sy
}
 800154e:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.PageSize) > 512U) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001558:	d907      	bls.n	800156a <NAND_Read_Page_8bit+0xea>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	6a3a      	ldr	r2, [r7, #32]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001576:	f3bf 8f4f 	dsb	sy
}
 800157a:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	0a1a      	lsrs	r2, r3, #8
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800158a:	f3bf 8f4f 	dsb	sy
}
 800158e:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d309      	bcc.n	80015b6 <NAND_Read_Page_8bit+0x136>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	0c1a      	lsrs	r2, r3, #16
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015b0:	f3bf 8f4f 	dsb	sy
}
 80015b4:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	2230      	movs	r2, #48	; 0x30
 80015be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
	    	__DSB();


	    	if (hnand->Config.ExtraCommandEnable == ENABLE) {
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d123      	bne.n	8001618 <NAND_Read_Page_8bit+0x198>
	    		uint32_t tickstart = HAL_GetTick();
 80015d0:	f003 f946 	bl	8004860 <HAL_GetTick>
 80015d4:	6178      	str	r0, [r7, #20]
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80015d6:	e011      	b.n	80015fc <NAND_Read_Page_8bit+0x17c>
	    			if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 80015d8:	f003 f942 	bl	8004860 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e6:	d909      	bls.n	80015fc <NAND_Read_Page_8bit+0x17c>
	    				hnand->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    				__HAL_UNLOCK(hnand);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]
	    				return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e03f      	b.n	800167c <NAND_Read_Page_8bit+0x1fc>
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f004 f9e9 	bl	80059d4 <HAL_NAND_Read_Status>
 8001602:	4603      	mov	r3, r0
 8001604:	2b40      	cmp	r3, #64	; 0x40
 8001606:	d1e7      	bne.n	80015d8 <NAND_Read_Page_8bit+0x158>
	    			}
	    		}

	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001612:	f3bf 8f4f 	dsb	sy
}
 8001616:	bf00      	nop
	    		__DSB();
	    	}

	    	// Get Data into Buffer
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e008      	b.n	8001630 <NAND_Read_Page_8bit+0x1b0>
	    		*buff++ = *(uint8_t *)deviceaddress;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	1c59      	adds	r1, r3, #1
 8001624:	6279      	str	r1, [r7, #36]	; 0x24
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	701a      	strb	r2, [r3, #0]
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3f1      	bcc.n	800161e <NAND_Read_Page_8bit+0x19e>
	    	}

	    	numpagesread++;// Increment read pages number
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	3301      	adds	r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to read
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	3b01      	subs	r3, #1
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	3301      	adds	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)))) {
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <NAND_Read_Page_8bit+0x1e6>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	6a3a      	ldr	r2, [r7, #32]
 8001660:	429a      	cmp	r2, r3
 8001662:	f4ff af65 	bcc.w	8001530 <NAND_Read_Page_8bit+0xb0>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <NAND_Read_Page_8bit+0x1fc>
	    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3730      	adds	r7, #48	; 0x30
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20001358 	.word	0x20001358
 8001688:	20000004 	.word	0x20000004
 800168c:	0800f9e8 	.word	0x0800f9e8
 8001690:	0800d2f0 	.word	0x0800d2f0

08001694 <NAND_Write_Page_8bit>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Write_Page_8bit(NAND_HandleTypeDef *hnand,
									    NAND_AddressTypeDef *pAddress,
									    uint8_t *pBuffer,
                                        uint32_t NumPageToWrite)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b090      	sub	sp, #64	; 0x40
 8001698:	af04      	add	r7, sp, #16
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
uint32_t numpageswritten = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToWrite;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the NAND controller state */
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d101      	bne.n	80016be <NAND_Write_Page_8bit+0x2a>
		return HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
 80016bc:	e0e6      	b.n	800188c <NAND_Write_Page_8bit+0x1f8>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	f040 80df 	bne.w	800188a <NAND_Write_Page_8bit+0x1f6>

	    __HAL_LOCK(hnand);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <NAND_Write_Page_8bit+0x46>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e0d8      	b.n	800188c <NAND_Write_Page_8bit+0x1f8>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2202      	movs	r2, #2
 80016e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <NAND_Write_Page_8bit+0x200>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	889b      	ldrh	r3, [r3, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	4618      	mov	r0, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	fb00 f303 	mul.w	r3, r0, r3
 800170a:	4413      	add	r3, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	440b      	add	r3, r1
 8001716:	623b      	str	r3, [r7, #32]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    	    		  __func__,
	    				  nandaddress,
	    				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	881b      	ldrh	r3, [r3, #0]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800171c:	461a      	mov	r2, r3
	    				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	885b      	ldrh	r3, [r3, #2]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001722:	4619      	mov	r1, r3
	    				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	889b      	ldrh	r3, [r3, #4]
	    Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001728:	4618      	mov	r0, r3
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <NAND_Write_Page_8bit+0x204>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	9303      	str	r3, [sp, #12]
 8001730:	9002      	str	r0, [sp, #8]
 8001732:	9101      	str	r1, [sp, #4]
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <NAND_Write_Page_8bit+0x208>)
 800173a:	4959      	ldr	r1, [pc, #356]	; (80018a0 <NAND_Write_Page_8bit+0x20c>)
 800173c:	2001      	movs	r0, #1
 800173e:	f000 fdbd 	bl	80022bc <Report>

	    /* Page(s) write loop */
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001742:	e08b      	b.n	800185c <NAND_Write_Page_8bit+0x1c8>
	    	/* Send write page command sequence */
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800174e:	f3bf 8f4f 	dsb	sy
}
 8001752:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800175e:	f3bf 8f4f 	dsb	sy
}
 8001762:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800176e:	f3bf 8f4f 	dsb	sy
}
 8001772:	bf00      	nop
	    	__DSB();
	    	if (hnand->Config.PageSize > 512U) {
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177c:	d907      	bls.n	800178e <NAND_Write_Page_8bit+0xfa>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001788:	f3bf 8f4f 	dsb	sy
}
 800178c:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800179a:	f3bf 8f4f 	dsb	sy
}
 800179e:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	0a1a      	lsrs	r2, r3, #8
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ae:	f3bf 8f4f 	dsb	sy
}
 80017b2:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c4:	d309      	bcc.n	80017da <NAND_Write_Page_8bit+0x146>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	0c1a      	lsrs	r2, r3, #16
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017d4:	f3bf 8f4f 	dsb	sy
}
 80017d8:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	// Write data to memory
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e00b      	b.n	80017f8 <NAND_Write_Page_8bit+0x164>
	    		*(__IO uint8_t *)deviceaddress = *buff++;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	627a      	str	r2, [r7, #36]	; 0x24
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ec:	f3bf 8f4f 	dsb	sy
}
 80017f0:	bf00      	nop
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3ee      	bcc.n	80017e0 <NAND_Write_Page_8bit+0x14c>
	    		__DSB();
	    	}

	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	2210      	movs	r2, #16
 800180a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800180c:	f3bf 8f4f 	dsb	sy
}
 8001810:	bf00      	nop
	    	__DSB();

	    	uint32_t tickstart = HAL_GetTick();
 8001812:	f003 f825 	bl	8004860 <HAL_GetTick>
 8001816:	6178      	str	r0, [r7, #20]
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001818:	e011      	b.n	800183e <NAND_Write_Page_8bit+0x1aa>
	    		if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 800181a:	f003 f821 	bl	8004860 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001828:	d909      	bls.n	800183e <NAND_Write_Page_8bit+0x1aa>
	    			hnand->State = HAL_NAND_STATE_ERROR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2203      	movs	r2, #3
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    			__HAL_UNLOCK(hnand);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
	    			return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e026      	b.n	800188c <NAND_Write_Page_8bit+0x1f8>
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f004 f8c8 	bl	80059d4 <HAL_NAND_Read_Status>
 8001844:	4603      	mov	r3, r0
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d1e7      	bne.n	800181a <NAND_Write_Page_8bit+0x186>
	    		}
	    	}

	    	numpageswritten++;// Increment written pages number
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	3301      	adds	r3, #1
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to write
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	3b01      	subs	r3, #1
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	3301      	adds	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <NAND_Write_Page_8bit+0x1e2>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	6a3a      	ldr	r2, [r7, #32]
 8001870:	429a      	cmp	r2, r3
 8001872:	f4ff af67 	bcc.w	8001744 <NAND_Write_Page_8bit+0xb0>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <NAND_Write_Page_8bit+0x1f8>
	    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3730      	adds	r7, #48	; 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20001358 	.word	0x20001358
 8001898:	20000004 	.word	0x20000004
 800189c:	0800f9fc 	.word	0x0800f9fc
 80018a0:	0800d2f0 	.word	0x0800d2f0

080018a4 <pageIsEmpty>:
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	6078      	str	r0, [r7, #4]
bool ret = false;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 80018b2:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <pageIsEmpty+0x260>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d109      	bne.n	80018d4 <pageIsEmpty+0x30>

		devError |= devNAND;
 80018c0:	4b91      	ldr	r3, [pc, #580]	; (8001b08 <pageIsEmpty+0x264>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <pageIsEmpty+0x264>)
 80018cc:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_BUSY;
 80018ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d2:	e113      	b.n	8001afc <pageIsEmpty+0x258>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 80018d4:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <pageIsEmpty+0x260>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 8103 	bne.w	8001aea <pageIsEmpty+0x246>

		__HAL_LOCK(nandPort);
 80018e4:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <pageIsEmpty+0x260>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <pageIsEmpty+0x50>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e103      	b.n	8001afc <pageIsEmpty+0x258>
 80018f4:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <pageIsEmpty+0x260>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 80018fe:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <pageIsEmpty+0x260>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001908:	4b80      	ldr	r3, [pc, #512]	; (8001b0c <pageIsEmpty+0x268>)
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4b7f      	ldr	r3, [pc, #508]	; (8001b0c <pageIsEmpty+0x268>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fbb2 f2f3 	udiv	r2, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	fbb3 f1f2 	udiv	r1, r3, r2
 800191a:	fb01 f202 	mul.w	r2, r1, r2
 800191e:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001920:	b29b      	uxth	r3, r3
 8001922:	81bb      	strh	r3, [r7, #12]
 8001924:	2301      	movs	r3, #1
 8001926:	81fb      	strh	r3, [r7, #14]
			.Plane = 1,
			.Block = nand_PageToBlock(page)
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 ffef 	bl	800290c <nand_PageToBlock>
 800192e:	4603      	mov	r3, r0
		NAND_AddressTypeDef pAddress = {
 8001930:	b29b      	uxth	r3, r3
 8001932:	823b      	strh	r3, [r7, #16]
		};

		uint32_t deviceaddress = devAdr;
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <pageIsEmpty+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61fb      	str	r3, [r7, #28]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 800193a:	89bb      	ldrh	r3, [r7, #12]
 800193c:	4619      	mov	r1, r3
 800193e:	8a3b      	ldrh	r3, [r7, #16]
 8001940:	461a      	mov	r2, r3
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	4618      	mov	r0, r3
 8001946:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <pageIsEmpty+0x260>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	fb00 f303 	mul.w	r3, r0, r3
 8001950:	4413      	add	r3, r2
 8001952:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <pageIsEmpty+0x260>)
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	440b      	add	r3, r1
 800195e:	61bb      	str	r3, [r7, #24]
		Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
				  __func__,
				  nandaddress,
				  pAddress.Page, pAddress.Plane, pAddress.Block, eol);
 8001960:	89bb      	ldrh	r3, [r7, #12]
		Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001962:	461a      	mov	r2, r3
				  pAddress.Page, pAddress.Plane, pAddress.Block, eol);
 8001964:	89fb      	ldrh	r3, [r7, #14]
		Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001966:	4619      	mov	r1, r3
				  pAddress.Page, pAddress.Plane, pAddress.Block, eol);
 8001968:	8a3b      	ldrh	r3, [r7, #16]
		Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800196a:	4618      	mov	r0, r3
 800196c:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <pageIsEmpty+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	9303      	str	r3, [sp, #12]
 8001972:	9002      	str	r0, [sp, #8]
 8001974:	9101      	str	r1, [sp, #4]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	4a67      	ldr	r2, [pc, #412]	; (8001b18 <pageIsEmpty+0x274>)
 800197c:	4967      	ldr	r1, [pc, #412]	; (8001b1c <pageIsEmpty+0x278>)
 800197e:	2001      	movs	r0, #1
 8001980:	f000 fc9c 	bl	80022bc <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001984:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <pageIsEmpty+0x260>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	4a5e      	ldr	r2, [pc, #376]	; (8001b04 <pageIsEmpty+0x260>)
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	429a      	cmp	r2, r3
 8001998:	f080 809a 	bcs.w	8001ad0 <pageIsEmpty+0x22c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019a6:	f3bf 8f4f 	dsb	sy
}
 80019aa:	bf00      	nop
			__DSB();

			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019b6:	f3bf 8f4f 	dsb	sy
}
 80019ba:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 80019bc:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <pageIsEmpty+0x260>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c6:	d907      	bls.n	80019d8 <pageIsEmpty+0x134>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d2:	f3bf 8f4f 	dsb	sy
}
 80019d6:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019e4:	f3bf 8f4f 	dsb	sy
}
 80019e8:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	0a1a      	lsrs	r2, r3, #8
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019f8:	f3bf 8f4f 	dsb	sy
}
 80019fc:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <pageIsEmpty+0x260>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <pageIsEmpty+0x260>)
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d309      	bcc.n	8001a28 <pageIsEmpty+0x184>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	0c1a      	lsrs	r2, r3, #16
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a22:	f3bf 8f4f 	dsb	sy
}
 8001a26:	bf00      	nop
				__DSB();
			}

			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	2230      	movs	r2, #48	; 0x30
 8001a30:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a32:	f3bf 8f4f 	dsb	sy
}
 8001a36:	bf00      	nop
			__DSB();

			if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <pageIsEmpty+0x260>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d12f      	bne.n	8001aa4 <pageIsEmpty+0x200>
				uint32_t tickstart = HAL_GetTick();
 8001a44:	f002 ff0c 	bl	8004860 <HAL_GetTick>
 8001a48:	6178      	str	r0, [r7, #20]
				while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {// Read status until NAND is ready
 8001a4a:	e01b      	b.n	8001a84 <pageIsEmpty+0x1e0>
					if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001a4c:	f002 ff08 	bl	8004860 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5a:	d913      	bls.n	8001a84 <pageIsEmpty+0x1e0>
						nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <pageIsEmpty+0x260>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2203      	movs	r2, #3
 8001a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						__HAL_UNLOCK(nandPort);
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <pageIsEmpty+0x260>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]
						devError |= devNAND;//return HAL_TIMEOUT;
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <pageIsEmpty+0x264>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f043 0320 	orr.w	r3, r3, #32
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <pageIsEmpty+0x264>)
 8001a7c:	701a      	strb	r2, [r3, #0]
						return ret;
 8001a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a82:	e03b      	b.n	8001afc <pageIsEmpty+0x258>
				while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {// Read status until NAND is ready
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <pageIsEmpty+0x260>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 ffa3 	bl	80059d4 <HAL_NAND_Read_Status>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d1db      	bne.n	8001a4c <pageIsEmpty+0x1a8>
					}
				}
				// Go back to read mode
				*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a9e:	f3bf 8f4f 	dsb	sy
}
 8001aa2:	bf00      	nop
				__DSB();
			}

			ret = true;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
 8001aae:	e009      	b.n	8001ac4 <pageIsEmpty+0x220>
				if (*(uint8_t *)deviceaddress != 0xff) {
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2bff      	cmp	r3, #255	; 0xff
 8001ab6:	d002      	beq.n	8001abe <pageIsEmpty+0x21a>
					ret = false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <pageIsEmpty+0x260>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	6a3a      	ldr	r2, [r7, #32]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3ef      	bcc.n	8001ab0 <pageIsEmpty+0x20c>
				}
			}

		}

		nandPort->State = HAL_NAND_STATE_READY;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <pageIsEmpty+0x260>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <pageIsEmpty+0x260>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]
	} else {
		devError |= devNAND;
		return ret;
	}

	return ret;
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae8:	e008      	b.n	8001afc <pageIsEmpty+0x258>
		devError |= devNAND;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <pageIsEmpty+0x264>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <pageIsEmpty+0x264>)
 8001af6:	701a      	strb	r2, [r3, #0]
		return ret;
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000064 	.word	0x20000064
 8001b08:	2000033c 	.word	0x2000033c
 8001b0c:	20001378 	.word	0x20001378
 8001b10:	20001358 	.word	0x20001358
 8001b14:	20000004 	.word	0x20000004
 8001b18:	0800fa14 	.word	0x0800fa14
 8001b1c:	0800d2f0 	.word	0x0800d2f0

08001b20 <areaIsEmpty>:
//-----------------------------------------------------------------------------
//           Check: area only in one page is empty ?
//
bool areaIsEmpty(uint32_t adr, uint32_t len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af08      	add	r7, sp, #32
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
bool ret = false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint32_t shift = adr - devAdr;
 8001b30:	4b95      	ldr	r3, [pc, #596]	; (8001d88 <areaIsEmpty+0x268>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	623b      	str	r3, [r7, #32]
uint32_t page = shift / nandPort->Config.PageSize;
 8001b3a:	4b94      	ldr	r3, [pc, #592]	; (8001d8c <areaIsEmpty+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	61fb      	str	r3, [r7, #28]
uint32_t block = nand_PageToBlock(page);
 8001b48:	69f8      	ldr	r0, [r7, #28]
 8001b4a:	f000 fedf 	bl	800290c <nand_PageToBlock>
 8001b4e:	61b8      	str	r0, [r7, #24]


	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001b50:	4b8e      	ldr	r3, [pc, #568]	; (8001d8c <areaIsEmpty+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d109      	bne.n	8001b72 <areaIsEmpty+0x52>
		devError |= devNAND;
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <areaIsEmpty+0x270>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <areaIsEmpty+0x270>)
 8001b6a:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_BUSY;
 8001b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b70:	e106      	b.n	8001d80 <areaIsEmpty+0x260>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001b72:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <areaIsEmpty+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	f040 80f6 	bne.w	8001d6e <areaIsEmpty+0x24e>
		//
		shift %= nandPort->Config.PageSize;
 8001b82:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <areaIsEmpty+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b8e:	fb01 f202 	mul.w	r2, r1, r2
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	623b      	str	r3, [r7, #32]
		uint32_t dlin = shift + len;
 8001b96:	6a3a      	ldr	r2, [r7, #32]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (dlin > nandPort->Config.PageSize)  dlin = nandPort->Config.PageSize - shift;
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <areaIsEmpty+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d905      	bls.n	8001bb6 <areaIsEmpty+0x96>
 8001baa:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <areaIsEmpty+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
		//
		__HAL_LOCK(nandPort);
 8001bb6:	4b75      	ldr	r3, [pc, #468]	; (8001d8c <areaIsEmpty+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <areaIsEmpty+0xa6>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0dc      	b.n	8001d80 <areaIsEmpty+0x260>
 8001bc6:	4b71      	ldr	r3, [pc, #452]	; (8001d8c <areaIsEmpty+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <areaIsEmpty+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001bda:	4b6e      	ldr	r3, [pc, #440]	; (8001d94 <areaIsEmpty+0x274>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <areaIsEmpty+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bec:	fb01 f202 	mul.w	r2, r1, r2
 8001bf0:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	813b      	strh	r3, [r7, #8]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	81bb      	strh	r3, [r7, #12]
			.Plane = 1,
			.Block = block
		};
		uint32_t deviceaddress = devAdr;
 8001c00:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <areaIsEmpty+0x268>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 8001c06:	893b      	ldrh	r3, [r7, #8]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	89bb      	ldrh	r3, [r7, #12]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	4618      	mov	r0, r3
 8001c12:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <areaIsEmpty+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	fb00 f303 	mul.w	r3, r0, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <areaIsEmpty+0x26c>)
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	440b      	add	r3, r1
 8001c2a:	613b      	str	r3, [r7, #16]
		Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
				  __func__, nandaddress, adr, adr + len - 1, len, shift, dlin - 1, page, block, eol);
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4413      	add	r3, r2
		Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c36:	3a01      	subs	r2, #1
 8001c38:	4957      	ldr	r1, [pc, #348]	; (8001d98 <areaIsEmpty+0x278>)
 8001c3a:	6809      	ldr	r1, [r1, #0]
 8001c3c:	9107      	str	r1, [sp, #28]
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	9106      	str	r1, [sp, #24]
 8001c42:	69f9      	ldr	r1, [r7, #28]
 8001c44:	9105      	str	r1, [sp, #20]
 8001c46:	9204      	str	r2, [sp, #16]
 8001c48:	6a3a      	ldr	r2, [r7, #32]
 8001c4a:	9203      	str	r2, [sp, #12]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <areaIsEmpty+0x27c>)
 8001c5a:	4951      	ldr	r1, [pc, #324]	; (8001da0 <areaIsEmpty+0x280>)
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 fb2d 	bl	80022bc <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <areaIsEmpty+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	4a48      	ldr	r2, [pc, #288]	; (8001d8c <areaIsEmpty+0x26c>)
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d26d      	bcs.n	8001d54 <areaIsEmpty+0x234>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c82:	f3bf 8f4f 	dsb	sy
}
 8001c86:	bf00      	nop
			__DSB();
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c92:	f3bf 8f4f 	dsb	sy
}
 8001c96:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 8001c98:	4b3c      	ldr	r3, [pc, #240]	; (8001d8c <areaIsEmpty+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca2:	d907      	bls.n	8001cb4 <areaIsEmpty+0x194>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
}
 8001cb2:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc0:	f3bf 8f4f 	dsb	sy
}
 8001cc4:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	0a1a      	lsrs	r2, r3, #8
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <areaIsEmpty+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <areaIsEmpty+0x26c>)
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d309      	bcc.n	8001d04 <areaIsEmpty+0x1e4>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	0c1a      	lsrs	r2, r3, #16
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfe:	f3bf 8f4f 	dsb	sy
}
 8001d02:	bf00      	nop
				__DSB();
			}
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	2230      	movs	r2, #48	; 0x30
 8001d0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
}
 8001d12:	bf00      	nop
			__DSB();

			ret = true;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t byte;
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e013      	b.n	8001d48 <areaIsEmpty+0x228>
				byte = *(uint8_t *)deviceaddress;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	73fb      	strb	r3, [r7, #15]
				if ((index >= shift) && (index < dlin)) {
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d309      	bcc.n	8001d42 <areaIsEmpty+0x222>
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d205      	bcs.n	8001d42 <areaIsEmpty+0x222>
					if (byte != 0xff) ret = false;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2bff      	cmp	r3, #255	; 0xff
 8001d3a:	d002      	beq.n	8001d42 <areaIsEmpty+0x222>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <areaIsEmpty+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3e5      	bcc.n	8001d20 <areaIsEmpty+0x200>
				}
			}
		}
		//
		nandPort->State = HAL_NAND_STATE_READY;
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <areaIsEmpty+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <areaIsEmpty+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	//
	return ret;
 8001d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d6c:	e008      	b.n	8001d80 <areaIsEmpty+0x260>
		devError |= devNAND;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <areaIsEmpty+0x270>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f043 0320 	orr.w	r3, r3, #32
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <areaIsEmpty+0x270>)
 8001d7a:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_ERROR;
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20001358 	.word	0x20001358
 8001d8c:	20000064 	.word	0x20000064
 8001d90:	2000033c 	.word	0x2000033c
 8001d94:	20001378 	.word	0x20001378
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	0800fa20 	.word	0x0800fa20
 8001da0:	0800d324 	.word	0x0800d324

08001da4 <get_qStat>:
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dc18      	bgt.n	8001de4 <get_qStat+0x40>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f113 0f06 	cmn.w	r3, #6
 8001db8:	db2a      	blt.n	8001e10 <get_qStat+0x6c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3306      	adds	r3, #6
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d826      	bhi.n	8001e10 <get_qStat+0x6c>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <get_qStat+0x24>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e09 	.word	0x08001e09
 8001dcc:	08001e05 	.word	0x08001e05
 8001dd0:	08001e01 	.word	0x08001e01
 8001dd4:	08001dfd 	.word	0x08001dfd
 8001dd8:	08001df9 	.word	0x08001df9
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00e      	beq.n	8001e0c <get_qStat+0x68>
 8001dee:	e00f      	b.n	8001e10 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <get_qStat+0x7c>)
 8001df2:	e00e      	b.n	8001e12 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <get_qStat+0x80>)
 8001df6:	e00c      	b.n	8001e12 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <get_qStat+0x84>)
 8001dfa:	e00a      	b.n	8001e12 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <get_qStat+0x88>)
 8001dfe:	e008      	b.n	8001e12 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <get_qStat+0x8c>)
 8001e02:	e006      	b.n	8001e12 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <get_qStat+0x90>)
 8001e06:	e004      	b.n	8001e12 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <get_qStat+0x94>)
 8001e0a:	e002      	b.n	8001e12 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <get_qStat+0x98>)
 8001e0e:	e000      	b.n	8001e12 <get_qStat+0x6e>
	}

	return "UnknownError";
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <get_qStat+0x9c>)
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	0800d374 	.word	0x0800d374
 8001e24:	0800d37c 	.word	0x0800d37c
 8001e28:	0800d384 	.word	0x0800d384
 8001e2c:	0800d394 	.word	0x0800d394
 8001e30:	0800d3a4 	.word	0x0800d3a4
 8001e34:	0800d3b8 	.word	0x0800d3b8
 8001e38:	0800d3c8 	.word	0x0800d3c8
 8001e3c:	0800d3d4 	.word	0x0800d3d4
 8001e40:	0800d3e8 	.word	0x0800d3e8

08001e44 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001e50:	2330      	movs	r3, #48	; 0x30
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <hex2bin+0x28>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <hex2bin+0x2c>
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	e0b2      	b.n	8001fd6 <hex2bin+0x192>
    if (len > 8) len = 8;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d901      	bls.n	8001e7a <hex2bin+0x36>
 8001e76:	2308      	movs	r3, #8
 8001e78:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f1c3 0308 	rsb	r3, r3, #8
 8001e80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001e84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e88:	f107 0210 	add.w	r2, r7, #16
 8001e8c:	4413      	add	r3, r2
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f00a fb82 	bl	800c59c <memcpy>

    k = j = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ea2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001ea6:	e090      	b.n	8001fca <hex2bin+0x186>
        jk = j + 2;
 8001ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eac:	3302      	adds	r3, #2
 8001eae:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001eb8:	e066      	b.n	8001f88 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ebe:	3328      	adds	r3, #40	; 0x28
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ec6:	2b2f      	cmp	r3, #47	; 0x2f
 8001ec8:	d918      	bls.n	8001efc <hex2bin+0xb8>
 8001eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ece:	3328      	adds	r3, #40	; 0x28
 8001ed0:	443b      	add	r3, r7
 8001ed2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ed6:	2b39      	cmp	r3, #57	; 0x39
 8001ed8:	d810      	bhi.n	8001efc <hex2bin+0xb8>
 8001eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ede:	3328      	adds	r3, #40	; 0x28
 8001ee0:	443b      	add	r3, r7
 8001ee2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	3a30      	subs	r2, #48	; 0x30
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	3328      	adds	r3, #40	; 0x28
 8001ef4:	443b      	add	r3, r7
 8001ef6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001efa:	e040      	b.n	8001f7e <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f00:	3328      	adds	r3, #40	; 0x28
 8001f02:	443b      	add	r3, r7
 8001f04:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f08:	2b60      	cmp	r3, #96	; 0x60
 8001f0a:	d918      	bls.n	8001f3e <hex2bin+0xfa>
 8001f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f10:	3328      	adds	r3, #40	; 0x28
 8001f12:	443b      	add	r3, r7
 8001f14:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f18:	2b66      	cmp	r3, #102	; 0x66
 8001f1a:	d810      	bhi.n	8001f3e <hex2bin+0xfa>
 8001f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f20:	3328      	adds	r3, #40	; 0x28
 8001f22:	443b      	add	r3, r7
 8001f24:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	3a57      	subs	r2, #87	; 0x57
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	443b      	add	r3, r7
 8001f38:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001f3c:	e01f      	b.n	8001f7e <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f42:	3328      	adds	r3, #40	; 0x28
 8001f44:	443b      	add	r3, r7
 8001f46:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d917      	bls.n	8001f7e <hex2bin+0x13a>
 8001f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f52:	3328      	adds	r3, #40	; 0x28
 8001f54:	443b      	add	r3, r7
 8001f56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f5a:	2b46      	cmp	r3, #70	; 0x46
 8001f5c:	d80f      	bhi.n	8001f7e <hex2bin+0x13a>
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f62:	3328      	adds	r3, #40	; 0x28
 8001f64:	443b      	add	r3, r7
 8001f66:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	3a37      	subs	r2, #55	; 0x37
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	3328      	adds	r3, #40	; 0x28
 8001f78:	443b      	add	r3, r7
 8001f7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f82:	3301      	adds	r3, #1
 8001f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f8c:	7ffb      	ldrb	r3, [r7, #31]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d393      	bcc.n	8001eba <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	011a      	lsls	r2, r3, #4
 8001f96:	7b7b      	ldrb	r3, [r7, #13]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001fa0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fa4:	f1c3 0303 	rsb	r3, r3, #3
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	623b      	str	r3, [r7, #32]
        k++;
 8001fb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8001fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8001fca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	f67f af6a 	bls.w	8001ea8 <hex2bin+0x64>
    }

    return ret;
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
	if (on)
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <errLedOn+0x34>)
 8001ff8:	f003 fae2 	bl	80055c0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8001ffc:	e005      	b.n	800200a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002004:	4803      	ldr	r0, [pc, #12]	; (8002014 <errLedOn+0x34>)
 8002006:	f003 fadb 	bl	80055c0 <HAL_GPIO_WritePin>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40020c00 	.word	0x40020c00

08002018 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	return secCounter;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <get_secCounter+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000340 	.word	0x20000340

08002030 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	secCounter++;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <inc_secCounter+0x18>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <inc_secCounter+0x18>)
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20000340 	.word	0x20000340

0800204c <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return msCounter;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <get_msCounter+0x18>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000348 	.word	0x20000348

08002068 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
	msCounter++;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <inc_msCounter+0x20>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	1c50      	adds	r0, r2, #1
 8002074:	f143 0100 	adc.w	r1, r3, #0
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <inc_msCounter+0x20>)
 800207a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	20000348 	.word	0x20000348

0800208c <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002094:	f7ff ffc0 	bl	8002018 <get_secCounter>
 8002098:	4602      	mov	r2, r0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80020ae:	f7ff ffb3 	bl	8002018 <get_secCounter>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	bf94      	ite	ls
 80020ba:	2301      	movls	r3, #1
 80020bc:	2300      	movhi	r3, #0
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	; 0x50
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	2000      	movs	r0, #0
 80020d4:	460a      	mov	r2, r1
 80020d6:	4603      	mov	r3, r0
 80020d8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 80020dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80020e0:	f107 0320 	add.w	r3, r7, #32
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00a f97e 	bl	800c3e8 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 80020ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 80020f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002104:	b2db      	uxtb	r3, r3
 8002106:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <set_Date+0xb0>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4413      	add	r3, r2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	b2db      	uxtb	r3, r3
 800211a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	b2db      	uxtb	r3, r3
 8002120:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	4814      	ldr	r0, [pc, #80]	; (800217c <set_Date+0xb4>)
 800212c:	f004 fa9a 	bl	8006664 <HAL_RTC_SetTime>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <set_Date+0x7e>
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <set_Date+0xb8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <set_Date+0xb8>)
 8002142:	701a      	strb	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002144:	e014      	b.n	8002170 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <set_Date+0xb4>)
 8002150:	f004 fb80 	bl	8006854 <HAL_RTC_SetDate>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <set_Date+0xa2>
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <set_Date+0xb8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <set_Date+0xb8>)
 8002166:	701a      	strb	r2, [r3, #0]
}
 8002168:	e002      	b.n	8002170 <set_Date+0xa8>
			setDate = true;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <set_Date+0xbc>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	3750      	adds	r7, #80	; 0x50
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20001355 	.word	0x20001355
 800217c:	2000012c 	.word	0x2000012c
 8002180:	2000033c 	.word	0x2000033c
 8002184:	20001354 	.word	0x20001354

08002188 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b093      	sub	sp, #76	; 0x4c
 800218c:	af04      	add	r7, sp, #16
 800218e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <sec2str+0x110>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d040      	beq.n	8002224 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80021a2:	f7ff ff39 	bl	8002018 <get_secCounter>
 80021a6:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	4a3c      	ldr	r2, [pc, #240]	; (800229c <sec2str+0x114>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	4a39      	ldr	r2, [pc, #228]	; (800229c <sec2str+0x114>)
 80021b8:	fba2 1203 	umull	r1, r2, r2, r3
 80021bc:	0c12      	lsrs	r2, r2, #16
 80021be:	4938      	ldr	r1, [pc, #224]	; (80022a0 <sec2str+0x118>)
 80021c0:	fb01 f202 	mul.w	r2, r1, r2
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	4a36      	ldr	r2, [pc, #216]	; (80022a4 <sec2str+0x11c>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0adb      	lsrs	r3, r3, #11
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	4a33      	ldr	r2, [pc, #204]	; (80022a4 <sec2str+0x11c>)
 80021d8:	fba2 1203 	umull	r1, r2, r2, r3
 80021dc:	0ad2      	lsrs	r2, r2, #11
 80021de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80021e2:	fb01 f202 	mul.w	r2, r1, r2
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <sec2str+0x120>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80021f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <sec2str+0x120>)
 80021fa:	fba3 1302 	umull	r1, r3, r3, r2
 80021fe:	0959      	lsrs	r1, r3, #5
 8002200:	460b      	mov	r3, r1
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a5b      	subs	r3, r3, r1
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002218:	4924      	ldr	r1, [pc, #144]	; (80022ac <sec2str+0x124>)
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f00a fb44 	bl	800c8a8 <siprintf>
 8002220:	6378      	str	r0, [r7, #52]	; 0x34
 8002222:	e034      	b.n	800228e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	4820      	ldr	r0, [pc, #128]	; (80022b0 <sec2str+0x128>)
 800222e:	f004 fb95 	bl	800695c <HAL_RTC_GetDate>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <sec2str+0xc0>
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <sec2str+0x12c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <sec2str+0x12c>)
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e022      	b.n	800228e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	4817      	ldr	r0, [pc, #92]	; (80022b0 <sec2str+0x128>)
 8002252:	f004 faa1 	bl	8006798 <HAL_RTC_GetTime>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <sec2str+0xe4>
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <sec2str+0x12c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <sec2str+0x12c>)
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e010      	b.n	800228e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 800226c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800226e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8002270:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002272:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002274:	7c3b      	ldrb	r3, [r7, #16]
 8002276:	7c7a      	ldrb	r2, [r7, #17]
 8002278:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800227a:	9102      	str	r1, [sp, #8]
 800227c:	9201      	str	r2, [sp, #4]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	4623      	mov	r3, r4
 8002282:	4602      	mov	r2, r0
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <sec2str+0x130>)
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f00a fb0e 	bl	800c8a8 <siprintf>
 800228c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800228e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002290:	4618      	mov	r0, r3
 8002292:	373c      	adds	r7, #60	; 0x3c
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}
 8002298:	20001354 	.word	0x20001354
 800229c:	c22e4507 	.word	0xc22e4507
 80022a0:	00015180 	.word	0x00015180
 80022a4:	91a2b3c5 	.word	0x91a2b3c5
 80022a8:	88888889 	.word	0x88888889
 80022ac:	0800d3f8 	.word	0x0800d3f8
 80022b0:	2000012c 	.word	0x2000012c
 80022b4:	2000033c 	.word	0x2000033c
 80022b8:	0800d410 	.word	0x0800d410

080022bc <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 80022bc:	b40e      	push	{r1, r2, r3}
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80022c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022cc:	613b      	str	r3, [r7, #16]
int dl = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80022d2:	4b27      	ldr	r3, [pc, #156]	; (8002370 <Report+0xb4>)
 80022d4:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <Report+0x48>
		dl = sec2str(buf);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ff50 	bl	8002188 <sec2str>
 80022e8:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7fd ff70 	bl	80001d0 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <Report+0xb8>)
 80022fa:	6810      	ldr	r0, [r2, #0]
 80022fc:	6018      	str	r0, [r3, #0]
		dl += 3;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3303      	adds	r3, #3
 8002302:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002308:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	18d0      	adds	r0, r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	1ad1      	subs	r1, r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	f00a fbeb 	bl	800caf4 <vsniprintf>

	uartRdy = false;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <Report+0xbc>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <Report+0xc0>)
 8002326:	681c      	ldr	r4, [r3, #0]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7fd ff51 	bl	80001d0 <strlen>
 800232e:	4603      	mov	r3, r0
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	68f9      	ldr	r1, [r7, #12]
 8002336:	4620      	mov	r0, r4
 8002338:	f005 fe0c 	bl	8007f54 <HAL_UART_Transmit_DMA>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <Report+0x94>
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <Report+0xc4>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <Report+0xc4>)
 800234e:	701a      	strb	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002350:	bf00      	nop
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <Report+0xbc>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f083 0301 	eor.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f8      	bne.n	8002352 <Report+0x96>

	va_end(args);

	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800236c:	b003      	add	sp, #12
 800236e:	4770      	bx	lr
 8002370:	20000350 	.word	0x20000350
 8002374:	0800d42c 	.word	0x0800d42c
 8002378:	20000050 	.word	0x20000050
 800237c:	20000060 	.word	0x20000060
 8002380:	2000033c 	.word	0x2000033c

08002384 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b090      	sub	sp, #64	; 0x40
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a9e      	ldr	r2, [pc, #632]	; (800260c <HAL_UART_RxCpltCallback+0x288>)
 8002392:	4293      	cmp	r3, r2
 8002394:	f040 8269 	bne.w	800286a <HAL_UART_RxCpltCallback+0x4e6>

		rxBuf[ruk++] = (char)rxByte;
 8002398:	4b9d      	ldr	r3, [pc, #628]	; (8002610 <HAL_UART_RxCpltCallback+0x28c>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	b291      	uxth	r1, r2
 80023a0:	4a9b      	ldr	r2, [pc, #620]	; (8002610 <HAL_UART_RxCpltCallback+0x28c>)
 80023a2:	8011      	strh	r1, [r2, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b9b      	ldr	r3, [pc, #620]	; (8002614 <HAL_UART_RxCpltCallback+0x290>)
 80023a8:	7819      	ldrb	r1, [r3, #0]
 80023aa:	4b9b      	ldr	r3, [pc, #620]	; (8002618 <HAL_UART_RxCpltCallback+0x294>)
 80023ac:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 80023ae:	4b99      	ldr	r3, [pc, #612]	; (8002614 <HAL_UART_RxCpltCallback+0x290>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b0a      	cmp	r3, #10
 80023b4:	f040 8254 	bne.w	8002860 <HAL_UART_RxCpltCallback+0x4dc>
			rxBuf[--ruk] = '\0';
 80023b8:	4b95      	ldr	r3, [pc, #596]	; (8002610 <HAL_UART_RxCpltCallback+0x28c>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b93      	ldr	r3, [pc, #588]	; (8002610 <HAL_UART_RxCpltCallback+0x28c>)
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	4b92      	ldr	r3, [pc, #584]	; (8002610 <HAL_UART_RxCpltCallback+0x28c>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b93      	ldr	r3, [pc, #588]	; (8002618 <HAL_UART_RxCpltCallback+0x294>)
 80023cc:	2100      	movs	r1, #0
 80023ce:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 80023da:	4b90      	ldr	r3, [pc, #576]	; (800261c <HAL_UART_RxCpltCallback+0x298>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 80023e0:	2300      	movs	r3, #0
 80023e2:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 80023e4:	488c      	ldr	r0, [pc, #560]	; (8002618 <HAL_UART_RxCpltCallback+0x294>)
 80023e6:	f7fd fef3 	bl	80001d0 <strlen>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	f240 8231 	bls.w	8002854 <HAL_UART_RxCpltCallback+0x4d0>
				int8_t idx = -1;
 80023f2:	23ff      	movs	r3, #255	; 0xff
 80023f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80023fe:	e018      	b.n	8002432 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002400:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002404:	4a86      	ldr	r2, [pc, #536]	; (8002620 <HAL_UART_RxCpltCallback+0x29c>)
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	4619      	mov	r1, r3
 800240c:	4882      	ldr	r0, [pc, #520]	; (8002618 <HAL_UART_RxCpltCallback+0x294>)
 800240e:	f00a faa2 	bl	800c956 <strstr>
 8002412:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_UART_RxCpltCallback+0xa0>
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"check:"
														  //"area:"
														  //"save:"
						idx = i;
 800241a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800241e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002422:	e00a      	b.n	800243a <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002424:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3301      	adds	r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002432:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002436:	2b08      	cmp	r3, #8
 8002438:	dde2      	ble.n	8002400 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_UART_RxCpltCallback+0x294>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f040 8208 	bne.w	8002854 <HAL_UART_RxCpltCallback+0x4d0>
 8002444:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244c:	f000 8202 	beq.w	8002854 <HAL_UART_RxCpltCallback+0x4d0>
					nandLen = MAX_LEN_DATA;//256;
 8002450:	4b74      	ldr	r3, [pc, #464]	; (8002624 <HAL_UART_RxCpltCallback+0x2a0>)
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002458:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 800245c:	4a70      	ldr	r2, [pc, #448]	; (8002620 <HAL_UART_RxCpltCallback+0x29c>)
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd feb4 	bl	80001d0 <strlen>
 8002468:	4602      	mov	r2, r0
 800246a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246c:	4413      	add	r3, r2
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
 8002478:	2300      	movs	r3, #0
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 800247c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002480:	2b08      	cmp	r3, #8
 8002482:	f200 81a3 	bhi.w	80027cc <HAL_UART_RxCpltCallback+0x448>
 8002486:	a201      	add	r2, pc, #4	; (adr r2, 800248c <HAL_UART_RxCpltCallback+0x108>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	080024b1 	.word	0x080024b1
 8002490:	080024bd 	.word	0x080024bd
 8002494:	0800252f 	.word	0x0800252f
 8002498:	080025af 	.word	0x080025af
 800249c:	080025df 	.word	0x080025df
 80024a0:	08002757 	.word	0x08002757
 80024a4:	08002791 	.word	0x08002791
 80024a8:	080025df 	.word	0x080025df
 80024ac:	080025df 	.word	0x080025df
						case cmdRestart:
							qcmd.cmd = cmdRestart;
 80024b0:	2300      	movs	r3, #0
 80024b2:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_UART_RxCpltCallback+0x298>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
						break;
 80024ba:	e187      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
						case cmdEpoch:
							qcmd.cmd = cmdEpoch;
 80024bc:	2301      	movs	r3, #1
 80024be:	773b      	strb	r3, [r7, #28]
							if (*uk == '?') {
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b3f      	cmp	r3, #63	; 0x3f
 80024c6:	d105      	bne.n	80024d4 <HAL_UART_RxCpltCallback+0x150>
								qcmd.attr = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	777b      	strb	r3, [r7, #29]
								cmd_flag = 1;
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_UART_RxCpltCallback+0x298>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
									cmd_flag = 1;
								}
							}
						break;
 80024d2:	e17b      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
								if (strlen(uk) < 10) {
 80024d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024d6:	f7fd fe7b 	bl	80001d0 <strlen>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d803      	bhi.n	80024e8 <HAL_UART_RxCpltCallback+0x164>
									setDate = false;
 80024e0:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_UART_RxCpltCallback+0x2a4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
						break;
 80024e6:	e171      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
									uki = strchr(uk, ':');
 80024e8:	213a      	movs	r1, #58	; 0x3a
 80024ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024ec:	f00a fa0b 	bl	800c906 <strchr>
 80024f0:	6378      	str	r0, [r7, #52]	; 0x34
									if (uki) {
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <HAL_UART_RxCpltCallback+0x18e>
										tZone = (uint8_t)atol(uki + 1);
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	3301      	adds	r3, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f009 ff61 	bl	800c3c4 <atol>
 8002502:	4603      	mov	r3, r0
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_UART_RxCpltCallback+0x2a8>)
 8002508:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e002      	b.n	8002518 <HAL_UART_RxCpltCallback+0x194>
										tZone = 0;
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_UART_RxCpltCallback+0x2a8>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
									epoch = (uint32_t)atol(uk);
 8002518:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800251a:	f009 ff53 	bl	800c3c4 <atol>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_UART_RxCpltCallback+0x2ac>)
 8002524:	601a      	str	r2, [r3, #0]
									cmd_flag = 1;
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_UART_RxCpltCallback+0x298>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
						break;
 800252c:	e14e      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 800252e:	213a      	movs	r1, #58	; 0x3a
 8002530:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002532:	f00a f9e8 	bl	800c906 <strchr>
 8002536:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_UART_RxCpltCallback+0x1d2>
								nandLen = atol(uki + 1);
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	3301      	adds	r3, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f009 ff3e 	bl	800c3c4 <atol>
 8002548:	4603      	mov	r3, r0
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_UART_RxCpltCallback+0x2a0>)
 800254e:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002556:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_UART_RxCpltCallback+0x2b0>)
 8002558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800255a:	f00a f9fc 	bl	800c956 <strstr>
 800255e:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_UART_RxCpltCallback+0x202>
								uki += 2;
 8002566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002568:	3302      	adds	r3, #2
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 800256c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800256e:	f7fd fe2f 	bl	80001d0 <strlen>
 8002572:	4603      	mov	r3, r0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800257a:	f7ff fc63 	bl	8001e44 <hex2bin>
 800257e:	4603      	mov	r3, r0
 8002580:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e006      	b.n	8002594 <HAL_UART_RxCpltCallback+0x210>
							} else {
								nandAdr = atol(uk);
 8002586:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002588:	f009 ff1c 	bl	800c3c4 <atol>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 8002592:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_UART_RxCpltCallback+0x2b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4413      	add	r3, r2
 800259e:	4a26      	ldr	r2, [pc, #152]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 80025a0:	6013      	str	r3, [r2, #0]
							check = true;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdRead;
 80025a8:	2302      	movs	r3, #2
 80025aa:	773b      	strb	r3, [r7, #28]
						break;
 80025ac:	e10e      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_UART_RxCpltCallback+0x2b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d203      	bcs.n	80025c2 <HAL_UART_RxCpltCallback+0x23e>
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_UART_RxCpltCallback+0x2b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 80025c0:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_UART_RxCpltCallback+0x2a0>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_UART_RxCpltCallback+0x2b4>)
 80025d0:	6013      	str	r3, [r2, #0]
							check = true;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdNext;
 80025d8:	2303      	movs	r3, #3
 80025da:	773b      	strb	r3, [r7, #28]
						break;
 80025dc:	e0f6      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdArea://"area:'0x0:0x55:256'" //adr:byte:len
						case cmdSave://"save:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 80025e4:	4913      	ldr	r1, [pc, #76]	; (8002634 <HAL_UART_RxCpltCallback+0x2b0>)
 80025e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025e8:	f00a f9b5 	bl	800c956 <strstr>
 80025ec:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d025      	beq.n	8002640 <HAL_UART_RxCpltCallback+0x2bc>
								if (uki == uk) {
 80025f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d123      	bne.n	8002644 <HAL_UART_RxCpltCallback+0x2c0>
									uki += 2;
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	3302      	adds	r3, #2
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002608:	e01c      	b.n	8002644 <HAL_UART_RxCpltCallback+0x2c0>
 800260a:	bf00      	nop
 800260c:	40004800 	.word	0x40004800
 8002610:	20001352 	.word	0x20001352
 8002614:	20001350 	.word	0x20001350
 8002618:	20000b50 	.word	0x20000b50
 800261c:	2000033d 	.word	0x2000033d
 8002620:	20000008 	.word	0x20000008
 8002624:	20001360 	.word	0x20001360
 8002628:	20001354 	.word	0x20001354
 800262c:	20001355 	.word	0x20001355
 8002630:	20000054 	.word	0x20000054
 8002634:	0800d430 	.word	0x0800d430
 8002638:	2000135c 	.word	0x2000135c
 800263c:	20001358 	.word	0x20001358
								}
							} else uki = uk;
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002644:	213a      	movs	r1, #58	; 0x3a
 8002646:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002648:	f00a f95d 	bl	800c906 <strchr>
 800264c:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80b8 	beq.w	80027c6 <HAL_UART_RxCpltCallback+0x442>
								ukb = uke + 1;
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	3301      	adds	r3, #1
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	2210      	movs	r2, #16
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f009 ffa7 	bl	800c5b8 <memset>
								memcpy(tmp, uki, uke - uki);
 800266a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	461a      	mov	r2, r3
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002678:	4618      	mov	r0, r3
 800267a:	f009 ff8f 	bl	800c59c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 800267e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_UART_RxCpltCallback+0x324>
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd fda0 	bl	80001d0 <strlen>
 8002690:	4603      	mov	r3, r0
 8002692:	b2da      	uxtb	r2, r3
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbd2 	bl	8001e44 <hex2bin>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a74      	ldr	r2, [pc, #464]	; (8002874 <HAL_UART_RxCpltCallback+0x4f0>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e008      	b.n	80026ba <HAL_UART_RxCpltCallback+0x336>
								    else nandAdr = atol(tmp);
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	4618      	mov	r0, r3
 80026ae:	f009 fe89 	bl	800c3c4 <atol>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_UART_RxCpltCallback+0x4f0>)
 80026b8:	601a      	str	r2, [r3, #0]
								uki = ukb;
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 80026be:	213a      	movs	r1, #58	; 0x3a
 80026c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026c2:	f00a f920 	bl	800c906 <strchr>
 80026c6:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_RxCpltCallback+0x362>
									nandLen = atol(uke + 1);
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	3301      	adds	r3, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f009 fe76 	bl	800c3c4 <atol>
 80026d8:	4603      	mov	r3, r0
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b66      	ldr	r3, [pc, #408]	; (8002878 <HAL_UART_RxCpltCallback+0x4f4>)
 80026de:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_UART_RxCpltCallback+0x4f8>)
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f00a f934 	bl	800c956 <strstr>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_UART_RxCpltCallback+0x37e>
									ukb += 2;
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	3302      	adds	r3, #2
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002700:	e002      	b.n	8002708 <HAL_UART_RxCpltCallback+0x384>
								} else hex = false;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <HAL_UART_RxCpltCallback+0x3a8>
 8002710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002712:	f7fd fd5d 	bl	80001d0 <strlen>
 8002716:	4603      	mov	r3, r0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800271e:	f7ff fb91 	bl	8001e44 <hex2bin>
 8002722:	4603      	mov	r3, r0
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b56      	ldr	r3, [pc, #344]	; (8002880 <HAL_UART_RxCpltCallback+0x4fc>)
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e006      	b.n	800273a <HAL_UART_RxCpltCallback+0x3b6>
								    else nandByte = (uint8_t)atol(ukb);
 800272c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800272e:	f009 fe49 	bl	800c3c4 <atol>
 8002732:	4603      	mov	r3, r0
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b52      	ldr	r3, [pc, #328]	; (8002880 <HAL_UART_RxCpltCallback+0x4fc>)
 8002738:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 800273a:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <HAL_UART_RxCpltCallback+0x4f0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_UART_RxCpltCallback+0x500>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4413      	add	r3, r2
 8002744:	4a4b      	ldr	r2, [pc, #300]	; (8002874 <HAL_UART_RxCpltCallback+0x4f0>)
 8002746:	6013      	str	r3, [r2, #0]
								check = true;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								qcmd.cmd = idx;
 800274e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002752:	773b      	strb	r3, [r7, #28]
							}
						}
						break;
 8002754:	e037      	b.n	80027c6 <HAL_UART_RxCpltCallback+0x442>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002756:	494c      	ldr	r1, [pc, #304]	; (8002888 <HAL_UART_RxCpltCallback+0x504>)
 8002758:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800275a:	f00a f8fc 	bl	800c956 <strstr>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_UART_RxCpltCallback+0x3e6>
								qcmd.attr = 1;
 8002764:	2301      	movs	r3, #1
 8002766:	777b      	strb	r3, [r7, #29]
 8002768:	e00c      	b.n	8002784 <HAL_UART_RxCpltCallback+0x400>
							} else {
								uint32_t blk = atol(uk);
 800276a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800276c:	f009 fe2a 	bl	800c3c4 <atol>
 8002770:	4603      	mov	r3, r0
 8002772:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002774:	4b45      	ldr	r3, [pc, #276]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	429a      	cmp	r2, r3
 800277c:	d202      	bcs.n	8002784 <HAL_UART_RxCpltCallback+0x400>
 800277e:	4a44      	ldr	r2, [pc, #272]	; (8002890 <HAL_UART_RxCpltCallback+0x50c>)
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	6013      	str	r3, [r2, #0]
							}
							qcmd.cmd = cmdErase;
 8002784:	2305      	movs	r3, #5
 8002786:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_UART_RxCpltCallback+0x510>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
						break;
 800278e:	e01d      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 8002790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002792:	f009 fe17 	bl	800c3c4 <atol>
 8002796:	4603      	mov	r3, r0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < ((chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr)) {//(128K / 2K) * 1024 = 65536
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4a39      	ldr	r2, [pc, #228]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 80027a8:	68d2      	ldr	r2, [r2, #12]
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d20a      	bcs.n	80027ca <HAL_UART_RxCpltCallback+0x446>
								nandPage = page;
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_UART_RxCpltCallback+0x514>)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	6013      	str	r3, [r2, #0]
								qcmd.cmd = cmdCheck;
 80027ba:	2306      	movs	r3, #6
 80027bc:	773b      	strb	r3, [r7, #28]
								cmd_flag = 1;
 80027be:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_UART_RxCpltCallback+0x510>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 80027c4:	e001      	b.n	80027ca <HAL_UART_RxCpltCallback+0x446>
						break;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <HAL_UART_RxCpltCallback+0x448>
						break;
 80027ca:	bf00      	nop
					}
					if (check) {
 80027cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d025      	beq.n	8002820 <HAL_UART_RxCpltCallback+0x49c>
						if ((nandAdr + nandLen) >= ((chipConf.BlockSize * chipConf.BlockNbr) + devAdr)) {
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_UART_RxCpltCallback+0x4f4>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_UART_RxCpltCallback+0x4f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	441a      	add	r2, r3
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4929      	ldr	r1, [pc, #164]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 80027e6:	68c9      	ldr	r1, [r1, #12]
 80027e8:	fb03 f101 	mul.w	r1, r3, r1
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_UART_RxCpltCallback+0x500>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	440b      	add	r3, r1
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d311      	bcc.n	800281a <HAL_UART_RxCpltCallback+0x496>
							nandLen = (chipConf.BlockSize * chipConf.BlockNbr) - nandAdr - 1;
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_UART_RxCpltCallback+0x508>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	b29b      	uxth	r3, r3
 8002802:	fb12 f303 	smulbb	r3, r2, r3
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_UART_RxCpltCallback+0x4f0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_UART_RxCpltCallback+0x4f4>)
 8002818:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_UART_RxCpltCallback+0x510>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_UART_RxCpltCallback+0x510>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_UART_RxCpltCallback+0x4d0>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_UART_RxCpltCallback+0x518>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	f107 011c 	add.w	r1, r7, #28
 8002830:	2300      	movs	r3, #0
 8002832:	2205      	movs	r2, #5
 8002834:	f006 fec4 	bl	80095c0 <osMessageQueuePut>
 8002838:	4603      	mov	r3, r0
 800283a:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_UART_RxCpltCallback+0x51c>)
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_UART_RxCpltCallback+0x51c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_UART_RxCpltCallback+0x4d0>
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_UART_RxCpltCallback+0x520>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_UART_RxCpltCallback+0x520>)
 8002852:	701a      	strb	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_UART_RxCpltCallback+0x524>)
 8002856:	2200      	movs	r2, #0
 8002858:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_UART_RxCpltCallback+0x528>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8002860:	2201      	movs	r2, #1
 8002862:	4913      	ldr	r1, [pc, #76]	; (80028b0 <HAL_UART_RxCpltCallback+0x52c>)
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 fb44 	bl	8007ef2 <HAL_UART_Receive_IT>
	}
}
 800286a:	bf00      	nop
 800286c:	3740      	adds	r7, #64	; 0x40
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000135c 	.word	0x2000135c
 8002878:	20001360 	.word	0x20001360
 800287c:	0800d430 	.word	0x0800d430
 8002880:	20000070 	.word	0x20000070
 8002884:	20001358 	.word	0x20001358
 8002888:	0800d434 	.word	0x0800d434
 800288c:	20001378 	.word	0x20001378
 8002890:	20001364 	.word	0x20001364
 8002894:	2000033d 	.word	0x2000033d
 8002898:	20001368 	.word	0x20001368
 800289c:	20000334 	.word	0x20000334
 80028a0:	20001398 	.word	0x20001398
 80028a4:	2000033c 	.word	0x2000033c
 80028a8:	20001352 	.word	0x20001352
 80028ac:	20000b50 	.word	0x20000b50
 80028b0:	20001350 	.word	0x20001350

080028b4 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <HAL_UART_TxCpltCallback+0x24>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d102      	bne.n	80028cc <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_UART_TxCpltCallback+0x28>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
	}
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40004800 	.word	0x40004800
 80028dc:	20000050 	.word	0x20000050

080028e0 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a05      	ldr	r2, [pc, #20]	; (8002904 <HAL_SPI_TxCpltCallback+0x24>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d102      	bne.n	80028f8 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_SPI_TxCpltCallback+0x28>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
	}
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40013000 	.word	0x40013000
 8002908:	20000051 	.word	0x20000051

0800290c <nand_PageToBlock>:
	}
}
*/
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <nand_PageToBlock+0x28>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	fb03 f202 	mul.w	r2, r3, r2
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <nand_PageToBlock+0x28>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20001378 	.word	0x20001378

08002938 <emptyArea>:
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
}
//-------------------------------------------------------------------------------------------
/**/
int emptyArea(uint32_t addr, uint32_t len, uint8_t *buf, NAND_AddressTypeDef *nan)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b093      	sub	sp, #76	; 0x4c
 800293c:	af08      	add	r7, sp, #32
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
int ret = -1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t shift = (addr - devAdr) % chipConf.PageSize;
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <emptyArea+0xfc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4a38      	ldr	r2, [pc, #224]	; (8002a38 <emptyArea+0x100>)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	fbb3 f1f2 	udiv	r1, r3, r2
 800295c:	fb01 f202 	mul.w	r2, r1, r2
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	617b      	str	r3, [r7, #20]
uint32_t dlin = shift + len;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4413      	add	r3, r2
 800296a:	623b      	str	r3, [r7, #32]

	if (dlin > chipConf.PageSize)  dlin = chipConf.PageSize - shift;
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <emptyArea+0x100>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	d904      	bls.n	8002980 <emptyArea+0x48>
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <emptyArea+0x100>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	623b      	str	r3, [r7, #32]
	//
	Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4413      	add	r3, r2
	Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8002986:	3b01      	subs	r3, #1
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	3a01      	subs	r2, #1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	8809      	ldrh	r1, [r1, #0]
	Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8002990:	4608      	mov	r0, r1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	8889      	ldrh	r1, [r1, #4]
	Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8002996:	460c      	mov	r4, r1
 8002998:	4928      	ldr	r1, [pc, #160]	; (8002a3c <emptyArea+0x104>)
 800299a:	6809      	ldr	r1, [r1, #0]
 800299c:	9106      	str	r1, [sp, #24]
 800299e:	9405      	str	r4, [sp, #20]
 80029a0:	9004      	str	r0, [sp, #16]
 80029a2:	9203      	str	r2, [sp, #12]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	9202      	str	r2, [sp, #8]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	9201      	str	r2, [sp, #4]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a23      	ldr	r2, [pc, #140]	; (8002a40 <emptyArea+0x108>)
 80029b2:	4924      	ldr	r1, [pc, #144]	; (8002a44 <emptyArea+0x10c>)
 80029b4:	2001      	movs	r0, #1
 80029b6:	f7ff fc81 	bl	80022bc <Report>

	bool rt = false;
 80029ba:	2300      	movs	r3, #0
 80029bc:	77fb      	strb	r3, [r7, #31]
	if (NAND_Read_Page_8bit(nandPort, nan, buf, 1) != HAL_OK) {
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <emptyArea+0x110>)
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	f7fe fd5a 	bl	8001480 <NAND_Read_Page_8bit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <emptyArea+0xaa>
		devError |= devNAND;
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <emptyArea+0x114>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <emptyArea+0x114>)
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e01e      	b.n	8002a20 <emptyArea+0xe8>
	} else {
		//
		rt = true;
 80029e2:	2301      	movs	r3, #1
 80029e4:	77fb      	strb	r3, [r7, #31]
		uint8_t byte;
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e014      	b.n	8002a16 <emptyArea+0xde>
			byte = *(buf + i);
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	74fb      	strb	r3, [r7, #19]
			if ((i >= shift) && (i < dlin)) {
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d308      	bcc.n	8002a10 <emptyArea+0xd8>
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d204      	bcs.n	8002a10 <emptyArea+0xd8>
				if (byte != 0xff) rt = false;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2bff      	cmp	r3, #255	; 0xff
 8002a0a:	d001      	beq.n	8002a10 <emptyArea+0xd8>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	77fb      	strb	r3, [r7, #31]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	3301      	adds	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <emptyArea+0x100>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3e5      	bcc.n	80029ec <emptyArea+0xb4>
			}
		}
		//
	}

	if (rt) ret = shift;
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <emptyArea+0xf2>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	372c      	adds	r7, #44	; 0x2c
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	20001358 	.word	0x20001358
 8002a38:	20001378 	.word	0x20001378
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	0800fa2c 	.word	0x0800fa2c
 8002a44:	0800d438 	.word	0x0800d438
 8002a48:	20000064 	.word	0x20000064
 8002a4c:	2000033c 	.word	0x2000033c

08002a50 <showBuf>:
/**/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60ba      	str	r2, [r7, #8]
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002a62:	2320      	movs	r3, #32
 8002a64:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d10e      	bne.n	8002a92 <showBuf+0x42>
		if (rd) {
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002a7a:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <showBuf+0x144>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <showBuf+0x144>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8c:	e001      	b.n	8002a92 <showBuf+0x42>
		} else ind = max_ind;
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d26d      	bcs.n	8002b76 <showBuf+0x126>
		bool done = false;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ab6:	fb01 f202 	mul.w	r2, r1, r2
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <showBuf+0x76>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <showBuf+0x148>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002acc:	e046      	b.n	8002b5c <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002ace:	4832      	ldr	r0, [pc, #200]	; (8002b98 <showBuf+0x148>)
 8002ad0:	f7fd fb7e 	bl	80001d0 <strlen>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <showBuf+0x148>)
 8002ad8:	4413      	add	r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	492f      	ldr	r1, [pc, #188]	; (8002b9c <showBuf+0x14c>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f009 fee2 	bl	800c8a8 <siprintf>
			for (int i = 0; i < step; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e01d      	b.n	8002b26 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002aea:	482b      	ldr	r0, [pc, #172]	; (8002b98 <showBuf+0x148>)
 8002aec:	f7fd fb70 	bl	80001d0 <strlen>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <showBuf+0x148>)
 8002af4:	1898      	adds	r0, r3, r2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	4413      	add	r3, r2
 8002afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <showBuf+0x150>)
 8002b06:	f009 fecf 	bl	800c8a8 <siprintf>
				ix++;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d103      	bne.n	8002b20 <showBuf+0xd0>
					done = true;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002b1e:	e006      	b.n	8002b2e <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	3301      	adds	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	dbdd      	blt.n	8002aea <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <showBuf+0x154>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4818      	ldr	r0, [pc, #96]	; (8002b98 <showBuf+0x148>)
 8002b36:	f009 fed7 	bl	800c8e8 <strcat>
			adr += step;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b46:	4413      	add	r3, r2
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <showBuf+0x10c>
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b60:	f083 0301 	eor.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1b1      	bne.n	8002ace <showBuf+0x7e>
		}
		Report(0, "%s", stx);
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <showBuf+0x148>)
 8002b6c:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <showBuf+0x158>)
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7ff fba4 	bl	80022bc <Report>
	} else {
		Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002b74:	e00a      	b.n	8002b8c <showBuf+0x13c>
		Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <showBuf+0x154>)
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	9201      	str	r2, [sp, #4]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b84:	4909      	ldr	r1, [pc, #36]	; (8002bac <showBuf+0x15c>)
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff fb98 	bl	80022bc <Report>
}
 8002b8c:	bf00      	nop
 8002b8e:	3730      	adds	r7, #48	; 0x30
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20001378 	.word	0x20001378
 8002b98:	2000139c 	.word	0x2000139c
 8002b9c:	0800d478 	.word	0x0800d478
 8002ba0:	0800d480 	.word	0x0800d480
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	0800d488 	.word	0x0800d488
 8002bac:	0800d48c 	.word	0x0800d48c

08002bb0 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 8002bb6:	af06      	add	r7, sp, #24
 8002bb8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002bbc:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8002bc0:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(250);
 8002bc2:	20fa      	movs	r0, #250	; 0xfa
 8002bc4:	f001 fe58 	bl	8004878 <HAL_Delay>
	Report(0, "%s", eol);
 8002bc8:	4bb1      	ldr	r3, [pc, #708]	; (8002e90 <defThread+0x2e0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	49b1      	ldr	r1, [pc, #708]	; (8002e94 <defThread+0x2e4>)
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7ff fb73 	bl	80022bc <Report>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002bd6:	4bb0      	ldr	r3, [pc, #704]	; (8002e98 <defThread+0x2e8>)
 8002bd8:	681c      	ldr	r4, [r3, #0]
 8002bda:	f009 fac3 	bl	800c164 <xPortGetFreeHeapSize>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4bab      	ldr	r3, [pc, #684]	; (8002e90 <defThread+0x2e0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	9200      	str	r2, [sp, #0]
 8002bee:	4bab      	ldr	r3, [pc, #684]	; (8002e9c <defThread+0x2ec>)
 8002bf0:	4622      	mov	r2, r4
 8002bf2:	49ab      	ldr	r1, [pc, #684]	; (8002ea0 <defThread+0x2f0>)
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f7ff fb61 	bl	80022bc <Report>


	uint8_t next_block_erase = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8a7 3450 	strh.w	r3, [r7, #1104]	; 0x450
 8002c06:	2301      	movs	r3, #1
 8002c08:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8a7 3454 	strh.w	r3, [r7, #1108]	; 0x454
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	bool readed = false;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8002c1e:	4ba1      	ldr	r3, [pc, #644]	; (8002ea4 <defThread+0x2f4>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d15d      	bne.n	8002ce2 <defThread+0x132>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002c26:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <defThread+0x2f8>)
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	22f1      	movs	r2, #241	; 0xf1
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <defThread+0x92>
 8002c30:	4b9e      	ldr	r3, [pc, #632]	; (8002eac <defThread+0x2fc>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002c38:	2220      	movs	r2, #32
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f009 fe78 	bl	800c930 <strncpy>
 8002c40:	e006      	b.n	8002c50 <defThread+0xa0>
		                               else strcpy(cid, "UNKNOWN");
 8002c42:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002c46:	4a9a      	ldr	r2, [pc, #616]	; (8002eb0 <defThread+0x300>)
 8002c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c4c:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002c50:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <defThread+0x304>)
 8002c52:	4a99      	ldr	r2, [pc, #612]	; (8002eb8 <defThread+0x308>)
 8002c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c58:	6018      	str	r0, [r3, #0]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	8019      	strh	r1, [r3, #0]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002c5e:	4b92      	ldr	r3, [pc, #584]	; (8002ea8 <defThread+0x2f8>)
 8002c60:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002c6a:	e016      	b.n	8002c9a <defThread+0xea>
 8002c6c:	4891      	ldr	r0, [pc, #580]	; (8002eb4 <defThread+0x304>)
 8002c6e:	f7fd faaf 	bl	80001d0 <strlen>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4a8f      	ldr	r2, [pc, #572]	; (8002eb4 <defThread+0x304>)
 8002c76:	1898      	adds	r0, r3, r2
 8002c78:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002c7c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002c80:	4413      	add	r3, r2
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	498d      	ldr	r1, [pc, #564]	; (8002ebc <defThread+0x30c>)
 8002c88:	f009 fe0e 	bl	800c8a8 <siprintf>
 8002c8c:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002c9a:	f897 3489 	ldrb.w	r3, [r7, #1161]	; 0x489
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d9e4      	bls.n	8002c6c <defThread+0xbc>
		sprintf(stx+strlen(stx),
 8002ca2:	4884      	ldr	r0, [pc, #528]	; (8002eb4 <defThread+0x304>)
 8002ca4:	f7fd fa94 	bl	80001d0 <strlen>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a82      	ldr	r2, [pc, #520]	; (8002eb4 <defThread+0x304>)
 8002cac:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002cae:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <defThread+0x2f8>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8002cb2:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002cb4:	4b7c      	ldr	r3, [pc, #496]	; (8002ea8 <defThread+0x2f8>)
 8002cb6:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 8002cb8:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002cba:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <defThread+0x2f8>)
 8002cbc:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8002cbe:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002cc0:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <defThread+0x2f8>)
 8002cc2:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8002cc4:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002cc6:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <defThread+0x2f8>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 8002cca:	9303      	str	r3, [sp, #12]
 8002ccc:	9102      	str	r1, [sp, #8]
 8002cce:	9201      	str	r2, [sp, #4]
 8002cd0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4979      	ldr	r1, [pc, #484]	; (8002ec0 <defThread+0x310>)
 8002cdc:	f009 fde4 	bl	800c8a8 <siprintf>
 8002ce0:	e00c      	b.n	8002cfc <defThread+0x14c>
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002ce2:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <defThread+0x2f4>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002cea:	4a76      	ldr	r2, [pc, #472]	; (8002ec4 <defThread+0x314>)
 8002cec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cf0:	4b6c      	ldr	r3, [pc, #432]	; (8002ea4 <defThread+0x2f4>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4974      	ldr	r1, [pc, #464]	; (8002ec8 <defThread+0x318>)
 8002cf6:	486f      	ldr	r0, [pc, #444]	; (8002eb4 <defThread+0x304>)
 8002cf8:	f009 fdd6 	bl	800c8a8 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <defThread+0x2e0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6c      	ldr	r2, [pc, #432]	; (8002eb4 <defThread+0x304>)
 8002d02:	4972      	ldr	r1, [pc, #456]	; (8002ecc <defThread+0x31c>)
 8002d04:	2001      	movs	r0, #1
 8002d06:	f7ff fad9 	bl	80022bc <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <defThread+0x320>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	22ef      	movs	r2, #239	; 0xef
 8002d20:	2100      	movs	r1, #0
 8002d22:	2000      	movs	r0, #0
 8002d24:	f001 f8d9 	bl	8003eda <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002d28:	4b69      	ldr	r3, [pc, #420]	; (8002ed0 <defThread+0x320>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d34:	b299      	uxth	r1, r3
 8002d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	23ef      	movs	r3, #239	; 0xef
 8002d3e:	22ef      	movs	r2, #239	; 0xef
 8002d40:	2000      	movs	r0, #0
 8002d42:	f001 f8ca 	bl	8003eda <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002d46:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8002d4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d4e:	4961      	ldr	r1, [pc, #388]	; (8002ed4 <defThread+0x324>)
 8002d50:	4618      	mov	r0, r3
 8002d52:	f009 fda9 	bl	800c8a8 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002d56:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <defThread+0x328>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	23f0      	movs	r3, #240	; 0xf0
 8002d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 f9c1 	bl	80040f4 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fa2a 	bl	80001d0 <strlen>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d82:	189c      	adds	r4, r3, r2
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <defThread+0x32c>)
 8002d86:	681d      	ldr	r5, [r3, #0]
 8002d88:	4b54      	ldr	r3, [pc, #336]	; (8002edc <defThread+0x32c>)
 8002d8a:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <defThread+0x32c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
	sprintf(screen+strlen(screen),
 8002d90:	0a9b      	lsrs	r3, r3, #10
 8002d92:	4a52      	ldr	r2, [pc, #328]	; (8002edc <defThread+0x32c>)
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	4951      	ldr	r1, [pc, #324]	; (8002edc <defThread+0x32c>)
 8002d98:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8002d9a:	4850      	ldr	r0, [pc, #320]	; (8002edc <defThread+0x32c>)
 8002d9c:	6940      	ldr	r0, [r0, #20]
	sprintf(screen+strlen(screen),
 8002d9e:	0d00      	lsrs	r0, r0, #20
 8002da0:	9003      	str	r0, [sp, #12]
 8002da2:	9102      	str	r1, [sp, #8]
 8002da4:	9201      	str	r2, [sp, #4]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4633      	mov	r3, r6
 8002daa:	462a      	mov	r2, r5
 8002dac:	494c      	ldr	r1, [pc, #304]	; (8002ee0 <defThread+0x330>)
 8002dae:	4620      	mov	r0, r4
 8002db0:	f009 fd7a 	bl	800c8a8 <siprintf>
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <defThread+0x334>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00e      	beq.n	8002dda <defThread+0x22a>
 8002dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fa05 	bl	80001d0 <strlen>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a45      	ldr	r2, [pc, #276]	; (8002ee4 <defThread+0x334>)
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4945      	ldr	r1, [pc, #276]	; (8002ee8 <defThread+0x338>)
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f009 fd67 	bl	800c8a8 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <defThread+0x328>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	785b      	ldrb	r3, [r3, #1]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fcc9 	bl	8000778 <__aeabi_i2d>
 8002de6:	4604      	mov	r4, r0
 8002de8:	460d      	mov	r5, r1
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <defThread+0x328>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fcc1 	bl	8000778 <__aeabi_i2d>
 8002df6:	a324      	add	r3, pc, #144	; (adr r3, 8002e88 <defThread+0x2d8>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fa40 	bl	8000280 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd fb6a 	bl	80004e0 <__adddf3>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd fd1a 	bl	800084c <__aeabi_d2uiz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	b298      	uxth	r0, r3
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <defThread+0x328>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a32      	ldr	r2, [pc, #200]	; (8002eec <defThread+0x33c>)
 8002e22:	8812      	ldrh	r2, [r2, #0]
 8002e24:	43d2      	mvns	r2, r2
 8002e26:	b292      	uxth	r2, r2
 8002e28:	4930      	ldr	r1, [pc, #192]	; (8002eec <defThread+0x33c>)
 8002e2a:	8809      	ldrh	r1, [r1, #0]
 8002e2c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002e30:	9102      	str	r1, [sp, #8]
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	9200      	str	r2, [sp, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	4601      	mov	r1, r0
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f001 f902 	bl	8004048 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f000 feb9 	bl	8003bbc <ipsOn>


	bool loop = true;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
	bool led = false;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
	uint32_t tmr = get_tmr(1);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7ff f918 	bl	800208c <get_tmr>
 8002e5c:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480

	s_qcmd qcmd = {0};
 8002e60:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002e64:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8002e68:	2200      	movs	r2, #0
 8002e6a:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8002e6c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002e70:	f2a3 436d 	subw	r3, r3, #1133	; 0x46d
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

  /* Infinite loop */

	while (loop) {
 8002e7e:	f000 bd18 	b.w	80038b2 <defThread+0xd02>
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	33333333 	.word	0x33333333
 8002e8c:	3feb3333 	.word	0x3feb3333
 8002e90:	20000004 	.word	0x20000004
 8002e94:	0800d488 	.word	0x0800d488
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	0800fa38 	.word	0x0800fa38
 8002ea0:	0800d4b4 	.word	0x0800d4b4
 8002ea4:	20000071 	.word	0x20000071
 8002ea8:	20001370 	.word	0x20001370
 8002eac:	20000074 	.word	0x20000074
 8002eb0:	0800d4e0 	.word	0x0800d4e0
 8002eb4:	2000139c 	.word	0x2000139c
 8002eb8:	0800d4e8 	.word	0x0800d4e8
 8002ebc:	0800d480 	.word	0x0800d480
 8002ec0:	0800d4f0 	.word	0x0800d4f0
 8002ec4:	20000078 	.word	0x20000078
 8002ec8:	0800d544 	.word	0x0800d544
 8002ecc:	0800d564 	.word	0x0800d564
 8002ed0:	20000068 	.word	0x20000068
 8002ed4:	0800d56c 	.word	0x0800d56c
 8002ed8:	2000006c 	.word	0x2000006c
 8002edc:	20001378 	.word	0x20001378
 8002ee0:	0800d578 	.word	0x0800d578
 8002ee4:	2000136c 	.word	0x2000136c
 8002ee8:	0800d5d4 	.word	0x0800d5d4
 8002eec:	20001356 	.word	0x20001356

		if (check_tmr(tmr)) {
 8002ef0:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8002ef4:	f7ff f8d7 	bl	80020a6 <check_tmr>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 808d 	beq.w	800301a <defThread+0x46a>
			tmr = get_tmr(1);
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7ff f8c3 	bl	800208c <get_tmr>
 8002f06:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480
			//
			sec2str(screen);
 8002f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff f93a 	bl	8002188 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002f14:	4ba3      	ldr	r3, [pc, #652]	; (80031a4 <defThread+0x5f4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	23f0      	movs	r3, #240	; 0xf0
 8002f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 f8e2 	bl	80040f4 <mkLineCenter>
 8002f30:	4601      	mov	r1, r0
 8002f32:	4b9c      	ldr	r3, [pc, #624]	; (80031a4 <defThread+0x5f4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f3a:	9202      	str	r2, [sp, #8]
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	9201      	str	r2, [sp, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	9200      	str	r2, [sp, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	460a      	mov	r2, r1
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2008      	movs	r0, #8
 8002f4c:	f001 f87c 	bl	8004048 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%02X", devError);
 8002f50:	4b95      	ldr	r3, [pc, #596]	; (80031a8 <defThread+0x5f8>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f5a:	4994      	ldr	r1, [pc, #592]	; (80031ac <defThread+0x5fc>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f009 fca3 	bl	800c8a8 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8002f62:	4b91      	ldr	r3, [pc, #580]	; (80031a8 <defThread+0x5f8>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <defThread+0x3c4>
 8002f6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f6e:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
 8002f72:	e002      	b.n	8002f7a <defThread+0x3ca>
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8002f7a:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <defThread+0x5f4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002f86:	b29c      	uxth	r4, r3
 8002f88:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <defThread+0x5f4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	23f0      	movs	r3, #240	; 0xf0
 8002f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f8a8 	bl	80040f4 <mkLineCenter>
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <defThread+0x5f4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fae:	9202      	str	r2, [sp, #8]
 8002fb0:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	; 0x486
 8002fb4:	9201      	str	r2, [sp, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f001 f841 	bl	8004048 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 8002fc6:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <defThread+0x600>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d015      	beq.n	8002ffa <defThread+0x44a>
				if (qs != qStat) {
 8002fce:	4b78      	ldr	r3, [pc, #480]	; (80031b0 <defThread+0x600>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d00f      	beq.n	8002ffa <defThread+0x44a>
					Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8002fda:	4b75      	ldr	r3, [pc, #468]	; (80031b0 <defThread+0x600>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fee0 	bl	8001da4 <get_qStat>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <defThread+0x604>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4973      	ldr	r1, [pc, #460]	; (80031b8 <defThread+0x608>)
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7ff f965 	bl	80022bc <Report>
					qs = qStat;
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <defThread+0x600>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
				}
			}

			if (devError) led = true; else led = false;
 8002ffa:	4b6b      	ldr	r3, [pc, #428]	; (80031a8 <defThread+0x5f8>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <defThread+0x45a>
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
 8003008:	e002      	b.n	8003010 <defThread+0x460>
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
			errLedOn(led);
 8003010:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe ffe3 	bl	8001fe0 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 10)) != osOK) {
 800301a:	4b68      	ldr	r3, [pc, #416]	; (80031bc <defThread+0x60c>)
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8003022:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003026:	230a      	movs	r3, #10
 8003028:	f006 fb2a 	bl	8009680 <osMessageQueueGet>
 800302c:	4603      	mov	r3, r0
 800302e:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <defThread+0x600>)
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <defThread+0x600>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d023      	beq.n	8003082 <defThread+0x4d2>
			if (qs != qStat) qs = qStat;
 800303a:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <defThread+0x600>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8003042:	429a      	cmp	r2, r3
 8003044:	d003      	beq.n	800304e <defThread+0x49e>
 8003046:	4b5a      	ldr	r3, [pc, #360]	; (80031b0 <defThread+0x600>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
			if (qStat != osErrorTimeout) {
 800304e:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <defThread+0x600>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f113 0f02 	cmn.w	r3, #2
 8003056:	f000 83da 	beq.w	800380e <defThread+0xc5e>
				devError |= devQUE;
 800305a:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <defThread+0x5f8>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	b2da      	uxtb	r2, r3
 8003064:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <defThread+0x5f8>)
 8003066:	701a      	strb	r2, [r3, #0]
				Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003068:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <defThread+0x600>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fe99 	bl	8001da4 <get_qStat>
 8003072:	4602      	mov	r2, r0
 8003074:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <defThread+0x604>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	494f      	ldr	r1, [pc, #316]	; (80031b8 <defThread+0x608>)
 800307a:	2001      	movs	r0, #1
 800307c:	f7ff f91e 	bl	80022bc <Report>
 8003080:	e3c5      	b.n	800380e <defThread+0xc5e>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8003082:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003086:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <defThread+0x610>)
 8003090:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003098:	494a      	ldr	r1, [pc, #296]	; (80031c4 <defThread+0x614>)
 800309a:	4618      	mov	r0, r3
 800309c:	f009 fc04 	bl	800c8a8 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <defThread+0x5f4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80030b0:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80030b2:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <defThread+0x5f4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	23f0      	movs	r3, #240	; 0xf0
 80030bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 f813 	bl	80040f4 <mkLineCenter>
 80030ce:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <defThread+0x5f4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	9202      	str	r2, [sp, #8]
 80030d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80030dc:	9201      	str	r2, [sp, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	9200      	str	r2, [sp, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	460a      	mov	r2, r1
 80030e6:	4621      	mov	r1, r4
 80030e8:	2000      	movs	r0, #0
 80030ea:	f000 ffad 	bl	8004048 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 80030ee:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80030f2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80030fe:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	4618      	mov	r0, r3
 8003106:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800310a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <defThread+0x610>)
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <defThread+0x604>)
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4603      	mov	r3, r0
 8003122:	460a      	mov	r2, r1
 8003124:	4928      	ldr	r1, [pc, #160]	; (80031c8 <defThread+0x618>)
 8003126:	2001      	movs	r0, #1
 8003128:	f7ff f8c8 	bl	80022bc <Report>
			//
			nand_show = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
			switch (qcmd.cmd) {
 8003132:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003136:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	f200 8353 	bhi.w	80037e8 <defThread+0xc38>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <defThread+0x598>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	080031d9 	.word	0x080031d9
 8003154:	080032ad 	.word	0x080032ad
 8003158:	080033d9 	.word	0x080033d9
 800315c:	080032d9 	.word	0x080032d9
 8003160:	08003385 	.word	0x08003385
 8003164:	080033d9 	.word	0x080033d9
 8003168:	08003629 	.word	0x08003629
				case cmdRestart:
					loop = false;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
		  		break;
 8003172:	e339      	b.n	80037e8 <defThread+0xc38>
		  		break;
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003174:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003178:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <defThread+0x5de>
						set_Date(epoch);
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <defThread+0x61c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe ff9e 	bl	80020c8 <set_Date>
					} else {//show date&time
						sec2str(stx);
						Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 800318c:	e32c      	b.n	80037e8 <defThread+0xc38>
						sec2str(stx);
 800318e:	4810      	ldr	r0, [pc, #64]	; (80031d0 <defThread+0x620>)
 8003190:	f7fe fffa 	bl	8002188 <sec2str>
						Report(0, "%s <- Current date&time%s", stx, eol);
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <defThread+0x604>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <defThread+0x620>)
 800319a:	490e      	ldr	r1, [pc, #56]	; (80031d4 <defThread+0x624>)
 800319c:	2000      	movs	r0, #0
 800319e:	f7ff f88d 	bl	80022bc <Report>
				break;
 80031a2:	e321      	b.n	80037e8 <defThread+0xc38>
 80031a4:	20000068 	.word	0x20000068
 80031a8:	2000033c 	.word	0x2000033c
 80031ac:	0800d5e4 	.word	0x0800d5e4
 80031b0:	20001398 	.word	0x20001398
 80031b4:	20000004 	.word	0x20000004
 80031b8:	0800d5f4 	.word	0x0800d5f4
 80031bc:	20000334 	.word	0x20000334
 80031c0:	2000002c 	.word	0x2000002c
 80031c4:	0800d600 	.word	0x0800d600
 80031c8:	0800d608 	.word	0x0800d608
 80031cc:	20000054 	.word	0x20000054
 80031d0:	2000139c 	.word	0x2000139c
 80031d4:	0800d620 	.word	0x0800d620
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 80031d8:	4b94      	ldr	r3, [pc, #592]	; (800342c <defThread+0x87c>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b94      	ldr	r3, [pc, #592]	; (8003430 <defThread+0x880>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1ad2      	subs	r2, r2, r3
 80031e2:	4b94      	ldr	r3, [pc, #592]	; (8003434 <defThread+0x884>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
					NAND_AddressTypeDef addr = {
						.Page = (p % (chipConf.BlockSize / chipConf.PageSize)),
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <defThread+0x884>)
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	4b90      	ldr	r3, [pc, #576]	; (8003434 <defThread+0x884>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fa:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80031fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003202:	fb01 f202 	mul.w	r2, r1, r2
 8003206:	1a9b      	subs	r3, r3, r2
					NAND_AddressTypeDef addr = {
 8003208:	b29a      	uxth	r2, r3
 800320a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800320e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003218:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800321c:	2201      	movs	r2, #1
 800321e:	805a      	strh	r2, [r3, #2]
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 8003220:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 8003224:	f7ff fb72 	bl	800290c <nand_PageToBlock>
 8003228:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 800322a:	b29a      	uxth	r2, r3
 800322c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003230:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003234:	809a      	strh	r2, [r3, #4]
					};
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003236:	4b7d      	ldr	r3, [pc, #500]	; (800342c <defThread+0x87c>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <defThread+0x888>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	461c      	mov	r4, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003240:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003244:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003248:	881b      	ldrh	r3, [r3, #0]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800324a:	4619      	mov	r1, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 800324c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003250:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003254:	889b      	ldrh	r3, [r3, #4]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003256:	4618      	mov	r0, r3
 8003258:	4b78      	ldr	r3, [pc, #480]	; (800343c <defThread+0x88c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	9001      	str	r0, [sp, #4]
 8003260:	9100      	str	r1, [sp, #0]
 8003262:	4623      	mov	r3, r4
 8003264:	4976      	ldr	r1, [pc, #472]	; (8003440 <defThread+0x890>)
 8003266:	2001      	movs	r0, #1
 8003268:	f7ff f828 	bl	80022bc <Report>
					if (rdBuf) {
 800326c:	4b75      	ldr	r3, [pc, #468]	; (8003444 <defThread+0x894>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 82b2 	beq.w	80037da <defThread+0xc2a>
						if (NAND_Read_Page_8bit(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 8003276:	4b74      	ldr	r3, [pc, #464]	; (8003448 <defThread+0x898>)
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	4b72      	ldr	r3, [pc, #456]	; (8003444 <defThread+0x894>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003282:	2301      	movs	r3, #1
 8003284:	f7fe f8fc 	bl	8001480 <NAND_Read_Page_8bit>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <defThread+0x6ec>
							nand_show = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
							readed = true;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
						} else devError |= devNAND;
					}
				}
				break;
 800329a:	e29e      	b.n	80037da <defThread+0xc2a>
						} else devError |= devNAND;
 800329c:	4b6b      	ldr	r3, [pc, #428]	; (800344c <defThread+0x89c>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b69      	ldr	r3, [pc, #420]	; (800344c <defThread+0x89c>)
 80032a8:	701a      	strb	r2, [r3, #0]
				break;
 80032aa:	e296      	b.n	80037da <defThread+0xc2a>
				case cmdNext:
					Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 80032ac:	4b5f      	ldr	r3, [pc, #380]	; (800342c <defThread+0x87c>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b61      	ldr	r3, [pc, #388]	; (8003438 <defThread+0x888>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	4b61      	ldr	r3, [pc, #388]	; (800343c <defThread+0x88c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	4964      	ldr	r1, [pc, #400]	; (8003450 <defThread+0x8a0>)
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7fe fffb 	bl	80022bc <Report>
					if (rdBuf) nand_show = 2;
 80032c6:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <defThread+0x894>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8287 	beq.w	80037de <defThread+0xc2e>
 80032d0:	2302      	movs	r3, #2
 80032d2:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
				break;
 80032d6:	e282      	b.n	80037de <defThread+0xc2e>
				case cmdErase:
					if (!qcmd.attr) {
 80032d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80032dc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d13f      	bne.n	8003366 <defThread+0x7b6>
						NAND_AddressTypeDef addr = {
 80032e6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80032ea:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80032ee:	2200      	movs	r2, #0
 80032f0:	801a      	strh	r2, [r3, #0]
 80032f2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80032f6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80032fa:	2201      	movs	r2, #1
 80032fc:	805a      	strh	r2, [r3, #2]
 80032fe:	4b55      	ldr	r3, [pc, #340]	; (8003454 <defThread+0x8a4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29a      	uxth	r2, r3
 8003304:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003308:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800330c:	809a      	strh	r2, [r3, #4]
							.Plane = 1,
							.Block = nandBlk
						};
						//Report(1, "Erase nand block:%lu... ", addr.Block);
						//stik = HAL_GetTick();
						if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) {
 800330e:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <defThread+0x898>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f107 021c 	add.w	r2, r7, #28
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fab0 	bl	800587e <HAL_NAND_Erase_Block>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <defThread+0x79c>
							devError |= devNAND;
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <defThread+0x89c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	f043 0320 	orr.w	r3, r3, #32
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <defThread+0x89c>)
 8003330:	701a      	strb	r2, [r3, #0]
							Report(1, "Erase nand block:%lu Error !%s", addr.Block, eol);
 8003332:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003336:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800333a:	889b      	ldrh	r3, [r3, #4]
 800333c:	461a      	mov	r2, r3
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <defThread+0x88c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4945      	ldr	r1, [pc, #276]	; (8003458 <defThread+0x8a8>)
 8003344:	2001      	movs	r0, #1
 8003346:	f7fe ffb9 	bl	80022bc <Report>
						iBlk = 0;
						Report(1, "Erase chip ");
						next_block_erase = 1;
						stik = HAL_GetTick();
					}
				break;
 800334a:	e24d      	b.n	80037e8 <defThread+0xc38>
							Report(1, "Erase nand block:%lu Ok !%s", addr.Block, eol);
 800334c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003350:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003354:	889b      	ldrh	r3, [r3, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	4b38      	ldr	r3, [pc, #224]	; (800343c <defThread+0x88c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	493f      	ldr	r1, [pc, #252]	; (800345c <defThread+0x8ac>)
 800335e:	2001      	movs	r0, #1
 8003360:	f7fe ffac 	bl	80022bc <Report>
				break;
 8003364:	e240      	b.n	80037e8 <defThread+0xc38>
						iBlk = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
						Report(1, "Erase chip ");
 800336c:	493c      	ldr	r1, [pc, #240]	; (8003460 <defThread+0x8b0>)
 800336e:	2001      	movs	r0, #1
 8003370:	f7fe ffa4 	bl	80022bc <Report>
						next_block_erase = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
						stik = HAL_GetTick();
 800337a:	f001 fa71 	bl	8004860 <HAL_GetTick>
 800337e:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
				break;
 8003382:	e231      	b.n	80037e8 <defThread+0xc38>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <defThread+0x8b4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fabf 	bl	800290c <nand_PageToBlock>
 800338e:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
					if (!pageIsEmpty(nandPage)) {
 8003392:	4b34      	ldr	r3, [pc, #208]	; (8003464 <defThread+0x8b4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fa84 	bl	80018a4 <pageIsEmpty>
 800339c:	4603      	mov	r3, r0
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <defThread+0x810>
						Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <defThread+0x8b4>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <defThread+0x88c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80033b6:	492c      	ldr	r1, [pc, #176]	; (8003468 <defThread+0x8b8>)
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7fe ff7f 	bl	80022bc <Report>
					} else {
						Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 80033be:	e213      	b.n	80037e8 <defThread+0xc38>
						Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <defThread+0x8b4>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <defThread+0x88c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80033ce:	4927      	ldr	r1, [pc, #156]	; (800346c <defThread+0x8bc>)
 80033d0:	2001      	movs	r0, #1
 80033d2:	f7fe ff73 	bl	80022bc <Report>
				break;
 80033d6:	e207      	b.n	80037e8 <defThread+0xc38>
				case cmdWrite:
				case cmdArea:
					if (wrBuf) {
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <defThread+0x8c0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8200 	beq.w	80037e2 <defThread+0xc32>
						//
						if (qcmd.cmd == cmdArea) {
 80033e2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80033e6:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b07      	cmp	r3, #7
 80033ee:	d145      	bne.n	800347c <defThread+0x8cc>
							if (!areaIsEmpty(nandAdr, nandLen)) {
 80033f0:	4b0e      	ldr	r3, [pc, #56]	; (800342c <defThread+0x87c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a10      	ldr	r2, [pc, #64]	; (8003438 <defThread+0x888>)
 80033f6:	8812      	ldrh	r2, [r2, #0]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fb90 	bl	8001b20 <areaIsEmpty>
 8003400:	4603      	mov	r3, r0
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <defThread+0x86c>
								Report(1, "Area Not empty%s", eol);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <defThread+0x88c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4918      	ldr	r1, [pc, #96]	; (8003474 <defThread+0x8c4>)
 8003414:	2001      	movs	r0, #1
 8003416:	f7fe ff51 	bl	80022bc <Report>
							} else {
								Report(1, "Area is Empty%s", eol);
							}
							break;
 800341a:	e1e5      	b.n	80037e8 <defThread+0xc38>
								Report(1, "Area is Empty%s", eol);
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <defThread+0x88c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4915      	ldr	r1, [pc, #84]	; (8003478 <defThread+0x8c8>)
 8003424:	2001      	movs	r0, #1
 8003426:	f7fe ff49 	bl	80022bc <Report>
 800342a:	e1dd      	b.n	80037e8 <defThread+0xc38>
 800342c:	2000135c 	.word	0x2000135c
 8003430:	20001358 	.word	0x20001358
 8003434:	20001378 	.word	0x20001378
 8003438:	20001360 	.word	0x20001360
 800343c:	20000004 	.word	0x20000004
 8003440:	0800d63c 	.word	0x0800d63c
 8003444:	20001390 	.word	0x20001390
 8003448:	20000064 	.word	0x20000064
 800344c:	2000033c 	.word	0x2000033c
 8003450:	0800d66c 	.word	0x0800d66c
 8003454:	20001364 	.word	0x20001364
 8003458:	0800d690 	.word	0x0800d690
 800345c:	0800d6b0 	.word	0x0800d6b0
 8003460:	0800d6cc 	.word	0x0800d6cc
 8003464:	20001368 	.word	0x20001368
 8003468:	0800d6d8 	.word	0x0800d6d8
 800346c:	0800d6fc 	.word	0x0800d6fc
 8003470:	20001394 	.word	0x20001394
 8003474:	0800d720 	.word	0x0800d720
 8003478:	0800d734 	.word	0x0800d734
						}
						//
						uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 800347c:	4b91      	ldr	r3, [pc, #580]	; (80036c4 <defThread+0xb14>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b91      	ldr	r3, [pc, #580]	; (80036c8 <defThread+0xb18>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1ad2      	subs	r2, r2, r3
 8003486:	4b91      	ldr	r3, [pc, #580]	; (80036cc <defThread+0xb1c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
						uint32_t b = nand_PageToBlock(p);
 8003492:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8003496:	f7ff fa39 	bl	800290c <nand_PageToBlock>
 800349a:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
						NAND_AddressTypeDef addr = {
							.Page = (p % (chipConf.BlockSize / chipConf.PageSize)),
 800349e:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <defThread+0xb1c>)
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	4b8a      	ldr	r3, [pc, #552]	; (80036cc <defThread+0xb1c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80034aa:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80034ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80034b2:	fb01 f202 	mul.w	r2, r1, r2
 80034b6:	1a9b      	subs	r3, r3, r2
						NAND_AddressTypeDef addr = {
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034be:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034c8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80034cc:	2201      	movs	r2, #1
 80034ce:	805a      	strh	r2, [r3, #2]
 80034d0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034da:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80034de:	809a      	strh	r2, [r3, #4]
							.Plane = 1,
							.Block = b
						};
						if (!pageIsEmpty(nandPage)) {
 80034e0:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <defThread+0xb20>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe f9dd 	bl	80018a4 <pageIsEmpty>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02c      	beq.n	8003550 <defThread+0x9a0>
							Report(1, "Erase nand block:%lu... ", addr.Block);
 80034f6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034fa:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80034fe:	889b      	ldrh	r3, [r3, #4]
 8003500:	461a      	mov	r2, r3
 8003502:	4974      	ldr	r1, [pc, #464]	; (80036d4 <defThread+0xb24>)
 8003504:	2001      	movs	r0, #1
 8003506:	f7fe fed9 	bl	80022bc <Report>
							uint32_t stik = HAL_GetTick();
 800350a:	f001 f9a9 	bl	8004860 <HAL_GetTick>
 800350e:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
							if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 8003512:	4b71      	ldr	r3, [pc, #452]	; (80036d8 <defThread+0xb28>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f107 0214 	add.w	r2, r7, #20
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f002 f9ae 	bl	800587e <HAL_NAND_Erase_Block>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <defThread+0x986>
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <defThread+0xb2c>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <defThread+0xb2c>)
 8003534:	701a      	strb	r2, [r3, #0]
							Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 8003536:	f001 f993 	bl	8004860 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003540:	1ad2      	subs	r2, r2, r3
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <defThread+0xb30>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4967      	ldr	r1, [pc, #412]	; (80036e4 <defThread+0xb34>)
 8003548:	2000      	movs	r0, #0
 800354a:	f7fe feb7 	bl	80022bc <Report>
 800354e:	e013      	b.n	8003578 <defThread+0x9c8>
						} else {
							Report(1, "Check: page:%lu in block:%lu is Empty%s", addr.Page, addr.Block, eol);
 8003550:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003554:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003560:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003564:	889b      	ldrh	r3, [r3, #4]
 8003566:	4619      	mov	r1, r3
 8003568:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <defThread+0xb30>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	460b      	mov	r3, r1
 8003570:	495d      	ldr	r1, [pc, #372]	; (80036e8 <defThread+0xb38>)
 8003572:	2001      	movs	r0, #1
 8003574:	f7fe fea2 	bl	80022bc <Report>
						}
						//if (HAL_NAND_Read_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
						//Report(1, "Copy nand page:%lu block:%lu:%s", addr.Page, addr.Block, eol);
						memset(wrBuf, 0xff, chipConf.PageSize);
 8003578:	4b5c      	ldr	r3, [pc, #368]	; (80036ec <defThread+0xb3c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a53      	ldr	r2, [pc, #332]	; (80036cc <defThread+0xb1c>)
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	21ff      	movs	r1, #255	; 0xff
 8003582:	4618      	mov	r0, r3
 8003584:	f009 f818 	bl	800c5b8 <memset>
						uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 8003588:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <defThread+0xb14>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <defThread+0xb18>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <defThread+0xb1c>)
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	fbb3 f1f2 	udiv	r1, r3, r2
 800359a:	fb01 f202 	mul.w	r2, r1, r2
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
						memset(wrBuf + ofs, nandByte, nandLen);
 80035a4:	4b51      	ldr	r3, [pc, #324]	; (80036ec <defThread+0xb3c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80035ac:	4413      	add	r3, r2
 80035ae:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <defThread+0xb40>)
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4a4f      	ldr	r2, [pc, #316]	; (80036f4 <defThread+0xb44>)
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f008 fffd 	bl	800c5b8 <memset>
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (NAND_Write_Page_8bit(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 80035be:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <defThread+0xb28>)
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <defThread+0xb3c>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	f107 0114 	add.w	r1, r7, #20
 80035ca:	2301      	movs	r3, #1
 80035cc:	f7fe f862 	bl	8001694 <NAND_Write_Page_8bit>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <defThread+0xa34>
 80035d6:	4b41      	ldr	r3, [pc, #260]	; (80036dc <defThread+0xb2c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f043 0320 	orr.w	r3, r3, #32
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <defThread+0xb2c>)
 80035e2:	701a      	strb	r2, [r3, #0]
						Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 80035e4:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <defThread+0xb14>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <defThread+0xb40>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <defThread+0xb44>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
							      nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 80035f4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80035f8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80035fc:	881b      	ldrh	r3, [r3, #0]
						Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 80035fe:	461c      	mov	r4, r3
							      nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8003600:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003604:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003608:	889b      	ldrh	r3, [r3, #4]
						Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 800360a:	461d      	mov	r5, r3
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <defThread+0xb30>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	9503      	str	r5, [sp, #12]
 8003614:	9402      	str	r4, [sp, #8]
 8003616:	9001      	str	r0, [sp, #4]
 8003618:	9100      	str	r1, [sp, #0]
 800361a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <defThread+0xb48>)
 8003620:	2001      	movs	r0, #1
 8003622:	f7fe fe4b 	bl	80022bc <Report>
					}
				break;
 8003626:	e0dc      	b.n	80037e2 <defThread+0xc32>
				case cmdSave:
					if (wrBuf) {
 8003628:	4b30      	ldr	r3, [pc, #192]	; (80036ec <defThread+0xb3c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80da 	beq.w	80037e6 <defThread+0xc36>
						uint32_t page = (nandAdr - devAdr) / chipConf.PageSize;
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <defThread+0xb14>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <defThread+0xb18>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <defThread+0xb1c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
						NAND_AddressTypeDef nans = {
							.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <defThread+0xb1c>)
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <defThread+0xb1c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	fbb2 f2f3 	udiv	r2, r2, r3
 8003654:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003658:	fbb3 f1f2 	udiv	r1, r3, r2
 800365c:	fb01 f202 	mul.w	r2, r1, r2
 8003660:	1a9b      	subs	r3, r3, r2
						NAND_AddressTypeDef nans = {
 8003662:	b29a      	uxth	r2, r3
 8003664:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003668:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003672:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8003676:	2201      	movs	r2, #1
 8003678:	805a      	strh	r2, [r3, #2]
							.Plane = 1,
							.Block = nand_PageToBlock(page)
 800367a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800367e:	f7ff f945 	bl	800290c <nand_PageToBlock>
 8003682:	4603      	mov	r3, r0
						NAND_AddressTypeDef nans = {
 8003684:	b29a      	uxth	r2, r3
 8003686:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800368a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800368e:	809a      	strh	r2, [r3, #4]
						};
						int shift = emptyArea(nandAdr, nandLen, wrBuf, &nans);
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <defThread+0xb14>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <defThread+0xb44>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <defThread+0xb3c>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	f7ff f949 	bl	8002938 <emptyArea>
 80036a6:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
						if (shift == -1) {
 80036aa:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b2:	d125      	bne.n	8003700 <defThread+0xb50>
							Report(1, "Area Not empty. Process not alow%s", eol);
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <defThread+0xb30>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4910      	ldr	r1, [pc, #64]	; (80036fc <defThread+0xb4c>)
 80036bc:	2001      	movs	r0, #1
 80036be:	f7fe fdfd 	bl	80022bc <Report>
 80036c2:	e091      	b.n	80037e8 <defThread+0xc38>
 80036c4:	2000135c 	.word	0x2000135c
 80036c8:	20001358 	.word	0x20001358
 80036cc:	20001378 	.word	0x20001378
 80036d0:	20001368 	.word	0x20001368
 80036d4:	0800d744 	.word	0x0800d744
 80036d8:	20000064 	.word	0x20000064
 80036dc:	2000033c 	.word	0x2000033c
 80036e0:	20000004 	.word	0x20000004
 80036e4:	0800d760 	.word	0x0800d760
 80036e8:	0800d770 	.word	0x0800d770
 80036ec:	20001394 	.word	0x20001394
 80036f0:	20000070 	.word	0x20000070
 80036f4:	20001360 	.word	0x20001360
 80036f8:	0800d798 	.word	0x0800d798
 80036fc:	0800d7e0 	.word	0x0800d7e0
							break;
						} else {
							memset(wrBuf + shift, nandByte, nandLen);
 8003700:	4b83      	ldr	r3, [pc, #524]	; (8003910 <defThread+0xd60>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003708:	4413      	add	r3, r2
 800370a:	4a82      	ldr	r2, [pc, #520]	; (8003914 <defThread+0xd64>)
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	4611      	mov	r1, r2
 8003710:	4a81      	ldr	r2, [pc, #516]	; (8003918 <defThread+0xd68>)
 8003712:	8812      	ldrh	r2, [r2, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f008 ff4f 	bl	800c5b8 <memset>
							if (NAND_Write_Page_8bit(nandPort, &nans, wrBuf, 1) != HAL_OK) devError |= devNAND;
 800371a:	4b80      	ldr	r3, [pc, #512]	; (800391c <defThread+0xd6c>)
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	4b7c      	ldr	r3, [pc, #496]	; (8003910 <defThread+0xd60>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f107 010c 	add.w	r1, r7, #12
 8003726:	2301      	movs	r3, #1
 8003728:	f7fd ffb4 	bl	8001694 <NAND_Write_Page_8bit>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <defThread+0xb90>
 8003732:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <defThread+0xd70>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b78      	ldr	r3, [pc, #480]	; (8003920 <defThread+0xd70>)
 800373e:	701a      	strb	r2, [r3, #0]
							showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
 8003740:	4b78      	ldr	r3, [pc, #480]	; (8003924 <defThread+0xd74>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b72      	ldr	r3, [pc, #456]	; (8003910 <defThread+0xd60>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800374e:	2100      	movs	r1, #0
 8003750:	2001      	movs	r0, #1
 8003752:	f7ff f97d 	bl	8002a50 <showBuf>
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
									  ARRAY_ADDRESS(&nans, nandPort),
 8003756:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800375a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	4619      	mov	r1, r3
 8003762:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003766:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800376a:	889b      	ldrh	r3, [r3, #4]
 800376c:	461a      	mov	r2, r3
 800376e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003772:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8003776:	885b      	ldrh	r3, [r3, #2]
 8003778:	4618      	mov	r0, r3
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <defThread+0xd6c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	fb00 f303 	mul.w	r3, r0, r3
 8003784:	4413      	add	r3, r2
 8003786:	4a65      	ldr	r2, [pc, #404]	; (800391c <defThread+0xd6c>)
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800378c:	fb02 f303 	mul.w	r3, r2, r3
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003790:	18ca      	adds	r2, r1, r3
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <defThread+0xd78>)
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <defThread+0xd64>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <defThread+0xd68>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	461c      	mov	r4, r3
									  nandAdr,
									  shift,
									  nandByte,
									  nandLen,
									  nans.Page,
 80037a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80037a6:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80037aa:	881b      	ldrh	r3, [r3, #0]
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 80037ac:	461d      	mov	r5, r3
									  nans.Block,
 80037ae:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80037b2:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80037b6:	889b      	ldrh	r3, [r3, #4]
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 80037b8:	461e      	mov	r6, r3
 80037ba:	4b5c      	ldr	r3, [pc, #368]	; (800392c <defThread+0xd7c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	9604      	str	r6, [sp, #16]
 80037c2:	9503      	str	r5, [sp, #12]
 80037c4:	9402      	str	r4, [sp, #8]
 80037c6:	9001      	str	r0, [sp, #4]
 80037c8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4957      	ldr	r1, [pc, #348]	; (8003930 <defThread+0xd80>)
 80037d2:	2001      	movs	r0, #1
 80037d4:	f7fe fd72 	bl	80022bc <Report>
									  eol);
						}
					}
				break;
 80037d8:	e005      	b.n	80037e6 <defThread+0xc36>
				break;
 80037da:	bf00      	nop
 80037dc:	e004      	b.n	80037e8 <defThread+0xc38>
				break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <defThread+0xc38>
				break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <defThread+0xc38>
				break;
 80037e6:	bf00      	nop
			}
			if (nand_show) {
 80037e8:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <defThread+0xc5e>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 80037f0:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <defThread+0xd78>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <defThread+0xd68>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461c      	mov	r4, r3
 80037fa:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <defThread+0xd84>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f897 148a 	ldrb.w	r1, [r7, #1162]	; 0x48a
 8003802:	f897 048b 	ldrb.w	r0, [r7, #1163]	; 0x48b
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4623      	mov	r3, r4
 800380a:	f7ff f921 	bl	8002a50 <showBuf>
	     (pAddress->Block + (pAddress->Plane * hnand->Config.PlaneSize) ) * hnand->Config.BlockSize
	     )
)
*/
		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 800380e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04a      	beq.n	80038ac <defThread+0xcfc>
			clr.Block = iBlk;
 8003816:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800381a:	b29b      	uxth	r3, r3
 800381c:	f8a7 3454 	strh.w	r3, [r7, #1108]	; 0x454
			iBlk++;
 8003820:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003824:	3301      	adds	r3, #1
 8003826:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
			if (HAL_NAND_Erase_Block(nandPort, &clr) != HAL_OK) {
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <defThread+0xd6c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f002 f822 	bl	800587e <HAL_NAND_Erase_Block>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <defThread+0xca6>
				devError |= devNAND;
 8003840:	4b37      	ldr	r3, [pc, #220]	; (8003920 <defThread+0xd70>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f043 0320 	orr.w	r3, r3, #32
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <defThread+0xd70>)
 800384c:	701a      	strb	r2, [r3, #0]
				next_block_erase = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8003854:	e012      	b.n	800387c <defThread+0xccc>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8003856:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <defThread+0xcba>
 8003862:	4935      	ldr	r1, [pc, #212]	; (8003938 <defThread+0xd88>)
 8003864:	2000      	movs	r0, #0
 8003866:	f7fe fd29 	bl	80022bc <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 800386a:	4b34      	ldr	r3, [pc, #208]	; (800393c <defThread+0xd8c>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <defThread+0xccc>
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
			}
			if (!next_block_erase) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 800387c:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003880:	2b00      	cmp	r3, #0
 8003882:	d113      	bne.n	80038ac <defThread+0xcfc>
 8003884:	f000 ffec 	bl	8004860 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <defThread+0xd90>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	099a      	lsrs	r2, r3, #6
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <defThread+0xd7c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 80038a4:	4927      	ldr	r1, [pc, #156]	; (8003944 <defThread+0xd94>)
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7fe fd08 	bl	80022bc <Report>
		}
		//
		osDelay(5);
 80038ac:	2005      	movs	r0, #5
 80038ae:	f005 fd6f 	bl	8009390 <osDelay>
	while (loop) {
 80038b2:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f47f ab1a 	bne.w	8002ef0 <defThread+0x340>
	}

	if (wrBuf) free(wrBuf);
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <defThread+0xd60>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <defThread+0xd1e>
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <defThread+0xd60>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f008 fe5f 	bl	800c58c <free>
	if (rdBuf) free(rdBuf);
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <defThread+0xd84>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <defThread+0xd30>
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <defThread+0xd84>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f008 fe56 	bl	800c58c <free>


	Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <defThread+0xd98>)
 80038e2:	681c      	ldr	r4, [r3, #0]
 80038e4:	f008 fc3e 	bl	800c164 <xPortGetFreeHeapSize>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <defThread+0xd7c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	9200      	str	r2, [sp, #0]
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <defThread+0xd9c>)
 80038fa:	4622      	mov	r2, r4
 80038fc:	4914      	ldr	r1, [pc, #80]	; (8003950 <defThread+0xda0>)
 80038fe:	2001      	movs	r0, #1
 8003900:	f7fe fcdc 	bl	80022bc <Report>
	osDelay(250);
 8003904:	20fa      	movs	r0, #250	; 0xfa
 8003906:	f005 fd43 	bl	8009390 <osDelay>

	NVIC_SystemReset();
 800390a:	f7fd f991 	bl	8000c30 <__NVIC_SystemReset>
 800390e:	bf00      	nop
 8003910:	20001394 	.word	0x20001394
 8003914:	20000070 	.word	0x20000070
 8003918:	20001360 	.word	0x20001360
 800391c:	20000064 	.word	0x20000064
 8003920:	2000033c 	.word	0x2000033c
 8003924:	20001358 	.word	0x20001358
 8003928:	2000135c 	.word	0x2000135c
 800392c:	20000004 	.word	0x20000004
 8003930:	0800d804 	.word	0x0800d804
 8003934:	20001390 	.word	0x20001390
 8003938:	0800d85c 	.word	0x0800d85c
 800393c:	20001378 	.word	0x20001378
 8003940:	10624dd3 	.word	0x10624dd3
 8003944:	0800d860 	.word	0x0800d860
 8003948:	20000000 	.word	0x20000000
 800394c:	0800fa38 	.word	0x0800fa38
 8003950:	0800d878 	.word	0x0800d878

08003954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d102      	bne.n	800396c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003966:	f000 ff67 	bl	8004838 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 800396a:	e016      	b.n	800399a <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d111      	bne.n	800399a <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003976:	f7fe fb69 	bl	800204c <get_msCounter>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	f002 0403 	and.w	r4, r2, #3
 8003982:	2500      	movs	r5, #0
 8003984:	1ee3      	subs	r3, r4, #3
 8003986:	432b      	orrs	r3, r5
 8003988:	d105      	bne.n	8003996 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 800398a:	f7fe fb51 	bl	8002030 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	4805      	ldr	r0, [pc, #20]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003992:	f001 fe2e 	bl	80055f2 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003996:	f7fe fb67 	bl	8002068 <inc_msCounter>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bdb0      	pop	{r4, r5, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40020800 	.word	0x40020800

080039ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	errLedOn(true);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7fe fb15 	bl	8001fe0 <errLedOn>
  /* USER CODE END Error_Handler_Debug */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 80039c6:	2200      	movs	r2, #0
 80039c8:	2104      	movs	r1, #4
 80039ca:	480c      	ldr	r0, [pc, #48]	; (80039fc <ST7789_WriteCommand+0x40>)
 80039cc:	f001 fdf8 	bl	80055c0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <ST7789_WriteCommand+0x44>)
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	2396      	movs	r3, #150	; 0x96
 80039d6:	1df9      	adds	r1, r7, #7
 80039d8:	2201      	movs	r2, #1
 80039da:	f003 f954 	bl	8006c86 <HAL_SPI_Transmit>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <ST7789_WriteCommand+0x36>
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <ST7789_WriteCommand+0x48>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f043 0310 	orr.w	r3, r3, #16
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <ST7789_WriteCommand+0x48>)
 80039f0:	701a      	strb	r2, [r3, #0]
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40020000 	.word	0x40020000
 8003a00:	20000058 	.word	0x20000058
 8003a04:	2000033c 	.word	0x2000033c

08003a08 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003a12:	2200      	movs	r2, #0
 8003a14:	2104      	movs	r1, #4
 8003a16:	480e      	ldr	r0, [pc, #56]	; (8003a50 <ST7789_WriteCommands+0x48>)
 8003a18:	f001 fdd2 	bl	80055c0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <ST7789_WriteCommands+0x4c>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	2196      	movs	r1, #150	; 0x96
 8003a26:	460b      	mov	r3, r1
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	f003 f929 	bl	8006c86 <HAL_SPI_Transmit>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <ST7789_WriteCommands+0x40>
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <ST7789_WriteCommands+0x50>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	f043 0310 	orr.w	r3, r3, #16
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <ST7789_WriteCommands+0x50>)
 8003a46:	701a      	strb	r2, [r3, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40020000 	.word	0x40020000
 8003a54:	20000058 	.word	0x20000058
 8003a58:	2000033c 	.word	0x2000033c

08003a5c <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	481f      	ldr	r0, [pc, #124]	; (8003aec <ST7789_WriteData+0x90>)
 8003a70:	f001 fda6 	bl	80055c0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003a74:	e028      	b.n	8003ac8 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf28      	it	cs
 8003a80:	4613      	movcs	r3, r2
 8003a82:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <ST7789_WriteData+0x94>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <ST7789_WriteData+0x98>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	89ba      	ldrh	r2, [r7, #12]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fa34 	bl	8006f00 <HAL_SPI_Transmit_DMA>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003aa2:	e002      	b.n	8003aaa <ST7789_WriteData+0x4e>
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f000 fee7 	bl	8004878 <HAL_Delay>
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <ST7789_WriteData+0x94>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f083 0301 	eor.w	r3, r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f5      	bne.n	8003aa4 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003ab8:	89bb      	ldrh	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003ac0:	89bb      	ldrh	r3, [r7, #12]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1d3      	bne.n	8003a76 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <ST7789_WriteData+0x86>
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <ST7789_WriteData+0x9c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f043 0310 	orr.w	r3, r3, #16
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <ST7789_WriteData+0x9c>)
 8003ae0:	701a      	strb	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40020000 	.word	0x40020000
 8003af0:	20000051 	.word	0x20000051
 8003af4:	20000058 	.word	0x20000058
 8003af8:	2000033c 	.word	0x2000033c

08003afc <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	2104      	movs	r1, #4
 8003b0e:	4814      	ldr	r0, [pc, #80]	; (8003b60 <ST7789_WriteDataLine+0x64>)
 8003b10:	f001 fd56 	bl	80055c0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <ST7789_WriteDataLine+0x68>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <ST7789_WriteDataLine+0x6c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	b292      	uxth	r2, r2
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 f9eb 	bl	8006f00 <HAL_SPI_Transmit_DMA>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003b2e:	e002      	b.n	8003b36 <ST7789_WriteDataLine+0x3a>
 8003b30:	2001      	movs	r0, #1
 8003b32:	f000 fea1 	bl	8004878 <HAL_Delay>
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <ST7789_WriteDataLine+0x68>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f5      	bne.n	8003b30 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <ST7789_WriteDataLine+0x5c>
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <ST7789_WriteDataLine+0x70>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	f043 0310 	orr.w	r3, r3, #16
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <ST7789_WriteDataLine+0x70>)
 8003b56:	701a      	strb	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40020000 	.word	0x40020000
 8003b64:	20000051 	.word	0x20000051
 8003b68:	20000058 	.word	0x20000058
 8003b6c:	2000033c 	.word	0x2000033c

08003b70 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <ST7789_WriteSmallData+0x40>)
 8003b80:	f001 fd1e 	bl	80055c0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <ST7789_WriteSmallData+0x44>)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	2396      	movs	r3, #150	; 0x96
 8003b8a:	1df9      	adds	r1, r7, #7
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f003 f87a 	bl	8006c86 <HAL_SPI_Transmit>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <ST7789_WriteSmallData+0x36>
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <ST7789_WriteSmallData+0x48>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f043 0310 	orr.w	r3, r3, #16
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <ST7789_WriteSmallData+0x48>)
 8003ba4:	701a      	strb	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40020000 	.word	0x40020000
 8003bb4:	20000058 	.word	0x20000058
 8003bb8:	2000033c 	.word	0x2000033c

08003bbc <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <ipsOn+0x18>
 8003bcc:	2029      	movs	r0, #41	; 0x29
 8003bce:	f7ff fef5 	bl	80039bc <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003bd2:	e002      	b.n	8003bda <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003bd4:	2028      	movs	r0, #40	; 0x28
 8003bd6:	f7ff fef1 	bl	80039bc <ST7789_WriteCommand>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003bee:	2036      	movs	r0, #54	; 0x36
 8003bf0:	f7ff fee4 	bl	80039bc <ST7789_WriteCommand>
	switch (m) {
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d81a      	bhi.n	8003c30 <ST7789_SetRotation+0x4c>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <ST7789_SetRotation+0x1c>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c19 	.word	0x08003c19
 8003c08:	08003c21 	.word	0x08003c21
 8003c0c:	08003c29 	.word	0x08003c29
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003c10:	20c0      	movs	r0, #192	; 0xc0
 8003c12:	f7ff ffad 	bl	8003b70 <ST7789_WriteSmallData>
		break;
 8003c16:	e00c      	b.n	8003c32 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003c18:	20a0      	movs	r0, #160	; 0xa0
 8003c1a:	f7ff ffa9 	bl	8003b70 <ST7789_WriteSmallData>
		break;
 8003c1e:	e008      	b.n	8003c32 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7ff ffa5 	bl	8003b70 <ST7789_WriteSmallData>
		break;
 8003c26:	e004      	b.n	8003c32 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003c28:	2060      	movs	r0, #96	; 0x60
 8003c2a:	f7ff ffa1 	bl	8003b70 <ST7789_WriteSmallData>
		break;
 8003c2e:	e000      	b.n	8003c32 <ST7789_SetRotation+0x4e>
	default:
		break;
 8003c30:	bf00      	nop
	}
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop

08003c3c <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4604      	mov	r4, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	80fb      	strh	r3, [r7, #6]
 8003c4e:	4603      	mov	r3, r0
 8003c50:	80bb      	strh	r3, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
 8003c56:	4613      	mov	r3, r2
 8003c58:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	82fb      	strh	r3, [r7, #22]
 8003c5e:	887b      	ldrh	r3, [r7, #2]
 8003c60:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003c62:	88bb      	ldrh	r3, [r7, #4]
 8003c64:	827b      	strh	r3, [r7, #18]
 8003c66:	883b      	ldrh	r3, [r7, #0]
 8003c68:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003c6a:	202a      	movs	r0, #42	; 0x2a
 8003c6c:	f7ff fea6 	bl	80039bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003c70:	8afb      	ldrh	r3, [r7, #22]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	733b      	strb	r3, [r7, #12]
 8003c7a:	8afb      	ldrh	r3, [r7, #22]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	737b      	strb	r3, [r7, #13]
 8003c80:	8abb      	ldrh	r3, [r7, #20]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	73bb      	strb	r3, [r7, #14]
 8003c8a:	8abb      	ldrh	r3, [r7, #20]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	2104      	movs	r1, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fee0 	bl	8003a5c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003c9c:	202b      	movs	r0, #43	; 0x2b
 8003c9e:	f7ff fe8d 	bl	80039bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003ca2:	8a7b      	ldrh	r3, [r7, #18]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	723b      	strb	r3, [r7, #8]
 8003cac:	8a7b      	ldrh	r3, [r7, #18]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	727b      	strb	r3, [r7, #9]
 8003cb2:	8a3b      	ldrh	r3, [r7, #16]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	72bb      	strb	r3, [r7, #10]
 8003cbc:	8a3b      	ldrh	r3, [r7, #16]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fec7 	bl	8003a5c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003cce:	202c      	movs	r0, #44	; 0x2c
 8003cd0:	f7ff fe74 	bl	80039bc <ST7789_WriteCommand>
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}

08003cdc <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003ce0:	2014      	movs	r0, #20
 8003ce2:	f000 fdc9 	bl	8004878 <HAL_Delay>
    ST7789_RST_Clr();
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4808      	ldr	r0, [pc, #32]	; (8003d0c <ST7789_Reset+0x30>)
 8003cec:	f001 fc68 	bl	80055c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003cf0:	200a      	movs	r0, #10
 8003cf2:	f000 fdc1 	bl	8004878 <HAL_Delay>
    ST7789_RST_Set();
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4804      	ldr	r0, [pc, #16]	; (8003d0c <ST7789_Reset+0x30>)
 8003cfc:	f001 fc60 	bl	80055c0 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003d00:	2014      	movs	r0, #20
 8003d02:	f000 fdb9 	bl	8004878 <HAL_Delay>
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40020000 	.word	0x40020000

08003d10 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b08f      	sub	sp, #60	; 0x3c
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003d1a:	203a      	movs	r0, #58	; 0x3a
 8003d1c:	f7ff fe4e 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003d20:	2055      	movs	r0, #85	; 0x55
 8003d22:	f7ff ff25 	bl	8003b70 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003d26:	20b2      	movs	r0, #178	; 0xb2
 8003d28:	f7ff fe48 	bl	80039bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003d2c:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <ST7789_Init+0x108>)
 8003d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d36:	6018      	str	r0, [r3, #0]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d40:	2105      	movs	r1, #5
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fe8a 	bl	8003a5c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003d48:	2003      	movs	r0, #3
 8003d4a:	f7ff ff4b 	bl	8003be4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003d4e:	20b7      	movs	r0, #183	; 0xb7
 8003d50:	f7ff fe34 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003d54:	2035      	movs	r0, #53	; 0x35
 8003d56:	f7ff ff0b 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003d5a:	20bb      	movs	r0, #187	; 0xbb
 8003d5c:	f7ff fe2e 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003d60:	2019      	movs	r0, #25
 8003d62:	f7ff ff05 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003d66:	20c0      	movs	r0, #192	; 0xc0
 8003d68:	f7ff fe28 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003d6c:	202c      	movs	r0, #44	; 0x2c
 8003d6e:	f7ff feff 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8003d72:	20c2      	movs	r0, #194	; 0xc2
 8003d74:	f7ff fe22 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7ff fef9 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003d7e:	20ff      	movs	r0, #255	; 0xff
 8003d80:	f7ff fef6 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8003d84:	20c3      	movs	r0, #195	; 0xc3
 8003d86:	f7ff fe19 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003d8a:	2012      	movs	r0, #18
 8003d8c:	f7ff fef0 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003d90:	20c4      	movs	r0, #196	; 0xc4
 8003d92:	f7ff fe13 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8003d96:	2020      	movs	r0, #32
 8003d98:	f7ff feea 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003d9c:	20c6      	movs	r0, #198	; 0xc6
 8003d9e:	f7ff fe0d 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8003da2:	200f      	movs	r0, #15
 8003da4:	f7ff fee4 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003da8:	20d0      	movs	r0, #208	; 0xd0
 8003daa:	f7ff fe07 	bl	80039bc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003dae:	20a4      	movs	r0, #164	; 0xa4
 8003db0:	f7ff fede 	bl	8003b70 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8003db4:	20a1      	movs	r0, #161	; 0xa1
 8003db6:	f7ff fedb 	bl	8003b70 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003dba:	20e0      	movs	r0, #224	; 0xe0
 8003dbc:	f7ff fdfe 	bl	80039bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <ST7789_Init+0x10c>)
 8003dc2:	f107 041c 	add.w	r4, r7, #28
 8003dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc8:	c407      	stmia	r4!, {r0, r1, r2}
 8003dca:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	210e      	movs	r1, #14
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fe42 	bl	8003a5c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003dd8:	20e1      	movs	r0, #225	; 0xe1
 8003dda:	f7ff fdef 	bl	80039bc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <ST7789_Init+0x110>)
 8003de0:	f107 040c 	add.w	r4, r7, #12
 8003de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003de6:	c407      	stmia	r4!, {r0, r1, r2}
 8003de8:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	210e      	movs	r1, #14
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fe33 	bl	8003a5c <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <ST7789_Init+0x114>)
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8003dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dfe:	2104      	movs	r1, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fe01 	bl	8003a08 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f80d 	bl	8003e28 <ST7789_Fill_Color>
}
 8003e0e:	bf00      	nop
 8003e10:	373c      	adds	r7, #60	; 0x3c
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd90      	pop	{r4, r7, pc}
 8003e16:	bf00      	nop
 8003e18:	0800d8a4 	.word	0x0800d8a4
 8003e1c:	0800d8ac 	.word	0x0800d8ac
 8003e20:	0800d8bc 	.word	0x0800d8bc
 8003e24:	28131121 	.word	0x28131121

08003e28 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b0fc      	sub	sp, #496	; 0x1f0
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4602      	mov	r2, r0
 8003e30:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e34:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e38:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003e3a:	23ef      	movs	r3, #239	; 0xef
 8003e3c:	22ef      	movs	r2, #239	; 0xef
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7ff fefb 	bl	8003c3c <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003e52:	e024      	b.n	8003e9e <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8003e54:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e58:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b21a      	sxth	r2, r3
 8003e64:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e68:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e76:	b21b      	sxth	r3, r3
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	b219      	sxth	r1, r3
 8003e7c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003e80:	f107 020c 	add.w	r2, r7, #12
 8003e84:	4413      	add	r3, r2
 8003e86:	b28a      	uxth	r2, r1
 8003e88:	801a      	strh	r2, [r3, #0]
		i += 2;
 8003e8a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003e8e:	3302      	adds	r3, #2
 8003e90:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003e94:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003e9e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003ea2:	2bef      	cmp	r3, #239	; 0xef
 8003ea4:	d9d6      	bls.n	8003e54 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003eac:	e00b      	b.n	8003ec6 <ST7789_Fill_Color+0x9e>
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fe20 	bl	8003afc <ST7789_WriteDataLine>
 8003ebc:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003ec6:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003eca:	2bef      	cmp	r3, #239	; 0xef
 8003ecc:	d9ef      	bls.n	8003eae <ST7789_Fill_Color+0x86>

//#endif
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8003eda:	b590      	push	{r4, r7, lr}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4608      	mov	r0, r1
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	80fb      	strh	r3, [r7, #6]
 8003eec:	4603      	mov	r3, r0
 8003eee:	80bb      	strh	r3, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8003ef8:	887b      	ldrh	r3, [r7, #2]
 8003efa:	2bef      	cmp	r3, #239	; 0xef
 8003efc:	d82b      	bhi.n	8003f56 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003efe:	883b      	ldrh	r3, [r7, #0]
 8003f00:	2bef      	cmp	r3, #239	; 0xef
 8003f02:	d828      	bhi.n	8003f56 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003f04:	8c3b      	ldrh	r3, [r7, #32]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	723b      	strb	r3, [r7, #8]
 8003f0e:	8c3b      	ldrh	r3, [r7, #32]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8003f14:	883b      	ldrh	r3, [r7, #0]
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	88b9      	ldrh	r1, [r7, #4]
 8003f1a:	88f8      	ldrh	r0, [r7, #6]
 8003f1c:	f7ff fe8e 	bl	8003c3c <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8003f20:	88bb      	ldrh	r3, [r7, #4]
 8003f22:	81fb      	strh	r3, [r7, #14]
 8003f24:	e012      	b.n	8003f4c <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	81bb      	strh	r3, [r7, #12]
 8003f2a:	e008      	b.n	8003f3e <ST7789_Fill+0x64>
 8003f2c:	f107 0308 	add.w	r3, r7, #8
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fd92 	bl	8003a5c <ST7789_WriteData>
 8003f38:	89bb      	ldrh	r3, [r7, #12]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	81bb      	strh	r3, [r7, #12]
 8003f3e:	89ba      	ldrh	r2, [r7, #12]
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d9f2      	bls.n	8003f2c <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8003f46:	89fb      	ldrh	r3, [r7, #14]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	81fb      	strh	r3, [r7, #14]
 8003f4c:	89fa      	ldrh	r2, [r7, #14]
 8003f4e:	883b      	ldrh	r3, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d9e8      	bls.n	8003f26 <ST7789_Fill+0x4c>
 8003f54:	e000      	b.n	8003f58 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003f56:	bf00      	nop
	}
}
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}

08003f5e <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003f5e:	b082      	sub	sp, #8
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
 8003f68:	4603      	mov	r3, r0
 8003f6a:	80fb      	strh	r3, [r7, #6]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	80bb      	strh	r3, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003f74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29c      	uxth	r4, r3
 8003f84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	88bb      	ldrh	r3, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	88b9      	ldrh	r1, [r7, #4]
 8003f96:	88f8      	ldrh	r0, [r7, #6]
 8003f98:	4622      	mov	r2, r4
 8003f9a:	f7ff fe4f 	bl	8003c3c <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8003f9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	733b      	strb	r3, [r7, #12]
 8003fa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003fae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	723b      	strb	r3, [r7, #8]
 8003fba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e02f      	b.n	800402c <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8003fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	3b20      	subs	r3, #32
 8003fd2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	440b      	add	r3, r1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	4413      	add	r3, r2
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	e015      	b.n	800401a <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <ST7789_WriteChar+0xa8>
				uk = cdata;
 8003ffe:	f107 030c 	add.w	r3, r7, #12
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e002      	b.n	800400c <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 800400c:	2102      	movs	r1, #2
 800400e:	6978      	ldr	r0, [r7, #20]
 8004010:	f7ff fd24 	bl	8003a5c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	3301      	adds	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800401e:	461a      	mov	r2, r3
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4293      	cmp	r3, r2
 8004024:	d3e3      	bcc.n	8003fee <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3301      	adds	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004030:	461a      	mov	r2, r3
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4293      	cmp	r3, r2
 8004036:	d3c9      	bcc.n	8003fcc <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004044:	b002      	add	sp, #8
 8004046:	4770      	bx	lr

08004048 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004048:	b082      	sub	sp, #8
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af04      	add	r7, sp, #16
 8004050:	603a      	str	r2, [r7, #0]
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	4603      	mov	r3, r0
 8004056:	80fb      	strh	r3, [r7, #6]
 8004058:	460b      	mov	r3, r1
 800405a:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d03f      	beq.n	80040e2 <ST7789_WriteString+0x9a>

	while (*str) {
 8004062:	e039      	b.n	80040d8 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	7d3a      	ldrb	r2, [r7, #20]
 8004068:	4413      	add	r3, r2
 800406a:	2bef      	cmp	r3, #239	; 0xef
 800406c:	dd13      	ble.n	8004096 <ST7789_WriteString+0x4e>
			x = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004072:	7d7b      	ldrb	r3, [r7, #21]
 8004074:	b29a      	uxth	r2, r3
 8004076:	88bb      	ldrh	r3, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 800407c:	88bb      	ldrh	r3, [r7, #4]
 800407e:	7d7a      	ldrb	r2, [r7, #21]
 8004080:	4413      	add	r3, r2
 8004082:	2bef      	cmp	r3, #239	; 0xef
 8004084:	dc2f      	bgt.n	80040e6 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b20      	cmp	r3, #32
 800408c:	d103      	bne.n	8004096 <ST7789_WriteString+0x4e>
				str++;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	603b      	str	r3, [r7, #0]
				continue;
 8004094:	e020      	b.n	80040d8 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b0a      	cmp	r3, #10
 800409c:	d012      	beq.n	80040c4 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	88b9      	ldrh	r1, [r7, #4]
 80040a4:	88f8      	ldrh	r0, [r7, #6]
 80040a6:	8c3b      	ldrh	r3, [r7, #32]
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	8bbb      	ldrh	r3, [r7, #28]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f7ff ff53 	bl	8003f5e <ST7789_WriteChar>
			x += font.width;
 80040b8:	7d3b      	ldrb	r3, [r7, #20]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	4413      	add	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
 80040c2:	e006      	b.n	80040d2 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80040c8:	7d7b      	ldrb	r3, [r7, #21]
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	88bb      	ldrh	r3, [r7, #4]
 80040ce:	4413      	add	r3, r2
 80040d0:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	3301      	adds	r3, #1
 80040d6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1c1      	bne.n	8004064 <ST7789_WriteString+0x1c>
 80040e0:	e002      	b.n	80040e8 <ST7789_WriteString+0xa0>
	if (!str) return;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80040e6:	bf00      	nop
	}
}
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f0:	b002      	add	sp, #8
 80040f2:	4770      	bx	lr

080040f4 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b0a4      	sub	sp, #144	; 0x90
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	227c      	movs	r2, #124	; 0x7c
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f008 fa53 	bl	800c5b8 <memset>

	memset(st, 0x20, 127);
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	227f      	movs	r2, #127	; 0x7f
 8004118:	2120      	movs	r1, #32
 800411a:	4618      	mov	r0, r3
 800411c:	f008 fa4c 	bl	800c5b8 <memset>
	int8_t k = strlen(str);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fc f855 	bl	80001d0 <strlen>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 800412c:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	429a      	cmp	r2, r3
 8004134:	da25      	bge.n	8004182 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	0fda      	lsrs	r2, r3, #31
 8004140:	4413      	add	r3, r2
 8004142:	105b      	asrs	r3, r3, #1
 8004144:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004148:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800414c:	f107 020c 	add.w	r2, r7, #12
 8004150:	4413      	add	r3, r2
 8004152:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4618      	mov	r0, r3
 800415a:	f008 fa1f 	bl	800c59c <memcpy>
		st[k + n*2 + 1] = '\0';
 800415e:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004162:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	3301      	adds	r3, #1
 800416c:	3390      	adds	r3, #144	; 0x90
 800416e:	443b      	add	r3, r7
 8004170:	2200      	movs	r2, #0
 8004172:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f008 fbcf 	bl	800c920 <strcpy>
	}

	return str;
 8004182:	687b      	ldr	r3, [r7, #4]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3790      	adds	r7, #144	; 0x90
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_MspInit+0x74>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_MspInit+0x74>)
 800419c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a0:	6453      	str	r3, [r2, #68]	; 0x44
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_MspInit+0x74>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_MspInit+0x74>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <HAL_MspInit+0x74>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <HAL_MspInit+0x74>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041ca:	2200      	movs	r2, #0
 80041cc:	210f      	movs	r1, #15
 80041ce:	f06f 0001 	mvn.w	r0, #1
 80041d2:	f000 fc2d 	bl	8004a30 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2105      	movs	r1, #5
 80041da:	2005      	movs	r0, #5
 80041dc:	f000 fc28 	bl	8004a30 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80041e0:	2005      	movs	r0, #5
 80041e2:	f000 fc41 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2105      	movs	r1, #5
 80041ea:	2005      	movs	r0, #5
 80041ec:	f000 fc20 	bl	8004a30 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80041f0:	2005      	movs	r0, #5
 80041f2:	f000 fc39 	bl	8004a68 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800

08004204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a0c      	ldr	r2, [pc, #48]	; (8004250 <HAL_RTC_MspInit+0x4c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d110      	bne.n	8004246 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004224:	2302      	movs	r3, #2
 8004226:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RTC_MspInit+0x50>)
 800422a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800422c:	f107 0308 	add.w	r3, r7, #8
 8004230:	4618      	mov	r0, r3
 8004232:	f002 f8bf 	bl	80063b4 <HAL_RCCEx_PeriphCLKConfig>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 800423c:	f7ff fbb6 	bl	80039ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RTC_MspInit+0x54>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40002800 	.word	0x40002800
 8004254:	00190300 	.word	0x00190300
 8004258:	42470e3c 	.word	0x42470e3c

0800425c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a39      	ldr	r2, [pc, #228]	; (8004360 <HAL_SPI_MspInit+0x104>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d16b      	bne.n	8004356 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	4b38      	ldr	r3, [pc, #224]	; (8004364 <HAL_SPI_MspInit+0x108>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	4a37      	ldr	r2, [pc, #220]	; (8004364 <HAL_SPI_MspInit+0x108>)
 8004288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800428c:	6453      	str	r3, [r2, #68]	; 0x44
 800428e:	4b35      	ldr	r3, [pc, #212]	; (8004364 <HAL_SPI_MspInit+0x108>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <HAL_SPI_MspInit+0x108>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4a30      	ldr	r2, [pc, #192]	; (8004364 <HAL_SPI_MspInit+0x108>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <HAL_SPI_MspInit+0x108>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80042b6:	23a0      	movs	r3, #160	; 0xa0
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042c6:	2305      	movs	r3, #5
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	4619      	mov	r1, r3
 80042d0:	4825      	ldr	r0, [pc, #148]	; (8004368 <HAL_SPI_MspInit+0x10c>)
 80042d2:	f000 ffd9 	bl	8005288 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_SPI_MspInit+0x110>)
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <HAL_SPI_MspInit+0x114>)
 80042da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_SPI_MspInit+0x110>)
 80042de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80042e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_SPI_MspInit+0x110>)
 80042e6:	2240      	movs	r2, #64	; 0x40
 80042e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_SPI_MspInit+0x110>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042f0:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_SPI_MspInit+0x110>)
 80042f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <HAL_SPI_MspInit+0x110>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_SPI_MspInit+0x110>)
 8004300:	2200      	movs	r2, #0
 8004302:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_SPI_MspInit+0x110>)
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <HAL_SPI_MspInit+0x110>)
 800430c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004310:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <HAL_SPI_MspInit+0x110>)
 8004314:	2204      	movs	r2, #4
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_SPI_MspInit+0x110>)
 800431a:	2203      	movs	r2, #3
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_SPI_MspInit+0x110>)
 8004320:	2200      	movs	r2, #0
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_SPI_MspInit+0x110>)
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800432a:	4810      	ldr	r0, [pc, #64]	; (800436c <HAL_SPI_MspInit+0x110>)
 800432c:	f000 fbaa 	bl	8004a84 <HAL_DMA_Init>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004336:	f7ff fb39 	bl	80039ac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a0b      	ldr	r2, [pc, #44]	; (800436c <HAL_SPI_MspInit+0x110>)
 800433e:	649a      	str	r2, [r3, #72]	; 0x48
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_SPI_MspInit+0x110>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	2102      	movs	r1, #2
 800434a:	2023      	movs	r0, #35	; 0x23
 800434c:	f000 fb70 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004350:	2023      	movs	r0, #35	; 0x23
 8004352:	f000 fb89 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004356:	bf00      	nop
 8004358:	3728      	adds	r7, #40	; 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40013000 	.word	0x40013000
 8004364:	40023800 	.word	0x40023800
 8004368:	40020000 	.word	0x40020000
 800436c:	200001a4 	.word	0x200001a4
 8004370:	40026458 	.word	0x40026458

08004374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004384:	d115      	bne.n	80043b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2101      	movs	r1, #1
 80043a6:	201c      	movs	r0, #28
 80043a8:	f000 fb42 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043ac:	201c      	movs	r0, #28
 80043ae:	f000 fb5b 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800

080043c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <HAL_UART_MspInit+0xf4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d163      	bne.n	80044aa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a2c      	ldr	r2, [pc, #176]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800441a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800441e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004420:	2302      	movs	r3, #2
 8004422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004428:	2303      	movs	r3, #3
 800442a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800442c:	2307      	movs	r3, #7
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4619      	mov	r1, r3
 8004436:	4821      	ldr	r0, [pc, #132]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004438:	f000 ff26 	bl	8005288 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_UART_MspInit+0x100>)
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_UART_MspInit+0x104>)
 8004440:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004442:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004444:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004448:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_UART_MspInit+0x100>)
 800444c:	2240      	movs	r2, #64	; 0x40
 800444e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800445c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004464:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004466:	2200      	movs	r2, #0
 8004468:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_UART_MspInit+0x100>)
 800446c:	2200      	movs	r2, #0
 800446e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004476:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_UART_MspInit+0x100>)
 800447a:	2200      	movs	r2, #0
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800447e:	4810      	ldr	r0, [pc, #64]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004480:	f000 fb00 	bl	8004a84 <HAL_DMA_Init>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800448a:	f7ff fa8f 	bl	80039ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004492:	635a      	str	r2, [r3, #52]	; 0x34
 8004494:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2105      	movs	r1, #5
 800449e:	2027      	movs	r0, #39	; 0x27
 80044a0:	f000 fac6 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044a4:	2027      	movs	r0, #39	; 0x27
 80044a6:	f000 fadf 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80044aa:	bf00      	nop
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40004800 	.word	0x40004800
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40020400 	.word	0x40020400
 80044c0:	20000290 	.word	0x20000290
 80044c4:	40026058 	.word	0x40026058

080044c8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80044dc:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_FSMC_MspInit+0x98>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d139      	bne.n	8004558 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_FSMC_MspInit+0x98>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_FSMC_MspInit+0x9c>)
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_FSMC_MspInit+0x9c>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6393      	str	r3, [r2, #56]	; 0x38
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_FSMC_MspInit+0x9c>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004506:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800450a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004514:	2303      	movs	r3, #3
 8004516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004518:	230c      	movs	r3, #12
 800451a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4811      	ldr	r0, [pc, #68]	; (8004568 <HAL_FSMC_MspInit+0xa0>)
 8004522:	f000 feb1 	bl	8005288 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004526:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800452a:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004538:	230c      	movs	r3, #12
 800453a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	4619      	mov	r1, r3
 8004540:	480a      	ldr	r0, [pc, #40]	; (800456c <HAL_FSMC_MspInit+0xa4>)
 8004542:	f000 fea1 	bl	8005288 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2105      	movs	r1, #5
 800454a:	2030      	movs	r0, #48	; 0x30
 800454c:	f000 fa70 	bl	8004a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004550:	2030      	movs	r0, #48	; 0x30
 8004552:	f000 fa89 	bl	8004a68 <HAL_NVIC_EnableIRQ>
 8004556:	e000      	b.n	800455a <HAL_FSMC_MspInit+0x92>
    return;
 8004558:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20001b9c 	.word	0x20001b9c
 8004564:	40023800 	.word	0x40023800
 8004568:	40021000 	.word	0x40021000
 800456c:	40020c00 	.word	0x40020c00

08004570 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004578:	f7ff ffa6 	bl	80044c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	; 0x30
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004594:	2200      	movs	r2, #0
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	2019      	movs	r0, #25
 800459a:	f000 fa49 	bl	8004a30 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800459e:	2019      	movs	r0, #25
 80045a0:	f000 fa62 	bl	8004a68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <HAL_InitTick+0xa4>)
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <HAL_InitTick+0xa4>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6453      	str	r3, [r2, #68]	; 0x44
 80045b4:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <HAL_InitTick+0xa4>)
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045c0:	f107 0210 	add.w	r2, r7, #16
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 fec0 	bl	8006350 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80045d0:	f001 feaa 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 80045d4:	4603      	mov	r3, r0
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <HAL_InitTick+0xa8>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0c9b      	lsrs	r3, r3, #18
 80045e4:	3b01      	subs	r3, #1
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_InitTick+0xac>)
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <HAL_InitTick+0xb0>)
 80045ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_InitTick+0xac>)
 80045f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_InitTick+0xac>)
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_InitTick+0xac>)
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_InitTick+0xac>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004608:	4809      	ldr	r0, [pc, #36]	; (8004630 <HAL_InitTick+0xac>)
 800460a:	f002 ffa3 	bl	8007554 <HAL_TIM_Base_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004614:	4806      	ldr	r0, [pc, #24]	; (8004630 <HAL_InitTick+0xac>)
 8004616:	f002 ffed 	bl	80075f4 <HAL_TIM_Base_Start_IT>
 800461a:	4603      	mov	r3, r0
 800461c:	e000      	b.n	8004620 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800
 800462c:	431bde83 	.word	0x431bde83
 8004630:	20001ba0 	.word	0x20001ba0
 8004634:	40010000 	.word	0x40010000

08004638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800464a:	e7fe      	b.n	800464a <HardFault_Handler+0x4>

0800464c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004650:	e7fe      	b.n	8004650 <MemManage_Handler+0x4>

08004652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004656:	e7fe      	b.n	8004656 <BusFault_Handler+0x4>

08004658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800465c:	e7fe      	b.n	800465c <UsageFault_Handler+0x4>

0800465e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <DMA1_Stream3_IRQHandler+0x10>)
 8004682:	f000 fb97 	bl	8004db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000290 	.word	0x20000290

08004690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004696:	f003 f81d 	bl	80076d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20001ba0 	.word	0x20001ba0

080046a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <TIM2_IRQHandler+0x10>)
 80046aa:	f003 f813 	bl	80076d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000204 	.word	0x20000204

080046b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <SPI1_IRQHandler+0x10>)
 80046be:	f002 fcd5 	bl	800706c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	2000014c 	.word	0x2000014c

080046cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <USART3_IRQHandler+0x10>)
 80046d2:	f003 fcbd 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	2000024c 	.word	0x2000024c

080046e0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <FSMC_IRQHandler+0x10>)
 80046e6:	f000 ffec 	bl	80056c2 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200002f0 	.word	0x200002f0

080046f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <DMA2_Stream3_IRQHandler+0x10>)
 80046fa:	f000 fb5b 	bl	8004db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200001a4 	.word	0x200001a4

08004708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <_sbrk+0x5c>)
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <_sbrk+0x60>)
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <_sbrk+0x64>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <_sbrk+0x64>)
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <_sbrk+0x68>)
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <_sbrk+0x64>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	429a      	cmp	r2, r3
 8004736:	d207      	bcs.n	8004748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004738:	f007 fe50 	bl	800c3dc <__errno>
 800473c:	4603      	mov	r3, r0
 800473e:	220c      	movs	r2, #12
 8004740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004746:	e009      	b.n	800475c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <_sbrk+0x64>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <_sbrk+0x64>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	4a05      	ldr	r2, [pc, #20]	; (800476c <_sbrk+0x64>)
 8004758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20020000 	.word	0x20020000
 8004768:	00000800 	.word	0x00000800
 800476c:	20001be8 	.word	0x20001be8
 8004770:	20006a10 	.word	0x20006a10

08004774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004778:	4b08      	ldr	r3, [pc, #32]	; (800479c <SystemInit+0x28>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <SystemInit+0x28>)
 8004780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <SystemInit+0x28>)
 800478a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800478e:	609a      	str	r2, [r3, #8]
#endif
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047a6:	e003      	b.n	80047b0 <LoopCopyDataInit>

080047a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80047aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047ae:	3104      	adds	r1, #4

080047b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047b8:	d3f6      	bcc.n	80047a8 <CopyDataInit>
  ldr  r2, =_sbss
 80047ba:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047bc:	e002      	b.n	80047c4 <LoopFillZerobss>

080047be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047c0:	f842 3b04 	str.w	r3, [r2], #4

080047c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047c8:	d3f9      	bcc.n	80047be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047ca:	f7ff ffd3 	bl	8004774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047ce:	f007 feb7 	bl	800c540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047d2:	f7fc fa43 	bl	8000c5c <main>
  bx  lr    
 80047d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80047dc:	0800fc08 	.word	0x0800fc08
  ldr  r0, =_sdata
 80047e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047e4:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 80047e8:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 80047ec:	20006a10 	.word	0x20006a10

080047f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC_IRQHandler>
	...

080047f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_Init+0x40>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <HAL_Init+0x40>)
 80047fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_Init+0x40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_Init+0x40>)
 800480a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800480e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <HAL_Init+0x40>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a07      	ldr	r2, [pc, #28]	; (8004834 <HAL_Init+0x40>)
 8004816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800481c:	2003      	movs	r0, #3
 800481e:	f000 f8fc 	bl	8004a1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004822:	200f      	movs	r0, #15
 8004824:	f7ff feae 	bl	8004584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004828:	f7ff fcb0 	bl	800418c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023c00 	.word	0x40023c00

08004838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_IncTick+0x20>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_IncTick+0x24>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4413      	add	r3, r2
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <HAL_IncTick+0x24>)
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000090 	.word	0x20000090
 800485c:	20001bec 	.word	0x20001bec

08004860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return uwTick;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_GetTick+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20001bec 	.word	0x20001bec

08004878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004880:	f7ff ffee 	bl	8004860 <HAL_GetTick>
 8004884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004890:	d005      	beq.n	800489e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <HAL_Delay+0x44>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800489e:	bf00      	nop
 80048a0:	f7ff ffde 	bl	8004860 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d8f7      	bhi.n	80048a0 <HAL_Delay+0x28>
  {
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000090 	.word	0x20000090

080048c0 <__NVIC_SetPriorityGrouping>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	60d3      	str	r3, [r2, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <__NVIC_GetPriorityGrouping>:
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <__NVIC_GetPriorityGrouping+0x18>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 0307 	and.w	r3, r3, #7
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <__NVIC_EnableIRQ>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db0b      	blt.n	800494e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <__NVIC_EnableIRQ+0x38>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2001      	movs	r0, #1
 8004946:	fa00 f202 	lsl.w	r2, r0, r2
 800494a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_SetPriority>:
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	6039      	str	r1, [r7, #0]
 800496a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db0a      	blt.n	800498a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	490c      	ldr	r1, [pc, #48]	; (80049ac <__NVIC_SetPriority+0x4c>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	0112      	lsls	r2, r2, #4
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	440b      	add	r3, r1
 8004984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004988:	e00a      	b.n	80049a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4908      	ldr	r1, [pc, #32]	; (80049b0 <__NVIC_SetPriority+0x50>)
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	3b04      	subs	r3, #4
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	440b      	add	r3, r1
 800499e:	761a      	strb	r2, [r3, #24]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000e100 	.word	0xe000e100
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <NVIC_EncodePriority>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f1c3 0307 	rsb	r3, r3, #7
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf28      	it	cs
 80049d2:	2304      	movcs	r3, #4
 80049d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3304      	adds	r3, #4
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d902      	bls.n	80049e4 <NVIC_EncodePriority+0x30>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3b03      	subs	r3, #3
 80049e2:	e000      	b.n	80049e6 <NVIC_EncodePriority+0x32>
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	401a      	ands	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	43d9      	mvns	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a0c:	4313      	orrs	r3, r2
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3724      	adds	r7, #36	; 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ff4c 	bl	80048c0 <__NVIC_SetPriorityGrouping>
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a42:	f7ff ff61 	bl	8004908 <__NVIC_GetPriorityGrouping>
 8004a46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	6978      	ldr	r0, [r7, #20]
 8004a4e:	f7ff ffb1 	bl	80049b4 <NVIC_EncodePriority>
 8004a52:	4602      	mov	r2, r0
 8004a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ff80 	bl	8004960 <__NVIC_SetPriority>
}
 8004a60:	bf00      	nop
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ff54 	bl	8004924 <__NVIC_EnableIRQ>
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7ff fee6 	bl	8004860 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e099      	b.n	8004bd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac0:	e00f      	b.n	8004ae2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac2:	f7ff fecd 	bl	8004860 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b05      	cmp	r3, #5
 8004ace:	d908      	bls.n	8004ae2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e078      	b.n	8004bd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e8      	bne.n	8004ac2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4b38      	ldr	r3, [pc, #224]	; (8004bdc <HAL_DMA_Init+0x158>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d107      	bne.n	8004b4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	4313      	orrs	r3, r2
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0307 	bic.w	r3, r3, #7
 8004b62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d117      	bne.n	8004ba6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00e      	beq.n	8004ba6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fb01 	bl	8005190 <DMA_CheckFifoParam>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2240      	movs	r2, #64	; 0x40
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e016      	b.n	8004bd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fab8 	bl	8005124 <DMA_CalcBaseAndBitshift>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	223f      	movs	r2, #63	; 0x3f
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	f010803f 	.word	0xf010803f

08004be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_DMA_Start_IT+0x26>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e040      	b.n	8004c88 <HAL_DMA_Start_IT+0xa8>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d12f      	bne.n	8004c7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa4a 	bl	80050c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	223f      	movs	r2, #63	; 0x3f
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0216 	orr.w	r2, r2, #22
 8004c4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e005      	b.n	8004c86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
 8004c84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c9e:	f7ff fddf 	bl	8004860 <HAL_GetTick>
 8004ca2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d008      	beq.n	8004cc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e052      	b.n	8004d68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0216 	bic.w	r2, r2, #22
 8004cd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <HAL_DMA_Abort+0x62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0208 	bic.w	r2, r2, #8
 8004d00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d12:	e013      	b.n	8004d3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d14:	f7ff fda4 	bl	8004860 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d90c      	bls.n	8004d3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e015      	b.n	8004d68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e4      	bne.n	8004d14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	223f      	movs	r2, #63	; 0x3f
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d004      	beq.n	8004d8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2280      	movs	r2, #128	; 0x80
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e00c      	b.n	8004da8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2205      	movs	r2, #5
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004dc0:	4b8e      	ldr	r3, [pc, #568]	; (8004ffc <HAL_DMA_IRQHandler+0x248>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a8e      	ldr	r2, [pc, #568]	; (8005000 <HAL_DMA_IRQHandler+0x24c>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	2208      	movs	r2, #8
 8004de0:	409a      	lsls	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01a      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0204 	bic.w	r2, r2, #4
 8004e06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2201      	movs	r2, #1
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	2201      	movs	r2, #1
 8004e44:	409a      	lsls	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f043 0202 	orr.w	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d012      	beq.n	8004e8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	2204      	movs	r2, #4
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	2210      	movs	r2, #16
 8004e92:	409a      	lsls	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d043      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03c      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	2210      	movs	r2, #16
 8004eb0:	409a      	lsls	r2, r3
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d018      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d108      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d024      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	4798      	blx	r3
 8004ee2:	e01f      	b.n	8004f24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
 8004ef4:	e016      	b.n	8004f24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0208 	bic.w	r2, r2, #8
 8004f12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	2220      	movs	r2, #32
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 808f 	beq.w	8005054 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8087 	beq.w	8005054 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d136      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0216 	bic.w	r2, r2, #22
 8004f6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_DMA_IRQHandler+0x1da>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0208 	bic.w	r2, r2, #8
 8004f9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	223f      	movs	r2, #63	; 0x3f
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d07e      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
        }
        return;
 8004fca:	e079      	b.n	80050c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d031      	beq.n	8005054 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
 8004ff8:	e02c      	b.n	8005054 <HAL_DMA_IRQHandler+0x2a0>
 8004ffa:	bf00      	nop
 8004ffc:	20000088 	.word	0x20000088
 8005000:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d023      	beq.n	8005054 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
 8005014:	e01e      	b.n	8005054 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0210 	bic.w	r2, r2, #16
 8005032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	2b00      	cmp	r3, #0
 800505a:	d032      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d022      	beq.n	80050ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2205      	movs	r2, #5
 800506c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	3301      	adds	r3, #1
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	429a      	cmp	r2, r3
 800508a:	d307      	bcc.n	800509c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f2      	bne.n	8005080 <HAL_DMA_IRQHandler+0x2cc>
 800509a:	e000      	b.n	800509e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800509c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
 80050be:	e000      	b.n	80050c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80050c0:	bf00      	nop
    }
  }
}
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d108      	bne.n	8005108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005106:	e007      	b.n	8005118 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	3b10      	subs	r3, #16
 8005134:	4a14      	ldr	r2, [pc, #80]	; (8005188 <DMA_CalcBaseAndBitshift+0x64>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <DMA_CalcBaseAndBitshift+0x68>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d909      	bls.n	8005166 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	659a      	str	r2, [r3, #88]	; 0x58
 8005164:	e007      	b.n	8005176 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	aaaaaaab 	.word	0xaaaaaaab
 800518c:	0800fa5c 	.word	0x0800fa5c

08005190 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d11f      	bne.n	80051ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d856      	bhi.n	800525e <DMA_CheckFifoParam+0xce>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <DMA_CheckFifoParam+0x28>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051c9 	.word	0x080051c9
 80051bc:	080051db 	.word	0x080051db
 80051c0:	080051c9 	.word	0x080051c9
 80051c4:	0800525f 	.word	0x0800525f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d046      	beq.n	8005262 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d8:	e043      	b.n	8005262 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051e2:	d140      	bne.n	8005266 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e8:	e03d      	b.n	8005266 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f2:	d121      	bne.n	8005238 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d837      	bhi.n	800526a <DMA_CheckFifoParam+0xda>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <DMA_CheckFifoParam+0x70>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005211 	.word	0x08005211
 8005204:	08005217 	.word	0x08005217
 8005208:	08005211 	.word	0x08005211
 800520c:	08005229 	.word	0x08005229
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
      break;
 8005214:	e030      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d025      	beq.n	800526e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005226:	e022      	b.n	800526e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005230:	d11f      	bne.n	8005272 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005236:	e01c      	b.n	8005272 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d903      	bls.n	8005246 <DMA_CheckFifoParam+0xb6>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d003      	beq.n	800524c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005244:	e018      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
      break;
 800524a:	e015      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
      break;
 800525c:	e00b      	b.n	8005276 <DMA_CheckFifoParam+0xe6>
      break;
 800525e:	bf00      	nop
 8005260:	e00a      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      break;
 8005262:	bf00      	nop
 8005264:	e008      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      break;
 8005266:	bf00      	nop
 8005268:	e006      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      break;
 800526a:	bf00      	nop
 800526c:	e004      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      break;
 800526e:	bf00      	nop
 8005270:	e002      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      break;   
 8005272:	bf00      	nop
 8005274:	e000      	b.n	8005278 <DMA_CheckFifoParam+0xe8>
      break;
 8005276:	bf00      	nop
    }
  } 
  
  return status; 
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop

08005288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e16b      	b.n	800557c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a4:	2201      	movs	r2, #1
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4013      	ands	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	429a      	cmp	r2, r3
 80052be:	f040 815a 	bne.w	8005576 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d005      	beq.n	80052da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d130      	bne.n	800533c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	2203      	movs	r2, #3
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4013      	ands	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005310:	2201      	movs	r2, #1
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 0201 	and.w	r2, r3, #1
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b03      	cmp	r3, #3
 8005346:	d017      	beq.n	8005378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	2203      	movs	r2, #3
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d123      	bne.n	80053cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	08da      	lsrs	r2, r3, #3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3208      	adds	r2, #8
 800538c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	220f      	movs	r2, #15
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	08da      	lsrs	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3208      	adds	r2, #8
 80053c6:	69b9      	ldr	r1, [r7, #24]
 80053c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	2203      	movs	r2, #3
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4013      	ands	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0203 	and.w	r2, r3, #3
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80b4 	beq.w	8005576 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	4b60      	ldr	r3, [pc, #384]	; (8005594 <HAL_GPIO_Init+0x30c>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	4a5f      	ldr	r2, [pc, #380]	; (8005594 <HAL_GPIO_Init+0x30c>)
 8005418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800541c:	6453      	str	r3, [r2, #68]	; 0x44
 800541e:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <HAL_GPIO_Init+0x30c>)
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800542a:	4a5b      	ldr	r2, [pc, #364]	; (8005598 <HAL_GPIO_Init+0x310>)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	3302      	adds	r3, #2
 8005432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	220f      	movs	r2, #15
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4013      	ands	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a52      	ldr	r2, [pc, #328]	; (800559c <HAL_GPIO_Init+0x314>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02b      	beq.n	80054ae <HAL_GPIO_Init+0x226>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a51      	ldr	r2, [pc, #324]	; (80055a0 <HAL_GPIO_Init+0x318>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d025      	beq.n	80054aa <HAL_GPIO_Init+0x222>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a50      	ldr	r2, [pc, #320]	; (80055a4 <HAL_GPIO_Init+0x31c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01f      	beq.n	80054a6 <HAL_GPIO_Init+0x21e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a4f      	ldr	r2, [pc, #316]	; (80055a8 <HAL_GPIO_Init+0x320>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d019      	beq.n	80054a2 <HAL_GPIO_Init+0x21a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a4e      	ldr	r2, [pc, #312]	; (80055ac <HAL_GPIO_Init+0x324>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <HAL_GPIO_Init+0x216>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a4d      	ldr	r2, [pc, #308]	; (80055b0 <HAL_GPIO_Init+0x328>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00d      	beq.n	800549a <HAL_GPIO_Init+0x212>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a4c      	ldr	r2, [pc, #304]	; (80055b4 <HAL_GPIO_Init+0x32c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <HAL_GPIO_Init+0x20e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a4b      	ldr	r2, [pc, #300]	; (80055b8 <HAL_GPIO_Init+0x330>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <HAL_GPIO_Init+0x20a>
 800548e:	2307      	movs	r3, #7
 8005490:	e00e      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 8005492:	2308      	movs	r3, #8
 8005494:	e00c      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 8005496:	2306      	movs	r3, #6
 8005498:	e00a      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 800549a:	2305      	movs	r3, #5
 800549c:	e008      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 800549e:	2304      	movs	r3, #4
 80054a0:	e006      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 80054a2:	2303      	movs	r3, #3
 80054a4:	e004      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e002      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <HAL_GPIO_Init+0x228>
 80054ae:	2300      	movs	r3, #0
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	f002 0203 	and.w	r2, r2, #3
 80054b6:	0092      	lsls	r2, r2, #2
 80054b8:	4093      	lsls	r3, r2
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054c0:	4935      	ldr	r1, [pc, #212]	; (8005598 <HAL_GPIO_Init+0x310>)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	3302      	adds	r3, #2
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ce:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <HAL_GPIO_Init+0x334>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054f2:	4a32      	ldr	r2, [pc, #200]	; (80055bc <HAL_GPIO_Init+0x334>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054f8:	4b30      	ldr	r3, [pc, #192]	; (80055bc <HAL_GPIO_Init+0x334>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800551c:	4a27      	ldr	r2, [pc, #156]	; (80055bc <HAL_GPIO_Init+0x334>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005522:	4b26      	ldr	r3, [pc, #152]	; (80055bc <HAL_GPIO_Init+0x334>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005546:	4a1d      	ldr	r2, [pc, #116]	; (80055bc <HAL_GPIO_Init+0x334>)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <HAL_GPIO_Init+0x334>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005570:	4a12      	ldr	r2, [pc, #72]	; (80055bc <HAL_GPIO_Init+0x334>)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3301      	adds	r3, #1
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	f67f ae90 	bls.w	80052a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3724      	adds	r7, #36	; 0x24
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800
 8005598:	40013800 	.word	0x40013800
 800559c:	40020000 	.word	0x40020000
 80055a0:	40020400 	.word	0x40020400
 80055a4:	40020800 	.word	0x40020800
 80055a8:	40020c00 	.word	0x40020c00
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40021400 	.word	0x40021400
 80055b4:	40021800 	.word	0x40021800
 80055b8:	40021c00 	.word	0x40021c00
 80055bc:	40013c00 	.word	0x40013c00

080055c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	807b      	strh	r3, [r7, #2]
 80055cc:	4613      	mov	r3, r2
 80055ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055d0:	787b      	ldrb	r3, [r7, #1]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055dc:	e003      	b.n	80055e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055de:	887b      	ldrh	r3, [r7, #2]
 80055e0:	041a      	lsls	r2, r3, #16
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	619a      	str	r2, [r3, #24]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005604:	887a      	ldrh	r2, [r7, #2]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4013      	ands	r3, r2
 800560a:	041a      	lsls	r2, r3, #16
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	43d9      	mvns	r1, r3
 8005610:	887b      	ldrh	r3, [r7, #2]
 8005612:	400b      	ands	r3, r1
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	619a      	str	r2, [r3, #24]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e03e      	b.n	80056ba <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7fe ff8d 	bl	8004570 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3304      	adds	r3, #4
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f003 fcbd 	bl	8008fe0 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	461a      	mov	r2, r3
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	f003 fd01 	bl	8009078 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	461a      	mov	r2, r3
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	f003 fd2e 	bl	80090e2 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b10      	cmp	r3, #16
 800568c:	d108      	bne.n	80056a0 <HAL_NAND_Init+0x7a>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0204 	orr.w	r2, r2, #4
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e007      	b.n	80056b0 <HAL_NAND_Init+0x8a>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a1a      	ldr	r2, [r3, #32]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0204 	orr.w	r2, r2, #4
 80056ae:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d10a      	bne.n	80056e8 <HAL_NAND_IRQHandler+0x26>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e009      	b.n	80056fc <HAL_NAND_IRQHandler+0x3a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8b2 	bl	800586a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b10      	cmp	r3, #16
 800570c:	d108      	bne.n	8005720 <HAL_NAND_IRQHandler+0x5e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e007      	b.n	8005730 <HAL_NAND_IRQHandler+0x6e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b10      	cmp	r3, #16
 8005736:	d10a      	bne.n	800574e <HAL_NAND_IRQHandler+0x8c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e009      	b.n	8005762 <HAL_NAND_IRQHandler+0xa0>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d017      	beq.n	8005796 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f87f 	bl	800586a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b10      	cmp	r3, #16
 8005772:	d108      	bne.n	8005786 <HAL_NAND_IRQHandler+0xc4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0202 	bic.w	r2, r2, #2
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	e007      	b.n	8005796 <HAL_NAND_IRQHandler+0xd4>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0202 	bic.w	r2, r2, #2
 8005794:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b10      	cmp	r3, #16
 800579c:	d10a      	bne.n	80057b4 <HAL_NAND_IRQHandler+0xf2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e009      	b.n	80057c8 <HAL_NAND_IRQHandler+0x106>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f84c 	bl	800586a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d108      	bne.n	80057ec <HAL_NAND_IRQHandler+0x12a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0204 	bic.w	r2, r2, #4
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e007      	b.n	80057fc <HAL_NAND_IRQHandler+0x13a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0204 	bic.w	r2, r2, #4
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b10      	cmp	r3, #16
 8005802:	d10a      	bne.n	800581a <HAL_NAND_IRQHandler+0x158>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	bf0c      	ite	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	2300      	movne	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e009      	b.n	800582e <HAL_NAND_IRQHandler+0x16c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d017      	beq.n	8005862 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f819 	bl	800586a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b10      	cmp	r3, #16
 800583e:	d108      	bne.n	8005852 <HAL_NAND_IRQHandler+0x190>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584e:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005850:	e007      	b.n	8005862 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d101      	bne.n	8005898 <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
 8005896:	e089      	b.n	80059ac <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f040 8082 	bne.w	80059aa <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_NAND_Erase_Block+0x36>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e07b      	b.n	80059ac <HAL_NAND_Erase_Block+0x12e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 80058c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80058c8:	60fb      	str	r3, [r7, #12]
#endif

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	2260      	movs	r2, #96	; 0x60
 80058d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058d4:	f3bf 8f4f 	dsb	sy
}
 80058d8:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	889b      	ldrh	r3, [r3, #4]
 80058e4:	4619      	mov	r1, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	4618      	mov	r0, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	fb00 f303 	mul.w	r3, r0, r3
 80058f4:	440b      	add	r3, r1
 80058f6:	b2d9      	uxtb	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	fb11 f303 	smulbb	r3, r1, r3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800590a:	4413      	add	r3, r2
 800590c:	b2db      	uxtb	r3, r3
 800590e:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005910:	f3bf 8f4f 	dsb	sy
}
 8005914:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	4619      	mov	r1, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	889b      	ldrh	r3, [r3, #4]
 8005920:	461a      	mov	r2, r3
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	885b      	ldrh	r3, [r3, #2]
 8005926:	4618      	mov	r0, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	fb00 f303 	mul.w	r3, r0, r3
 8005930:	4413      	add	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	440b      	add	r3, r1
 800593c:	0a1a      	lsrs	r2, r3, #8
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005948:	f3bf 8f4f 	dsb	sy
}
 800594c:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	889b      	ldrh	r3, [r3, #4]
 8005958:	461a      	mov	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	885b      	ldrh	r3, [r3, #2]
 800595e:	4618      	mov	r0, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	fb00 f303 	mul.w	r3, r0, r3
 8005968:	4413      	add	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	440b      	add	r3, r1
 8005974:	0c1a      	lsrs	r2, r3, #16
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005980:	f3bf 8f4f 	dsb	sy
}
 8005984:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	22d0      	movs	r2, #208	; 0xd0
 800598e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005990:	f3bf 8f4f 	dsb	sy
}
 8005994:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	e000      	b.n	80059ac <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  return hnand->State;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059c6:	b2db      	uxtb	r3, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 80059dc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80059e0:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	2270      	movs	r2, #112	; 0x70
 80059ea:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e007      	b.n	8005a12 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	e000      	b.n	8005a12 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005a10:	2300      	movs	r3, #0
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e267      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d075      	beq.n	8005b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a3e:	4b88      	ldr	r3, [pc, #544]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d00c      	beq.n	8005a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4a:	4b85      	ldr	r3, [pc, #532]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d112      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4b82      	ldr	r3, [pc, #520]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a62:	d10b      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	4b7e      	ldr	r3, [pc, #504]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05b      	beq.n	8005b28 <HAL_RCC_OscConfig+0x108>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d157      	bne.n	8005b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e242      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_OscConfig+0x74>
 8005a86:	4b76      	ldr	r3, [pc, #472]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a75      	ldr	r2, [pc, #468]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e01d      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x98>
 8005a9e:	4b70      	ldr	r3, [pc, #448]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6f      	ldr	r2, [pc, #444]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6c      	ldr	r2, [pc, #432]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005ab8:	4b69      	ldr	r3, [pc, #420]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a68      	ldr	r2, [pc, #416]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4b66      	ldr	r3, [pc, #408]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a65      	ldr	r2, [pc, #404]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fe fec2 	bl	8004860 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fe febe 	bl	8004860 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	; 0x64
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e207      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	4b5b      	ldr	r3, [pc, #364]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xc0>
 8005afe:	e014      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fe feae 	bl	8004860 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fe feaa 	bl	8004860 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e1f3      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	4b51      	ldr	r3, [pc, #324]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0xe8>
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d063      	beq.n	8005bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b42:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d11c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b44      	ldr	r3, [pc, #272]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d116      	bne.n	8005b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5a:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_RCC_OscConfig+0x152>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e1c7      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b72:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4937      	ldr	r1, [pc, #220]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	e03a      	b.n	8005bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b90:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <HAL_RCC_OscConfig+0x244>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b96:	f7fe fe63 	bl	8004860 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fe fe5f 	bl	8004860 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e1a8      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4925      	ldr	r1, [pc, #148]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
 8005bd0:	e015      	b.n	8005bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd2:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <HAL_RCC_OscConfig+0x244>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fe fe42 	bl	8004860 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be0:	f7fe fe3e 	bl	8004860 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e187      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d036      	beq.n	8005c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <HAL_RCC_OscConfig+0x248>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fe fe22 	bl	8004860 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c20:	f7fe fe1e 	bl	8004860 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e167      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x200>
 8005c3e:	e01b      	b.n	8005c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_OscConfig+0x248>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c46:	f7fe fe0b 	bl	8004860 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c4c:	e00e      	b.n	8005c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c4e:	f7fe fe07 	bl	8004860 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d907      	bls.n	8005c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e150      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
 8005c60:	40023800 	.word	0x40023800
 8005c64:	42470000 	.word	0x42470000
 8005c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6c:	4b88      	ldr	r3, [pc, #544]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ea      	bne.n	8005c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8097 	beq.w	8005db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8a:	4b81      	ldr	r3, [pc, #516]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b7d      	ldr	r3, [pc, #500]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	4a7c      	ldr	r2, [pc, #496]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca6:	4b7a      	ldr	r3, [pc, #488]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b77      	ldr	r3, [pc, #476]	; (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b74      	ldr	r3, [pc, #464]	; (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a73      	ldr	r2, [pc, #460]	; (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fe fdc7 	bl	8004860 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fe fdc3 	bl	8004860 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e10c      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce8:	4b6a      	ldr	r3, [pc, #424]	; (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x2ea>
 8005cfc:	4b64      	ldr	r3, [pc, #400]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	4a63      	ldr	r2, [pc, #396]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
 8005d08:	e01c      	b.n	8005d44 <HAL_RCC_OscConfig+0x324>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x30c>
 8005d12:	4b5f      	ldr	r3, [pc, #380]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d16:	4a5e      	ldr	r2, [pc, #376]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1e:	4b5c      	ldr	r3, [pc, #368]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	4a5b      	ldr	r2, [pc, #364]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6713      	str	r3, [r2, #112]	; 0x70
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0x324>
 8005d2c:	4b58      	ldr	r3, [pc, #352]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	4a57      	ldr	r2, [pc, #348]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6713      	str	r3, [r2, #112]	; 0x70
 8005d38:	4b55      	ldr	r3, [pc, #340]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a54      	ldr	r2, [pc, #336]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	f023 0304 	bic.w	r3, r3, #4
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4c:	f7fe fd88 	bl	8004860 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d54:	f7fe fd84 	bl	8004860 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e0cb      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6a:	4b49      	ldr	r3, [pc, #292]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ee      	beq.n	8005d54 <HAL_RCC_OscConfig+0x334>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d78:	f7fe fd72 	bl	8004860 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d80:	f7fe fd6e 	bl	8004860 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0b5      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d96:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ee      	bne.n	8005d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da8:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	4a38      	ldr	r2, [pc, #224]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80a1 	beq.w	8005f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dbe:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d05c      	beq.n	8005e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d141      	bne.n	8005e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd2:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fe fd42 	bl	8004860 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de0:	f7fe fd3e 	bl	8004860 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e087      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	019b      	lsls	r3, r3, #6
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	3b01      	subs	r3, #1
 8005e18:	041b      	lsls	r3, r3, #16
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	061b      	lsls	r3, r3, #24
 8005e22:	491b      	ldr	r1, [pc, #108]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2e:	f7fe fd17 	bl	8004860 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e36:	f7fe fd13 	bl	8004860 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e05c      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x416>
 8005e54:	e054      	b.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fe fd00 	bl	8004860 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fe fcfc 	bl	8004860 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e045      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x444>
 8005e82:	e03d      	b.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e038      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40007000 	.word	0x40007000
 8005e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <HAL_RCC_OscConfig+0x4ec>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d028      	beq.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d121      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d11a      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d111      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800

08005f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0cc      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f24:	4b68      	ldr	r3, [pc, #416]	; (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d90c      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b65      	ldr	r3, [pc, #404]	; (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b63      	ldr	r3, [pc, #396]	; (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0b8      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f64:	4b59      	ldr	r3, [pc, #356]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a58      	ldr	r2, [pc, #352]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f7c:	4b53      	ldr	r3, [pc, #332]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a52      	ldr	r2, [pc, #328]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b50      	ldr	r3, [pc, #320]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	494d      	ldr	r1, [pc, #308]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d044      	beq.n	8006030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b47      	ldr	r3, [pc, #284]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d119      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d003      	beq.n	8005fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d107      	bne.n	8005fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fce:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e06f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fde:	4b3b      	ldr	r3, [pc, #236]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e067      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	4934      	ldr	r1, [pc, #208]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006000:	f7fe fc2e 	bl	8004860 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006006:	e00a      	b.n	800601e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006008:	f7fe fc2a 	bl	8004860 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e04f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	4b2b      	ldr	r3, [pc, #172]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 020c 	and.w	r2, r3, #12
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	429a      	cmp	r2, r3
 800602e:	d1eb      	bne.n	8006008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006030:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d20c      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e032      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b19      	ldr	r3, [pc, #100]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4916      	ldr	r1, [pc, #88]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	490e      	ldr	r1, [pc, #56]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	4313      	orrs	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006096:	f000 f821 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490a      	ldr	r1, [pc, #40]	; (80060d0 <HAL_RCC_ClockConfig+0x1c0>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_RCC_ClockConfig+0x1c8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe fa64 	bl	8004584 <HAL_InitTick>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40023c00 	.word	0x40023c00
 80060cc:	40023800 	.word	0x40023800
 80060d0:	0800fa44 	.word	0x0800fa44
 80060d4:	20000088 	.word	0x20000088
 80060d8:	2000008c 	.word	0x2000008c

080060dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b094      	sub	sp, #80	; 0x50
 80060e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	647b      	str	r3, [r7, #68]	; 0x44
 80060e8:	2300      	movs	r3, #0
 80060ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ec:	2300      	movs	r3, #0
 80060ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060f4:	4b79      	ldr	r3, [pc, #484]	; (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 030c 	and.w	r3, r3, #12
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d00d      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x40>
 8006100:	2b08      	cmp	r3, #8
 8006102:	f200 80e1 	bhi.w	80062c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_RCC_GetSysClockFreq+0x34>
 800610a:	2b04      	cmp	r3, #4
 800610c:	d003      	beq.n	8006116 <HAL_RCC_GetSysClockFreq+0x3a>
 800610e:	e0db      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006110:	4b73      	ldr	r3, [pc, #460]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006112:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006114:	e0db      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006116:	4b73      	ldr	r3, [pc, #460]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800611a:	e0d8      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800611c:	4b6f      	ldr	r3, [pc, #444]	; (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006124:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006126:	4b6d      	ldr	r3, [pc, #436]	; (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d063      	beq.n	80061fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006132:	4b6a      	ldr	r3, [pc, #424]	; (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	2200      	movs	r2, #0
 800613a:	63bb      	str	r3, [r7, #56]	; 0x38
 800613c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	633b      	str	r3, [r7, #48]	; 0x30
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
 800614a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f04f 0100 	mov.w	r1, #0
 800615a:	0159      	lsls	r1, r3, #5
 800615c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006160:	0150      	lsls	r0, r2, #5
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4621      	mov	r1, r4
 8006168:	1a51      	subs	r1, r2, r1
 800616a:	6139      	str	r1, [r7, #16]
 800616c:	4629      	mov	r1, r5
 800616e:	eb63 0301 	sbc.w	r3, r3, r1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006180:	4659      	mov	r1, fp
 8006182:	018b      	lsls	r3, r1, #6
 8006184:	4651      	mov	r1, sl
 8006186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800618a:	4651      	mov	r1, sl
 800618c:	018a      	lsls	r2, r1, #6
 800618e:	4651      	mov	r1, sl
 8006190:	ebb2 0801 	subs.w	r8, r2, r1
 8006194:	4659      	mov	r1, fp
 8006196:	eb63 0901 	sbc.w	r9, r3, r1
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	eb18 0303 	adds.w	r3, r8, r3
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	462b      	mov	r3, r5
 80061bc:	eb49 0303 	adc.w	r3, r9, r3
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061ce:	4629      	mov	r1, r5
 80061d0:	024b      	lsls	r3, r1, #9
 80061d2:	4621      	mov	r1, r4
 80061d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061d8:	4621      	mov	r1, r4
 80061da:	024a      	lsls	r2, r1, #9
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e2:	2200      	movs	r2, #0
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ec:	f7fa fb9e 	bl	800092c <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4613      	mov	r3, r2
 80061f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f8:	e058      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061fa:	4b38      	ldr	r3, [pc, #224]	; (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	099b      	lsrs	r3, r3, #6
 8006200:	2200      	movs	r2, #0
 8006202:	4618      	mov	r0, r3
 8006204:	4611      	mov	r1, r2
 8006206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
 8006210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	f04f 0000 	mov.w	r0, #0
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	0159      	lsls	r1, r3, #5
 8006222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006226:	0150      	lsls	r0, r2, #5
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4641      	mov	r1, r8
 800622e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006232:	4649      	mov	r1, r9
 8006234:	eb63 0b01 	sbc.w	fp, r3, r1
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800624c:	ebb2 040a 	subs.w	r4, r2, sl
 8006250:	eb63 050b 	sbc.w	r5, r3, fp
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	00eb      	lsls	r3, r5, #3
 800625e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006262:	00e2      	lsls	r2, r4, #3
 8006264:	4614      	mov	r4, r2
 8006266:	461d      	mov	r5, r3
 8006268:	4643      	mov	r3, r8
 800626a:	18e3      	adds	r3, r4, r3
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	464b      	mov	r3, r9
 8006270:	eb45 0303 	adc.w	r3, r5, r3
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006282:	4629      	mov	r1, r5
 8006284:	028b      	lsls	r3, r1, #10
 8006286:	4621      	mov	r1, r4
 8006288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800628c:	4621      	mov	r1, r4
 800628e:	028a      	lsls	r2, r1, #10
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006296:	2200      	movs	r2, #0
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a0:	f7fa fb44 	bl	800092c <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4613      	mov	r3, r2
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	3301      	adds	r3, #1
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062c6:	e002      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3750      	adds	r7, #80	; 0x50
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062da:	bf00      	nop
 80062dc:	40023800 	.word	0x40023800
 80062e0:	00f42400 	.word	0x00f42400
 80062e4:	007a1200 	.word	0x007a1200

080062e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000088 	.word	0x20000088

08006300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006304:	f7ff fff0 	bl	80062e8 <HAL_RCC_GetHCLKFreq>
 8006308:	4602      	mov	r2, r0
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	0a9b      	lsrs	r3, r3, #10
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	4903      	ldr	r1, [pc, #12]	; (8006324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006316:	5ccb      	ldrb	r3, [r1, r3]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40023800 	.word	0x40023800
 8006324:	0800fa54 	.word	0x0800fa54

08006328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800632c:	f7ff ffdc 	bl	80062e8 <HAL_RCC_GetHCLKFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0b5b      	lsrs	r3, r3, #13
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	4903      	ldr	r1, [pc, #12]	; (800634c <HAL_RCC_GetPCLK2Freq+0x24>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40023800 	.word	0x40023800
 800634c:	0800fa54 	.word	0x0800fa54

08006350 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	220f      	movs	r2, #15
 800635e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006360:	4b12      	ldr	r3, [pc, #72]	; (80063ac <HAL_RCC_GetClockConfig+0x5c>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0203 	and.w	r2, r3, #3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <HAL_RCC_GetClockConfig+0x5c>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <HAL_RCC_GetClockConfig+0x5c>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006384:	4b09      	ldr	r3, [pc, #36]	; (80063ac <HAL_RCC_GetClockConfig+0x5c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	08db      	lsrs	r3, r3, #3
 800638a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006392:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <HAL_RCC_GetClockConfig+0x60>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0207 	and.w	r2, r3, #7
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	601a      	str	r2, [r3, #0]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40023800 	.word	0x40023800
 80063b0:	40023c00 	.word	0x40023c00

080063b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d035      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063dc:	4b62      	ldr	r3, [pc, #392]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063e2:	f7fe fa3d 	bl	8004860 <HAL_GetTick>
 80063e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063ea:	f7fe fa39 	bl	8004860 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e0b0      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063fc:	4b5b      	ldr	r3, [pc, #364]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f0      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	019a      	lsls	r2, r3, #6
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	071b      	lsls	r3, r3, #28
 8006414:	4955      	ldr	r1, [pc, #340]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800641c:	4b52      	ldr	r3, [pc, #328]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006422:	f7fe fa1d 	bl	8004860 <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006428:	e008      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800642a:	f7fe fa19 	bl	8004860 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e090      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800643c:	4b4b      	ldr	r3, [pc, #300]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8083 	beq.w	800655c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	4b44      	ldr	r3, [pc, #272]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	4a43      	ldr	r2, [pc, #268]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006464:	6413      	str	r3, [r2, #64]	; 0x40
 8006466:	4b41      	ldr	r3, [pc, #260]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006472:	4b3f      	ldr	r3, [pc, #252]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3e      	ldr	r2, [pc, #248]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800647e:	f7fe f9ef 	bl	8004860 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006486:	f7fe f9eb 	bl	8004860 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e062      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006498:	4b35      	ldr	r3, [pc, #212]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064a4:	4b31      	ldr	r3, [pc, #196]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d02f      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d028      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064c2:	4b2a      	ldr	r3, [pc, #168]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064cc:	4b29      	ldr	r3, [pc, #164]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064d2:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064d8:	4a24      	ldr	r2, [pc, #144]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064de:	4b23      	ldr	r3, [pc, #140]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d114      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fe f9b9 	bl	8004860 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f0:	e00a      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f2:	f7fe f9b5 	bl	8004860 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e02a      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006508:	4b18      	ldr	r3, [pc, #96]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0ee      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006520:	d10d      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006536:	490d      	ldr	r1, [pc, #52]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]
 800653c:	e005      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	4a0a      	ldr	r2, [pc, #40]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006544:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006548:	6093      	str	r3, [r2, #8]
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006556:	4905      	ldr	r1, [pc, #20]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006558:	4313      	orrs	r3, r2
 800655a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	42470068 	.word	0x42470068
 800656c:	40023800 	.word	0x40023800
 8006570:	40007000 	.word	0x40007000
 8006574:	42470e40 	.word	0x42470e40

08006578 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e066      	b.n	800665c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7f5b      	ldrb	r3, [r3, #29]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fd fe30 	bl	8004204 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	22ca      	movs	r2, #202	; 0xca
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2253      	movs	r2, #83	; 0x53
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa45 	bl	8006a4a <RTC_EnterInitMode>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d12c      	bne.n	8006624 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065dc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6899      	ldr	r1, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	68d2      	ldr	r2, [r2, #12]
 8006604:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6919      	ldr	r1, [r3, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	041a      	lsls	r2, r3, #16
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa4c 	bl	8006ab8 <RTC_ExitInitMode>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d113      	bne.n	8006652 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	22ff      	movs	r2, #255	; 0xff
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006664:	b590      	push	{r4, r7, lr}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	7f1b      	ldrb	r3, [r3, #28]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_RTC_SetTime+0x1c>
 800667c:	2302      	movs	r3, #2
 800667e:	e087      	b.n	8006790 <HAL_RTC_SetTime+0x12c>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2202      	movs	r2, #2
 800668a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d126      	bne.n	80066e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa29 	bl	8006b02 <RTC_ByteToBcd2>
 80066b0:	4603      	mov	r3, r0
 80066b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fa22 	bl	8006b02 <RTC_ByteToBcd2>
 80066be:	4603      	mov	r3, r0
 80066c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	789b      	ldrb	r3, [r3, #2]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fa1a 	bl	8006b02 <RTC_ByteToBcd2>
 80066ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	78db      	ldrb	r3, [r3, #3]
 80066d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	e018      	b.n	8006712 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006700:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006706:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	22ca      	movs	r2, #202	; 0xca
 8006718:	625a      	str	r2, [r3, #36]	; 0x24
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2253      	movs	r2, #83	; 0x53
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f991 	bl	8006a4a <RTC_EnterInitMode>
 8006728:	4603      	mov	r3, r0
 800672a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d120      	bne.n	8006774 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800673c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006740:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006750:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6899      	ldr	r1, [r3, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f9a4 	bl	8006ab8 <RTC_ExitInitMode>
 8006770:	4603      	mov	r3, r0
 8006772:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006774:	7cfb      	ldrb	r3, [r7, #19]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	771a      	strb	r2, [r3, #28]

  return status;
 800678e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006790:	4618      	mov	r0, r3
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}

08006798 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80067ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80067ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	0d9b      	lsrs	r3, r3, #22
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11a      	bne.n	800684a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f98f 	bl	8006b3c <RTC_Bcd2ToByte>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f986 	bl	8006b3c <RTC_Bcd2ToByte>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	789b      	ldrb	r3, [r3, #2]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 f97d 	bl	8006b3c <RTC_Bcd2ToByte>
 8006842:	4603      	mov	r3, r0
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	7f1b      	ldrb	r3, [r3, #28]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_RTC_SetDate+0x1c>
 800686c:	2302      	movs	r3, #2
 800686e:	e071      	b.n	8006954 <HAL_RTC_SetDate+0x100>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2202      	movs	r2, #2
 800687a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_RTC_SetDate+0x4c>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	f023 0310 	bic.w	r3, r3, #16
 8006896:	b2db      	uxtb	r3, r3
 8006898:	330a      	adds	r3, #10
 800689a:	b2da      	uxtb	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d11c      	bne.n	80068e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	78db      	ldrb	r3, [r3, #3]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f929 	bl	8006b02 <RTC_ByteToBcd2>
 80068b0:	4603      	mov	r3, r0
 80068b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f922 	bl	8006b02 <RTC_ByteToBcd2>
 80068be:	4603      	mov	r3, r0
 80068c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	789b      	ldrb	r3, [r3, #2]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f91a 	bl	8006b02 <RTC_ByteToBcd2>
 80068ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e00e      	b.n	80068fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068ec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80068f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	22ca      	movs	r2, #202	; 0xca
 8006904:	625a      	str	r2, [r3, #36]	; 0x24
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2253      	movs	r2, #83	; 0x53
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f89b 	bl	8006a4a <RTC_EnterInitMode>
 8006914:	4603      	mov	r3, r0
 8006916:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006918:	7cfb      	ldrb	r3, [r7, #19]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10c      	bne.n	8006938 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006928:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800692c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f8c2 	bl	8006ab8 <RTC_ExitInitMode>
 8006934:	4603      	mov	r3, r0
 8006936:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	22ff      	movs	r2, #255	; 0xff
 800694a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	771a      	strb	r2, [r3, #28]

  return status;
 8006952:	7cfb      	ldrb	r3, [r7, #19]
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd90      	pop	{r4, r7, pc}

0800695c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006976:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800697a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	b2da      	uxtb	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	0b5b      	lsrs	r3, r3, #13
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11a      	bne.n	80069f0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	78db      	ldrb	r3, [r3, #3]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f8bc 	bl	8006b3c <RTC_Bcd2ToByte>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f8b3 	bl	8006b3c <RTC_Bcd2ToByte>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	789b      	ldrb	r3, [r3, #2]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f8aa 	bl	8006b3c <RTC_Bcd2ToByte>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a14:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a16:	f7fd ff23 	bl	8004860 <HAL_GetTick>
 8006a1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a1c:	e009      	b.n	8006a32 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a1e:	f7fd ff1f 	bl	8004860 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2c:	d901      	bls.n	8006a32 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e007      	b.n	8006a42 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ee      	beq.n	8006a1e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d122      	bne.n	8006aae <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a78:	f7fd fef2 	bl	8004860 <HAL_GetTick>
 8006a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a7e:	e00c      	b.n	8006a9a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a80:	f7fd feee 	bl	8004860 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a8e:	d904      	bls.n	8006a9a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2204      	movs	r2, #4
 8006a94:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <RTC_EnterInitMode+0x64>
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d1e8      	bne.n	8006a80 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff ff89 	bl	80069fa <HAL_RTC_WaitForSynchro>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2204      	movs	r2, #4
 8006af2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	4603      	mov	r3, r0
 8006b0a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006b10:	e005      	b.n	8006b1e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	3301      	adds	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	3b0a      	subs	r3, #10
 8006b1c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	2b09      	cmp	r3, #9
 8006b22:	d8f6      	bhi.n	8006b12 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	b2db      	uxtb	r3, r3
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	0092      	lsls	r2, r2, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	4413      	add	r3, r2
 8006b66:	b2db      	uxtb	r3, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e07b      	b.n	8006c7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d108      	bne.n	8006ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b96:	d009      	beq.n	8006bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	61da      	str	r2, [r3, #28]
 8006b9e:	e005      	b.n	8006bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fd fb48 	bl	800425c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	ea42 0103 	orr.w	r1, r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f003 0104 	and.w	r1, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f003 0210 	and.w	r2, r3, #16
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b088      	sub	sp, #32
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_SPI_Transmit+0x22>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e126      	b.n	8006ef6 <HAL_SPI_Transmit+0x270>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cb0:	f7fd fdd6 	bl	8004860 <HAL_GetTick>
 8006cb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cca:	e10b      	b.n	8006ee4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_SPI_Transmit+0x52>
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cdc:	e102      	b.n	8006ee4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d24:	d10f      	bne.n	8006d46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d007      	beq.n	8006d64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d14b      	bne.n	8006e06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_Transmit+0xf6>
 8006d76:	8afb      	ldrh	r3, [r7, #22]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d13e      	bne.n	8006dfa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	881a      	ldrh	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da0:	e02b      	b.n	8006dfa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d112      	bne.n	8006dd6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	881a      	ldrh	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dd4:	e011      	b.n	8006dfa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd6:	f7fd fd43 	bl	8004860 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d803      	bhi.n	8006dee <HAL_SPI_Transmit+0x168>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d102      	bne.n	8006df4 <HAL_SPI_Transmit+0x16e>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006df8:	e074      	b.n	8006ee4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1ce      	bne.n	8006da2 <HAL_SPI_Transmit+0x11c>
 8006e04:	e04c      	b.n	8006ea0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_SPI_Transmit+0x18e>
 8006e0e:	8afb      	ldrh	r3, [r7, #22]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d140      	bne.n	8006e96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	7812      	ldrb	r2, [r2, #0]
 8006e20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e3a:	e02c      	b.n	8006e96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d113      	bne.n	8006e72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	330c      	adds	r3, #12
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e70:	e011      	b.n	8006e96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e72:	f7fd fcf5 	bl	8004860 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d803      	bhi.n	8006e8a <HAL_SPI_Transmit+0x204>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e88:	d102      	bne.n	8006e90 <HAL_SPI_Transmit+0x20a>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e94:	e026      	b.n	8006ee4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1cd      	bne.n	8006e3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fb13 	bl	80074d0 <SPI_EndRxTxTransaction>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e000      	b.n	8006ee4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3720      	adds	r7, #32
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_SPI_Transmit_DMA+0x20>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e09b      	b.n	8007058 <HAL_SPI_Transmit_DMA+0x158>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d002      	beq.n	8006f3a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
 8006f36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f38:	e089      	b.n	800704e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_SPI_Transmit_DMA+0x46>
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f4a:	e080      	b.n	800704e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2203      	movs	r2, #3
 8006f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f92:	d10f      	bne.n	8006fb4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <HAL_SPI_Transmit_DMA+0x160>)
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <HAL_SPI_Transmit_DMA+0x164>)
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <HAL_SPI_Transmit_DMA+0x168>)
 8006fca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	4619      	mov	r1, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006fec:	f7fd fdf8 	bl	8004be0 <HAL_DMA_Start_IT>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00c      	beq.n	8007010 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f043 0210 	orr.w	r2, r3, #16
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800700e:	e01e      	b.n	800704e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d007      	beq.n	800702e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0220 	orr.w	r2, r2, #32
 800703c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0202 	orr.w	r2, r2, #2
 800704c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	0800733d 	.word	0x0800733d
 8007064:	08007295 	.word	0x08007295
 8007068:	08007359 	.word	0x08007359

0800706c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10f      	bne.n	80070b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	099b      	lsrs	r3, r3, #6
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
    return;
 80070ae:	e0d7      	b.n	8007260 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <HAL_SPI_IRQHandler+0x66>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	09db      	lsrs	r3, r3, #7
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
    return;
 80070d0:	e0c6      	b.n	8007260 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10c      	bne.n	80070f8 <HAL_SPI_IRQHandler+0x8c>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	099b      	lsrs	r3, r3, #6
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80b4 	beq.w	8007260 <HAL_SPI_IRQHandler+0x1f4>
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80ad 	beq.w	8007260 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	099b      	lsrs	r3, r3, #6
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d023      	beq.n	800715a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d011      	beq.n	8007142 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	f043 0204 	orr.w	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	e00b      	b.n	800715a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	693b      	ldr	r3, [r7, #16]
        return;
 8007158:	e082      	b.n	8007260 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d014      	beq.n	8007190 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	f043 0201 	orr.w	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a0:	f043 0208 	orr.w	r2, r3, #8
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071a8:	2300      	movs	r3, #0
 80071aa:	60bb      	str	r3, [r7, #8]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d04f      	beq.n	800725e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <HAL_SPI_IRQHandler+0x17e>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d034      	beq.n	8007254 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0203 	bic.w	r2, r2, #3
 80071f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	4a18      	ldr	r2, [pc, #96]	; (8007268 <HAL_SPI_IRQHandler+0x1fc>)
 8007208:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	4618      	mov	r0, r3
 8007210:	f7fd fdae 	bl	8004d70 <HAL_DMA_Abort_IT>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722a:	2b00      	cmp	r3, #0
 800722c:	d016      	beq.n	800725c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007232:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <HAL_SPI_IRQHandler+0x1fc>)
 8007234:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723a:	4618      	mov	r0, r3
 800723c:	f7fd fd98 	bl	8004d70 <HAL_DMA_Abort_IT>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007252:	e003      	b.n	800725c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f813 	bl	8007280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800725a:	e000      	b.n	800725e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800725c:	bf00      	nop
    return;
 800725e:	bf00      	nop
  }
}
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	08007399 	.word	0x08007399

0800726c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a2:	f7fd fadd 	bl	8004860 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b6:	d03b      	beq.n	8007330 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0220 	bic.w	r2, r2, #32
 80072c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0202 	bic.w	r2, r2, #2
 80072d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	2164      	movs	r1, #100	; 0x64
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f000 f8f7 	bl	80074d0 <SPI_EndRxTxTransaction>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f7ff ffa9 	bl	8007280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800732e:	e002      	b.n	8007336 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007330:	6978      	ldr	r0, [r7, #20]
 8007332:	f7fb fad5 	bl	80028e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ff8e 	bl	800726c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0203 	bic.w	r2, r2, #3
 8007374:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737a:	f043 0210 	orr.w	r2, r3, #16
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff ff78 	bl	8007280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff ff64 	bl	8007280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073d0:	f7fd fa46 	bl	8004860 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4413      	add	r3, r2
 80073de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073e0:	f7fd fa3e 	bl	8004860 <HAL_GetTick>
 80073e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073e6:	4b39      	ldr	r3, [pc, #228]	; (80074cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	015b      	lsls	r3, r3, #5
 80073ec:	0d1b      	lsrs	r3, r3, #20
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073f6:	e054      	b.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fe:	d050      	beq.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007400:	f7fd fa2e 	bl	8004860 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	429a      	cmp	r2, r3
 800740e:	d902      	bls.n	8007416 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d13d      	bne.n	8007492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800742e:	d111      	bne.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007438:	d004      	beq.n	8007444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007442:	d107      	bne.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745c:	d10f      	bne.n	800747e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800747c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e017      	b.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3b01      	subs	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d19b      	bne.n	80073f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000088 	.word	0x20000088

080074d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074dc:	4b1b      	ldr	r3, [pc, #108]	; (800754c <SPI_EndRxTxTransaction+0x7c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <SPI_EndRxTxTransaction+0x80>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	0d5b      	lsrs	r3, r3, #21
 80074e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074ec:	fb02 f303 	mul.w	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fa:	d112      	bne.n	8007522 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	2180      	movs	r1, #128	; 0x80
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff ff5a 	bl	80073c0 <SPI_WaitFlagStateUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e00f      	b.n	8007542 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	3b01      	subs	r3, #1
 800752c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	d0f2      	beq.n	8007522 <SPI_EndRxTxTransaction+0x52>
 800753c:	e000      	b.n	8007540 <SPI_EndRxTxTransaction+0x70>
        break;
 800753e:	bf00      	nop
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000088 	.word	0x20000088
 8007550:	165e9f81 	.word	0x165e9f81

08007554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e041      	b.n	80075ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fc fefa 	bl	8004374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f000 fa96 	bl	8007ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d001      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e04e      	b.n	80076aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a23      	ldr	r2, [pc, #140]	; (80076b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d01d      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_TIM_Base_Start_IT+0xc8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a19      	ldr	r2, [pc, #100]	; (80076cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x80>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d111      	bne.n	8007698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b06      	cmp	r3, #6
 8007684:	d010      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007696:	e007      	b.n	80076a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40010000 	.word	0x40010000
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	40010400 	.word	0x40010400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40001800 	.word	0x40001800

080076d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d122      	bne.n	8007730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d11b      	bne.n	8007730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0202 	mvn.w	r2, #2
 8007700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9b5 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9a7 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9b8 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b04      	cmp	r3, #4
 800773c:	d122      	bne.n	8007784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b04      	cmp	r3, #4
 800774a:	d11b      	bne.n	8007784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0204 	mvn.w	r2, #4
 8007754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f98b 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 8007770:	e005      	b.n	800777e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f97d 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f98e 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b08      	cmp	r3, #8
 8007790:	d122      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b08      	cmp	r3, #8
 800779e:	d11b      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0208 	mvn.w	r2, #8
 80077a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f961 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 80077c4:	e005      	b.n	80077d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f953 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f964 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d122      	bne.n	800782c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d11b      	bne.n	800782c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0210 	mvn.w	r2, #16
 80077fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2208      	movs	r2, #8
 8007802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f937 	bl	8007a86 <HAL_TIM_IC_CaptureCallback>
 8007818:	e005      	b.n	8007826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f929 	bl	8007a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f93a 	bl	8007a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b01      	cmp	r3, #1
 8007838:	d10e      	bne.n	8007858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d107      	bne.n	8007858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0201 	mvn.w	r2, #1
 8007850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fc f87e 	bl	8003954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d10e      	bne.n	8007884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007870:	2b80      	cmp	r3, #128	; 0x80
 8007872:	d107      	bne.n	8007884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800787c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fae0 	bl	8007e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d10e      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	d107      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8ff 	bl	8007aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d10e      	bne.n	80078dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d107      	bne.n	80078dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0220 	mvn.w	r2, #32
 80078d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 faaa 	bl	8007e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_TIM_ConfigClockSource+0x1c>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e0b4      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x186>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800791e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007938:	d03e      	beq.n	80079b8 <HAL_TIM_ConfigClockSource+0xd4>
 800793a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793e:	f200 8087 	bhi.w	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007946:	f000 8086 	beq.w	8007a56 <HAL_TIM_ConfigClockSource+0x172>
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794e:	d87f      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007950:	2b70      	cmp	r3, #112	; 0x70
 8007952:	d01a      	beq.n	800798a <HAL_TIM_ConfigClockSource+0xa6>
 8007954:	2b70      	cmp	r3, #112	; 0x70
 8007956:	d87b      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007958:	2b60      	cmp	r3, #96	; 0x60
 800795a:	d050      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x11a>
 800795c:	2b60      	cmp	r3, #96	; 0x60
 800795e:	d877      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b50      	cmp	r3, #80	; 0x50
 8007962:	d03c      	beq.n	80079de <HAL_TIM_ConfigClockSource+0xfa>
 8007964:	2b50      	cmp	r3, #80	; 0x50
 8007966:	d873      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d058      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0x13a>
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d86f      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b30      	cmp	r3, #48	; 0x30
 8007972:	d064      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x15a>
 8007974:	2b30      	cmp	r3, #48	; 0x30
 8007976:	d86b      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b20      	cmp	r3, #32
 800797a:	d060      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x15a>
 800797c:	2b20      	cmp	r3, #32
 800797e:	d867      	bhi.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d05c      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x15a>
 8007984:	2b10      	cmp	r3, #16
 8007986:	d05a      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x15a>
 8007988:	e062      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6899      	ldr	r1, [r3, #8]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f000 f9ad 	bl	8007cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	609a      	str	r2, [r3, #8]
      break;
 80079b6:	e04f      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	6899      	ldr	r1, [r3, #8]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f000 f996 	bl	8007cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079da:	609a      	str	r2, [r3, #8]
      break;
 80079dc:	e03c      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	6859      	ldr	r1, [r3, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f000 f90a 	bl	8007c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2150      	movs	r1, #80	; 0x50
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f963 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 80079fc:	e02c      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	6859      	ldr	r1, [r3, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f000 f929 	bl	8007c62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2160      	movs	r1, #96	; 0x60
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f953 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007a1c:	e01c      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6859      	ldr	r1, [r3, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f000 f8ea 	bl	8007c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2140      	movs	r1, #64	; 0x40
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f943 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007a3c:	e00c      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4619      	mov	r1, r3
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f000 f93a 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007a4e:	e003      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
      break;
 8007a54:	e000      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a40      	ldr	r2, [pc, #256]	; (8007bd8 <TIM_Base_SetConfig+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d013      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae2:	d00f      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a3d      	ldr	r2, [pc, #244]	; (8007bdc <TIM_Base_SetConfig+0x118>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a3c      	ldr	r2, [pc, #240]	; (8007be0 <TIM_Base_SetConfig+0x11c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3b      	ldr	r2, [pc, #236]	; (8007be4 <TIM_Base_SetConfig+0x120>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3a      	ldr	r2, [pc, #232]	; (8007be8 <TIM_Base_SetConfig+0x124>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d108      	bne.n	8007b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a2f      	ldr	r2, [pc, #188]	; (8007bd8 <TIM_Base_SetConfig+0x114>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d02b      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b24:	d027      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2c      	ldr	r2, [pc, #176]	; (8007bdc <TIM_Base_SetConfig+0x118>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d023      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2b      	ldr	r2, [pc, #172]	; (8007be0 <TIM_Base_SetConfig+0x11c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d01f      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <TIM_Base_SetConfig+0x120>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01b      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a29      	ldr	r2, [pc, #164]	; (8007be8 <TIM_Base_SetConfig+0x124>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d017      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a28      	ldr	r2, [pc, #160]	; (8007bec <TIM_Base_SetConfig+0x128>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <TIM_Base_SetConfig+0x12c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00f      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <TIM_Base_SetConfig+0x130>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00b      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <TIM_Base_SetConfig+0x134>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d007      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a24      	ldr	r2, [pc, #144]	; (8007bfc <TIM_Base_SetConfig+0x138>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d003      	beq.n	8007b76 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a23      	ldr	r2, [pc, #140]	; (8007c00 <TIM_Base_SetConfig+0x13c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d108      	bne.n	8007b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <TIM_Base_SetConfig+0x114>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_Base_SetConfig+0xf8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a0c      	ldr	r2, [pc, #48]	; (8007be8 <TIM_Base_SetConfig+0x124>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d103      	bne.n	8007bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	615a      	str	r2, [r3, #20]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40010400 	.word	0x40010400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40014400 	.word	0x40014400
 8007bf4:	40014800 	.word	0x40014800
 8007bf8:	40001800 	.word	0x40001800
 8007bfc:	40001c00 	.word	0x40001c00
 8007c00:	40002000 	.word	0x40002000

08007c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0201 	bic.w	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 030a 	bic.w	r3, r3, #10
 8007c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b087      	sub	sp, #28
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f023 0210 	bic.w	r2, r3, #16
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	031b      	lsls	r3, r3, #12
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	621a      	str	r2, [r3, #32]
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f043 0307 	orr.w	r3, r3, #7
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	609a      	str	r2, [r3, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e05a      	b.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d022      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9c:	d01d      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1d      	ldr	r2, [pc, #116]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d018      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1b      	ldr	r2, [pc, #108]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00e      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a18      	ldr	r2, [pc, #96]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d009      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d004      	beq.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a15      	ldr	r2, [pc, #84]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d10c      	bne.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40010000 	.word	0x40010000
 8007e18:	40000400 	.word	0x40000400
 8007e1c:	40000800 	.word	0x40000800
 8007e20:	40000c00 	.word	0x40000c00
 8007e24:	40010400 	.word	0x40010400
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40001800 	.word	0x40001800

08007e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e03f      	b.n	8007eea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fc fa9e 	bl	80043c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2224      	movs	r2, #36	; 0x24
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fe2b 	bl	8008af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	4613      	mov	r3, r2
 8007efe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d11d      	bne.n	8007f48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <HAL_UART_Receive_IT+0x26>
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e016      	b.n	8007f4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_UART_Receive_IT+0x38>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e00f      	b.n	8007f4a <HAL_UART_Receive_IT+0x58>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 fbd9 	bl	80086f6 <UART_Start_Receive_IT>
 8007f44:	4603      	mov	r3, r0
 8007f46:	e000      	b.n	8007f4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f48:	2302      	movs	r3, #2
  }
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08c      	sub	sp, #48	; 0x30
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d165      	bne.n	800803a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <HAL_UART_Transmit_DMA+0x26>
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e05e      	b.n	800803c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_UART_Transmit_DMA+0x38>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e057      	b.n	800803c <HAL_UART_Transmit_DMA+0xe8>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2221      	movs	r2, #33	; 0x21
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	4a22      	ldr	r2, [pc, #136]	; (8008044 <HAL_UART_Transmit_DMA+0xf0>)
 8007fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	4a21      	ldr	r2, [pc, #132]	; (8008048 <HAL_UART_Transmit_DMA+0xf4>)
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	4a20      	ldr	r2, [pc, #128]	; (800804c <HAL_UART_Transmit_DMA+0xf8>)
 8007fca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	6819      	ldr	r1, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	461a      	mov	r2, r3
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	f7fc fdf8 	bl	8004be0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ff8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3314      	adds	r3, #20
 8008008:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	617b      	str	r3, [r7, #20]
   return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3314      	adds	r3, #20
 8008020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008022:	627a      	str	r2, [r7, #36]	; 0x24
 8008024:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6a39      	ldr	r1, [r7, #32]
 8008028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e5      	bne.n	8008002 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	e000      	b.n	800803c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800803a:	2302      	movs	r3, #2
  }
}
 800803c:	4618      	mov	r0, r3
 800803e:	3730      	adds	r7, #48	; 0x30
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	080085ad 	.word	0x080085ad
 8008048:	08008647 	.word	0x08008647
 800804c:	08008663 	.word	0x08008663

08008050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b0ba      	sub	sp, #232	; 0xe8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800808e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10f      	bne.n	80080b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <HAL_UART_IRQHandler+0x66>
 80080a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fc66 	bl	8008980 <UART_Receive_IT>
      return;
 80080b4:	e256      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80de 	beq.w	800827c <HAL_UART_IRQHandler+0x22c>
 80080c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80d1 	beq.w	800827c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <HAL_UART_IRQHandler+0xae>
 80080e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0201 	orr.w	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_UART_IRQHandler+0xd2>
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0202 	orr.w	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <HAL_UART_IRQHandler+0xf6>
 800812e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f043 0204 	orr.w	r2, r3, #4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_UART_IRQHandler+0x126>
 8008152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800815e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f043 0208 	orr.w	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 81ed 	beq.w	800855a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <HAL_UART_IRQHandler+0x14e>
 800818c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fbf1 	bl	8008980 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <HAL_UART_IRQHandler+0x17a>
 80081c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d04f      	beq.n	800826a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 faf9 	bl	80087c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d141      	bne.n	8008262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3314      	adds	r3, #20
 80081e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3314      	adds	r3, #20
 8008206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800820a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800820e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1d9      	bne.n	80081de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4a7d      	ldr	r2, [pc, #500]	; (800842c <HAL_UART_IRQHandler+0x3dc>)
 8008238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	4618      	mov	r0, r3
 8008240:	f7fc fd96 	bl	8004d70 <HAL_DMA_Abort_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e00e      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f990 	bl	8008580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e00a      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f98c 	bl	8008580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008268:	e006      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f988 	bl	8008580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008276:	e170      	b.n	800855a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008278:	bf00      	nop
    return;
 800827a:	e16e      	b.n	800855a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 814a 	bne.w	800851a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8143 	beq.w	800851a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 813c 	beq.w	800851a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	f040 80b4 	bne.w	8008430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8140 	beq.w	800855e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082e6:	429a      	cmp	r2, r3
 80082e8:	f080 8139 	bcs.w	800855e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	f000 8088 	beq.w	8008412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	330c      	adds	r3, #12
 8008308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800831c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800832e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800833a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1d9      	bne.n	8008302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3314      	adds	r3, #20
 8008354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800835e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3314      	adds	r3, #20
 800836e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800837a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e1      	bne.n	800834e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800839a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e3      	bne.n	800838a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80083f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e3      	bne.n	80083d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	4618      	mov	r0, r3
 800840e:	f7fc fc3f 	bl	8004c90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800841a:	b29b      	uxth	r3, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8b6 	bl	8008594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008428:	e099      	b.n	800855e <HAL_UART_IRQHandler+0x50e>
 800842a:	bf00      	nop
 800842c:	08008889 	.word	0x08008889
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008438:	b29b      	uxth	r3, r3
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 808b 	beq.w	8008562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800844c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8086 	beq.w	8008562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800847a:	647a      	str	r2, [r7, #68]	; 0x44
 800847c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e3      	bne.n	8008456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3314      	adds	r3, #20
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	623b      	str	r3, [r7, #32]
   return(result);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3314      	adds	r3, #20
 80084ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084b2:	633a      	str	r2, [r7, #48]	; 0x30
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e3      	bne.n	800848e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084f8:	61fa      	str	r2, [r7, #28]
 80084fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e3      	bne.n	80084d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800850c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f83e 	bl	8008594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008518:	e023      	b.n	8008562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <HAL_UART_IRQHandler+0x4ea>
 8008526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f9bc 	bl	80088b0 <UART_Transmit_IT>
    return;
 8008538:	e014      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00e      	beq.n	8008564 <HAL_UART_IRQHandler+0x514>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f9fc 	bl	8008950 <UART_EndTransmit_IT>
    return;
 8008558:	e004      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
    return;
 800855a:	bf00      	nop
 800855c:	e002      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
      return;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
      return;
 8008562:	bf00      	nop
  }
}
 8008564:	37e8      	adds	r7, #232	; 0xe8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop

0800856c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b090      	sub	sp, #64	; 0x40
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d137      	bne.n	8008638 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80085c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ca:	2200      	movs	r2, #0
 80085cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3314      	adds	r3, #20
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	623b      	str	r3, [r7, #32]
   return(result);
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80085e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ee:	633a      	str	r2, [r7, #48]	; 0x30
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	60fb      	str	r3, [r7, #12]
   return(result);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	330c      	adds	r3, #12
 8008620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008622:	61fa      	str	r2, [r7, #28]
 8008624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	69b9      	ldr	r1, [r7, #24]
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	617b      	str	r3, [r7, #20]
   return(result);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008636:	e002      	b.n	800863e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008638:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800863a:	f7fa f93b 	bl	80028b4 <HAL_UART_TxCpltCallback>
}
 800863e:	bf00      	nop
 8008640:	3740      	adds	r7, #64	; 0x40
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff ff89 	bl	800856c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867e:	2b80      	cmp	r3, #128	; 0x80
 8008680:	bf0c      	ite	eq
 8008682:	2301      	moveq	r3, #1
 8008684:	2300      	movne	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b21      	cmp	r3, #33	; 0x21
 8008694:	d108      	bne.n	80086a8 <UART_DMAError+0x46>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80086a2:	68b8      	ldr	r0, [r7, #8]
 80086a4:	f000 f865 	bl	8008772 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b2:	2b40      	cmp	r3, #64	; 0x40
 80086b4:	bf0c      	ite	eq
 80086b6:	2301      	moveq	r3, #1
 80086b8:	2300      	movne	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b22      	cmp	r3, #34	; 0x22
 80086c8:	d108      	bne.n	80086dc <UART_DMAError+0x7a>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80086d6:	68b8      	ldr	r0, [r7, #8]
 80086d8:	f000 f873 	bl	80087c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	f043 0210 	orr.w	r2, r3, #16
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086e8:	68b8      	ldr	r0, [r7, #8]
 80086ea:	f7ff ff49 	bl	8008580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	4613      	mov	r3, r2
 8008702:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	88fa      	ldrh	r2, [r7, #6]
 800870e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2222      	movs	r2, #34	; 0x22
 8008720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008742:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695a      	ldr	r2, [r3, #20]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f042 0201 	orr.w	r2, r2, #1
 8008752:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0220 	orr.w	r2, r2, #32
 8008762:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008772:	b480      	push	{r7}
 8008774:	b089      	sub	sp, #36	; 0x24
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	60bb      	str	r3, [r7, #8]
   return(result);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	330c      	adds	r3, #12
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	61ba      	str	r2, [r7, #24]
 800879c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6979      	ldr	r1, [r7, #20]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	613b      	str	r3, [r7, #16]
   return(result);
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e5      	bne.n	800877a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80087b6:	bf00      	nop
 80087b8:	3724      	adds	r7, #36	; 0x24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b095      	sub	sp, #84	; 0x54
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330c      	adds	r3, #12
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087ea:	643a      	str	r2, [r7, #64]	; 0x40
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3314      	adds	r3, #20
 8008804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	61fb      	str	r3, [r7, #28]
   return(result);
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	64bb      	str	r3, [r7, #72]	; 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3314      	adds	r3, #20
 800881c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e5      	bne.n	80087fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	2b01      	cmp	r3, #1
 8008838:	d119      	bne.n	800886e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	330c      	adds	r3, #12
 8008840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	60bb      	str	r3, [r7, #8]
   return(result);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	647b      	str	r3, [r7, #68]	; 0x44
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	330c      	adds	r3, #12
 8008858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800885a:	61ba      	str	r2, [r7, #24]
 800885c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6979      	ldr	r1, [r7, #20]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	613b      	str	r3, [r7, #16]
   return(result);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e5      	bne.n	800883a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800887c:	bf00      	nop
 800887e:	3754      	adds	r7, #84	; 0x54
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f7ff fe6c 	bl	8008580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a8:	bf00      	nop
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b21      	cmp	r3, #33	; 0x21
 80088c2:	d13e      	bne.n	8008942 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088cc:	d114      	bne.n	80088f8 <UART_Transmit_IT+0x48>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d110      	bne.n	80088f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	1c9a      	adds	r2, r3, #2
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	621a      	str	r2, [r3, #32]
 80088f6:	e008      	b.n	800890a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	1c59      	adds	r1, r3, #1
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6211      	str	r1, [r2, #32]
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	4619      	mov	r1, r3
 8008918:	84d1      	strh	r1, [r2, #38]	; 0x26
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10f      	bne.n	800893e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800892c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800893c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e000      	b.n	8008944 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008942:	2302      	movs	r3, #2
  }
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008966:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7f9 ff9f 	bl	80028b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08c      	sub	sp, #48	; 0x30
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b22      	cmp	r3, #34	; 0x22
 8008992:	f040 80ab 	bne.w	8008aec <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899e:	d117      	bne.n	80089d0 <UART_Receive_IT+0x50>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d113      	bne.n	80089d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	1c9a      	adds	r2, r3, #2
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	629a      	str	r2, [r3, #40]	; 0x28
 80089ce:	e026      	b.n	8008a1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e2:	d007      	beq.n	80089f4 <UART_Receive_IT+0x74>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <UART_Receive_IT+0x82>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e008      	b.n	8008a14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d15a      	bne.n	8008ae8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 0220 	bic.w	r2, r2, #32
 8008a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695a      	ldr	r2, [r3, #20]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0201 	bic.w	r2, r2, #1
 8008a60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d135      	bne.n	8008ade <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	613b      	str	r3, [r7, #16]
   return(result);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f023 0310 	bic.w	r3, r3, #16
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	330c      	adds	r3, #12
 8008a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a98:	623a      	str	r2, [r7, #32]
 8008a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	69f9      	ldr	r1, [r7, #28]
 8008a9e:	6a3a      	ldr	r2, [r7, #32]
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e5      	bne.n	8008a78 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0310 	and.w	r3, r3, #16
 8008ab6:	2b10      	cmp	r3, #16
 8008ab8:	d10a      	bne.n	8008ad0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff fd5c 	bl	8008594 <HAL_UARTEx_RxEventCallback>
 8008adc:	e002      	b.n	8008ae4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7f9 fc50 	bl	8002384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	e002      	b.n	8008aee <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e000      	b.n	8008aee <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008aec:	2302      	movs	r3, #2
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3730      	adds	r7, #48	; 0x30
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008afc:	b0c0      	sub	sp, #256	; 0x100
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b14:	68d9      	ldr	r1, [r3, #12]
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	ea40 0301 	orr.w	r3, r0, r1
 8008b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b50:	f021 010c 	bic.w	r1, r1, #12
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b72:	6999      	ldr	r1, [r3, #24]
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	ea40 0301 	orr.w	r3, r0, r1
 8008b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b8f      	ldr	r3, [pc, #572]	; (8008dc4 <UART_SetConfig+0x2cc>)
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d005      	beq.n	8008b98 <UART_SetConfig+0xa0>
 8008b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b8d      	ldr	r3, [pc, #564]	; (8008dc8 <UART_SetConfig+0x2d0>)
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d104      	bne.n	8008ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b98:	f7fd fbc6 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 8008b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ba0:	e003      	b.n	8008baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ba2:	f7fd fbad 	bl	8006300 <HAL_RCC_GetPCLK1Freq>
 8008ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb4:	f040 810c 	bne.w	8008dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bca:	4622      	mov	r2, r4
 8008bcc:	462b      	mov	r3, r5
 8008bce:	1891      	adds	r1, r2, r2
 8008bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bd2:	415b      	adcs	r3, r3
 8008bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bda:	4621      	mov	r1, r4
 8008bdc:	eb12 0801 	adds.w	r8, r2, r1
 8008be0:	4629      	mov	r1, r5
 8008be2:	eb43 0901 	adc.w	r9, r3, r1
 8008be6:	f04f 0200 	mov.w	r2, #0
 8008bea:	f04f 0300 	mov.w	r3, #0
 8008bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bfa:	4690      	mov	r8, r2
 8008bfc:	4699      	mov	r9, r3
 8008bfe:	4623      	mov	r3, r4
 8008c00:	eb18 0303 	adds.w	r3, r8, r3
 8008c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c08:	462b      	mov	r3, r5
 8008c0a:	eb49 0303 	adc.w	r3, r9, r3
 8008c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c26:	460b      	mov	r3, r1
 8008c28:	18db      	adds	r3, r3, r3
 8008c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	eb42 0303 	adc.w	r3, r2, r3
 8008c32:	657b      	str	r3, [r7, #84]	; 0x54
 8008c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c3c:	f7f7 fe76 	bl	800092c <__aeabi_uldivmod>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4b61      	ldr	r3, [pc, #388]	; (8008dcc <UART_SetConfig+0x2d4>)
 8008c46:	fba3 2302 	umull	r2, r3, r3, r2
 8008c4a:	095b      	lsrs	r3, r3, #5
 8008c4c:	011c      	lsls	r4, r3, #4
 8008c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c60:	4642      	mov	r2, r8
 8008c62:	464b      	mov	r3, r9
 8008c64:	1891      	adds	r1, r2, r2
 8008c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c68:	415b      	adcs	r3, r3
 8008c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c70:	4641      	mov	r1, r8
 8008c72:	eb12 0a01 	adds.w	sl, r2, r1
 8008c76:	4649      	mov	r1, r9
 8008c78:	eb43 0b01 	adc.w	fp, r3, r1
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c90:	4692      	mov	sl, r2
 8008c92:	469b      	mov	fp, r3
 8008c94:	4643      	mov	r3, r8
 8008c96:	eb1a 0303 	adds.w	r3, sl, r3
 8008c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8008ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	18db      	adds	r3, r3, r3
 8008cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	eb42 0303 	adc.w	r3, r2, r3
 8008cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cd2:	f7f7 fe2b 	bl	800092c <__aeabi_uldivmod>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4b3b      	ldr	r3, [pc, #236]	; (8008dcc <UART_SetConfig+0x2d4>)
 8008cde:	fba3 2301 	umull	r2, r3, r3, r1
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	2264      	movs	r2, #100	; 0x64
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	1acb      	subs	r3, r1, r3
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008cf2:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <UART_SetConfig+0x2d4>)
 8008cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf8:	095b      	lsrs	r3, r3, #5
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d00:	441c      	add	r4, r3
 8008d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	1891      	adds	r1, r2, r2
 8008d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d1c:	415b      	adcs	r3, r3
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d24:	4641      	mov	r1, r8
 8008d26:	1851      	adds	r1, r2, r1
 8008d28:	6339      	str	r1, [r7, #48]	; 0x30
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	414b      	adcs	r3, r1
 8008d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	00cb      	lsls	r3, r1, #3
 8008d40:	4651      	mov	r1, sl
 8008d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d46:	4651      	mov	r1, sl
 8008d48:	00ca      	lsls	r2, r1, #3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4642      	mov	r2, r8
 8008d52:	189b      	adds	r3, r3, r2
 8008d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d58:	464b      	mov	r3, r9
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	eb42 0303 	adc.w	r3, r2, r3
 8008d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d78:	460b      	mov	r3, r1
 8008d7a:	18db      	adds	r3, r3, r3
 8008d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7e:	4613      	mov	r3, r2
 8008d80:	eb42 0303 	adc.w	r3, r2, r3
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d8e:	f7f7 fdcd 	bl	800092c <__aeabi_uldivmod>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <UART_SetConfig+0x2d4>)
 8008d98:	fba3 1302 	umull	r1, r3, r3, r2
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	2164      	movs	r1, #100	; 0x64
 8008da0:	fb01 f303 	mul.w	r3, r1, r3
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	3332      	adds	r3, #50	; 0x32
 8008daa:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <UART_SetConfig+0x2d4>)
 8008dac:	fba2 2303 	umull	r2, r3, r2, r3
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	f003 0207 	and.w	r2, r3, #7
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4422      	add	r2, r4
 8008dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dc0:	e105      	b.n	8008fce <UART_SetConfig+0x4d6>
 8008dc2:	bf00      	nop
 8008dc4:	40011000 	.word	0x40011000
 8008dc8:	40011400 	.word	0x40011400
 8008dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008de2:	4642      	mov	r2, r8
 8008de4:	464b      	mov	r3, r9
 8008de6:	1891      	adds	r1, r2, r2
 8008de8:	6239      	str	r1, [r7, #32]
 8008dea:	415b      	adcs	r3, r3
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008df2:	4641      	mov	r1, r8
 8008df4:	1854      	adds	r4, r2, r1
 8008df6:	4649      	mov	r1, r9
 8008df8:	eb43 0501 	adc.w	r5, r3, r1
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	00eb      	lsls	r3, r5, #3
 8008e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e0a:	00e2      	lsls	r2, r4, #3
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	461d      	mov	r5, r3
 8008e10:	4643      	mov	r3, r8
 8008e12:	18e3      	adds	r3, r4, r3
 8008e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e18:	464b      	mov	r3, r9
 8008e1a:	eb45 0303 	adc.w	r3, r5, r3
 8008e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e3e:	4629      	mov	r1, r5
 8008e40:	008b      	lsls	r3, r1, #2
 8008e42:	4621      	mov	r1, r4
 8008e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e48:	4621      	mov	r1, r4
 8008e4a:	008a      	lsls	r2, r1, #2
 8008e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e50:	f7f7 fd6c 	bl	800092c <__aeabi_uldivmod>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4b60      	ldr	r3, [pc, #384]	; (8008fdc <UART_SetConfig+0x4e4>)
 8008e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e5e:	095b      	lsrs	r3, r3, #5
 8008e60:	011c      	lsls	r4, r3, #4
 8008e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e74:	4642      	mov	r2, r8
 8008e76:	464b      	mov	r3, r9
 8008e78:	1891      	adds	r1, r2, r2
 8008e7a:	61b9      	str	r1, [r7, #24]
 8008e7c:	415b      	adcs	r3, r3
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e84:	4641      	mov	r1, r8
 8008e86:	1851      	adds	r1, r2, r1
 8008e88:	6139      	str	r1, [r7, #16]
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	414b      	adcs	r3, r1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	00cb      	lsls	r3, r1, #3
 8008ea0:	4651      	mov	r1, sl
 8008ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	00ca      	lsls	r2, r1, #3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4619      	mov	r1, r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	189b      	adds	r3, r3, r2
 8008eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008eb8:	464b      	mov	r3, r9
 8008eba:	460a      	mov	r2, r1
 8008ebc:	eb42 0303 	adc.w	r3, r2, r3
 8008ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008edc:	4649      	mov	r1, r9
 8008ede:	008b      	lsls	r3, r1, #2
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	008a      	lsls	r2, r1, #2
 8008eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008eee:	f7f7 fd1d 	bl	800092c <__aeabi_uldivmod>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <UART_SetConfig+0x4e4>)
 8008ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	2164      	movs	r1, #100	; 0x64
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	3332      	adds	r3, #50	; 0x32
 8008f0a:	4a34      	ldr	r2, [pc, #208]	; (8008fdc <UART_SetConfig+0x4e4>)
 8008f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f10:	095b      	lsrs	r3, r3, #5
 8008f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f16:	441c      	add	r4, r3
 8008f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f20:	677a      	str	r2, [r7, #116]	; 0x74
 8008f22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	1891      	adds	r1, r2, r2
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	415b      	adcs	r3, r3
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f36:	4641      	mov	r1, r8
 8008f38:	1851      	adds	r1, r2, r1
 8008f3a:	6039      	str	r1, [r7, #0]
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	414b      	adcs	r3, r1
 8008f40:	607b      	str	r3, [r7, #4]
 8008f42:	f04f 0200 	mov.w	r2, #0
 8008f46:	f04f 0300 	mov.w	r3, #0
 8008f4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f4e:	4659      	mov	r1, fp
 8008f50:	00cb      	lsls	r3, r1, #3
 8008f52:	4651      	mov	r1, sl
 8008f54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f58:	4651      	mov	r1, sl
 8008f5a:	00ca      	lsls	r2, r1, #3
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4603      	mov	r3, r0
 8008f62:	4642      	mov	r2, r8
 8008f64:	189b      	adds	r3, r3, r2
 8008f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f68:	464b      	mov	r3, r9
 8008f6a:	460a      	mov	r2, r1
 8008f6c:	eb42 0303 	adc.w	r3, r2, r3
 8008f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f7c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	008b      	lsls	r3, r1, #2
 8008f8e:	4641      	mov	r1, r8
 8008f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f94:	4641      	mov	r1, r8
 8008f96:	008a      	lsls	r2, r1, #2
 8008f98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f9c:	f7f7 fcc6 	bl	800092c <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <UART_SetConfig+0x4e4>)
 8008fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	2164      	movs	r1, #100	; 0x64
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	3332      	adds	r3, #50	; 0x32
 8008fb8:	4a08      	ldr	r2, [pc, #32]	; (8008fdc <UART_SetConfig+0x4e4>)
 8008fba:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	f003 020f 	and.w	r2, r3, #15
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4422      	add	r2, r4
 8008fcc:	609a      	str	r2, [r3, #8]
}
 8008fce:	bf00      	nop
 8008fd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fda:	bf00      	nop
 8008fdc:	51eb851f 	.word	0x51eb851f

08008fe0 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d11c      	bne.n	800902c <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	4b1f      	ldr	r3, [pc, #124]	; (8009074 <FSMC_NAND_Init+0x94>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	6851      	ldr	r1, [r2, #4]
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	6892      	ldr	r2, [r2, #8]
 8009002:	4311      	orrs	r1, r2
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	68d2      	ldr	r2, [r2, #12]
 8009008:	4311      	orrs	r1, r2
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	6912      	ldr	r2, [r2, #16]
 800900e:	4311      	orrs	r1, r2
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	6952      	ldr	r2, [r2, #20]
 8009014:	0252      	lsls	r2, r2, #9
 8009016:	4311      	orrs	r1, r2
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	6992      	ldr	r2, [r2, #24]
 800901c:	0352      	lsls	r2, r2, #13
 800901e:	430a      	orrs	r2, r1
 8009020:	4313      	orrs	r3, r2
 8009022:	f043 0208 	orr.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e01b      	b.n	8009064 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a1a      	ldr	r2, [r3, #32]
 8009030:	4b10      	ldr	r3, [pc, #64]	; (8009074 <FSMC_NAND_Init+0x94>)
 8009032:	4013      	ands	r3, r2
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	6851      	ldr	r1, [r2, #4]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	6892      	ldr	r2, [r2, #8]
 800903c:	4311      	orrs	r1, r2
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	68d2      	ldr	r2, [r2, #12]
 8009042:	4311      	orrs	r1, r2
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	6912      	ldr	r2, [r2, #16]
 8009048:	4311      	orrs	r1, r2
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	6952      	ldr	r2, [r2, #20]
 800904e:	0252      	lsls	r2, r2, #9
 8009050:	4311      	orrs	r1, r2
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	6992      	ldr	r2, [r2, #24]
 8009056:	0352      	lsls	r2, r2, #13
 8009058:	430a      	orrs	r2, r1
 800905a:	4313      	orrs	r3, r2
 800905c:	f043 0208 	orr.w	r2, r3, #8
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	fff00181 	.word	0xfff00181

08009078 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b10      	cmp	r3, #16
 8009088:	d112      	bne.n	80090b0 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	431a      	orrs	r2, r3
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	041b      	lsls	r3, r3, #16
 80090a0:	431a      	orrs	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	061b      	lsls	r3, r3, #24
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	609a      	str	r2, [r3, #8]
 80090ae:	e011      	b.n	80090d4 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	431a      	orrs	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	431a      	orrs	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	061b      	lsls	r3, r3, #24
 80090ce:	431a      	orrs	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b10      	cmp	r3, #16
 80090f2:	d112      	bne.n	800911a <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	431a      	orrs	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	041b      	lsls	r3, r3, #16
 800910a:	431a      	orrs	r2, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	061b      	lsls	r3, r3, #24
 8009112:	431a      	orrs	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	60da      	str	r2, [r3, #12]
 8009118:	e011      	b.n	800913e <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	431a      	orrs	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	431a      	orrs	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	061b      	lsls	r3, r3, #24
 8009138:	431a      	orrs	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <__NVIC_SetPriority>:
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915c:	2b00      	cmp	r3, #0
 800915e:	db0a      	blt.n	8009176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	b2da      	uxtb	r2, r3
 8009164:	490c      	ldr	r1, [pc, #48]	; (8009198 <__NVIC_SetPriority+0x4c>)
 8009166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800916a:	0112      	lsls	r2, r2, #4
 800916c:	b2d2      	uxtb	r2, r2
 800916e:	440b      	add	r3, r1
 8009170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009174:	e00a      	b.n	800918c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	b2da      	uxtb	r2, r3
 800917a:	4908      	ldr	r1, [pc, #32]	; (800919c <__NVIC_SetPriority+0x50>)
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	3b04      	subs	r3, #4
 8009184:	0112      	lsls	r2, r2, #4
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	440b      	add	r3, r1
 800918a:	761a      	strb	r2, [r3, #24]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	e000e100 	.word	0xe000e100
 800919c:	e000ed00 	.word	0xe000ed00

080091a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <SysTick_Handler+0x1c>)
 80091a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091a8:	f002 f856 	bl	800b258 <xTaskGetSchedulerState>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d001      	beq.n	80091b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091b2:	f002 fe41 	bl	800be38 <xPortSysTickHandler>
  }
}
 80091b6:	bf00      	nop
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	e000e010 	.word	0xe000e010

080091c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091c4:	2100      	movs	r1, #0
 80091c6:	f06f 0004 	mvn.w	r0, #4
 80091ca:	f7ff ffbf 	bl	800914c <__NVIC_SetPriority>
#endif
}
 80091ce:	bf00      	nop
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091da:	f3ef 8305 	mrs	r3, IPSR
 80091de:	603b      	str	r3, [r7, #0]
  return(result);
 80091e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80091e6:	f06f 0305 	mvn.w	r3, #5
 80091ea:	607b      	str	r3, [r7, #4]
 80091ec:	e00f      	b.n	800920e <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <osKernelInitialize+0x44>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d108      	bne.n	8009208 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80091f6:	4809      	ldr	r0, [pc, #36]	; (800921c <osKernelInitialize+0x48>)
 80091f8:	f003 f81a 	bl	800c230 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <osKernelInitialize+0x44>)
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009202:	2300      	movs	r3, #0
 8009204:	607b      	str	r3, [r7, #4]
 8009206:	e002      	b.n	800920e <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8009208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800920c:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800920e:	687b      	ldr	r3, [r7, #4]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20001bf0 	.word	0x20001bf0
 800921c:	20000094 	.word	0x20000094

08009220 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009226:	f3ef 8305 	mrs	r3, IPSR
 800922a:	603b      	str	r3, [r7, #0]
  return(result);
 800922c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009232:	f06f 0305 	mvn.w	r3, #5
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	e010      	b.n	800925c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800923a:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <osKernelStart+0x48>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d109      	bne.n	8009256 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009242:	f7ff ffbd 	bl	80091c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <osKernelStart+0x48>)
 8009248:	2202      	movs	r2, #2
 800924a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800924c:	f001 fba8 	bl	800a9a0 <vTaskStartScheduler>
      stat = osOK;
 8009250:	2300      	movs	r3, #0
 8009252:	607b      	str	r3, [r7, #4]
 8009254:	e002      	b.n	800925c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800925a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800925c:	687b      	ldr	r3, [r7, #4]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20001bf0 	.word	0x20001bf0

0800926c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800926c:	b580      	push	{r7, lr}
 800926e:	b08e      	sub	sp, #56	; 0x38
 8009270:	af04      	add	r7, sp, #16
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009278:	2300      	movs	r3, #0
 800927a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800927c:	f3ef 8305 	mrs	r3, IPSR
 8009280:	617b      	str	r3, [r7, #20]
  return(result);
 8009282:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009284:	2b00      	cmp	r3, #0
 8009286:	d17e      	bne.n	8009386 <osThreadNew+0x11a>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d07b      	beq.n	8009386 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800928e:	2380      	movs	r3, #128	; 0x80
 8009290:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009292:	2318      	movs	r3, #24
 8009294:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800929a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800929e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d045      	beq.n	8009332 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <osThreadNew+0x48>
        name = attr->name;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d008      	beq.n	80092da <osThreadNew+0x6e>
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2b38      	cmp	r3, #56	; 0x38
 80092cc:	d805      	bhi.n	80092da <osThreadNew+0x6e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <osThreadNew+0x72>
        return (NULL);
 80092da:	2300      	movs	r3, #0
 80092dc:	e054      	b.n	8009388 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	089b      	lsrs	r3, r3, #2
 80092ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <osThreadNew+0xa8>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	2bbb      	cmp	r3, #187	; 0xbb
 80092fc:	d90a      	bls.n	8009314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	d006      	beq.n	8009314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <osThreadNew+0xa8>
        mem = 1;
 800930e:	2301      	movs	r3, #1
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	e010      	b.n	8009336 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10c      	bne.n	8009336 <osThreadNew+0xca>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d108      	bne.n	8009336 <osThreadNew+0xca>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <osThreadNew+0xca>
          mem = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	61bb      	str	r3, [r7, #24]
 8009330:	e001      	b.n	8009336 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d110      	bne.n	800935e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009344:	9202      	str	r2, [sp, #8]
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	6a3a      	ldr	r2, [r7, #32]
 8009350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f001 f938 	bl	800a5c8 <xTaskCreateStatic>
 8009358:	4603      	mov	r3, r0
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	e013      	b.n	8009386 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d110      	bne.n	8009386 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	b29a      	uxth	r2, r3
 8009368:	f107 0310 	add.w	r3, r7, #16
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f001 f983 	bl	800a682 <xTaskCreate>
 800937c:	4603      	mov	r3, r0
 800937e:	2b01      	cmp	r3, #1
 8009380:	d001      	beq.n	8009386 <osThreadNew+0x11a>
            hTask = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009386:	693b      	ldr	r3, [r7, #16]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3728      	adds	r7, #40	; 0x28
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009398:	f3ef 8305 	mrs	r3, IPSR
 800939c:	60bb      	str	r3, [r7, #8]
  return(result);
 800939e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <osDelay+0x1c>
    stat = osErrorISR;
 80093a4:	f06f 0305 	mvn.w	r3, #5
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	e007      	b.n	80093bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fabe 	bl	800a938 <vTaskDelay>
    }
  }

  return (stat);
 80093bc:	68fb      	ldr	r3, [r7, #12]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b08a      	sub	sp, #40	; 0x28
 80093ca:	af02      	add	r7, sp, #8
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093d6:	f3ef 8305 	mrs	r3, IPSR
 80093da:	613b      	str	r3, [r7, #16]
  return(result);
 80093dc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d175      	bne.n	80094ce <osSemaphoreNew+0x108>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d072      	beq.n	80094ce <osSemaphoreNew+0x108>
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d86e      	bhi.n	80094ce <osSemaphoreNew+0x108>
    mem = -1;
 80093f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d015      	beq.n	8009428 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d006      	beq.n	8009412 <osSemaphoreNew+0x4c>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	2b4f      	cmp	r3, #79	; 0x4f
 800940a:	d902      	bls.n	8009412 <osSemaphoreNew+0x4c>
        mem = 1;
 800940c:	2301      	movs	r3, #1
 800940e:	61bb      	str	r3, [r7, #24]
 8009410:	e00c      	b.n	800942c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d108      	bne.n	800942c <osSemaphoreNew+0x66>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <osSemaphoreNew+0x66>
          mem = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	61bb      	str	r3, [r7, #24]
 8009426:	e001      	b.n	800942c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009432:	d04c      	beq.n	80094ce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d128      	bne.n	800948c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d10a      	bne.n	8009456 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2203      	movs	r2, #3
 8009446:	9200      	str	r2, [sp, #0]
 8009448:	2200      	movs	r2, #0
 800944a:	2100      	movs	r1, #0
 800944c:	2001      	movs	r0, #1
 800944e:	f000 fac5 	bl	80099dc <xQueueGenericCreateStatic>
 8009452:	61f8      	str	r0, [r7, #28]
 8009454:	e005      	b.n	8009462 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009456:	2203      	movs	r2, #3
 8009458:	2100      	movs	r1, #0
 800945a:	2001      	movs	r0, #1
 800945c:	f000 fb36 	bl	8009acc <xQueueGenericCreate>
 8009460:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d022      	beq.n	80094ae <osSemaphoreNew+0xe8>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d01f      	beq.n	80094ae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800946e:	2300      	movs	r3, #0
 8009470:	2200      	movs	r2, #0
 8009472:	2100      	movs	r1, #0
 8009474:	69f8      	ldr	r0, [r7, #28]
 8009476:	f000 fbf1 	bl	8009c5c <xQueueGenericSend>
 800947a:	4603      	mov	r3, r0
 800947c:	2b01      	cmp	r3, #1
 800947e:	d016      	beq.n	80094ae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009480:	69f8      	ldr	r0, [r7, #28]
 8009482:	f000 fee5 	bl	800a250 <vQueueDelete>
            hSemaphore = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	61fb      	str	r3, [r7, #28]
 800948a:	e010      	b.n	80094ae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d108      	bne.n	80094a4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	461a      	mov	r2, r3
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fb73 	bl	8009b86 <xQueueCreateCountingSemaphoreStatic>
 80094a0:	61f8      	str	r0, [r7, #28]
 80094a2:	e004      	b.n	80094ae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fba4 	bl	8009bf4 <xQueueCreateCountingSemaphore>
 80094ac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e001      	b.n	80094c6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80094c6:	6979      	ldr	r1, [r7, #20]
 80094c8:	69f8      	ldr	r0, [r7, #28]
 80094ca:	f000 fff5 	bl	800a4b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80094ce:	69fb      	ldr	r3, [r7, #28]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3720      	adds	r7, #32
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094e8:	f3ef 8305 	mrs	r3, IPSR
 80094ec:	613b      	str	r3, [r7, #16]
  return(result);
 80094ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d15f      	bne.n	80095b4 <osMessageQueueNew+0xdc>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d05c      	beq.n	80095b4 <osMessageQueueNew+0xdc>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d059      	beq.n	80095b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8009500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009504:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d029      	beq.n	8009560 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d012      	beq.n	800953a <osMessageQueueNew+0x62>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b4f      	cmp	r3, #79	; 0x4f
 800951a:	d90e      	bls.n	800953a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695a      	ldr	r2, [r3, #20]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	429a      	cmp	r2, r3
 8009532:	d302      	bcc.n	800953a <osMessageQueueNew+0x62>
        mem = 1;
 8009534:	2301      	movs	r3, #1
 8009536:	61bb      	str	r3, [r7, #24]
 8009538:	e014      	b.n	8009564 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d110      	bne.n	8009564 <osMessageQueueNew+0x8c>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10c      	bne.n	8009564 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800954e:	2b00      	cmp	r3, #0
 8009550:	d108      	bne.n	8009564 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d104      	bne.n	8009564 <osMessageQueueNew+0x8c>
          mem = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e001      	b.n	8009564 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d10b      	bne.n	8009582 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2100      	movs	r1, #0
 8009574:	9100      	str	r1, [sp, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fa2f 	bl	80099dc <xQueueGenericCreateStatic>
 800957e:	61f8      	str	r0, [r7, #28]
 8009580:	e008      	b.n	8009594 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d105      	bne.n	8009594 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009588:	2200      	movs	r2, #0
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fa9d 	bl	8009acc <xQueueGenericCreate>
 8009592:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00c      	beq.n	80095b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	617b      	str	r3, [r7, #20]
 80095a6:	e001      	b.n	80095ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80095ac:	6979      	ldr	r1, [r7, #20]
 80095ae:	69f8      	ldr	r0, [r7, #28]
 80095b0:	f000 ff82 	bl	800a4b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095b4:	69fb      	ldr	r3, [r7, #28]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3720      	adds	r7, #32
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	4613      	mov	r3, r2
 80095ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095d8:	f3ef 8305 	mrs	r3, IPSR
 80095dc:	617b      	str	r3, [r7, #20]
  return(result);
 80095de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d028      	beq.n	8009636 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <osMessageQueuePut+0x36>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <osMessageQueuePut+0x36>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80095f6:	f06f 0303 	mvn.w	r3, #3
 80095fa:	61fb      	str	r3, [r7, #28]
 80095fc:	e038      	b.n	8009670 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80095fe:	2300      	movs	r3, #0
 8009600:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009602:	f107 0210 	add.w	r2, r7, #16
 8009606:	2300      	movs	r3, #0
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	69b8      	ldr	r0, [r7, #24]
 800960c:	f000 fc24 	bl	8009e58 <xQueueGenericSendFromISR>
 8009610:	4603      	mov	r3, r0
 8009612:	2b01      	cmp	r3, #1
 8009614:	d003      	beq.n	800961e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009616:	f06f 0302 	mvn.w	r3, #2
 800961a:	61fb      	str	r3, [r7, #28]
 800961c:	e028      	b.n	8009670 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d025      	beq.n	8009670 <osMessageQueuePut+0xb0>
 8009624:	4b15      	ldr	r3, [pc, #84]	; (800967c <osMessageQueuePut+0xbc>)
 8009626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	e01c      	b.n	8009670 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <osMessageQueuePut+0x82>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009642:	f06f 0303 	mvn.w	r3, #3
 8009646:	61fb      	str	r3, [r7, #28]
 8009648:	e012      	b.n	8009670 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800964a:	2300      	movs	r3, #0
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	68b9      	ldr	r1, [r7, #8]
 8009650:	69b8      	ldr	r0, [r7, #24]
 8009652:	f000 fb03 	bl	8009c5c <xQueueGenericSend>
 8009656:	4603      	mov	r3, r0
 8009658:	2b01      	cmp	r3, #1
 800965a:	d009      	beq.n	8009670 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009662:	f06f 0301 	mvn.w	r3, #1
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	e002      	b.n	8009670 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800966a:	f06f 0302 	mvn.w	r3, #2
 800966e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009670:	69fb      	ldr	r3, [r7, #28]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3720      	adds	r7, #32
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	e000ed04 	.word	0xe000ed04

08009680 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009692:	2300      	movs	r3, #0
 8009694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009696:	f3ef 8305 	mrs	r3, IPSR
 800969a:	617b      	str	r3, [r7, #20]
  return(result);
 800969c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d028      	beq.n	80096f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <osMessageQueueGet+0x34>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <osMessageQueueGet+0x34>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80096b4:	f06f 0303 	mvn.w	r3, #3
 80096b8:	61fb      	str	r3, [r7, #28]
 80096ba:	e037      	b.n	800972c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80096c0:	f107 0310 	add.w	r3, r7, #16
 80096c4:	461a      	mov	r2, r3
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	69b8      	ldr	r0, [r7, #24]
 80096ca:	f000 fd41 	bl	800a150 <xQueueReceiveFromISR>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d003      	beq.n	80096dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80096d4:	f06f 0302 	mvn.w	r3, #2
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	e027      	b.n	800972c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d024      	beq.n	800972c <osMessageQueueGet+0xac>
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <osMessageQueueGet+0xb8>)
 80096e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	e01b      	b.n	800972c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <osMessageQueueGet+0x80>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009700:	f06f 0303 	mvn.w	r3, #3
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	e011      	b.n	800972c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	69b8      	ldr	r0, [r7, #24]
 800970e:	f000 fc3f 	bl	8009f90 <xQueueReceive>
 8009712:	4603      	mov	r3, r0
 8009714:	2b01      	cmp	r3, #1
 8009716:	d009      	beq.n	800972c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800971e:	f06f 0301 	mvn.w	r3, #1
 8009722:	61fb      	str	r3, [r7, #28]
 8009724:	e002      	b.n	800972c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009726:	f06f 0302 	mvn.w	r3, #2
 800972a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800972c:	69fb      	ldr	r3, [r7, #28]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3720      	adds	r7, #32
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	e000ed04 	.word	0xe000ed04

0800973c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4a07      	ldr	r2, [pc, #28]	; (8009768 <vApplicationGetIdleTaskMemory+0x2c>)
 800974c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	4a06      	ldr	r2, [pc, #24]	; (800976c <vApplicationGetIdleTaskMemory+0x30>)
 8009752:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2280      	movs	r2, #128	; 0x80
 8009758:	601a      	str	r2, [r3, #0]
}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20005bf4 	.word	0x20005bf4
 800976c:	20005cb0 	.word	0x20005cb0

08009770 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4a07      	ldr	r2, [pc, #28]	; (800979c <vApplicationGetTimerTaskMemory+0x2c>)
 8009780:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4a06      	ldr	r2, [pc, #24]	; (80097a0 <vApplicationGetTimerTaskMemory+0x30>)
 8009786:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800978e:	601a      	str	r2, [r3, #0]
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20005eb0 	.word	0x20005eb0
 80097a0:	20005f6c 	.word	0x20005f6c

080097a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f103 0208 	add.w	r2, r3, #8
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f103 0208 	add.w	r2, r3, #8
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f103 0208 	add.w	r2, r3, #8
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800985c:	d103      	bne.n	8009866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e00c      	b.n	8009880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3308      	adds	r3, #8
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e002      	b.n	8009874 <vListInsert+0x2e>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	429a      	cmp	r2, r3
 800987e:	d2f6      	bcs.n	800986e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	601a      	str	r2, [r3, #0]
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6892      	ldr	r2, [r2, #8]
 80098ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6852      	ldr	r2, [r2, #4]
 80098d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d103      	bne.n	80098ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009936:	f002 f9ed 	bl	800bd14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	441a      	add	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009966:	3b01      	subs	r3, #1
 8009968:	68f9      	ldr	r1, [r7, #12]
 800996a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800996c:	fb01 f303 	mul.w	r3, r1, r3
 8009970:	441a      	add	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	22ff      	movs	r2, #255	; 0xff
 800997a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	22ff      	movs	r2, #255	; 0xff
 8009982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d114      	bne.n	80099b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01a      	beq.n	80099ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3310      	adds	r3, #16
 8009998:	4618      	mov	r0, r3
 800999a:	f001 fa9b 	bl	800aed4 <xTaskRemoveFromEventList>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d012      	beq.n	80099ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099a4:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <xQueueGenericReset+0xcc>)
 80099a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	e009      	b.n	80099ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3310      	adds	r3, #16
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff fef2 	bl	80097a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3324      	adds	r3, #36	; 0x24
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff feed 	bl	80097a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099ca:	f002 f9d3 	bl	800bd74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099ce:	2301      	movs	r3, #1
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08e      	sub	sp, #56	; 0x38
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <xQueueGenericCreateStatic+0x52>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <xQueueGenericCreateStatic+0x56>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <xQueueGenericCreateStatic+0x58>
 8009a32:	2300      	movs	r3, #0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	623b      	str	r3, [r7, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <xQueueGenericCreateStatic+0x7e>
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <xQueueGenericCreateStatic+0x82>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e000      	b.n	8009a60 <xQueueGenericCreateStatic+0x84>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	61fb      	str	r3, [r7, #28]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a7a:	2350      	movs	r3, #80	; 0x50
 8009a7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b50      	cmp	r3, #80	; 0x50
 8009a82:	d00a      	beq.n	8009a9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	61bb      	str	r3, [r7, #24]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00d      	beq.n	8009ac2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 f83f 	bl	8009b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3730      	adds	r7, #48	; 0x30
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	613b      	str	r3, [r7, #16]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	fb02 f303 	mul.w	r3, r2, r3
 8009afe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	3350      	adds	r3, #80	; 0x50
 8009b04:	4618      	mov	r0, r3
 8009b06:	f002 fa27 	bl	800bf58 <pvPortMalloc>
 8009b0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d011      	beq.n	8009b36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	3350      	adds	r3, #80	; 0x50
 8009b1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b24:	79fa      	ldrb	r2, [r7, #7]
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f805 	bl	8009b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b36:	69bb      	ldr	r3, [r7, #24]
	}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3720      	adds	r7, #32
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	e002      	b.n	8009b62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b6e:	2101      	movs	r1, #1
 8009b70:	69b8      	ldr	r0, [r7, #24]
 8009b72:	f7ff fecb 	bl	800990c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	78fa      	ldrb	r2, [r7, #3]
 8009b7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b08a      	sub	sp, #40	; 0x28
 8009b8a:	af02      	add	r7, sp, #8
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	61bb      	str	r3, [r7, #24]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d90a      	bls.n	8009bcc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	617b      	str	r3, [r7, #20]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bcc:	2302      	movs	r3, #2
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff ff00 	bl	80099dc <xQueueGenericCreateStatic>
 8009bdc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bea:	69fb      	ldr	r3, [r7, #28]
	}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	613b      	str	r3, [r7, #16]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d90a      	bls.n	8009c38 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60fb      	str	r3, [r7, #12]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c38:	2202      	movs	r2, #2
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff ff45 	bl	8009acc <xQueueGenericCreate>
 8009c42:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c50:	697b      	ldr	r3, [r7, #20]
	}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08e      	sub	sp, #56	; 0x38
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xQueueGenericSend+0x32>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <xQueueGenericSend+0x40>
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <xQueueGenericSend+0x44>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e000      	b.n	8009ca2 <xQueueGenericSend+0x46>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <xQueueGenericSend+0x60>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d103      	bne.n	8009cca <xQueueGenericSend+0x6e>
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <xQueueGenericSend+0x72>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <xQueueGenericSend+0x74>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xQueueGenericSend+0x8e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	623b      	str	r3, [r7, #32]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cea:	f001 fab5 	bl	800b258 <xTaskGetSchedulerState>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <xQueueGenericSend+0x9e>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <xQueueGenericSend+0xa2>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <xQueueGenericSend+0xa4>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <xQueueGenericSend+0xbe>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	61fb      	str	r3, [r7, #28]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d1a:	f001 fffb 	bl	800bd14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d302      	bcc.n	8009d30 <xQueueGenericSend+0xd4>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d129      	bne.n	8009d84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d36:	f000 faae 	bl	800a296 <prvCopyDataToQueue>
 8009d3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d010      	beq.n	8009d66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	3324      	adds	r3, #36	; 0x24
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 f8c3 	bl	800aed4 <xTaskRemoveFromEventList>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d013      	beq.n	8009d7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d54:	4b3f      	ldr	r3, [pc, #252]	; (8009e54 <xQueueGenericSend+0x1f8>)
 8009d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	e00a      	b.n	8009d7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d6c:	4b39      	ldr	r3, [pc, #228]	; (8009e54 <xQueueGenericSend+0x1f8>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d7c:	f001 fffa 	bl	800bd74 <vPortExitCritical>
				return pdPASS;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e063      	b.n	8009e4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d103      	bne.n	8009d92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d8a:	f001 fff3 	bl	800bd74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e05c      	b.n	8009e4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d106      	bne.n	8009da6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d98:	f107 0314 	add.w	r3, r7, #20
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f8fd 	bl	800af9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009da2:	2301      	movs	r3, #1
 8009da4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009da6:	f001 ffe5 	bl	800bd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009daa:	f000 fe69 	bl	800aa80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dae:	f001 ffb1 	bl	800bd14 <vPortEnterCritical>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dbe:	d103      	bne.n	8009dc8 <xQueueGenericSend+0x16c>
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dce:	b25b      	sxtb	r3, r3
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dd4:	d103      	bne.n	8009dde <xQueueGenericSend+0x182>
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dde:	f001 ffc9 	bl	800bd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009de2:	1d3a      	adds	r2, r7, #4
 8009de4:	f107 0314 	add.w	r3, r7, #20
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 f8ec 	bl	800afc8 <xTaskCheckForTimeOut>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d124      	bne.n	8009e40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df8:	f000 fb45 	bl	800a486 <prvIsQueueFull>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d018      	beq.n	8009e34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	3310      	adds	r3, #16
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 f812 	bl	800ae34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e12:	f000 fad0 	bl	800a3b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e16:	f000 fe41 	bl	800aa9c <xTaskResumeAll>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f47f af7c 	bne.w	8009d1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <xQueueGenericSend+0x1f8>)
 8009e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	e772      	b.n	8009d1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e36:	f000 fabe 	bl	800a3b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e3a:	f000 fe2f 	bl	800aa9c <xTaskResumeAll>
 8009e3e:	e76c      	b.n	8009d1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e42:	f000 fab8 	bl	800a3b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e46:	f000 fe29 	bl	800aa9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3738      	adds	r7, #56	; 0x38
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b090      	sub	sp, #64	; 0x40
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d103      	bne.n	8009e94 <xQueueGenericSendFromISR+0x3c>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <xQueueGenericSendFromISR+0x40>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <xQueueGenericSendFromISR+0x42>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d103      	bne.n	8009ec2 <xQueueGenericSendFromISR+0x6a>
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <xQueueGenericSendFromISR+0x6e>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <xQueueGenericSendFromISR+0x70>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	623b      	str	r3, [r7, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ee2:	f001 fff9 	bl	800bed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61fa      	str	r2, [r7, #28]
 8009efc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009efe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d302      	bcc.n	8009f14 <xQueueGenericSendFromISR+0xbc>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d12f      	bne.n	8009f74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f2a:	f000 f9b4 	bl	800a296 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f36:	d112      	bne.n	8009f5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d016      	beq.n	8009f6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	3324      	adds	r3, #36	; 0x24
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 ffc5 	bl	800aed4 <xTaskRemoveFromEventList>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00e      	beq.n	8009f6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	e007      	b.n	8009f6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f62:	3301      	adds	r3, #1
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	b25a      	sxtb	r2, r3
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f72:	e001      	b.n	8009f78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f74:	2300      	movs	r3, #0
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3740      	adds	r7, #64	; 0x40
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08c      	sub	sp, #48	; 0x30
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <xQueueReceive+0x30>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	623b      	str	r3, [r7, #32]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d103      	bne.n	8009fce <xQueueReceive+0x3e>
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <xQueueReceive+0x42>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e000      	b.n	8009fd4 <xQueueReceive+0x44>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <xQueueReceive+0x5e>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	61fb      	str	r3, [r7, #28]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fee:	f001 f933 	bl	800b258 <xTaskGetSchedulerState>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <xQueueReceive+0x6e>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <xQueueReceive+0x72>
 8009ffe:	2301      	movs	r3, #1
 800a000:	e000      	b.n	800a004 <xQueueReceive+0x74>
 800a002:	2300      	movs	r3, #0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <xQueueReceive+0x8e>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	61bb      	str	r3, [r7, #24]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a01e:	f001 fe79 	bl	800bd14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a026:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d01f      	beq.n	800a06e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a032:	f000 f99a 	bl	800a36a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	1e5a      	subs	r2, r3, #1
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00f      	beq.n	800a066 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	3310      	adds	r3, #16
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 ff42 	bl	800aed4 <xTaskRemoveFromEventList>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d007      	beq.n	800a066 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a056:	4b3d      	ldr	r3, [pc, #244]	; (800a14c <xQueueReceive+0x1bc>)
 800a058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a066:	f001 fe85 	bl	800bd74 <vPortExitCritical>
				return pdPASS;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e069      	b.n	800a142 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d103      	bne.n	800a07c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a074:	f001 fe7e 	bl	800bd74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a078:	2300      	movs	r3, #0
 800a07a:	e062      	b.n	800a142 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a082:	f107 0310 	add.w	r3, r7, #16
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff88 	bl	800af9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a08c:	2301      	movs	r3, #1
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a090:	f001 fe70 	bl	800bd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a094:	f000 fcf4 	bl	800aa80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a098:	f001 fe3c 	bl	800bd14 <vPortEnterCritical>
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0a2:	b25b      	sxtb	r3, r3
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0a8:	d103      	bne.n	800a0b2 <xQueueReceive+0x122>
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0b8:	b25b      	sxtb	r3, r3
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0be:	d103      	bne.n	800a0c8 <xQueueReceive+0x138>
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0c8:	f001 fe54 	bl	800bd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0cc:	1d3a      	adds	r2, r7, #4
 800a0ce:	f107 0310 	add.w	r3, r7, #16
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 ff77 	bl	800afc8 <xTaskCheckForTimeOut>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d123      	bne.n	800a128 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e2:	f000 f9ba 	bl	800a45a <prvIsQueueEmpty>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d017      	beq.n	800a11c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fe9d 	bl	800ae34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0fc:	f000 f95b 	bl	800a3b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a100:	f000 fccc 	bl	800aa9c <xTaskResumeAll>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d189      	bne.n	800a01e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a10a:	4b10      	ldr	r3, [pc, #64]	; (800a14c <xQueueReceive+0x1bc>)
 800a10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	e780      	b.n	800a01e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a11c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a11e:	f000 f94a 	bl	800a3b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a122:	f000 fcbb 	bl	800aa9c <xTaskResumeAll>
 800a126:	e77a      	b.n	800a01e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a12a:	f000 f944 	bl	800a3b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a12e:	f000 fcb5 	bl	800aa9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a134:	f000 f991 	bl	800a45a <prvIsQueueEmpty>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f43f af6f 	beq.w	800a01e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a142:	4618      	mov	r0, r3
 800a144:	3730      	adds	r7, #48	; 0x30
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08e      	sub	sp, #56	; 0x38
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	623b      	str	r3, [r7, #32]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <xQueueReceiveFromISR+0x3a>
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <xQueueReceiveFromISR+0x3e>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueReceiveFromISR+0x40>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	61fb      	str	r3, [r7, #28]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1aa:	f001 fe95 	bl	800bed8 <vPortValidateInterruptPriority>
	__asm volatile
 800a1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	61ba      	str	r2, [r7, #24]
 800a1c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a1c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d02f      	beq.n	800a236 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1e4:	f000 f8c1 	bl	800a36a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a1f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1f8:	d112      	bne.n	800a220 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	3310      	adds	r3, #16
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fe64 	bl	800aed4 <xTaskRemoveFromEventList>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00e      	beq.n	800a230 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e007      	b.n	800a230 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a224:	3301      	adds	r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	b25a      	sxtb	r2, r3
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a230:	2301      	movs	r3, #1
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
 800a234:	e001      	b.n	800a23a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a236:	2300      	movs	r3, #0
 800a238:	637b      	str	r3, [r7, #52]	; 0x34
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f383 8811 	msr	BASEPRI, r3
}
 800a244:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3738      	adds	r7, #56	; 0x38
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <vQueueDelete+0x28>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	60bb      	str	r3, [r7, #8]
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f947 	bl	800a50c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f001 ff09 	bl	800c0a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b086      	sub	sp, #24
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10d      	bne.n	800a2d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d14d      	bne.n	800a358 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 ffe7 	bl	800b294 <xTaskPriorityDisinherit>
 800a2c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	609a      	str	r2, [r3, #8]
 800a2ce:	e043      	b.n	800a358 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d119      	bne.n	800a30a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6858      	ldr	r0, [r3, #4]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	f002 f95b 	bl	800c59c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	441a      	add	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d32b      	bcc.n	800a358 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	605a      	str	r2, [r3, #4]
 800a308:	e026      	b.n	800a358 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	68d8      	ldr	r0, [r3, #12]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a312:	461a      	mov	r2, r3
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	f002 f941 	bl	800c59c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	425b      	negs	r3, r3
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	d207      	bcs.n	800a346 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	425b      	negs	r3, r3
 800a340:	441a      	add	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d105      	bne.n	800a358 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a360:	697b      	ldr	r3, [r7, #20]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d018      	beq.n	800a3ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	441a      	add	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	429a      	cmp	r2, r3
 800a394:	d303      	bcc.n	800a39e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68d9      	ldr	r1, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6838      	ldr	r0, [r7, #0]
 800a3aa:	f002 f8f7 	bl	800c59c <memcpy>
	}
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3be:	f001 fca9 	bl	800bd14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3ca:	e011      	b.n	800a3f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3324      	adds	r3, #36	; 0x24
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fd7b 	bl	800aed4 <xTaskRemoveFromEventList>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3e4:	f000 fe52 	bl	800b08c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dce9      	bgt.n	800a3cc <prvUnlockQueue+0x16>
 800a3f8:	e000      	b.n	800a3fc <prvUnlockQueue+0x46>
					break;
 800a3fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	22ff      	movs	r2, #255	; 0xff
 800a400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a404:	f001 fcb6 	bl	800bd74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a408:	f001 fc84 	bl	800bd14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a412:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a414:	e011      	b.n	800a43a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d012      	beq.n	800a444 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3310      	adds	r3, #16
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fd56 	bl	800aed4 <xTaskRemoveFromEventList>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a42e:	f000 fe2d 	bl	800b08c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	3b01      	subs	r3, #1
 800a436:	b2db      	uxtb	r3, r3
 800a438:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a43a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dce9      	bgt.n	800a416 <prvUnlockQueue+0x60>
 800a442:	e000      	b.n	800a446 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a444:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	22ff      	movs	r2, #255	; 0xff
 800a44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a44e:	f001 fc91 	bl	800bd74 <vPortExitCritical>
}
 800a452:	bf00      	nop
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a462:	f001 fc57 	bl	800bd14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d102      	bne.n	800a474 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e001      	b.n	800a478 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a478:	f001 fc7c 	bl	800bd74 <vPortExitCritical>

	return xReturn;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a48e:	f001 fc41 	bl	800bd14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d102      	bne.n	800a4a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e001      	b.n	800a4a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4a8:	f001 fc64 	bl	800bd74 <vPortExitCritical>

	return xReturn;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	e014      	b.n	800a4f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4c8:	4a0f      	ldr	r2, [pc, #60]	; (800a508 <vQueueAddToRegistry+0x50>)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4d4:	490c      	ldr	r1, [pc, #48]	; (800a508 <vQueueAddToRegistry+0x50>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4de:	4a0a      	ldr	r2, [pc, #40]	; (800a508 <vQueueAddToRegistry+0x50>)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	4413      	add	r3, r2
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4ea:	e006      	b.n	800a4fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b07      	cmp	r3, #7
 800a4f6:	d9e7      	bls.n	800a4c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	2000636c 	.word	0x2000636c

0800a50c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a514:	2300      	movs	r3, #0
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	e016      	b.n	800a548 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a51a:	4a10      	ldr	r2, [pc, #64]	; (800a55c <vQueueUnregisterQueue+0x50>)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	4413      	add	r3, r2
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	429a      	cmp	r2, r3
 800a528:	d10b      	bne.n	800a542 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a52a:	4a0c      	ldr	r2, [pc, #48]	; (800a55c <vQueueUnregisterQueue+0x50>)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2100      	movs	r1, #0
 800a530:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a534:	4a09      	ldr	r2, [pc, #36]	; (800a55c <vQueueUnregisterQueue+0x50>)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	4413      	add	r3, r2
 800a53c:	2200      	movs	r2, #0
 800a53e:	605a      	str	r2, [r3, #4]
				break;
 800a540:	e006      	b.n	800a550 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3301      	adds	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b07      	cmp	r3, #7
 800a54c:	d9e5      	bls.n	800a51a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	2000636c 	.word	0x2000636c

0800a560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a570:	f001 fbd0 	bl	800bd14 <vPortEnterCritical>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a580:	d103      	bne.n	800a58a <vQueueWaitForMessageRestricted+0x2a>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a590:	b25b      	sxtb	r3, r3
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a596:	d103      	bne.n	800a5a0 <vQueueWaitForMessageRestricted+0x40>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5a0:	f001 fbe8 	bl	800bd74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	3324      	adds	r3, #36	; 0x24
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	68b9      	ldr	r1, [r7, #8]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 fc61 	bl	800ae7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a5ba:	6978      	ldr	r0, [r7, #20]
 800a5bc:	f7ff fefb 	bl	800a3b6 <prvUnlockQueue>
	}
 800a5c0:	bf00      	nop
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08e      	sub	sp, #56	; 0x38
 800a5cc:	af04      	add	r7, sp, #16
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	623b      	str	r3, [r7, #32]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <xTaskCreateStatic+0x46>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	61fb      	str	r3, [r7, #28]
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a60e:	23bc      	movs	r3, #188	; 0xbc
 800a610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2bbc      	cmp	r3, #188	; 0xbc
 800a616:	d00a      	beq.n	800a62e <xTaskCreateStatic+0x66>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61bb      	str	r3, [r7, #24]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a62e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	2b00      	cmp	r3, #0
 800a634:	d01e      	beq.n	800a674 <xTaskCreateStatic+0xac>
 800a636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01b      	beq.n	800a674 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a644:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	2202      	movs	r2, #2
 800a64a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a64e:	2300      	movs	r3, #0
 800a650:	9303      	str	r3, [sp, #12]
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	9302      	str	r3, [sp, #8]
 800a656:	f107 0314 	add.w	r3, r7, #20
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	68b9      	ldr	r1, [r7, #8]
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 f850 	bl	800a70c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a66e:	f000 f8f3 	bl	800a858 <prvAddNewTaskToReadyList>
 800a672:	e001      	b.n	800a678 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a678:	697b      	ldr	r3, [r7, #20]
	}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3728      	adds	r7, #40	; 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a682:	b580      	push	{r7, lr}
 800a684:	b08c      	sub	sp, #48	; 0x30
 800a686:	af04      	add	r7, sp, #16
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	603b      	str	r3, [r7, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a692:	88fb      	ldrh	r3, [r7, #6]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fc5e 	bl	800bf58 <pvPortMalloc>
 800a69c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00e      	beq.n	800a6c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6a4:	20bc      	movs	r0, #188	; 0xbc
 800a6a6:	f001 fc57 	bl	800bf58 <pvPortMalloc>
 800a6aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	631a      	str	r2, [r3, #48]	; 0x30
 800a6b8:	e005      	b.n	800a6c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6ba:	6978      	ldr	r0, [r7, #20]
 800a6bc:	f001 fcf0 	bl	800c0a0 <vPortFree>
 800a6c0:	e001      	b.n	800a6c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d017      	beq.n	800a6fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6d4:	88fa      	ldrh	r2, [r7, #6]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9303      	str	r3, [sp, #12]
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	9302      	str	r3, [sp, #8]
 800a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f80e 	bl	800a70c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6f0:	69f8      	ldr	r0, [r7, #28]
 800a6f2:	f000 f8b1 	bl	800a858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	61bb      	str	r3, [r7, #24]
 800a6fa:	e002      	b.n	800a702 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a700:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a702:	69bb      	ldr	r3, [r7, #24]
	}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	461a      	mov	r2, r3
 800a724:	21a5      	movs	r1, #165	; 0xa5
 800a726:	f001 ff47 	bl	800c5b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a734:	3b01      	subs	r3, #1
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f023 0307 	bic.w	r3, r3, #7
 800a742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	617b      	str	r3, [r7, #20]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01f      	beq.n	800a7aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a76a:	2300      	movs	r3, #0
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	e012      	b.n	800a796 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	7819      	ldrb	r1, [r3, #0]
 800a778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	3334      	adds	r3, #52	; 0x34
 800a780:	460a      	mov	r2, r1
 800a782:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	4413      	add	r3, r2
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d006      	beq.n	800a79e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	3301      	adds	r3, #1
 800a794:	61fb      	str	r3, [r7, #28]
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	2b0f      	cmp	r3, #15
 800a79a:	d9e9      	bls.n	800a770 <prvInitialiseNewTask+0x64>
 800a79c:	e000      	b.n	800a7a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800a79e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7a8:	e003      	b.n	800a7b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	2b37      	cmp	r3, #55	; 0x37
 800a7b6:	d901      	bls.n	800a7bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7b8:	2337      	movs	r3, #55	; 0x37
 800a7ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff f806 	bl	80097e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	3318      	adds	r3, #24
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff f801 	bl	80097e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	2200      	movs	r2, #0
 800a804:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	3354      	adds	r3, #84	; 0x54
 800a80c:	2260      	movs	r2, #96	; 0x60
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f001 fed1 	bl	800c5b8 <memset>
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	4a0c      	ldr	r2, [pc, #48]	; (800a84c <prvInitialiseNewTask+0x140>)
 800a81a:	659a      	str	r2, [r3, #88]	; 0x58
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	4a0c      	ldr	r2, [pc, #48]	; (800a850 <prvInitialiseNewTask+0x144>)
 800a820:	65da      	str	r2, [r3, #92]	; 0x5c
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	4a0b      	ldr	r2, [pc, #44]	; (800a854 <prvInitialiseNewTask+0x148>)
 800a826:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	69b8      	ldr	r0, [r7, #24]
 800a82e:	f001 f941 	bl	800bab4 <pxPortInitialiseStack>
 800a832:	4602      	mov	r2, r0
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a842:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a844:	bf00      	nop
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	0800fa84 	.word	0x0800fa84
 800a850:	0800faa4 	.word	0x0800faa4
 800a854:	0800fa64 	.word	0x0800fa64

0800a858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a860:	f001 fa58 	bl	800bd14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a864:	4b2d      	ldr	r3, [pc, #180]	; (800a91c <prvAddNewTaskToReadyList+0xc4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3301      	adds	r3, #1
 800a86a:	4a2c      	ldr	r2, [pc, #176]	; (800a91c <prvAddNewTaskToReadyList+0xc4>)
 800a86c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a86e:	4b2c      	ldr	r3, [pc, #176]	; (800a920 <prvAddNewTaskToReadyList+0xc8>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a876:	4a2a      	ldr	r2, [pc, #168]	; (800a920 <prvAddNewTaskToReadyList+0xc8>)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a87c:	4b27      	ldr	r3, [pc, #156]	; (800a91c <prvAddNewTaskToReadyList+0xc4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d110      	bne.n	800a8a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a884:	f000 fc26 	bl	800b0d4 <prvInitialiseTaskLists>
 800a888:	e00d      	b.n	800a8a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a88a:	4b26      	ldr	r3, [pc, #152]	; (800a924 <prvAddNewTaskToReadyList+0xcc>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a892:	4b23      	ldr	r3, [pc, #140]	; (800a920 <prvAddNewTaskToReadyList+0xc8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d802      	bhi.n	800a8a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8a0:	4a1f      	ldr	r2, [pc, #124]	; (800a920 <prvAddNewTaskToReadyList+0xc8>)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8a6:	4b20      	ldr	r3, [pc, #128]	; (800a928 <prvAddNewTaskToReadyList+0xd0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	4a1e      	ldr	r2, [pc, #120]	; (800a928 <prvAddNewTaskToReadyList+0xd0>)
 800a8ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8b0:	4b1d      	ldr	r3, [pc, #116]	; (800a928 <prvAddNewTaskToReadyList+0xd0>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8bc:	4b1b      	ldr	r3, [pc, #108]	; (800a92c <prvAddNewTaskToReadyList+0xd4>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d903      	bls.n	800a8cc <prvAddNewTaskToReadyList+0x74>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c8:	4a18      	ldr	r2, [pc, #96]	; (800a92c <prvAddNewTaskToReadyList+0xd4>)
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4a15      	ldr	r2, [pc, #84]	; (800a930 <prvAddNewTaskToReadyList+0xd8>)
 800a8da:	441a      	add	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	f7fe ff8b 	bl	80097fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8e8:	f001 fa44 	bl	800bd74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <prvAddNewTaskToReadyList+0xcc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8f4:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <prvAddNewTaskToReadyList+0xc8>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d207      	bcs.n	800a912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a902:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <prvAddNewTaskToReadyList+0xdc>)
 800a904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20006880 	.word	0x20006880
 800a920:	200063ac 	.word	0x200063ac
 800a924:	2000688c 	.word	0x2000688c
 800a928:	2000689c 	.word	0x2000689c
 800a92c:	20006888 	.word	0x20006888
 800a930:	200063b0 	.word	0x200063b0
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d017      	beq.n	800a97a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a94a:	4b13      	ldr	r3, [pc, #76]	; (800a998 <vTaskDelay+0x60>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <vTaskDelay+0x30>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	60bb      	str	r3, [r7, #8]
}
 800a964:	bf00      	nop
 800a966:	e7fe      	b.n	800a966 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a968:	f000 f88a 	bl	800aa80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a96c:	2100      	movs	r1, #0
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fcfe 	bl	800b370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a974:	f000 f892 	bl	800aa9c <xTaskResumeAll>
 800a978:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d107      	bne.n	800a990 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <vTaskDelay+0x64>)
 800a982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a990:	bf00      	nop
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200068a8 	.word	0x200068a8
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08a      	sub	sp, #40	; 0x28
 800a9a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ae:	463a      	mov	r2, r7
 800a9b0:	1d39      	adds	r1, r7, #4
 800a9b2:	f107 0308 	add.w	r3, r7, #8
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fec0 	bl	800973c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	9202      	str	r2, [sp, #8]
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	460a      	mov	r2, r1
 800a9ce:	4924      	ldr	r1, [pc, #144]	; (800aa60 <vTaskStartScheduler+0xc0>)
 800a9d0:	4824      	ldr	r0, [pc, #144]	; (800aa64 <vTaskStartScheduler+0xc4>)
 800a9d2:	f7ff fdf9 	bl	800a5c8 <xTaskCreateStatic>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4a23      	ldr	r2, [pc, #140]	; (800aa68 <vTaskStartScheduler+0xc8>)
 800a9da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9dc:	4b22      	ldr	r3, [pc, #136]	; (800aa68 <vTaskStartScheduler+0xc8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	e001      	b.n	800a9ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d102      	bne.n	800a9fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9f4:	f000 fd10 	bl	800b418 <xTimerCreateTimerTask>
 800a9f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d11b      	bne.n	800aa38 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	613b      	str	r3, [r7, #16]
}
 800aa12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa14:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <vTaskStartScheduler+0xcc>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3354      	adds	r3, #84	; 0x54
 800aa1a:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <vTaskStartScheduler+0xd0>)
 800aa1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa1e:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <vTaskStartScheduler+0xd4>)
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa26:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <vTaskStartScheduler+0xd8>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa2c:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <vTaskStartScheduler+0xdc>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa32:	f001 f8cd 	bl	800bbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa36:	e00e      	b.n	800aa56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa3e:	d10a      	bne.n	800aa56 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	60fb      	str	r3, [r7, #12]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <vTaskStartScheduler+0xb4>
}
 800aa56:	bf00      	nop
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800d8cc 	.word	0x0800d8cc
 800aa64:	0800b0a5 	.word	0x0800b0a5
 800aa68:	200068a4 	.word	0x200068a4
 800aa6c:	200063ac 	.word	0x200063ac
 800aa70:	200000a8 	.word	0x200000a8
 800aa74:	200068a0 	.word	0x200068a0
 800aa78:	2000688c 	.word	0x2000688c
 800aa7c:	20006884 	.word	0x20006884

0800aa80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa84:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <vTaskSuspendAll+0x18>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	4a03      	ldr	r2, [pc, #12]	; (800aa98 <vTaskSuspendAll+0x18>)
 800aa8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa8e:	bf00      	nop
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	200068a8 	.word	0x200068a8

0800aa9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aaaa:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <xTaskResumeAll+0x118>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10a      	bne.n	800aac8 <xTaskResumeAll+0x2c>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	603b      	str	r3, [r7, #0]
}
 800aac4:	bf00      	nop
 800aac6:	e7fe      	b.n	800aac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aac8:	f001 f924 	bl	800bd14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aacc:	4b39      	ldr	r3, [pc, #228]	; (800abb4 <xTaskResumeAll+0x118>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	4a38      	ldr	r2, [pc, #224]	; (800abb4 <xTaskResumeAll+0x118>)
 800aad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aad6:	4b37      	ldr	r3, [pc, #220]	; (800abb4 <xTaskResumeAll+0x118>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d162      	bne.n	800aba4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aade:	4b36      	ldr	r3, [pc, #216]	; (800abb8 <xTaskResumeAll+0x11c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d05e      	beq.n	800aba4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aae6:	e02f      	b.n	800ab48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	4b34      	ldr	r3, [pc, #208]	; (800abbc <xTaskResumeAll+0x120>)
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3318      	adds	r3, #24
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe fedf 	bl	80098b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe feda 	bl	80098b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	4b2d      	ldr	r3, [pc, #180]	; (800abc0 <xTaskResumeAll+0x124>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d903      	bls.n	800ab18 <xTaskResumeAll+0x7c>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	4a2a      	ldr	r2, [pc, #168]	; (800abc0 <xTaskResumeAll+0x124>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a27      	ldr	r2, [pc, #156]	; (800abc4 <xTaskResumeAll+0x128>)
 800ab26:	441a      	add	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe fe65 	bl	80097fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab38:	4b23      	ldr	r3, [pc, #140]	; (800abc8 <xTaskResumeAll+0x12c>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d302      	bcc.n	800ab48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab42:	4b22      	ldr	r3, [pc, #136]	; (800abcc <xTaskResumeAll+0x130>)
 800ab44:	2201      	movs	r2, #1
 800ab46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab48:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <xTaskResumeAll+0x120>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1cb      	bne.n	800aae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d001      	beq.n	800ab5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab56:	f000 fb5f 	bl	800b218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab5a:	4b1d      	ldr	r3, [pc, #116]	; (800abd0 <xTaskResumeAll+0x134>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d010      	beq.n	800ab88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab66:	f000 f847 	bl	800abf8 <xTaskIncrementTick>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab70:	4b16      	ldr	r3, [pc, #88]	; (800abcc <xTaskResumeAll+0x130>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1f1      	bne.n	800ab66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab82:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <xTaskResumeAll+0x134>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <xTaskResumeAll+0x130>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d009      	beq.n	800aba4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab90:	2301      	movs	r3, #1
 800ab92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab94:	4b0f      	ldr	r3, [pc, #60]	; (800abd4 <xTaskResumeAll+0x138>)
 800ab96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aba4:	f001 f8e6 	bl	800bd74 <vPortExitCritical>

	return xAlreadyYielded;
 800aba8:	68bb      	ldr	r3, [r7, #8]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200068a8 	.word	0x200068a8
 800abb8:	20006880 	.word	0x20006880
 800abbc:	20006840 	.word	0x20006840
 800abc0:	20006888 	.word	0x20006888
 800abc4:	200063b0 	.word	0x200063b0
 800abc8:	200063ac 	.word	0x200063ac
 800abcc:	20006894 	.word	0x20006894
 800abd0:	20006890 	.word	0x20006890
 800abd4:	e000ed04 	.word	0xe000ed04

0800abd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abde:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <xTaskGetTickCount+0x1c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abe4:	687b      	ldr	r3, [r7, #4]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20006884 	.word	0x20006884

0800abf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac02:	4b4f      	ldr	r3, [pc, #316]	; (800ad40 <xTaskIncrementTick+0x148>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f040 808f 	bne.w	800ad2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac0c:	4b4d      	ldr	r3, [pc, #308]	; (800ad44 <xTaskIncrementTick+0x14c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3301      	adds	r3, #1
 800ac12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac14:	4a4b      	ldr	r2, [pc, #300]	; (800ad44 <xTaskIncrementTick+0x14c>)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d120      	bne.n	800ac62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac20:	4b49      	ldr	r3, [pc, #292]	; (800ad48 <xTaskIncrementTick+0x150>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	603b      	str	r3, [r7, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <xTaskIncrementTick+0x46>
 800ac40:	4b41      	ldr	r3, [pc, #260]	; (800ad48 <xTaskIncrementTick+0x150>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	4b41      	ldr	r3, [pc, #260]	; (800ad4c <xTaskIncrementTick+0x154>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a3f      	ldr	r2, [pc, #252]	; (800ad48 <xTaskIncrementTick+0x150>)
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	4a3f      	ldr	r2, [pc, #252]	; (800ad4c <xTaskIncrementTick+0x154>)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	4b3e      	ldr	r3, [pc, #248]	; (800ad50 <xTaskIncrementTick+0x158>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	4a3d      	ldr	r2, [pc, #244]	; (800ad50 <xTaskIncrementTick+0x158>)
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	f000 fadb 	bl	800b218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac62:	4b3c      	ldr	r3, [pc, #240]	; (800ad54 <xTaskIncrementTick+0x15c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d349      	bcc.n	800ad00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac6c:	4b36      	ldr	r3, [pc, #216]	; (800ad48 <xTaskIncrementTick+0x150>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d104      	bne.n	800ac80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac76:	4b37      	ldr	r3, [pc, #220]	; (800ad54 <xTaskIncrementTick+0x15c>)
 800ac78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac7c:	601a      	str	r2, [r3, #0]
					break;
 800ac7e:	e03f      	b.n	800ad00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac80:	4b31      	ldr	r3, [pc, #196]	; (800ad48 <xTaskIncrementTick+0x150>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d203      	bcs.n	800aca0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac98:	4a2e      	ldr	r2, [pc, #184]	; (800ad54 <xTaskIncrementTick+0x15c>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac9e:	e02f      	b.n	800ad00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fe07 	bl	80098b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d004      	beq.n	800acbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	3318      	adds	r3, #24
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fdfe 	bl	80098b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc0:	4b25      	ldr	r3, [pc, #148]	; (800ad58 <xTaskIncrementTick+0x160>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d903      	bls.n	800acd0 <xTaskIncrementTick+0xd8>
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	4a22      	ldr	r2, [pc, #136]	; (800ad58 <xTaskIncrementTick+0x160>)
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4a1f      	ldr	r2, [pc, #124]	; (800ad5c <xTaskIncrementTick+0x164>)
 800acde:	441a      	add	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	3304      	adds	r3, #4
 800ace4:	4619      	mov	r1, r3
 800ace6:	4610      	mov	r0, r2
 800ace8:	f7fe fd89 	bl	80097fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf0:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <xTaskIncrementTick+0x168>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d3b8      	bcc.n	800ac6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acfa:	2301      	movs	r3, #1
 800acfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acfe:	e7b5      	b.n	800ac6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad00:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <xTaskIncrementTick+0x168>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad06:	4915      	ldr	r1, [pc, #84]	; (800ad5c <xTaskIncrementTick+0x164>)
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	440b      	add	r3, r1
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d901      	bls.n	800ad1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad1c:	4b11      	ldr	r3, [pc, #68]	; (800ad64 <xTaskIncrementTick+0x16c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d007      	beq.n	800ad34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	e004      	b.n	800ad34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <xTaskIncrementTick+0x170>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	4a0d      	ldr	r2, [pc, #52]	; (800ad68 <xTaskIncrementTick+0x170>)
 800ad32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad34:	697b      	ldr	r3, [r7, #20]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	200068a8 	.word	0x200068a8
 800ad44:	20006884 	.word	0x20006884
 800ad48:	20006838 	.word	0x20006838
 800ad4c:	2000683c 	.word	0x2000683c
 800ad50:	20006898 	.word	0x20006898
 800ad54:	200068a0 	.word	0x200068a0
 800ad58:	20006888 	.word	0x20006888
 800ad5c:	200063b0 	.word	0x200063b0
 800ad60:	200063ac 	.word	0x200063ac
 800ad64:	20006894 	.word	0x20006894
 800ad68:	20006890 	.word	0x20006890

0800ad6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad72:	4b2a      	ldr	r3, [pc, #168]	; (800ae1c <vTaskSwitchContext+0xb0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad7a:	4b29      	ldr	r3, [pc, #164]	; (800ae20 <vTaskSwitchContext+0xb4>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad80:	e046      	b.n	800ae10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad82:	4b27      	ldr	r3, [pc, #156]	; (800ae20 <vTaskSwitchContext+0xb4>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad88:	4b26      	ldr	r3, [pc, #152]	; (800ae24 <vTaskSwitchContext+0xb8>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	e010      	b.n	800adb2 <vTaskSwitchContext+0x46>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <vTaskSwitchContext+0x40>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	607b      	str	r3, [r7, #4]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <vTaskSwitchContext+0x3e>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3b01      	subs	r3, #1
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	491d      	ldr	r1, [pc, #116]	; (800ae28 <vTaskSwitchContext+0xbc>)
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	440b      	add	r3, r1
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0e4      	beq.n	800ad90 <vTaskSwitchContext+0x24>
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4a15      	ldr	r2, [pc, #84]	; (800ae28 <vTaskSwitchContext+0xbc>)
 800add2:	4413      	add	r3, r2
 800add4:	60bb      	str	r3, [r7, #8]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	605a      	str	r2, [r3, #4]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3308      	adds	r3, #8
 800ade8:	429a      	cmp	r2, r3
 800adea:	d104      	bne.n	800adf6 <vTaskSwitchContext+0x8a>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	605a      	str	r2, [r3, #4]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	4a0b      	ldr	r2, [pc, #44]	; (800ae2c <vTaskSwitchContext+0xc0>)
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	4a08      	ldr	r2, [pc, #32]	; (800ae24 <vTaskSwitchContext+0xb8>)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae06:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <vTaskSwitchContext+0xc0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3354      	adds	r3, #84	; 0x54
 800ae0c:	4a08      	ldr	r2, [pc, #32]	; (800ae30 <vTaskSwitchContext+0xc4>)
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	200068a8 	.word	0x200068a8
 800ae20:	20006894 	.word	0x20006894
 800ae24:	20006888 	.word	0x20006888
 800ae28:	200063b0 	.word	0x200063b0
 800ae2c:	200063ac 	.word	0x200063ac
 800ae30:	200000a8 	.word	0x200000a8

0800ae34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60fb      	str	r3, [r7, #12]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <vTaskPlaceOnEventList+0x44>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3318      	adds	r3, #24
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fe fcef 	bl	8009846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae68:	2101      	movs	r1, #1
 800ae6a:	6838      	ldr	r0, [r7, #0]
 800ae6c:	f000 fa80 	bl	800b370 <prvAddCurrentTaskToDelayedList>
}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	200063ac 	.word	0x200063ac

0800ae7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	617b      	str	r3, [r7, #20]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <vTaskPlaceOnEventListRestricted+0x54>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3318      	adds	r3, #24
 800aeaa:	4619      	mov	r1, r3
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7fe fca6 	bl	80097fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aebc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	68b8      	ldr	r0, [r7, #8]
 800aec2:	f000 fa55 	bl	800b370 <prvAddCurrentTaskToDelayedList>
	}
 800aec6:	bf00      	nop
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	200063ac 	.word	0x200063ac

0800aed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10a      	bne.n	800af00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	60fb      	str	r3, [r7, #12]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3318      	adds	r3, #24
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe fcd7 	bl	80098b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af0a:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <xTaskRemoveFromEventList+0xb0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d11d      	bne.n	800af4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	3304      	adds	r3, #4
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fcce 	bl	80098b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af20:	4b19      	ldr	r3, [pc, #100]	; (800af88 <xTaskRemoveFromEventList+0xb4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	429a      	cmp	r2, r3
 800af26:	d903      	bls.n	800af30 <xTaskRemoveFromEventList+0x5c>
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	4a16      	ldr	r2, [pc, #88]	; (800af88 <xTaskRemoveFromEventList+0xb4>)
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4a13      	ldr	r2, [pc, #76]	; (800af8c <xTaskRemoveFromEventList+0xb8>)
 800af3e:	441a      	add	r2, r3
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	3304      	adds	r3, #4
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7fe fc59 	bl	80097fe <vListInsertEnd>
 800af4c:	e005      	b.n	800af5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	3318      	adds	r3, #24
 800af52:	4619      	mov	r1, r3
 800af54:	480e      	ldr	r0, [pc, #56]	; (800af90 <xTaskRemoveFromEventList+0xbc>)
 800af56:	f7fe fc52 	bl	80097fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5e:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <xTaskRemoveFromEventList+0xc0>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	429a      	cmp	r2, r3
 800af66:	d905      	bls.n	800af74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af68:	2301      	movs	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <xTaskRemoveFromEventList+0xc4>)
 800af6e:	2201      	movs	r2, #1
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	e001      	b.n	800af78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af78:	697b      	ldr	r3, [r7, #20]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200068a8 	.word	0x200068a8
 800af88:	20006888 	.word	0x20006888
 800af8c:	200063b0 	.word	0x200063b0
 800af90:	20006840 	.word	0x20006840
 800af94:	200063ac 	.word	0x200063ac
 800af98:	20006894 	.word	0x20006894

0800af9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <vTaskInternalSetTimeOutState+0x24>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afac:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <vTaskInternalSetTimeOutState+0x28>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	605a      	str	r2, [r3, #4]
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	20006898 	.word	0x20006898
 800afc4:	20006884 	.word	0x20006884

0800afc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10a      	bne.n	800afee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	613b      	str	r3, [r7, #16]
}
 800afea:	bf00      	nop
 800afec:	e7fe      	b.n	800afec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	60fb      	str	r3, [r7, #12]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b00a:	f000 fe83 	bl	800bd14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b00e:	4b1d      	ldr	r3, [pc, #116]	; (800b084 <xTaskCheckForTimeOut+0xbc>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b026:	d102      	bne.n	800b02e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b028:	2300      	movs	r3, #0
 800b02a:	61fb      	str	r3, [r7, #28]
 800b02c:	e023      	b.n	800b076 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	4b15      	ldr	r3, [pc, #84]	; (800b088 <xTaskCheckForTimeOut+0xc0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	429a      	cmp	r2, r3
 800b038:	d007      	beq.n	800b04a <xTaskCheckForTimeOut+0x82>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	429a      	cmp	r2, r3
 800b042:	d302      	bcc.n	800b04a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	61fb      	str	r3, [r7, #28]
 800b048:	e015      	b.n	800b076 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	429a      	cmp	r2, r3
 800b052:	d20b      	bcs.n	800b06c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	1ad2      	subs	r2, r2, r3
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff ff9b 	bl	800af9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b066:	2300      	movs	r3, #0
 800b068:	61fb      	str	r3, [r7, #28]
 800b06a:	e004      	b.n	800b076 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2200      	movs	r2, #0
 800b070:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b072:	2301      	movs	r3, #1
 800b074:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b076:	f000 fe7d 	bl	800bd74 <vPortExitCritical>

	return xReturn;
 800b07a:	69fb      	ldr	r3, [r7, #28]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20006884 	.word	0x20006884
 800b088:	20006898 	.word	0x20006898

0800b08c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b08c:	b480      	push	{r7}
 800b08e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b090:	4b03      	ldr	r3, [pc, #12]	; (800b0a0 <vTaskMissedYield+0x14>)
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]
}
 800b096:	bf00      	nop
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	20006894 	.word	0x20006894

0800b0a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0ac:	f000 f852 	bl	800b154 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0b0:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <prvIdleTask+0x28>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d9f9      	bls.n	800b0ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0b8:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <prvIdleTask+0x2c>)
 800b0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0c8:	e7f0      	b.n	800b0ac <prvIdleTask+0x8>
 800b0ca:	bf00      	nop
 800b0cc:	200063b0 	.word	0x200063b0
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0da:	2300      	movs	r3, #0
 800b0dc:	607b      	str	r3, [r7, #4]
 800b0de:	e00c      	b.n	800b0fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4a12      	ldr	r2, [pc, #72]	; (800b134 <prvInitialiseTaskLists+0x60>)
 800b0ec:	4413      	add	r3, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fb58 	bl	80097a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	607b      	str	r3, [r7, #4]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b37      	cmp	r3, #55	; 0x37
 800b0fe:	d9ef      	bls.n	800b0e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b100:	480d      	ldr	r0, [pc, #52]	; (800b138 <prvInitialiseTaskLists+0x64>)
 800b102:	f7fe fb4f 	bl	80097a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b106:	480d      	ldr	r0, [pc, #52]	; (800b13c <prvInitialiseTaskLists+0x68>)
 800b108:	f7fe fb4c 	bl	80097a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b10c:	480c      	ldr	r0, [pc, #48]	; (800b140 <prvInitialiseTaskLists+0x6c>)
 800b10e:	f7fe fb49 	bl	80097a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b112:	480c      	ldr	r0, [pc, #48]	; (800b144 <prvInitialiseTaskLists+0x70>)
 800b114:	f7fe fb46 	bl	80097a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b118:	480b      	ldr	r0, [pc, #44]	; (800b148 <prvInitialiseTaskLists+0x74>)
 800b11a:	f7fe fb43 	bl	80097a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b11e:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <prvInitialiseTaskLists+0x78>)
 800b120:	4a05      	ldr	r2, [pc, #20]	; (800b138 <prvInitialiseTaskLists+0x64>)
 800b122:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b124:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <prvInitialiseTaskLists+0x7c>)
 800b126:	4a05      	ldr	r2, [pc, #20]	; (800b13c <prvInitialiseTaskLists+0x68>)
 800b128:	601a      	str	r2, [r3, #0]
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200063b0 	.word	0x200063b0
 800b138:	20006810 	.word	0x20006810
 800b13c:	20006824 	.word	0x20006824
 800b140:	20006840 	.word	0x20006840
 800b144:	20006854 	.word	0x20006854
 800b148:	2000686c 	.word	0x2000686c
 800b14c:	20006838 	.word	0x20006838
 800b150:	2000683c 	.word	0x2000683c

0800b154 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b15a:	e019      	b.n	800b190 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b15c:	f000 fdda 	bl	800bd14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b160:	4b10      	ldr	r3, [pc, #64]	; (800b1a4 <prvCheckTasksWaitingTermination+0x50>)
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3304      	adds	r3, #4
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fe fba3 	bl	80098b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b172:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <prvCheckTasksWaitingTermination+0x54>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3b01      	subs	r3, #1
 800b178:	4a0b      	ldr	r2, [pc, #44]	; (800b1a8 <prvCheckTasksWaitingTermination+0x54>)
 800b17a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b17c:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <prvCheckTasksWaitingTermination+0x58>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3b01      	subs	r3, #1
 800b182:	4a0a      	ldr	r2, [pc, #40]	; (800b1ac <prvCheckTasksWaitingTermination+0x58>)
 800b184:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b186:	f000 fdf5 	bl	800bd74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f810 	bl	800b1b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b190:	4b06      	ldr	r3, [pc, #24]	; (800b1ac <prvCheckTasksWaitingTermination+0x58>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e1      	bne.n	800b15c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20006854 	.word	0x20006854
 800b1a8:	20006880 	.word	0x20006880
 800b1ac:	20006868 	.word	0x20006868

0800b1b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3354      	adds	r3, #84	; 0x54
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 fb07 	bl	800c7d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d108      	bne.n	800b1de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 ff65 	bl	800c0a0 <vPortFree>
				vPortFree( pxTCB );
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 ff62 	bl	800c0a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1dc:	e018      	b.n	800b210 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d103      	bne.n	800b1f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 ff59 	bl	800c0a0 <vPortFree>
	}
 800b1ee:	e00f      	b.n	800b210 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d00a      	beq.n	800b210 <prvDeleteTCB+0x60>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	60fb      	str	r3, [r7, #12]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <prvDeleteTCB+0x5e>
	}
 800b210:	bf00      	nop
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b21e:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <prvResetNextTaskUnblockTime+0x38>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d104      	bne.n	800b232 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b228:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <prvResetNextTaskUnblockTime+0x3c>)
 800b22a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b22e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b230:	e008      	b.n	800b244 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b232:	4b07      	ldr	r3, [pc, #28]	; (800b250 <prvResetNextTaskUnblockTime+0x38>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	4a04      	ldr	r2, [pc, #16]	; (800b254 <prvResetNextTaskUnblockTime+0x3c>)
 800b242:	6013      	str	r3, [r2, #0]
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20006838 	.word	0x20006838
 800b254:	200068a0 	.word	0x200068a0

0800b258 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <xTaskGetSchedulerState+0x34>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d102      	bne.n	800b26c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b266:	2301      	movs	r3, #1
 800b268:	607b      	str	r3, [r7, #4]
 800b26a:	e008      	b.n	800b27e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b26c:	4b08      	ldr	r3, [pc, #32]	; (800b290 <xTaskGetSchedulerState+0x38>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b274:	2302      	movs	r3, #2
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	e001      	b.n	800b27e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b27a:	2300      	movs	r3, #0
 800b27c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b27e:	687b      	ldr	r3, [r7, #4]
	}
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	2000688c 	.word	0x2000688c
 800b290:	200068a8 	.word	0x200068a8

0800b294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d056      	beq.n	800b358 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2aa:	4b2e      	ldr	r3, [pc, #184]	; (800b364 <xTaskPriorityDisinherit+0xd0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d00a      	beq.n	800b2ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	60fb      	str	r3, [r7, #12]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10a      	bne.n	800b2e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	60bb      	str	r3, [r7, #8]
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ec:	1e5a      	subs	r2, r3, #1
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d02c      	beq.n	800b358 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b302:	2b00      	cmp	r3, #0
 800b304:	d128      	bne.n	800b358 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	3304      	adds	r3, #4
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fad4 	bl	80098b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <xTaskPriorityDisinherit+0xd4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d903      	bls.n	800b338 <xTaskPriorityDisinherit+0xa4>
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	4a0c      	ldr	r2, [pc, #48]	; (800b368 <xTaskPriorityDisinherit+0xd4>)
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4a09      	ldr	r2, [pc, #36]	; (800b36c <xTaskPriorityDisinherit+0xd8>)
 800b346:	441a      	add	r2, r3
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	3304      	adds	r3, #4
 800b34c:	4619      	mov	r1, r3
 800b34e:	4610      	mov	r0, r2
 800b350:	f7fe fa55 	bl	80097fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b354:	2301      	movs	r3, #1
 800b356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b358:	697b      	ldr	r3, [r7, #20]
	}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3718      	adds	r7, #24
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	200063ac 	.word	0x200063ac
 800b368:	20006888 	.word	0x20006888
 800b36c:	200063b0 	.word	0x200063b0

0800b370 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b37a:	4b21      	ldr	r3, [pc, #132]	; (800b400 <prvAddCurrentTaskToDelayedList+0x90>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b380:	4b20      	ldr	r3, [pc, #128]	; (800b404 <prvAddCurrentTaskToDelayedList+0x94>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3304      	adds	r3, #4
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe fa96 	bl	80098b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b392:	d10a      	bne.n	800b3aa <prvAddCurrentTaskToDelayedList+0x3a>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d007      	beq.n	800b3aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b39a:	4b1a      	ldr	r3, [pc, #104]	; (800b404 <prvAddCurrentTaskToDelayedList+0x94>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4819      	ldr	r0, [pc, #100]	; (800b408 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3a4:	f7fe fa2b 	bl	80097fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3a8:	e026      	b.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3b2:	4b14      	ldr	r3, [pc, #80]	; (800b404 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d209      	bcs.n	800b3d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f7fe fa39 	bl	8009846 <vListInsert>
}
 800b3d4:	e010      	b.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3d6:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	f7fe fa2f 	bl	8009846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d202      	bcs.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3f2:	4a08      	ldr	r2, [pc, #32]	; (800b414 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	6013      	str	r3, [r2, #0]
}
 800b3f8:	bf00      	nop
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	20006884 	.word	0x20006884
 800b404:	200063ac 	.word	0x200063ac
 800b408:	2000686c 	.word	0x2000686c
 800b40c:	2000683c 	.word	0x2000683c
 800b410:	20006838 	.word	0x20006838
 800b414:	200068a0 	.word	0x200068a0

0800b418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08a      	sub	sp, #40	; 0x28
 800b41c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b422:	f000 fb07 	bl	800ba34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b426:	4b1c      	ldr	r3, [pc, #112]	; (800b498 <xTimerCreateTimerTask+0x80>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d021      	beq.n	800b472 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b432:	2300      	movs	r3, #0
 800b434:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b436:	1d3a      	adds	r2, r7, #4
 800b438:	f107 0108 	add.w	r1, r7, #8
 800b43c:	f107 030c 	add.w	r3, r7, #12
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe f995 	bl	8009770 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	9202      	str	r2, [sp, #8]
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	2302      	movs	r3, #2
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	2300      	movs	r3, #0
 800b456:	460a      	mov	r2, r1
 800b458:	4910      	ldr	r1, [pc, #64]	; (800b49c <xTimerCreateTimerTask+0x84>)
 800b45a:	4811      	ldr	r0, [pc, #68]	; (800b4a0 <xTimerCreateTimerTask+0x88>)
 800b45c:	f7ff f8b4 	bl	800a5c8 <xTaskCreateStatic>
 800b460:	4603      	mov	r3, r0
 800b462:	4a10      	ldr	r2, [pc, #64]	; (800b4a4 <xTimerCreateTimerTask+0x8c>)
 800b464:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b466:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <xTimerCreateTimerTask+0x8c>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b46e:	2301      	movs	r3, #1
 800b470:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	613b      	str	r3, [r7, #16]
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b48e:	697b      	ldr	r3, [r7, #20]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	200068dc 	.word	0x200068dc
 800b49c:	0800d8d4 	.word	0x0800d8d4
 800b4a0:	0800b5dd 	.word	0x0800b5dd
 800b4a4:	200068e0 	.word	0x200068e0

0800b4a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	; 0x28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	623b      	str	r3, [r7, #32]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4d6:	4b1a      	ldr	r3, [pc, #104]	; (800b540 <xTimerGenericCommand+0x98>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d02a      	beq.n	800b534 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	2b05      	cmp	r3, #5
 800b4ee:	dc18      	bgt.n	800b522 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4f0:	f7ff feb2 	bl	800b258 <xTaskGetSchedulerState>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d109      	bne.n	800b50e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4fa:	4b11      	ldr	r3, [pc, #68]	; (800b540 <xTimerGenericCommand+0x98>)
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f107 0110 	add.w	r1, r7, #16
 800b502:	2300      	movs	r3, #0
 800b504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b506:	f7fe fba9 	bl	8009c5c <xQueueGenericSend>
 800b50a:	6278      	str	r0, [r7, #36]	; 0x24
 800b50c:	e012      	b.n	800b534 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <xTimerGenericCommand+0x98>)
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	f107 0110 	add.w	r1, r7, #16
 800b516:	2300      	movs	r3, #0
 800b518:	2200      	movs	r2, #0
 800b51a:	f7fe fb9f 	bl	8009c5c <xQueueGenericSend>
 800b51e:	6278      	str	r0, [r7, #36]	; 0x24
 800b520:	e008      	b.n	800b534 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b522:	4b07      	ldr	r3, [pc, #28]	; (800b540 <xTimerGenericCommand+0x98>)
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	f107 0110 	add.w	r1, r7, #16
 800b52a:	2300      	movs	r3, #0
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	f7fe fc93 	bl	8009e58 <xQueueGenericSendFromISR>
 800b532:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b536:	4618      	mov	r0, r3
 800b538:	3728      	adds	r7, #40	; 0x28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	200068dc 	.word	0x200068dc

0800b544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af02      	add	r7, sp, #8
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54e:	4b22      	ldr	r3, [pc, #136]	; (800b5d8 <prvProcessExpiredTimer+0x94>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	3304      	adds	r3, #4
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe f9ab 	bl	80098b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d022      	beq.n	800b5b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	699a      	ldr	r2, [r3, #24]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	18d1      	adds	r1, r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	6978      	ldr	r0, [r7, #20]
 800b57e:	f000 f8d1 	bl	800b724 <prvInsertTimerInActiveList>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01f      	beq.n	800b5c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b588:	2300      	movs	r3, #0
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2300      	movs	r3, #0
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	2100      	movs	r1, #0
 800b592:	6978      	ldr	r0, [r7, #20]
 800b594:	f7ff ff88 	bl	800b4a8 <xTimerGenericCommand>
 800b598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d113      	bne.n	800b5c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	60fb      	str	r3, [r7, #12]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5bc:	f023 0301 	bic.w	r3, r3, #1
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	6978      	ldr	r0, [r7, #20]
 800b5ce:	4798      	blx	r3
}
 800b5d0:	bf00      	nop
 800b5d2:	3718      	adds	r7, #24
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	200068d4 	.word	0x200068d4

0800b5dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5e4:	f107 0308 	add.w	r3, r7, #8
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 f857 	bl	800b69c <prvGetNextExpireTime>
 800b5ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 f803 	bl	800b600 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5fa:	f000 f8d5 	bl	800b7a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5fe:	e7f1      	b.n	800b5e4 <prvTimerTask+0x8>

0800b600 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b60a:	f7ff fa39 	bl	800aa80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	4618      	mov	r0, r3
 800b614:	f000 f866 	bl	800b6e4 <prvSampleTimeNow>
 800b618:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d130      	bne.n	800b682 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <prvProcessTimerOrBlockTask+0x3c>
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d806      	bhi.n	800b63c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b62e:	f7ff fa35 	bl	800aa9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7ff ff85 	bl	800b544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b63a:	e024      	b.n	800b686 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d008      	beq.n	800b654 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b642:	4b13      	ldr	r3, [pc, #76]	; (800b690 <prvProcessTimerOrBlockTask+0x90>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <prvProcessTimerOrBlockTask+0x50>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e000      	b.n	800b652 <prvProcessTimerOrBlockTask+0x52>
 800b650:	2300      	movs	r3, #0
 800b652:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b654:	4b0f      	ldr	r3, [pc, #60]	; (800b694 <prvProcessTimerOrBlockTask+0x94>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	4619      	mov	r1, r3
 800b662:	f7fe ff7d 	bl	800a560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b666:	f7ff fa19 	bl	800aa9c <xTaskResumeAll>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b670:	4b09      	ldr	r3, [pc, #36]	; (800b698 <prvProcessTimerOrBlockTask+0x98>)
 800b672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	f3bf 8f6f 	isb	sy
}
 800b680:	e001      	b.n	800b686 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b682:	f7ff fa0b 	bl	800aa9c <xTaskResumeAll>
}
 800b686:	bf00      	nop
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	200068d8 	.word	0x200068d8
 800b694:	200068dc 	.word	0x200068dc
 800b698:	e000ed04 	.word	0xe000ed04

0800b69c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <prvGetNextExpireTime+0x44>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <prvGetNextExpireTime+0x16>
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	e000      	b.n	800b6b4 <prvGetNextExpireTime+0x18>
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d105      	bne.n	800b6cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <prvGetNextExpireTime+0x44>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e001      	b.n	800b6d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	200068d4 	.word	0x200068d4

0800b6e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6ec:	f7ff fa74 	bl	800abd8 <xTaskGetTickCount>
 800b6f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6f2:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <prvSampleTimeNow+0x3c>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d205      	bcs.n	800b708 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6fc:	f000 f936 	bl	800b96c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	601a      	str	r2, [r3, #0]
 800b706:	e002      	b.n	800b70e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b70e:	4a04      	ldr	r2, [pc, #16]	; (800b720 <prvSampleTimeNow+0x3c>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b714:	68fb      	ldr	r3, [r7, #12]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	200068e4 	.word	0x200068e4

0800b724 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	429a      	cmp	r2, r3
 800b748:	d812      	bhi.n	800b770 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	429a      	cmp	r2, r3
 800b756:	d302      	bcc.n	800b75e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b758:	2301      	movs	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e01b      	b.n	800b796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b75e:	4b10      	ldr	r3, [pc, #64]	; (800b7a0 <prvInsertTimerInActiveList+0x7c>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3304      	adds	r3, #4
 800b766:	4619      	mov	r1, r3
 800b768:	4610      	mov	r0, r2
 800b76a:	f7fe f86c 	bl	8009846 <vListInsert>
 800b76e:	e012      	b.n	800b796 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d206      	bcs.n	800b786 <prvInsertTimerInActiveList+0x62>
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d302      	bcc.n	800b786 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	e007      	b.n	800b796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b786:	4b07      	ldr	r3, [pc, #28]	; (800b7a4 <prvInsertTimerInActiveList+0x80>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fe f858 	bl	8009846 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b796:	697b      	ldr	r3, [r7, #20]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	200068d8 	.word	0x200068d8
 800b7a4:	200068d4 	.word	0x200068d4

0800b7a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08e      	sub	sp, #56	; 0x38
 800b7ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7ae:	e0ca      	b.n	800b946 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	da18      	bge.n	800b7e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7b6:	1d3b      	adds	r3, r7, #4
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10a      	bne.n	800b7d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	61fb      	str	r3, [r7, #28]
}
 800b7d4:	bf00      	nop
 800b7d6:	e7fe      	b.n	800b7d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7de:	6850      	ldr	r0, [r2, #4]
 800b7e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e2:	6892      	ldr	r2, [r2, #8]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f2c0 80aa 	blt.w	800b944 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	3304      	adds	r3, #4
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe f859 	bl	80098b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b806:	463b      	mov	r3, r7
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff ff6b 	bl	800b6e4 <prvSampleTimeNow>
 800b80e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b09      	cmp	r3, #9
 800b814:	f200 8097 	bhi.w	800b946 <prvProcessReceivedCommands+0x19e>
 800b818:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <prvProcessReceivedCommands+0x78>)
 800b81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81e:	bf00      	nop
 800b820:	0800b849 	.word	0x0800b849
 800b824:	0800b849 	.word	0x0800b849
 800b828:	0800b849 	.word	0x0800b849
 800b82c:	0800b8bd 	.word	0x0800b8bd
 800b830:	0800b8d1 	.word	0x0800b8d1
 800b834:	0800b91b 	.word	0x0800b91b
 800b838:	0800b849 	.word	0x0800b849
 800b83c:	0800b849 	.word	0x0800b849
 800b840:	0800b8bd 	.word	0x0800b8bd
 800b844:	0800b8d1 	.word	0x0800b8d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	18d1      	adds	r1, r2, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b868:	f7ff ff5c 	bl	800b724 <prvInsertTimerInActiveList>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d069      	beq.n	800b946 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b878:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	d05e      	beq.n	800b946 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	441a      	add	r2, r3
 800b890:	2300      	movs	r3, #0
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	2100      	movs	r1, #0
 800b898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b89a:	f7ff fe05 	bl	800b4a8 <xTimerGenericCommand>
 800b89e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d14f      	bne.n	800b946 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	61bb      	str	r3, [r7, #24]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b8ce:	e03a      	b.n	800b946 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8d6:	f043 0301 	orr.w	r3, r3, #1
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	617b      	str	r3, [r7, #20]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	699a      	ldr	r2, [r3, #24]
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	18d1      	adds	r1, r2, r3
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b914:	f7ff ff06 	bl	800b724 <prvInsertTimerInActiveList>
					break;
 800b918:	e015      	b.n	800b946 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b920:	f003 0302 	and.w	r3, r3, #2
 800b924:	2b00      	cmp	r3, #0
 800b926:	d103      	bne.n	800b930 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b92a:	f000 fbb9 	bl	800c0a0 <vPortFree>
 800b92e:	e00a      	b.n	800b946 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b936:	f023 0301 	bic.w	r3, r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b942:	e000      	b.n	800b946 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b944:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b946:	4b08      	ldr	r3, [pc, #32]	; (800b968 <prvProcessReceivedCommands+0x1c0>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	1d39      	adds	r1, r7, #4
 800b94c:	2200      	movs	r2, #0
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fe fb1e 	bl	8009f90 <xQueueReceive>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	f47f af2a 	bne.w	800b7b0 <prvProcessReceivedCommands+0x8>
	}
}
 800b95c:	bf00      	nop
 800b95e:	bf00      	nop
 800b960:	3730      	adds	r7, #48	; 0x30
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	200068dc 	.word	0x200068dc

0800b96c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b972:	e048      	b.n	800ba06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b974:	4b2d      	ldr	r3, [pc, #180]	; (800ba2c <prvSwitchTimerLists+0xc0>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b97e:	4b2b      	ldr	r3, [pc, #172]	; (800ba2c <prvSwitchTimerLists+0xc0>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fd ff93 	bl	80098b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a0:	f003 0304 	and.w	r3, r3, #4
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d02e      	beq.n	800ba06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d90e      	bls.n	800b9d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9c6:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <prvSwitchTimerLists+0xc0>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7fd ff38 	bl	8009846 <vListInsert>
 800b9d6:	e016      	b.n	800ba06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9d8:	2300      	movs	r3, #0
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f7ff fd60 	bl	800b4a8 <xTimerGenericCommand>
 800b9e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	603b      	str	r3, [r7, #0]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <prvSwitchTimerLists+0xc0>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1b1      	bne.n	800b974 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba10:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <prvSwitchTimerLists+0xc0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba16:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <prvSwitchTimerLists+0xc4>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a04      	ldr	r2, [pc, #16]	; (800ba2c <prvSwitchTimerLists+0xc0>)
 800ba1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba1e:	4a04      	ldr	r2, [pc, #16]	; (800ba30 <prvSwitchTimerLists+0xc4>)
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	6013      	str	r3, [r2, #0]
}
 800ba24:	bf00      	nop
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	200068d4 	.word	0x200068d4
 800ba30:	200068d8 	.word	0x200068d8

0800ba34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba3a:	f000 f96b 	bl	800bd14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba3e:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <prvCheckForValidListAndQueue+0x60>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d120      	bne.n	800ba88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba46:	4814      	ldr	r0, [pc, #80]	; (800ba98 <prvCheckForValidListAndQueue+0x64>)
 800ba48:	f7fd feac 	bl	80097a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba4c:	4813      	ldr	r0, [pc, #76]	; (800ba9c <prvCheckForValidListAndQueue+0x68>)
 800ba4e:	f7fd fea9 	bl	80097a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba52:	4b13      	ldr	r3, [pc, #76]	; (800baa0 <prvCheckForValidListAndQueue+0x6c>)
 800ba54:	4a10      	ldr	r2, [pc, #64]	; (800ba98 <prvCheckForValidListAndQueue+0x64>)
 800ba56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba58:	4b12      	ldr	r3, [pc, #72]	; (800baa4 <prvCheckForValidListAndQueue+0x70>)
 800ba5a:	4a10      	ldr	r2, [pc, #64]	; (800ba9c <prvCheckForValidListAndQueue+0x68>)
 800ba5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <prvCheckForValidListAndQueue+0x74>)
 800ba64:	4a11      	ldr	r2, [pc, #68]	; (800baac <prvCheckForValidListAndQueue+0x78>)
 800ba66:	2110      	movs	r1, #16
 800ba68:	200a      	movs	r0, #10
 800ba6a:	f7fd ffb7 	bl	80099dc <xQueueGenericCreateStatic>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4a08      	ldr	r2, [pc, #32]	; (800ba94 <prvCheckForValidListAndQueue+0x60>)
 800ba72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba74:	4b07      	ldr	r3, [pc, #28]	; (800ba94 <prvCheckForValidListAndQueue+0x60>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d005      	beq.n	800ba88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba7c:	4b05      	ldr	r3, [pc, #20]	; (800ba94 <prvCheckForValidListAndQueue+0x60>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	490b      	ldr	r1, [pc, #44]	; (800bab0 <prvCheckForValidListAndQueue+0x7c>)
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fd18 	bl	800a4b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba88:	f000 f974 	bl	800bd74 <vPortExitCritical>
}
 800ba8c:	bf00      	nop
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	200068dc 	.word	0x200068dc
 800ba98:	200068ac 	.word	0x200068ac
 800ba9c:	200068c0 	.word	0x200068c0
 800baa0:	200068d4 	.word	0x200068d4
 800baa4:	200068d8 	.word	0x200068d8
 800baa8:	20006988 	.word	0x20006988
 800baac:	200068e8 	.word	0x200068e8
 800bab0:	0800d8dc 	.word	0x0800d8dc

0800bab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	3b04      	subs	r3, #4
 800bac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bacc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3b04      	subs	r3, #4
 800bad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f023 0201 	bic.w	r2, r3, #1
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3b04      	subs	r3, #4
 800bae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bae4:	4a0c      	ldr	r2, [pc, #48]	; (800bb18 <pxPortInitialiseStack+0x64>)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3b14      	subs	r3, #20
 800baee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3b04      	subs	r3, #4
 800bafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f06f 0202 	mvn.w	r2, #2
 800bb02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3b20      	subs	r3, #32
 800bb08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	0800bb1d 	.word	0x0800bb1d

0800bb1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb26:	4b12      	ldr	r3, [pc, #72]	; (800bb70 <prvTaskExitError+0x54>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb2e:	d00a      	beq.n	800bb46 <prvTaskExitError+0x2a>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	60fb      	str	r3, [r7, #12]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <prvTaskExitError+0x28>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	60bb      	str	r3, [r7, #8]
}
 800bb58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb5a:	bf00      	nop
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0fc      	beq.n	800bb5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	200000a4 	.word	0x200000a4
	...

0800bb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb80:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <pxCurrentTCBConst2>)
 800bb82:	6819      	ldr	r1, [r3, #0]
 800bb84:	6808      	ldr	r0, [r1, #0]
 800bb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8a:	f380 8809 	msr	PSP, r0
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f04f 0000 	mov.w	r0, #0
 800bb96:	f380 8811 	msr	BASEPRI, r0
 800bb9a:	4770      	bx	lr
 800bb9c:	f3af 8000 	nop.w

0800bba0 <pxCurrentTCBConst2>:
 800bba0:	200063ac 	.word	0x200063ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop

0800bba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bba8:	4808      	ldr	r0, [pc, #32]	; (800bbcc <prvPortStartFirstTask+0x24>)
 800bbaa:	6800      	ldr	r0, [r0, #0]
 800bbac:	6800      	ldr	r0, [r0, #0]
 800bbae:	f380 8808 	msr	MSP, r0
 800bbb2:	f04f 0000 	mov.w	r0, #0
 800bbb6:	f380 8814 	msr	CONTROL, r0
 800bbba:	b662      	cpsie	i
 800bbbc:	b661      	cpsie	f
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	df00      	svc	0
 800bbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbca:	bf00      	nop
 800bbcc:	e000ed08 	.word	0xe000ed08

0800bbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbd6:	4b46      	ldr	r3, [pc, #280]	; (800bcf0 <xPortStartScheduler+0x120>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a46      	ldr	r2, [pc, #280]	; (800bcf4 <xPortStartScheduler+0x124>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d10a      	bne.n	800bbf6 <xPortStartScheduler+0x26>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	613b      	str	r3, [r7, #16]
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbf6:	4b3e      	ldr	r3, [pc, #248]	; (800bcf0 <xPortStartScheduler+0x120>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a3f      	ldr	r2, [pc, #252]	; (800bcf8 <xPortStartScheduler+0x128>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d10a      	bne.n	800bc16 <xPortStartScheduler+0x46>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	60fb      	str	r3, [r7, #12]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc16:	4b39      	ldr	r3, [pc, #228]	; (800bcfc <xPortStartScheduler+0x12c>)
 800bc18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	22ff      	movs	r2, #255	; 0xff
 800bc26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	4b31      	ldr	r3, [pc, #196]	; (800bd00 <xPortStartScheduler+0x130>)
 800bc3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc3e:	4b31      	ldr	r3, [pc, #196]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc40:	2207      	movs	r2, #7
 800bc42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc44:	e009      	b.n	800bc5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc46:	4b2f      	ldr	r3, [pc, #188]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	4a2d      	ldr	r2, [pc, #180]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc50:	78fb      	ldrb	r3, [r7, #3]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc5a:	78fb      	ldrb	r3, [r7, #3]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc62:	2b80      	cmp	r3, #128	; 0x80
 800bc64:	d0ef      	beq.n	800bc46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc66:	4b27      	ldr	r3, [pc, #156]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f1c3 0307 	rsb	r3, r3, #7
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	d00a      	beq.n	800bc88 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	60bb      	str	r3, [r7, #8]
}
 800bc84:	bf00      	nop
 800bc86:	e7fe      	b.n	800bc86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc88:	4b1e      	ldr	r3, [pc, #120]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	021b      	lsls	r3, r3, #8
 800bc8e:	4a1d      	ldr	r2, [pc, #116]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc92:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc9a:	4a1a      	ldr	r2, [pc, #104]	; (800bd04 <xPortStartScheduler+0x134>)
 800bc9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bca6:	4b18      	ldr	r3, [pc, #96]	; (800bd08 <xPortStartScheduler+0x138>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a17      	ldr	r2, [pc, #92]	; (800bd08 <xPortStartScheduler+0x138>)
 800bcac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcb2:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <xPortStartScheduler+0x138>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a14      	ldr	r2, [pc, #80]	; (800bd08 <xPortStartScheduler+0x138>)
 800bcb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcbe:	f000 f8dd 	bl	800be7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcc2:	4b12      	ldr	r3, [pc, #72]	; (800bd0c <xPortStartScheduler+0x13c>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcc8:	f000 f8fc 	bl	800bec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bccc:	4b10      	ldr	r3, [pc, #64]	; (800bd10 <xPortStartScheduler+0x140>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a0f      	ldr	r2, [pc, #60]	; (800bd10 <xPortStartScheduler+0x140>)
 800bcd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bcd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcd8:	f7ff ff66 	bl	800bba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcdc:	f7ff f846 	bl	800ad6c <vTaskSwitchContext>
	prvTaskExitError();
 800bce0:	f7ff ff1c 	bl	800bb1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	e000ed00 	.word	0xe000ed00
 800bcf4:	410fc271 	.word	0x410fc271
 800bcf8:	410fc270 	.word	0x410fc270
 800bcfc:	e000e400 	.word	0xe000e400
 800bd00:	200069d8 	.word	0x200069d8
 800bd04:	200069dc 	.word	0x200069dc
 800bd08:	e000ed20 	.word	0xe000ed20
 800bd0c:	200000a4 	.word	0x200000a4
 800bd10:	e000ef34 	.word	0xe000ef34

0800bd14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
	__asm volatile
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	607b      	str	r3, [r7, #4]
}
 800bd2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd2e:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <vPortEnterCritical+0x58>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3301      	adds	r3, #1
 800bd34:	4a0d      	ldr	r2, [pc, #52]	; (800bd6c <vPortEnterCritical+0x58>)
 800bd36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd38:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <vPortEnterCritical+0x58>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d10f      	bne.n	800bd60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd40:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <vPortEnterCritical+0x5c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	603b      	str	r3, [r7, #0]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <vPortEnterCritical+0x4a>
	}
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	200000a4 	.word	0x200000a4
 800bd70:	e000ed04 	.word	0xe000ed04

0800bd74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd7a:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <vPortExitCritical+0x50>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <vPortExitCritical+0x24>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	607b      	str	r3, [r7, #4]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd98:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <vPortExitCritical+0x50>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	4a09      	ldr	r2, [pc, #36]	; (800bdc4 <vPortExitCritical+0x50>)
 800bda0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bda2:	4b08      	ldr	r3, [pc, #32]	; (800bdc4 <vPortExitCritical+0x50>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d105      	bne.n	800bdb6 <vPortExitCritical+0x42>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	f383 8811 	msr	BASEPRI, r3
}
 800bdb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdb6:	bf00      	nop
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	200000a4 	.word	0x200000a4
	...

0800bdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdd0:	f3ef 8009 	mrs	r0, PSP
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	4b15      	ldr	r3, [pc, #84]	; (800be30 <pxCurrentTCBConst>)
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	f01e 0f10 	tst.w	lr, #16
 800bde0:	bf08      	it	eq
 800bde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdea:	6010      	str	r0, [r2, #0]
 800bdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bdf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bdf4:	f380 8811 	msr	BASEPRI, r0
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f7fe ffb4 	bl	800ad6c <vTaskSwitchContext>
 800be04:	f04f 0000 	mov.w	r0, #0
 800be08:	f380 8811 	msr	BASEPRI, r0
 800be0c:	bc09      	pop	{r0, r3}
 800be0e:	6819      	ldr	r1, [r3, #0]
 800be10:	6808      	ldr	r0, [r1, #0]
 800be12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be16:	f01e 0f10 	tst.w	lr, #16
 800be1a:	bf08      	it	eq
 800be1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be20:	f380 8809 	msr	PSP, r0
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	f3af 8000 	nop.w

0800be30 <pxCurrentTCBConst>:
 800be30:	200063ac 	.word	0x200063ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop

0800be38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	607b      	str	r3, [r7, #4]
}
 800be50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be52:	f7fe fed1 	bl	800abf8 <xTaskIncrementTick>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <xPortSysTickHandler+0x40>)
 800be5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	2300      	movs	r3, #0
 800be66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f383 8811 	msr	BASEPRI, r3
}
 800be6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	e000ed04 	.word	0xe000ed04

0800be7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be80:	4b0b      	ldr	r3, [pc, #44]	; (800beb0 <vPortSetupTimerInterrupt+0x34>)
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <vPortSetupTimerInterrupt+0x38>)
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be8c:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <vPortSetupTimerInterrupt+0x3c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a0a      	ldr	r2, [pc, #40]	; (800bebc <vPortSetupTimerInterrupt+0x40>)
 800be92:	fba2 2303 	umull	r2, r3, r2, r3
 800be96:	099b      	lsrs	r3, r3, #6
 800be98:	4a09      	ldr	r2, [pc, #36]	; (800bec0 <vPortSetupTimerInterrupt+0x44>)
 800be9a:	3b01      	subs	r3, #1
 800be9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be9e:	4b04      	ldr	r3, [pc, #16]	; (800beb0 <vPortSetupTimerInterrupt+0x34>)
 800bea0:	2207      	movs	r2, #7
 800bea2:	601a      	str	r2, [r3, #0]
}
 800bea4:	bf00      	nop
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	e000e010 	.word	0xe000e010
 800beb4:	e000e018 	.word	0xe000e018
 800beb8:	20000088 	.word	0x20000088
 800bebc:	10624dd3 	.word	0x10624dd3
 800bec0:	e000e014 	.word	0xe000e014

0800bec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bed4 <vPortEnableVFP+0x10>
 800bec8:	6801      	ldr	r1, [r0, #0]
 800beca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bece:	6001      	str	r1, [r0, #0]
 800bed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bed2:	bf00      	nop
 800bed4:	e000ed88 	.word	0xe000ed88

0800bed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bede:	f3ef 8305 	mrs	r3, IPSR
 800bee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b0f      	cmp	r3, #15
 800bee8:	d914      	bls.n	800bf14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beea:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <vPortValidateInterruptPriority+0x70>)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	4413      	add	r3, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bef4:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <vPortValidateInterruptPriority+0x74>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	7afa      	ldrb	r2, [r7, #11]
 800befa:	429a      	cmp	r2, r3
 800befc:	d20a      	bcs.n	800bf14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	607b      	str	r3, [r7, #4]
}
 800bf10:	bf00      	nop
 800bf12:	e7fe      	b.n	800bf12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf14:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <vPortValidateInterruptPriority+0x78>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf1c:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <vPortValidateInterruptPriority+0x7c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d90a      	bls.n	800bf3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	603b      	str	r3, [r7, #0]
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <vPortValidateInterruptPriority+0x60>
	}
 800bf3a:	bf00      	nop
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	e000e3f0 	.word	0xe000e3f0
 800bf4c:	200069d8 	.word	0x200069d8
 800bf50:	e000ed0c 	.word	0xe000ed0c
 800bf54:	200069dc 	.word	0x200069dc

0800bf58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800bf64:	4b48      	ldr	r3, [pc, #288]	; (800c088 <pvPortMalloc+0x130>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10a      	bne.n	800bf82 <pvPortMalloc+0x2a>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	60fb      	str	r3, [r7, #12]
}
 800bf7e:	bf00      	nop
 800bf80:	e7fe      	b.n	800bf80 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800bf82:	f7fe fd7d 	bl	800aa80 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf86:	4b41      	ldr	r3, [pc, #260]	; (800c08c <pvPortMalloc+0x134>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d172      	bne.n	800c078 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00d      	beq.n	800bfb4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800bf98:	2208      	movs	r2, #8
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d05e      	beq.n	800c078 <pvPortMalloc+0x120>
 800bfba:	4b35      	ldr	r3, [pc, #212]	; (800c090 <pvPortMalloc+0x138>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d859      	bhi.n	800c078 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfc4:	4b33      	ldr	r3, [pc, #204]	; (800c094 <pvPortMalloc+0x13c>)
 800bfc6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800bfc8:	4b32      	ldr	r3, [pc, #200]	; (800c094 <pvPortMalloc+0x13c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfce:	e004      	b.n	800bfda <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d903      	bls.n	800bfec <pvPortMalloc+0x94>
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f1      	bne.n	800bfd0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfec:	4b26      	ldr	r3, [pc, #152]	; (800c088 <pvPortMalloc+0x130>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	69fa      	ldr	r2, [r7, #28]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d040      	beq.n	800c078 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2208      	movs	r2, #8
 800bffc:	4413      	add	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	2308      	movs	r3, #8
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	429a      	cmp	r2, r3
 800c016:	d90f      	bls.n	800c038 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c018:	69fa      	ldr	r2, [r7, #28]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c032:	6938      	ldr	r0, [r7, #16]
 800c034:	f000 f8a2 	bl	800c17c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c038:	4b15      	ldr	r3, [pc, #84]	; (800c090 <pvPortMalloc+0x138>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	4a13      	ldr	r2, [pc, #76]	; (800c090 <pvPortMalloc+0x138>)
 800c044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c046:	4b12      	ldr	r3, [pc, #72]	; (800c090 <pvPortMalloc+0x138>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	4b13      	ldr	r3, [pc, #76]	; (800c098 <pvPortMalloc+0x140>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d203      	bcs.n	800c05a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c052:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <pvPortMalloc+0x138>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a10      	ldr	r2, [pc, #64]	; (800c098 <pvPortMalloc+0x140>)
 800c058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	4b0b      	ldr	r3, [pc, #44]	; (800c08c <pvPortMalloc+0x134>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	431a      	orrs	r2, r3
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2200      	movs	r2, #0
 800c06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c06e:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <pvPortMalloc+0x144>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	4a09      	ldr	r2, [pc, #36]	; (800c09c <pvPortMalloc+0x144>)
 800c076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c078:	f7fe fd10 	bl	800aa9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c07c:	697b      	ldr	r3, [r7, #20]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3720      	adds	r7, #32
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	200069e8 	.word	0x200069e8
 800c08c:	200069fc 	.word	0x200069fc
 800c090:	200069ec 	.word	0x200069ec
 800c094:	200069e0 	.word	0x200069e0
 800c098:	200069f0 	.word	0x200069f0
 800c09c:	200069f4 	.word	0x200069f4

0800c0a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d04d      	beq.n	800c14e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0b2:	2308      	movs	r3, #8
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	4b24      	ldr	r3, [pc, #144]	; (800c158 <vPortFree+0xb8>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <vPortFree+0x44>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	60fb      	str	r3, [r7, #12]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00a      	beq.n	800c102 <vPortFree+0x62>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	60bb      	str	r3, [r7, #8]
}
 800c0fe:	bf00      	nop
 800c100:	e7fe      	b.n	800c100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	4b14      	ldr	r3, [pc, #80]	; (800c158 <vPortFree+0xb8>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4013      	ands	r3, r2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01e      	beq.n	800c14e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11a      	bne.n	800c14e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	4b0e      	ldr	r3, [pc, #56]	; (800c158 <vPortFree+0xb8>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	43db      	mvns	r3, r3
 800c122:	401a      	ands	r2, r3
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c128:	f7fe fcaa 	bl	800aa80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <vPortFree+0xbc>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4413      	add	r3, r2
 800c136:	4a09      	ldr	r2, [pc, #36]	; (800c15c <vPortFree+0xbc>)
 800c138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c13a:	6938      	ldr	r0, [r7, #16]
 800c13c:	f000 f81e 	bl	800c17c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <vPortFree+0xc0>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3301      	adds	r3, #1
 800c146:	4a06      	ldr	r2, [pc, #24]	; (800c160 <vPortFree+0xc0>)
 800c148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c14a:	f7fe fca7 	bl	800aa9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c14e:	bf00      	nop
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	200069fc 	.word	0x200069fc
 800c15c:	200069ec 	.word	0x200069ec
 800c160:	200069f8 	.word	0x200069f8

0800c164 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c164:	b480      	push	{r7}
 800c166:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c168:	4b03      	ldr	r3, [pc, #12]	; (800c178 <xPortGetFreeHeapSize+0x14>)
 800c16a:	681b      	ldr	r3, [r3, #0]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	200069ec 	.word	0x200069ec

0800c17c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c184:	4b28      	ldr	r3, [pc, #160]	; (800c228 <prvInsertBlockIntoFreeList+0xac>)
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	e002      	b.n	800c190 <prvInsertBlockIntoFreeList+0x14>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	429a      	cmp	r2, r3
 800c198:	d8f7      	bhi.n	800c18a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d108      	bne.n	800c1be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	441a      	add	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	441a      	add	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d118      	bne.n	800c204 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	4b15      	ldr	r3, [pc, #84]	; (800c22c <prvInsertBlockIntoFreeList+0xb0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d00d      	beq.n	800c1fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	441a      	add	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	e008      	b.n	800c20c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <prvInsertBlockIntoFreeList+0xb0>)
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	e003      	b.n	800c20c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	429a      	cmp	r2, r3
 800c212:	d002      	beq.n	800c21a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c21a:	bf00      	nop
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	200069e0 	.word	0x200069e0
 800c22c:	200069e8 	.word	0x200069e8

0800c230 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c230:	b480      	push	{r7}
 800c232:	b08f      	sub	sp, #60	; 0x3c
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c238:	2300      	movs	r3, #0
 800c23a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c244:	4b5a      	ldr	r3, [pc, #360]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00a      	beq.n	800c262 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	617b      	str	r3, [r7, #20]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	4413      	add	r3, r2
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c26c:	e07d      	b.n	800c36a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00e      	beq.n	800c2a2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	3307      	adds	r3, #7
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	f023 0307 	bic.w	r3, r3, #7
 800c290:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c29e:	4413      	add	r3, r2
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d106      	bne.n	800c2ba <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	4a41      	ldr	r2, [pc, #260]	; (800c3b4 <vPortDefineHeapRegions+0x184>)
 800c2b0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c2b2:	4b40      	ldr	r3, [pc, #256]	; (800c3b4 <vPortDefineHeapRegions+0x184>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	605a      	str	r2, [r3, #4]
 800c2b8:	e01f      	b.n	800c2fa <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c2ba:	4b3d      	ldr	r3, [pc, #244]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10a      	bne.n	800c2d8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	613b      	str	r3, [r7, #16]
}
 800c2d4:	bf00      	nop
 800c2d6:	e7fe      	b.n	800c2d6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c2d8:	4b35      	ldr	r3, [pc, #212]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d80a      	bhi.n	800c2fa <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	60fb      	str	r3, [r7, #12]
}
 800c2f6:	bf00      	nop
 800c2f8:	e7fe      	b.n	800c2f8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c2fa:	4b2d      	ldr	r3, [pc, #180]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c300:	69fa      	ldr	r2, [r7, #28]
 800c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c304:	4413      	add	r3, r2
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c308:	2208      	movs	r2, #8
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	1a9b      	subs	r3, r3, r2
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	f023 0307 	bic.w	r3, r3, #7
 800c316:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	4a25      	ldr	r2, [pc, #148]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c31c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c31e:	4b24      	ldr	r3, [pc, #144]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c326:	4b22      	ldr	r3, [pc, #136]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2200      	movs	r2, #0
 800c32c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	6a3b      	ldr	r3, [r7, #32]
 800c33a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c33c:	4b1c      	ldr	r3, [pc, #112]	; (800c3b0 <vPortDefineHeapRegions+0x180>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	6a3a      	ldr	r2, [r7, #32]
 800c34e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c356:	4413      	add	r3, r2
 800c358:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	3301      	adds	r3, #1
 800c35e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4413      	add	r3, r2
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f47f af7d 	bne.w	800c26e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c374:	4a10      	ldr	r2, [pc, #64]	; (800c3b8 <vPortDefineHeapRegions+0x188>)
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c37a:	4a10      	ldr	r2, [pc, #64]	; (800c3bc <vPortDefineHeapRegions+0x18c>)
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10a      	bne.n	800c39c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	60bb      	str	r3, [r7, #8]
}
 800c398:	bf00      	nop
 800c39a:	e7fe      	b.n	800c39a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c39c:	4b08      	ldr	r3, [pc, #32]	; (800c3c0 <vPortDefineHeapRegions+0x190>)
 800c39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3a2:	601a      	str	r2, [r3, #0]
}
 800c3a4:	bf00      	nop
 800c3a6:	373c      	adds	r7, #60	; 0x3c
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	200069e8 	.word	0x200069e8
 800c3b4:	200069e0 	.word	0x200069e0
 800c3b8:	200069f0 	.word	0x200069f0
 800c3bc:	200069ec 	.word	0x200069ec
 800c3c0:	200069fc 	.word	0x200069fc

0800c3c4 <atol>:
 800c3c4:	220a      	movs	r2, #10
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	f000 bb5e 	b.w	800ca88 <strtol>

0800c3cc <calloc>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	; (800c3d8 <calloc+0xc>)
 800c3ce:	460a      	mov	r2, r1
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	f000 b8f8 	b.w	800c5c8 <_calloc_r>
 800c3d8:	200000a8 	.word	0x200000a8

0800c3dc <__errno>:
 800c3dc:	4b01      	ldr	r3, [pc, #4]	; (800c3e4 <__errno+0x8>)
 800c3de:	6818      	ldr	r0, [r3, #0]
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	200000a8 	.word	0x200000a8

0800c3e8 <gmtime_r>:
 800c3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	4a4f      	ldr	r2, [pc, #316]	; (800c530 <gmtime_r+0x148>)
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	f7f4 fa47 	bl	800088c <__aeabi_ldivmod>
 800c3fe:	4639      	mov	r1, r7
 800c400:	4605      	mov	r5, r0
 800c402:	4a4b      	ldr	r2, [pc, #300]	; (800c530 <gmtime_r+0x148>)
 800c404:	4630      	mov	r0, r6
 800c406:	2300      	movs	r3, #0
 800c408:	f7f4 fa40 	bl	800088c <__aeabi_ldivmod>
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c412:	bfb7      	itett	lt
 800c414:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c418:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c41c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c420:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c424:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c428:	fbb2 f1f0 	udiv	r1, r2, r0
 800c42c:	fb00 2211 	mls	r2, r0, r1, r2
 800c430:	203c      	movs	r0, #60	; 0x3c
 800c432:	60a1      	str	r1, [r4, #8]
 800c434:	fbb2 f1f0 	udiv	r1, r2, r0
 800c438:	fb00 2211 	mls	r2, r0, r1, r2
 800c43c:	6061      	str	r1, [r4, #4]
 800c43e:	6022      	str	r2, [r4, #0]
 800c440:	2107      	movs	r1, #7
 800c442:	1cda      	adds	r2, r3, #3
 800c444:	fb92 f1f1 	sdiv	r1, r2, r1
 800c448:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c44c:	1a52      	subs	r2, r2, r1
 800c44e:	bf48      	it	mi
 800c450:	3207      	addmi	r2, #7
 800c452:	4d38      	ldr	r5, [pc, #224]	; (800c534 <gmtime_r+0x14c>)
 800c454:	4838      	ldr	r0, [pc, #224]	; (800c538 <gmtime_r+0x150>)
 800c456:	61a2      	str	r2, [r4, #24]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	bfb7      	itett	lt
 800c45c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c460:	fb93 f5f5 	sdivge	r5, r3, r5
 800c464:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c468:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c46c:	fb00 3005 	mla	r0, r0, r5, r3
 800c470:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c474:	fbb0 f2f2 	udiv	r2, r0, r2
 800c478:	4402      	add	r2, r0
 800c47a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c47e:	fbb0 f1f3 	udiv	r1, r0, r3
 800c482:	1a52      	subs	r2, r2, r1
 800c484:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c488:	492c      	ldr	r1, [pc, #176]	; (800c53c <gmtime_r+0x154>)
 800c48a:	fbb0 f1f1 	udiv	r1, r0, r1
 800c48e:	2764      	movs	r7, #100	; 0x64
 800c490:	1a52      	subs	r2, r2, r1
 800c492:	fbb2 f1fc 	udiv	r1, r2, ip
 800c496:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49a:	fbb1 f6f7 	udiv	r6, r1, r7
 800c49e:	1af3      	subs	r3, r6, r3
 800c4a0:	4403      	add	r3, r0
 800c4a2:	fb0c 3311 	mls	r3, ip, r1, r3
 800c4a6:	2299      	movs	r2, #153	; 0x99
 800c4a8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c4ac:	f10e 0e02 	add.w	lr, lr, #2
 800c4b0:	f103 0c01 	add.w	ip, r3, #1
 800c4b4:	fbbe f0f2 	udiv	r0, lr, r2
 800c4b8:	4342      	muls	r2, r0
 800c4ba:	3202      	adds	r2, #2
 800c4bc:	f04f 0805 	mov.w	r8, #5
 800c4c0:	fbb2 f2f8 	udiv	r2, r2, r8
 800c4c4:	ebac 0c02 	sub.w	ip, ip, r2
 800c4c8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c4cc:	4596      	cmp	lr, r2
 800c4ce:	bf94      	ite	ls
 800c4d0:	2202      	movls	r2, #2
 800c4d2:	f06f 0209 	mvnhi.w	r2, #9
 800c4d6:	4410      	add	r0, r2
 800c4d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4dc:	fb02 1505 	mla	r5, r2, r5, r1
 800c4e0:	2801      	cmp	r0, #1
 800c4e2:	bf98      	it	ls
 800c4e4:	3501      	addls	r5, #1
 800c4e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c4ea:	d30d      	bcc.n	800c508 <gmtime_r+0x120>
 800c4ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c4f0:	61e3      	str	r3, [r4, #28]
 800c4f2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c4fc:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c500:	6223      	str	r3, [r4, #32]
 800c502:	4620      	mov	r0, r4
 800c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c508:	078a      	lsls	r2, r1, #30
 800c50a:	d102      	bne.n	800c512 <gmtime_r+0x12a>
 800c50c:	fb07 1616 	mls	r6, r7, r6, r1
 800c510:	b95e      	cbnz	r6, 800c52a <gmtime_r+0x142>
 800c512:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c516:	fbb1 f6f2 	udiv	r6, r1, r2
 800c51a:	fb02 1216 	mls	r2, r2, r6, r1
 800c51e:	fab2 f282 	clz	r2, r2
 800c522:	0952      	lsrs	r2, r2, #5
 800c524:	333b      	adds	r3, #59	; 0x3b
 800c526:	4413      	add	r3, r2
 800c528:	e7e2      	b.n	800c4f0 <gmtime_r+0x108>
 800c52a:	2201      	movs	r2, #1
 800c52c:	e7fa      	b.n	800c524 <gmtime_r+0x13c>
 800c52e:	bf00      	nop
 800c530:	00015180 	.word	0x00015180
 800c534:	00023ab1 	.word	0x00023ab1
 800c538:	fffdc54f 	.word	0xfffdc54f
 800c53c:	00023ab0 	.word	0x00023ab0

0800c540 <__libc_init_array>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	4d0d      	ldr	r5, [pc, #52]	; (800c578 <__libc_init_array+0x38>)
 800c544:	4c0d      	ldr	r4, [pc, #52]	; (800c57c <__libc_init_array+0x3c>)
 800c546:	1b64      	subs	r4, r4, r5
 800c548:	10a4      	asrs	r4, r4, #2
 800c54a:	2600      	movs	r6, #0
 800c54c:	42a6      	cmp	r6, r4
 800c54e:	d109      	bne.n	800c564 <__libc_init_array+0x24>
 800c550:	4d0b      	ldr	r5, [pc, #44]	; (800c580 <__libc_init_array+0x40>)
 800c552:	4c0c      	ldr	r4, [pc, #48]	; (800c584 <__libc_init_array+0x44>)
 800c554:	f000 fe2a 	bl	800d1ac <_init>
 800c558:	1b64      	subs	r4, r4, r5
 800c55a:	10a4      	asrs	r4, r4, #2
 800c55c:	2600      	movs	r6, #0
 800c55e:	42a6      	cmp	r6, r4
 800c560:	d105      	bne.n	800c56e <__libc_init_array+0x2e>
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f855 3b04 	ldr.w	r3, [r5], #4
 800c568:	4798      	blx	r3
 800c56a:	3601      	adds	r6, #1
 800c56c:	e7ee      	b.n	800c54c <__libc_init_array+0xc>
 800c56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c572:	4798      	blx	r3
 800c574:	3601      	adds	r6, #1
 800c576:	e7f2      	b.n	800c55e <__libc_init_array+0x1e>
 800c578:	0800fc00 	.word	0x0800fc00
 800c57c:	0800fc00 	.word	0x0800fc00
 800c580:	0800fc00 	.word	0x0800fc00
 800c584:	0800fc04 	.word	0x0800fc04

0800c588 <__retarget_lock_acquire_recursive>:
 800c588:	4770      	bx	lr

0800c58a <__retarget_lock_release_recursive>:
 800c58a:	4770      	bx	lr

0800c58c <free>:
 800c58c:	4b02      	ldr	r3, [pc, #8]	; (800c598 <free+0xc>)
 800c58e:	4601      	mov	r1, r0
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	f000 b82f 	b.w	800c5f4 <_free_r>
 800c596:	bf00      	nop
 800c598:	200000a8 	.word	0x200000a8

0800c59c <memcpy>:
 800c59c:	440a      	add	r2, r1
 800c59e:	4291      	cmp	r1, r2
 800c5a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5a4:	d100      	bne.n	800c5a8 <memcpy+0xc>
 800c5a6:	4770      	bx	lr
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5b2:	4291      	cmp	r1, r2
 800c5b4:	d1f9      	bne.n	800c5aa <memcpy+0xe>
 800c5b6:	bd10      	pop	{r4, pc}

0800c5b8 <memset>:
 800c5b8:	4402      	add	r2, r0
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d100      	bne.n	800c5c2 <memset+0xa>
 800c5c0:	4770      	bx	lr
 800c5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5c6:	e7f9      	b.n	800c5bc <memset+0x4>

0800c5c8 <_calloc_r>:
 800c5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ca:	fba1 2402 	umull	r2, r4, r1, r2
 800c5ce:	b94c      	cbnz	r4, 800c5e4 <_calloc_r+0x1c>
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	9201      	str	r2, [sp, #4]
 800c5d4:	f000 f87a 	bl	800c6cc <_malloc_r>
 800c5d8:	9a01      	ldr	r2, [sp, #4]
 800c5da:	4605      	mov	r5, r0
 800c5dc:	b930      	cbnz	r0, 800c5ec <_calloc_r+0x24>
 800c5de:	4628      	mov	r0, r5
 800c5e0:	b003      	add	sp, #12
 800c5e2:	bd30      	pop	{r4, r5, pc}
 800c5e4:	220c      	movs	r2, #12
 800c5e6:	6002      	str	r2, [r0, #0]
 800c5e8:	2500      	movs	r5, #0
 800c5ea:	e7f8      	b.n	800c5de <_calloc_r+0x16>
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7ff ffe3 	bl	800c5b8 <memset>
 800c5f2:	e7f4      	b.n	800c5de <_calloc_r+0x16>

0800c5f4 <_free_r>:
 800c5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5f6:	2900      	cmp	r1, #0
 800c5f8:	d044      	beq.n	800c684 <_free_r+0x90>
 800c5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5fe:	9001      	str	r0, [sp, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	f1a1 0404 	sub.w	r4, r1, #4
 800c606:	bfb8      	it	lt
 800c608:	18e4      	addlt	r4, r4, r3
 800c60a:	f000 fa81 	bl	800cb10 <__malloc_lock>
 800c60e:	4a1e      	ldr	r2, [pc, #120]	; (800c688 <_free_r+0x94>)
 800c610:	9801      	ldr	r0, [sp, #4]
 800c612:	6813      	ldr	r3, [r2, #0]
 800c614:	b933      	cbnz	r3, 800c624 <_free_r+0x30>
 800c616:	6063      	str	r3, [r4, #4]
 800c618:	6014      	str	r4, [r2, #0]
 800c61a:	b003      	add	sp, #12
 800c61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c620:	f000 ba7c 	b.w	800cb1c <__malloc_unlock>
 800c624:	42a3      	cmp	r3, r4
 800c626:	d908      	bls.n	800c63a <_free_r+0x46>
 800c628:	6825      	ldr	r5, [r4, #0]
 800c62a:	1961      	adds	r1, r4, r5
 800c62c:	428b      	cmp	r3, r1
 800c62e:	bf01      	itttt	eq
 800c630:	6819      	ldreq	r1, [r3, #0]
 800c632:	685b      	ldreq	r3, [r3, #4]
 800c634:	1949      	addeq	r1, r1, r5
 800c636:	6021      	streq	r1, [r4, #0]
 800c638:	e7ed      	b.n	800c616 <_free_r+0x22>
 800c63a:	461a      	mov	r2, r3
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	b10b      	cbz	r3, 800c644 <_free_r+0x50>
 800c640:	42a3      	cmp	r3, r4
 800c642:	d9fa      	bls.n	800c63a <_free_r+0x46>
 800c644:	6811      	ldr	r1, [r2, #0]
 800c646:	1855      	adds	r5, r2, r1
 800c648:	42a5      	cmp	r5, r4
 800c64a:	d10b      	bne.n	800c664 <_free_r+0x70>
 800c64c:	6824      	ldr	r4, [r4, #0]
 800c64e:	4421      	add	r1, r4
 800c650:	1854      	adds	r4, r2, r1
 800c652:	42a3      	cmp	r3, r4
 800c654:	6011      	str	r1, [r2, #0]
 800c656:	d1e0      	bne.n	800c61a <_free_r+0x26>
 800c658:	681c      	ldr	r4, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	6053      	str	r3, [r2, #4]
 800c65e:	4421      	add	r1, r4
 800c660:	6011      	str	r1, [r2, #0]
 800c662:	e7da      	b.n	800c61a <_free_r+0x26>
 800c664:	d902      	bls.n	800c66c <_free_r+0x78>
 800c666:	230c      	movs	r3, #12
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	e7d6      	b.n	800c61a <_free_r+0x26>
 800c66c:	6825      	ldr	r5, [r4, #0]
 800c66e:	1961      	adds	r1, r4, r5
 800c670:	428b      	cmp	r3, r1
 800c672:	bf04      	itt	eq
 800c674:	6819      	ldreq	r1, [r3, #0]
 800c676:	685b      	ldreq	r3, [r3, #4]
 800c678:	6063      	str	r3, [r4, #4]
 800c67a:	bf04      	itt	eq
 800c67c:	1949      	addeq	r1, r1, r5
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	6054      	str	r4, [r2, #4]
 800c682:	e7ca      	b.n	800c61a <_free_r+0x26>
 800c684:	b003      	add	sp, #12
 800c686:	bd30      	pop	{r4, r5, pc}
 800c688:	20006a04 	.word	0x20006a04

0800c68c <sbrk_aligned>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	4e0e      	ldr	r6, [pc, #56]	; (800c6c8 <sbrk_aligned+0x3c>)
 800c690:	460c      	mov	r4, r1
 800c692:	6831      	ldr	r1, [r6, #0]
 800c694:	4605      	mov	r5, r0
 800c696:	b911      	cbnz	r1, 800c69e <sbrk_aligned+0x12>
 800c698:	f000 f8f6 	bl	800c888 <_sbrk_r>
 800c69c:	6030      	str	r0, [r6, #0]
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f000 f8f1 	bl	800c888 <_sbrk_r>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	d00a      	beq.n	800c6c0 <sbrk_aligned+0x34>
 800c6aa:	1cc4      	adds	r4, r0, #3
 800c6ac:	f024 0403 	bic.w	r4, r4, #3
 800c6b0:	42a0      	cmp	r0, r4
 800c6b2:	d007      	beq.n	800c6c4 <sbrk_aligned+0x38>
 800c6b4:	1a21      	subs	r1, r4, r0
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f000 f8e6 	bl	800c888 <_sbrk_r>
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d101      	bne.n	800c6c4 <sbrk_aligned+0x38>
 800c6c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	20006a08 	.word	0x20006a08

0800c6cc <_malloc_r>:
 800c6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d0:	1ccd      	adds	r5, r1, #3
 800c6d2:	f025 0503 	bic.w	r5, r5, #3
 800c6d6:	3508      	adds	r5, #8
 800c6d8:	2d0c      	cmp	r5, #12
 800c6da:	bf38      	it	cc
 800c6dc:	250c      	movcc	r5, #12
 800c6de:	2d00      	cmp	r5, #0
 800c6e0:	4607      	mov	r7, r0
 800c6e2:	db01      	blt.n	800c6e8 <_malloc_r+0x1c>
 800c6e4:	42a9      	cmp	r1, r5
 800c6e6:	d905      	bls.n	800c6f4 <_malloc_r+0x28>
 800c6e8:	230c      	movs	r3, #12
 800c6ea:	603b      	str	r3, [r7, #0]
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f4:	4e2e      	ldr	r6, [pc, #184]	; (800c7b0 <_malloc_r+0xe4>)
 800c6f6:	f000 fa0b 	bl	800cb10 <__malloc_lock>
 800c6fa:	6833      	ldr	r3, [r6, #0]
 800c6fc:	461c      	mov	r4, r3
 800c6fe:	bb34      	cbnz	r4, 800c74e <_malloc_r+0x82>
 800c700:	4629      	mov	r1, r5
 800c702:	4638      	mov	r0, r7
 800c704:	f7ff ffc2 	bl	800c68c <sbrk_aligned>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	4604      	mov	r4, r0
 800c70c:	d14d      	bne.n	800c7aa <_malloc_r+0xde>
 800c70e:	6834      	ldr	r4, [r6, #0]
 800c710:	4626      	mov	r6, r4
 800c712:	2e00      	cmp	r6, #0
 800c714:	d140      	bne.n	800c798 <_malloc_r+0xcc>
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	4631      	mov	r1, r6
 800c71a:	4638      	mov	r0, r7
 800c71c:	eb04 0803 	add.w	r8, r4, r3
 800c720:	f000 f8b2 	bl	800c888 <_sbrk_r>
 800c724:	4580      	cmp	r8, r0
 800c726:	d13a      	bne.n	800c79e <_malloc_r+0xd2>
 800c728:	6821      	ldr	r1, [r4, #0]
 800c72a:	3503      	adds	r5, #3
 800c72c:	1a6d      	subs	r5, r5, r1
 800c72e:	f025 0503 	bic.w	r5, r5, #3
 800c732:	3508      	adds	r5, #8
 800c734:	2d0c      	cmp	r5, #12
 800c736:	bf38      	it	cc
 800c738:	250c      	movcc	r5, #12
 800c73a:	4629      	mov	r1, r5
 800c73c:	4638      	mov	r0, r7
 800c73e:	f7ff ffa5 	bl	800c68c <sbrk_aligned>
 800c742:	3001      	adds	r0, #1
 800c744:	d02b      	beq.n	800c79e <_malloc_r+0xd2>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	442b      	add	r3, r5
 800c74a:	6023      	str	r3, [r4, #0]
 800c74c:	e00e      	b.n	800c76c <_malloc_r+0xa0>
 800c74e:	6822      	ldr	r2, [r4, #0]
 800c750:	1b52      	subs	r2, r2, r5
 800c752:	d41e      	bmi.n	800c792 <_malloc_r+0xc6>
 800c754:	2a0b      	cmp	r2, #11
 800c756:	d916      	bls.n	800c786 <_malloc_r+0xba>
 800c758:	1961      	adds	r1, r4, r5
 800c75a:	42a3      	cmp	r3, r4
 800c75c:	6025      	str	r5, [r4, #0]
 800c75e:	bf18      	it	ne
 800c760:	6059      	strne	r1, [r3, #4]
 800c762:	6863      	ldr	r3, [r4, #4]
 800c764:	bf08      	it	eq
 800c766:	6031      	streq	r1, [r6, #0]
 800c768:	5162      	str	r2, [r4, r5]
 800c76a:	604b      	str	r3, [r1, #4]
 800c76c:	4638      	mov	r0, r7
 800c76e:	f104 060b 	add.w	r6, r4, #11
 800c772:	f000 f9d3 	bl	800cb1c <__malloc_unlock>
 800c776:	f026 0607 	bic.w	r6, r6, #7
 800c77a:	1d23      	adds	r3, r4, #4
 800c77c:	1af2      	subs	r2, r6, r3
 800c77e:	d0b6      	beq.n	800c6ee <_malloc_r+0x22>
 800c780:	1b9b      	subs	r3, r3, r6
 800c782:	50a3      	str	r3, [r4, r2]
 800c784:	e7b3      	b.n	800c6ee <_malloc_r+0x22>
 800c786:	6862      	ldr	r2, [r4, #4]
 800c788:	42a3      	cmp	r3, r4
 800c78a:	bf0c      	ite	eq
 800c78c:	6032      	streq	r2, [r6, #0]
 800c78e:	605a      	strne	r2, [r3, #4]
 800c790:	e7ec      	b.n	800c76c <_malloc_r+0xa0>
 800c792:	4623      	mov	r3, r4
 800c794:	6864      	ldr	r4, [r4, #4]
 800c796:	e7b2      	b.n	800c6fe <_malloc_r+0x32>
 800c798:	4634      	mov	r4, r6
 800c79a:	6876      	ldr	r6, [r6, #4]
 800c79c:	e7b9      	b.n	800c712 <_malloc_r+0x46>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	603b      	str	r3, [r7, #0]
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	f000 f9ba 	bl	800cb1c <__malloc_unlock>
 800c7a8:	e7a1      	b.n	800c6ee <_malloc_r+0x22>
 800c7aa:	6025      	str	r5, [r4, #0]
 800c7ac:	e7de      	b.n	800c76c <_malloc_r+0xa0>
 800c7ae:	bf00      	nop
 800c7b0:	20006a04 	.word	0x20006a04

0800c7b4 <cleanup_glue>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	6809      	ldr	r1, [r1, #0]
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	b109      	cbz	r1, 800c7c2 <cleanup_glue+0xe>
 800c7be:	f7ff fff9 	bl	800c7b4 <cleanup_glue>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ca:	f7ff bf13 	b.w	800c5f4 <_free_r>
	...

0800c7d0 <_reclaim_reent>:
 800c7d0:	4b2c      	ldr	r3, [pc, #176]	; (800c884 <_reclaim_reent+0xb4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4283      	cmp	r3, r0
 800c7d6:	b570      	push	{r4, r5, r6, lr}
 800c7d8:	4604      	mov	r4, r0
 800c7da:	d051      	beq.n	800c880 <_reclaim_reent+0xb0>
 800c7dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c7de:	b143      	cbz	r3, 800c7f2 <_reclaim_reent+0x22>
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d14a      	bne.n	800c87c <_reclaim_reent+0xac>
 800c7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7e8:	6819      	ldr	r1, [r3, #0]
 800c7ea:	b111      	cbz	r1, 800c7f2 <_reclaim_reent+0x22>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7ff ff01 	bl	800c5f4 <_free_r>
 800c7f2:	6961      	ldr	r1, [r4, #20]
 800c7f4:	b111      	cbz	r1, 800c7fc <_reclaim_reent+0x2c>
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f7ff fefc 	bl	800c5f4 <_free_r>
 800c7fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c7fe:	b111      	cbz	r1, 800c806 <_reclaim_reent+0x36>
 800c800:	4620      	mov	r0, r4
 800c802:	f7ff fef7 	bl	800c5f4 <_free_r>
 800c806:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c808:	b111      	cbz	r1, 800c810 <_reclaim_reent+0x40>
 800c80a:	4620      	mov	r0, r4
 800c80c:	f7ff fef2 	bl	800c5f4 <_free_r>
 800c810:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c812:	b111      	cbz	r1, 800c81a <_reclaim_reent+0x4a>
 800c814:	4620      	mov	r0, r4
 800c816:	f7ff feed 	bl	800c5f4 <_free_r>
 800c81a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c81c:	b111      	cbz	r1, 800c824 <_reclaim_reent+0x54>
 800c81e:	4620      	mov	r0, r4
 800c820:	f7ff fee8 	bl	800c5f4 <_free_r>
 800c824:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c826:	b111      	cbz	r1, 800c82e <_reclaim_reent+0x5e>
 800c828:	4620      	mov	r0, r4
 800c82a:	f7ff fee3 	bl	800c5f4 <_free_r>
 800c82e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c830:	b111      	cbz	r1, 800c838 <_reclaim_reent+0x68>
 800c832:	4620      	mov	r0, r4
 800c834:	f7ff fede 	bl	800c5f4 <_free_r>
 800c838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c83a:	b111      	cbz	r1, 800c842 <_reclaim_reent+0x72>
 800c83c:	4620      	mov	r0, r4
 800c83e:	f7ff fed9 	bl	800c5f4 <_free_r>
 800c842:	69a3      	ldr	r3, [r4, #24]
 800c844:	b1e3      	cbz	r3, 800c880 <_reclaim_reent+0xb0>
 800c846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c848:	4620      	mov	r0, r4
 800c84a:	4798      	blx	r3
 800c84c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c84e:	b1b9      	cbz	r1, 800c880 <_reclaim_reent+0xb0>
 800c850:	4620      	mov	r0, r4
 800c852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c856:	f7ff bfad 	b.w	800c7b4 <cleanup_glue>
 800c85a:	5949      	ldr	r1, [r1, r5]
 800c85c:	b941      	cbnz	r1, 800c870 <_reclaim_reent+0xa0>
 800c85e:	3504      	adds	r5, #4
 800c860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c862:	2d80      	cmp	r5, #128	; 0x80
 800c864:	68d9      	ldr	r1, [r3, #12]
 800c866:	d1f8      	bne.n	800c85a <_reclaim_reent+0x8a>
 800c868:	4620      	mov	r0, r4
 800c86a:	f7ff fec3 	bl	800c5f4 <_free_r>
 800c86e:	e7ba      	b.n	800c7e6 <_reclaim_reent+0x16>
 800c870:	680e      	ldr	r6, [r1, #0]
 800c872:	4620      	mov	r0, r4
 800c874:	f7ff febe 	bl	800c5f4 <_free_r>
 800c878:	4631      	mov	r1, r6
 800c87a:	e7ef      	b.n	800c85c <_reclaim_reent+0x8c>
 800c87c:	2500      	movs	r5, #0
 800c87e:	e7ef      	b.n	800c860 <_reclaim_reent+0x90>
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	bf00      	nop
 800c884:	200000a8 	.word	0x200000a8

0800c888 <_sbrk_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4d06      	ldr	r5, [pc, #24]	; (800c8a4 <_sbrk_r+0x1c>)
 800c88c:	2300      	movs	r3, #0
 800c88e:	4604      	mov	r4, r0
 800c890:	4608      	mov	r0, r1
 800c892:	602b      	str	r3, [r5, #0]
 800c894:	f7f7 ff38 	bl	8004708 <_sbrk>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d102      	bne.n	800c8a2 <_sbrk_r+0x1a>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	b103      	cbz	r3, 800c8a2 <_sbrk_r+0x1a>
 800c8a0:	6023      	str	r3, [r4, #0]
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	20006a0c 	.word	0x20006a0c

0800c8a8 <siprintf>:
 800c8a8:	b40e      	push	{r1, r2, r3}
 800c8aa:	b500      	push	{lr}
 800c8ac:	b09c      	sub	sp, #112	; 0x70
 800c8ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c8b0:	9002      	str	r0, [sp, #8]
 800c8b2:	9006      	str	r0, [sp, #24]
 800c8b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8b8:	4809      	ldr	r0, [pc, #36]	; (800c8e0 <siprintf+0x38>)
 800c8ba:	9107      	str	r1, [sp, #28]
 800c8bc:	9104      	str	r1, [sp, #16]
 800c8be:	4909      	ldr	r1, [pc, #36]	; (800c8e4 <siprintf+0x3c>)
 800c8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8c4:	9105      	str	r1, [sp, #20]
 800c8c6:	6800      	ldr	r0, [r0, #0]
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	a902      	add	r1, sp, #8
 800c8cc:	f000 f988 	bl	800cbe0 <_svfiprintf_r>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	701a      	strb	r2, [r3, #0]
 800c8d6:	b01c      	add	sp, #112	; 0x70
 800c8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8dc:	b003      	add	sp, #12
 800c8de:	4770      	bx	lr
 800c8e0:	200000a8 	.word	0x200000a8
 800c8e4:	ffff0208 	.word	0xffff0208

0800c8e8 <strcat>:
 800c8e8:	b510      	push	{r4, lr}
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	7814      	ldrb	r4, [r2, #0]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	3201      	adds	r2, #1
 800c8f2:	2c00      	cmp	r4, #0
 800c8f4:	d1fa      	bne.n	800c8ec <strcat+0x4>
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c900:	2a00      	cmp	r2, #0
 800c902:	d1f9      	bne.n	800c8f8 <strcat+0x10>
 800c904:	bd10      	pop	{r4, pc}

0800c906 <strchr>:
 800c906:	b2c9      	uxtb	r1, r1
 800c908:	4603      	mov	r3, r0
 800c90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c90e:	b11a      	cbz	r2, 800c918 <strchr+0x12>
 800c910:	428a      	cmp	r2, r1
 800c912:	d1f9      	bne.n	800c908 <strchr+0x2>
 800c914:	4618      	mov	r0, r3
 800c916:	4770      	bx	lr
 800c918:	2900      	cmp	r1, #0
 800c91a:	bf18      	it	ne
 800c91c:	2300      	movne	r3, #0
 800c91e:	e7f9      	b.n	800c914 <strchr+0xe>

0800c920 <strcpy>:
 800c920:	4603      	mov	r3, r0
 800c922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c926:	f803 2b01 	strb.w	r2, [r3], #1
 800c92a:	2a00      	cmp	r2, #0
 800c92c:	d1f9      	bne.n	800c922 <strcpy+0x2>
 800c92e:	4770      	bx	lr

0800c930 <strncpy>:
 800c930:	b510      	push	{r4, lr}
 800c932:	3901      	subs	r1, #1
 800c934:	4603      	mov	r3, r0
 800c936:	b132      	cbz	r2, 800c946 <strncpy+0x16>
 800c938:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c93c:	f803 4b01 	strb.w	r4, [r3], #1
 800c940:	3a01      	subs	r2, #1
 800c942:	2c00      	cmp	r4, #0
 800c944:	d1f7      	bne.n	800c936 <strncpy+0x6>
 800c946:	441a      	add	r2, r3
 800c948:	2100      	movs	r1, #0
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d100      	bne.n	800c950 <strncpy+0x20>
 800c94e:	bd10      	pop	{r4, pc}
 800c950:	f803 1b01 	strb.w	r1, [r3], #1
 800c954:	e7f9      	b.n	800c94a <strncpy+0x1a>

0800c956 <strstr>:
 800c956:	780a      	ldrb	r2, [r1, #0]
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	b96a      	cbnz	r2, 800c978 <strstr+0x22>
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	429a      	cmp	r2, r3
 800c960:	d109      	bne.n	800c976 <strstr+0x20>
 800c962:	460c      	mov	r4, r1
 800c964:	4605      	mov	r5, r0
 800c966:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0f6      	beq.n	800c95c <strstr+0x6>
 800c96e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c972:	429e      	cmp	r6, r3
 800c974:	d0f7      	beq.n	800c966 <strstr+0x10>
 800c976:	3001      	adds	r0, #1
 800c978:	7803      	ldrb	r3, [r0, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1ef      	bne.n	800c95e <strstr+0x8>
 800c97e:	4618      	mov	r0, r3
 800c980:	e7ec      	b.n	800c95c <strstr+0x6>
	...

0800c984 <_strtol_l.constprop.0>:
 800c984:	2b01      	cmp	r3, #1
 800c986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98a:	d001      	beq.n	800c990 <_strtol_l.constprop.0+0xc>
 800c98c:	2b24      	cmp	r3, #36	; 0x24
 800c98e:	d906      	bls.n	800c99e <_strtol_l.constprop.0+0x1a>
 800c990:	f7ff fd24 	bl	800c3dc <__errno>
 800c994:	2316      	movs	r3, #22
 800c996:	6003      	str	r3, [r0, #0]
 800c998:	2000      	movs	r0, #0
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca84 <_strtol_l.constprop.0+0x100>
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	462e      	mov	r6, r5
 800c9a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c9ae:	f017 0708 	ands.w	r7, r7, #8
 800c9b2:	d1f7      	bne.n	800c9a4 <_strtol_l.constprop.0+0x20>
 800c9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800c9b6:	d132      	bne.n	800ca1e <_strtol_l.constprop.0+0x9a>
 800c9b8:	782c      	ldrb	r4, [r5, #0]
 800c9ba:	2701      	movs	r7, #1
 800c9bc:	1cb5      	adds	r5, r6, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d05b      	beq.n	800ca7a <_strtol_l.constprop.0+0xf6>
 800c9c2:	2b10      	cmp	r3, #16
 800c9c4:	d109      	bne.n	800c9da <_strtol_l.constprop.0+0x56>
 800c9c6:	2c30      	cmp	r4, #48	; 0x30
 800c9c8:	d107      	bne.n	800c9da <_strtol_l.constprop.0+0x56>
 800c9ca:	782c      	ldrb	r4, [r5, #0]
 800c9cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c9d0:	2c58      	cmp	r4, #88	; 0x58
 800c9d2:	d14d      	bne.n	800ca70 <_strtol_l.constprop.0+0xec>
 800c9d4:	786c      	ldrb	r4, [r5, #1]
 800c9d6:	2310      	movs	r3, #16
 800c9d8:	3502      	adds	r5, #2
 800c9da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c9de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c9e2:	f04f 0c00 	mov.w	ip, #0
 800c9e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c9ea:	4666      	mov	r6, ip
 800c9ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c9f4:	f1be 0f09 	cmp.w	lr, #9
 800c9f8:	d816      	bhi.n	800ca28 <_strtol_l.constprop.0+0xa4>
 800c9fa:	4674      	mov	r4, lr
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	dd24      	ble.n	800ca4a <_strtol_l.constprop.0+0xc6>
 800ca00:	f1bc 0f00 	cmp.w	ip, #0
 800ca04:	db1e      	blt.n	800ca44 <_strtol_l.constprop.0+0xc0>
 800ca06:	45b1      	cmp	r9, r6
 800ca08:	d31c      	bcc.n	800ca44 <_strtol_l.constprop.0+0xc0>
 800ca0a:	d101      	bne.n	800ca10 <_strtol_l.constprop.0+0x8c>
 800ca0c:	45a2      	cmp	sl, r4
 800ca0e:	db19      	blt.n	800ca44 <_strtol_l.constprop.0+0xc0>
 800ca10:	fb06 4603 	mla	r6, r6, r3, r4
 800ca14:	f04f 0c01 	mov.w	ip, #1
 800ca18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca1c:	e7e8      	b.n	800c9f0 <_strtol_l.constprop.0+0x6c>
 800ca1e:	2c2b      	cmp	r4, #43	; 0x2b
 800ca20:	bf04      	itt	eq
 800ca22:	782c      	ldrbeq	r4, [r5, #0]
 800ca24:	1cb5      	addeq	r5, r6, #2
 800ca26:	e7ca      	b.n	800c9be <_strtol_l.constprop.0+0x3a>
 800ca28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ca2c:	f1be 0f19 	cmp.w	lr, #25
 800ca30:	d801      	bhi.n	800ca36 <_strtol_l.constprop.0+0xb2>
 800ca32:	3c37      	subs	r4, #55	; 0x37
 800ca34:	e7e2      	b.n	800c9fc <_strtol_l.constprop.0+0x78>
 800ca36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ca3a:	f1be 0f19 	cmp.w	lr, #25
 800ca3e:	d804      	bhi.n	800ca4a <_strtol_l.constprop.0+0xc6>
 800ca40:	3c57      	subs	r4, #87	; 0x57
 800ca42:	e7db      	b.n	800c9fc <_strtol_l.constprop.0+0x78>
 800ca44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ca48:	e7e6      	b.n	800ca18 <_strtol_l.constprop.0+0x94>
 800ca4a:	f1bc 0f00 	cmp.w	ip, #0
 800ca4e:	da05      	bge.n	800ca5c <_strtol_l.constprop.0+0xd8>
 800ca50:	2322      	movs	r3, #34	; 0x22
 800ca52:	6003      	str	r3, [r0, #0]
 800ca54:	4646      	mov	r6, r8
 800ca56:	b942      	cbnz	r2, 800ca6a <_strtol_l.constprop.0+0xe6>
 800ca58:	4630      	mov	r0, r6
 800ca5a:	e79e      	b.n	800c99a <_strtol_l.constprop.0+0x16>
 800ca5c:	b107      	cbz	r7, 800ca60 <_strtol_l.constprop.0+0xdc>
 800ca5e:	4276      	negs	r6, r6
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d0f9      	beq.n	800ca58 <_strtol_l.constprop.0+0xd4>
 800ca64:	f1bc 0f00 	cmp.w	ip, #0
 800ca68:	d000      	beq.n	800ca6c <_strtol_l.constprop.0+0xe8>
 800ca6a:	1e69      	subs	r1, r5, #1
 800ca6c:	6011      	str	r1, [r2, #0]
 800ca6e:	e7f3      	b.n	800ca58 <_strtol_l.constprop.0+0xd4>
 800ca70:	2430      	movs	r4, #48	; 0x30
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1b1      	bne.n	800c9da <_strtol_l.constprop.0+0x56>
 800ca76:	2308      	movs	r3, #8
 800ca78:	e7af      	b.n	800c9da <_strtol_l.constprop.0+0x56>
 800ca7a:	2c30      	cmp	r4, #48	; 0x30
 800ca7c:	d0a5      	beq.n	800c9ca <_strtol_l.constprop.0+0x46>
 800ca7e:	230a      	movs	r3, #10
 800ca80:	e7ab      	b.n	800c9da <_strtol_l.constprop.0+0x56>
 800ca82:	bf00      	nop
 800ca84:	0800fac5 	.word	0x0800fac5

0800ca88 <strtol>:
 800ca88:	4613      	mov	r3, r2
 800ca8a:	460a      	mov	r2, r1
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	4802      	ldr	r0, [pc, #8]	; (800ca98 <strtol+0x10>)
 800ca90:	6800      	ldr	r0, [r0, #0]
 800ca92:	f7ff bf77 	b.w	800c984 <_strtol_l.constprop.0>
 800ca96:	bf00      	nop
 800ca98:	200000a8 	.word	0x200000a8

0800ca9c <_vsniprintf_r>:
 800ca9c:	b530      	push	{r4, r5, lr}
 800ca9e:	4614      	mov	r4, r2
 800caa0:	2c00      	cmp	r4, #0
 800caa2:	b09b      	sub	sp, #108	; 0x6c
 800caa4:	4605      	mov	r5, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	da05      	bge.n	800cab6 <_vsniprintf_r+0x1a>
 800caaa:	238b      	movs	r3, #139	; 0x8b
 800caac:	6003      	str	r3, [r0, #0]
 800caae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cab2:	b01b      	add	sp, #108	; 0x6c
 800cab4:	bd30      	pop	{r4, r5, pc}
 800cab6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800caba:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cabe:	bf14      	ite	ne
 800cac0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cac4:	4623      	moveq	r3, r4
 800cac6:	9302      	str	r3, [sp, #8]
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cace:	9100      	str	r1, [sp, #0]
 800cad0:	9104      	str	r1, [sp, #16]
 800cad2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cad6:	4669      	mov	r1, sp
 800cad8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cada:	f000 f881 	bl	800cbe0 <_svfiprintf_r>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	bfbc      	itt	lt
 800cae2:	238b      	movlt	r3, #139	; 0x8b
 800cae4:	602b      	strlt	r3, [r5, #0]
 800cae6:	2c00      	cmp	r4, #0
 800cae8:	d0e3      	beq.n	800cab2 <_vsniprintf_r+0x16>
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	e7df      	b.n	800cab2 <_vsniprintf_r+0x16>
	...

0800caf4 <vsniprintf>:
 800caf4:	b507      	push	{r0, r1, r2, lr}
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	4613      	mov	r3, r2
 800cafa:	460a      	mov	r2, r1
 800cafc:	4601      	mov	r1, r0
 800cafe:	4803      	ldr	r0, [pc, #12]	; (800cb0c <vsniprintf+0x18>)
 800cb00:	6800      	ldr	r0, [r0, #0]
 800cb02:	f7ff ffcb 	bl	800ca9c <_vsniprintf_r>
 800cb06:	b003      	add	sp, #12
 800cb08:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb0c:	200000a8 	.word	0x200000a8

0800cb10 <__malloc_lock>:
 800cb10:	4801      	ldr	r0, [pc, #4]	; (800cb18 <__malloc_lock+0x8>)
 800cb12:	f7ff bd39 	b.w	800c588 <__retarget_lock_acquire_recursive>
 800cb16:	bf00      	nop
 800cb18:	20006a00 	.word	0x20006a00

0800cb1c <__malloc_unlock>:
 800cb1c:	4801      	ldr	r0, [pc, #4]	; (800cb24 <__malloc_unlock+0x8>)
 800cb1e:	f7ff bd34 	b.w	800c58a <__retarget_lock_release_recursive>
 800cb22:	bf00      	nop
 800cb24:	20006a00 	.word	0x20006a00

0800cb28 <__ssputs_r>:
 800cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2c:	688e      	ldr	r6, [r1, #8]
 800cb2e:	429e      	cmp	r6, r3
 800cb30:	4682      	mov	sl, r0
 800cb32:	460c      	mov	r4, r1
 800cb34:	4690      	mov	r8, r2
 800cb36:	461f      	mov	r7, r3
 800cb38:	d838      	bhi.n	800cbac <__ssputs_r+0x84>
 800cb3a:	898a      	ldrh	r2, [r1, #12]
 800cb3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb40:	d032      	beq.n	800cba8 <__ssputs_r+0x80>
 800cb42:	6825      	ldr	r5, [r4, #0]
 800cb44:	6909      	ldr	r1, [r1, #16]
 800cb46:	eba5 0901 	sub.w	r9, r5, r1
 800cb4a:	6965      	ldr	r5, [r4, #20]
 800cb4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb54:	3301      	adds	r3, #1
 800cb56:	444b      	add	r3, r9
 800cb58:	106d      	asrs	r5, r5, #1
 800cb5a:	429d      	cmp	r5, r3
 800cb5c:	bf38      	it	cc
 800cb5e:	461d      	movcc	r5, r3
 800cb60:	0553      	lsls	r3, r2, #21
 800cb62:	d531      	bpl.n	800cbc8 <__ssputs_r+0xa0>
 800cb64:	4629      	mov	r1, r5
 800cb66:	f7ff fdb1 	bl	800c6cc <_malloc_r>
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	b950      	cbnz	r0, 800cb84 <__ssputs_r+0x5c>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	f8ca 3000 	str.w	r3, [sl]
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb84:	6921      	ldr	r1, [r4, #16]
 800cb86:	464a      	mov	r2, r9
 800cb88:	f7ff fd08 	bl	800c59c <memcpy>
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb96:	81a3      	strh	r3, [r4, #12]
 800cb98:	6126      	str	r6, [r4, #16]
 800cb9a:	6165      	str	r5, [r4, #20]
 800cb9c:	444e      	add	r6, r9
 800cb9e:	eba5 0509 	sub.w	r5, r5, r9
 800cba2:	6026      	str	r6, [r4, #0]
 800cba4:	60a5      	str	r5, [r4, #8]
 800cba6:	463e      	mov	r6, r7
 800cba8:	42be      	cmp	r6, r7
 800cbaa:	d900      	bls.n	800cbae <__ssputs_r+0x86>
 800cbac:	463e      	mov	r6, r7
 800cbae:	6820      	ldr	r0, [r4, #0]
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	4641      	mov	r1, r8
 800cbb4:	f000 faa8 	bl	800d108 <memmove>
 800cbb8:	68a3      	ldr	r3, [r4, #8]
 800cbba:	1b9b      	subs	r3, r3, r6
 800cbbc:	60a3      	str	r3, [r4, #8]
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	4433      	add	r3, r6
 800cbc2:	6023      	str	r3, [r4, #0]
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e7db      	b.n	800cb80 <__ssputs_r+0x58>
 800cbc8:	462a      	mov	r2, r5
 800cbca:	f000 fab7 	bl	800d13c <_realloc_r>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d1e1      	bne.n	800cb98 <__ssputs_r+0x70>
 800cbd4:	6921      	ldr	r1, [r4, #16]
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	f7ff fd0c 	bl	800c5f4 <_free_r>
 800cbdc:	e7c7      	b.n	800cb6e <__ssputs_r+0x46>
	...

0800cbe0 <_svfiprintf_r>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	4698      	mov	r8, r3
 800cbe6:	898b      	ldrh	r3, [r1, #12]
 800cbe8:	061b      	lsls	r3, r3, #24
 800cbea:	b09d      	sub	sp, #116	; 0x74
 800cbec:	4607      	mov	r7, r0
 800cbee:	460d      	mov	r5, r1
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	d50e      	bpl.n	800cc12 <_svfiprintf_r+0x32>
 800cbf4:	690b      	ldr	r3, [r1, #16]
 800cbf6:	b963      	cbnz	r3, 800cc12 <_svfiprintf_r+0x32>
 800cbf8:	2140      	movs	r1, #64	; 0x40
 800cbfa:	f7ff fd67 	bl	800c6cc <_malloc_r>
 800cbfe:	6028      	str	r0, [r5, #0]
 800cc00:	6128      	str	r0, [r5, #16]
 800cc02:	b920      	cbnz	r0, 800cc0e <_svfiprintf_r+0x2e>
 800cc04:	230c      	movs	r3, #12
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc0c:	e0d1      	b.n	800cdb2 <_svfiprintf_r+0x1d2>
 800cc0e:	2340      	movs	r3, #64	; 0x40
 800cc10:	616b      	str	r3, [r5, #20]
 800cc12:	2300      	movs	r3, #0
 800cc14:	9309      	str	r3, [sp, #36]	; 0x24
 800cc16:	2320      	movs	r3, #32
 800cc18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc20:	2330      	movs	r3, #48	; 0x30
 800cc22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cdcc <_svfiprintf_r+0x1ec>
 800cc26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc2a:	f04f 0901 	mov.w	r9, #1
 800cc2e:	4623      	mov	r3, r4
 800cc30:	469a      	mov	sl, r3
 800cc32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc36:	b10a      	cbz	r2, 800cc3c <_svfiprintf_r+0x5c>
 800cc38:	2a25      	cmp	r2, #37	; 0x25
 800cc3a:	d1f9      	bne.n	800cc30 <_svfiprintf_r+0x50>
 800cc3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc40:	d00b      	beq.n	800cc5a <_svfiprintf_r+0x7a>
 800cc42:	465b      	mov	r3, fp
 800cc44:	4622      	mov	r2, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ff6d 	bl	800cb28 <__ssputs_r>
 800cc4e:	3001      	adds	r0, #1
 800cc50:	f000 80aa 	beq.w	800cda8 <_svfiprintf_r+0x1c8>
 800cc54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc56:	445a      	add	r2, fp
 800cc58:	9209      	str	r2, [sp, #36]	; 0x24
 800cc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 80a2 	beq.w	800cda8 <_svfiprintf_r+0x1c8>
 800cc64:	2300      	movs	r3, #0
 800cc66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc6e:	f10a 0a01 	add.w	sl, sl, #1
 800cc72:	9304      	str	r3, [sp, #16]
 800cc74:	9307      	str	r3, [sp, #28]
 800cc76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc7a:	931a      	str	r3, [sp, #104]	; 0x68
 800cc7c:	4654      	mov	r4, sl
 800cc7e:	2205      	movs	r2, #5
 800cc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc84:	4851      	ldr	r0, [pc, #324]	; (800cdcc <_svfiprintf_r+0x1ec>)
 800cc86:	f7f3 faab 	bl	80001e0 <memchr>
 800cc8a:	9a04      	ldr	r2, [sp, #16]
 800cc8c:	b9d8      	cbnz	r0, 800ccc6 <_svfiprintf_r+0xe6>
 800cc8e:	06d0      	lsls	r0, r2, #27
 800cc90:	bf44      	itt	mi
 800cc92:	2320      	movmi	r3, #32
 800cc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc98:	0711      	lsls	r1, r2, #28
 800cc9a:	bf44      	itt	mi
 800cc9c:	232b      	movmi	r3, #43	; 0x2b
 800cc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cca2:	f89a 3000 	ldrb.w	r3, [sl]
 800cca6:	2b2a      	cmp	r3, #42	; 0x2a
 800cca8:	d015      	beq.n	800ccd6 <_svfiprintf_r+0xf6>
 800ccaa:	9a07      	ldr	r2, [sp, #28]
 800ccac:	4654      	mov	r4, sl
 800ccae:	2000      	movs	r0, #0
 800ccb0:	f04f 0c0a 	mov.w	ip, #10
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccba:	3b30      	subs	r3, #48	; 0x30
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	d94e      	bls.n	800cd5e <_svfiprintf_r+0x17e>
 800ccc0:	b1b0      	cbz	r0, 800ccf0 <_svfiprintf_r+0x110>
 800ccc2:	9207      	str	r2, [sp, #28]
 800ccc4:	e014      	b.n	800ccf0 <_svfiprintf_r+0x110>
 800ccc6:	eba0 0308 	sub.w	r3, r0, r8
 800ccca:	fa09 f303 	lsl.w	r3, r9, r3
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	9304      	str	r3, [sp, #16]
 800ccd2:	46a2      	mov	sl, r4
 800ccd4:	e7d2      	b.n	800cc7c <_svfiprintf_r+0x9c>
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	1d19      	adds	r1, r3, #4
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	9103      	str	r1, [sp, #12]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfbb      	ittet	lt
 800cce2:	425b      	neglt	r3, r3
 800cce4:	f042 0202 	orrlt.w	r2, r2, #2
 800cce8:	9307      	strge	r3, [sp, #28]
 800ccea:	9307      	strlt	r3, [sp, #28]
 800ccec:	bfb8      	it	lt
 800ccee:	9204      	strlt	r2, [sp, #16]
 800ccf0:	7823      	ldrb	r3, [r4, #0]
 800ccf2:	2b2e      	cmp	r3, #46	; 0x2e
 800ccf4:	d10c      	bne.n	800cd10 <_svfiprintf_r+0x130>
 800ccf6:	7863      	ldrb	r3, [r4, #1]
 800ccf8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfa:	d135      	bne.n	800cd68 <_svfiprintf_r+0x188>
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	1d1a      	adds	r2, r3, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	9203      	str	r2, [sp, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bfb8      	it	lt
 800cd08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd0c:	3402      	adds	r4, #2
 800cd0e:	9305      	str	r3, [sp, #20]
 800cd10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cddc <_svfiprintf_r+0x1fc>
 800cd14:	7821      	ldrb	r1, [r4, #0]
 800cd16:	2203      	movs	r2, #3
 800cd18:	4650      	mov	r0, sl
 800cd1a:	f7f3 fa61 	bl	80001e0 <memchr>
 800cd1e:	b140      	cbz	r0, 800cd32 <_svfiprintf_r+0x152>
 800cd20:	2340      	movs	r3, #64	; 0x40
 800cd22:	eba0 000a 	sub.w	r0, r0, sl
 800cd26:	fa03 f000 	lsl.w	r0, r3, r0
 800cd2a:	9b04      	ldr	r3, [sp, #16]
 800cd2c:	4303      	orrs	r3, r0
 800cd2e:	3401      	adds	r4, #1
 800cd30:	9304      	str	r3, [sp, #16]
 800cd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd36:	4826      	ldr	r0, [pc, #152]	; (800cdd0 <_svfiprintf_r+0x1f0>)
 800cd38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd3c:	2206      	movs	r2, #6
 800cd3e:	f7f3 fa4f 	bl	80001e0 <memchr>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d038      	beq.n	800cdb8 <_svfiprintf_r+0x1d8>
 800cd46:	4b23      	ldr	r3, [pc, #140]	; (800cdd4 <_svfiprintf_r+0x1f4>)
 800cd48:	bb1b      	cbnz	r3, 800cd92 <_svfiprintf_r+0x1b2>
 800cd4a:	9b03      	ldr	r3, [sp, #12]
 800cd4c:	3307      	adds	r3, #7
 800cd4e:	f023 0307 	bic.w	r3, r3, #7
 800cd52:	3308      	adds	r3, #8
 800cd54:	9303      	str	r3, [sp, #12]
 800cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd58:	4433      	add	r3, r6
 800cd5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5c:	e767      	b.n	800cc2e <_svfiprintf_r+0x4e>
 800cd5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd62:	460c      	mov	r4, r1
 800cd64:	2001      	movs	r0, #1
 800cd66:	e7a5      	b.n	800ccb4 <_svfiprintf_r+0xd4>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	3401      	adds	r4, #1
 800cd6c:	9305      	str	r3, [sp, #20]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f04f 0c0a 	mov.w	ip, #10
 800cd74:	4620      	mov	r0, r4
 800cd76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd7a:	3a30      	subs	r2, #48	; 0x30
 800cd7c:	2a09      	cmp	r2, #9
 800cd7e:	d903      	bls.n	800cd88 <_svfiprintf_r+0x1a8>
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0c5      	beq.n	800cd10 <_svfiprintf_r+0x130>
 800cd84:	9105      	str	r1, [sp, #20]
 800cd86:	e7c3      	b.n	800cd10 <_svfiprintf_r+0x130>
 800cd88:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e7f0      	b.n	800cd74 <_svfiprintf_r+0x194>
 800cd92:	ab03      	add	r3, sp, #12
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	462a      	mov	r2, r5
 800cd98:	4b0f      	ldr	r3, [pc, #60]	; (800cdd8 <_svfiprintf_r+0x1f8>)
 800cd9a:	a904      	add	r1, sp, #16
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f3af 8000 	nop.w
 800cda2:	1c42      	adds	r2, r0, #1
 800cda4:	4606      	mov	r6, r0
 800cda6:	d1d6      	bne.n	800cd56 <_svfiprintf_r+0x176>
 800cda8:	89ab      	ldrh	r3, [r5, #12]
 800cdaa:	065b      	lsls	r3, r3, #25
 800cdac:	f53f af2c 	bmi.w	800cc08 <_svfiprintf_r+0x28>
 800cdb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb2:	b01d      	add	sp, #116	; 0x74
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	ab03      	add	r3, sp, #12
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	4b06      	ldr	r3, [pc, #24]	; (800cdd8 <_svfiprintf_r+0x1f8>)
 800cdc0:	a904      	add	r1, sp, #16
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	f000 f87a 	bl	800cebc <_printf_i>
 800cdc8:	e7eb      	b.n	800cda2 <_svfiprintf_r+0x1c2>
 800cdca:	bf00      	nop
 800cdcc:	0800fbc5 	.word	0x0800fbc5
 800cdd0:	0800fbcf 	.word	0x0800fbcf
 800cdd4:	00000000 	.word	0x00000000
 800cdd8:	0800cb29 	.word	0x0800cb29
 800cddc:	0800fbcb 	.word	0x0800fbcb

0800cde0 <_printf_common>:
 800cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde4:	4616      	mov	r6, r2
 800cde6:	4699      	mov	r9, r3
 800cde8:	688a      	ldr	r2, [r1, #8]
 800cdea:	690b      	ldr	r3, [r1, #16]
 800cdec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	bfb8      	it	lt
 800cdf4:	4613      	movlt	r3, r2
 800cdf6:	6033      	str	r3, [r6, #0]
 800cdf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	b10a      	cbz	r2, 800ce06 <_printf_common+0x26>
 800ce02:	3301      	adds	r3, #1
 800ce04:	6033      	str	r3, [r6, #0]
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	0699      	lsls	r1, r3, #26
 800ce0a:	bf42      	ittt	mi
 800ce0c:	6833      	ldrmi	r3, [r6, #0]
 800ce0e:	3302      	addmi	r3, #2
 800ce10:	6033      	strmi	r3, [r6, #0]
 800ce12:	6825      	ldr	r5, [r4, #0]
 800ce14:	f015 0506 	ands.w	r5, r5, #6
 800ce18:	d106      	bne.n	800ce28 <_printf_common+0x48>
 800ce1a:	f104 0a19 	add.w	sl, r4, #25
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	6832      	ldr	r2, [r6, #0]
 800ce22:	1a9b      	subs	r3, r3, r2
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	dc26      	bgt.n	800ce76 <_printf_common+0x96>
 800ce28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce2c:	1e13      	subs	r3, r2, #0
 800ce2e:	6822      	ldr	r2, [r4, #0]
 800ce30:	bf18      	it	ne
 800ce32:	2301      	movne	r3, #1
 800ce34:	0692      	lsls	r2, r2, #26
 800ce36:	d42b      	bmi.n	800ce90 <_printf_common+0xb0>
 800ce38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	4638      	mov	r0, r7
 800ce40:	47c0      	blx	r8
 800ce42:	3001      	adds	r0, #1
 800ce44:	d01e      	beq.n	800ce84 <_printf_common+0xa4>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	68e5      	ldr	r5, [r4, #12]
 800ce4a:	6832      	ldr	r2, [r6, #0]
 800ce4c:	f003 0306 	and.w	r3, r3, #6
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	bf08      	it	eq
 800ce54:	1aad      	subeq	r5, r5, r2
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	6922      	ldr	r2, [r4, #16]
 800ce5a:	bf0c      	ite	eq
 800ce5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce60:	2500      	movne	r5, #0
 800ce62:	4293      	cmp	r3, r2
 800ce64:	bfc4      	itt	gt
 800ce66:	1a9b      	subgt	r3, r3, r2
 800ce68:	18ed      	addgt	r5, r5, r3
 800ce6a:	2600      	movs	r6, #0
 800ce6c:	341a      	adds	r4, #26
 800ce6e:	42b5      	cmp	r5, r6
 800ce70:	d11a      	bne.n	800cea8 <_printf_common+0xc8>
 800ce72:	2000      	movs	r0, #0
 800ce74:	e008      	b.n	800ce88 <_printf_common+0xa8>
 800ce76:	2301      	movs	r3, #1
 800ce78:	4652      	mov	r2, sl
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	47c0      	blx	r8
 800ce80:	3001      	adds	r0, #1
 800ce82:	d103      	bne.n	800ce8c <_printf_common+0xac>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	e7c6      	b.n	800ce1e <_printf_common+0x3e>
 800ce90:	18e1      	adds	r1, r4, r3
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	2030      	movs	r0, #48	; 0x30
 800ce96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce9a:	4422      	add	r2, r4
 800ce9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cea4:	3302      	adds	r3, #2
 800cea6:	e7c7      	b.n	800ce38 <_printf_common+0x58>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	4622      	mov	r2, r4
 800ceac:	4649      	mov	r1, r9
 800ceae:	4638      	mov	r0, r7
 800ceb0:	47c0      	blx	r8
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	d0e6      	beq.n	800ce84 <_printf_common+0xa4>
 800ceb6:	3601      	adds	r6, #1
 800ceb8:	e7d9      	b.n	800ce6e <_printf_common+0x8e>
	...

0800cebc <_printf_i>:
 800cebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	7e0f      	ldrb	r7, [r1, #24]
 800cec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cec4:	2f78      	cmp	r7, #120	; 0x78
 800cec6:	4691      	mov	r9, r2
 800cec8:	4680      	mov	r8, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	469a      	mov	sl, r3
 800cece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ced2:	d807      	bhi.n	800cee4 <_printf_i+0x28>
 800ced4:	2f62      	cmp	r7, #98	; 0x62
 800ced6:	d80a      	bhi.n	800ceee <_printf_i+0x32>
 800ced8:	2f00      	cmp	r7, #0
 800ceda:	f000 80d8 	beq.w	800d08e <_printf_i+0x1d2>
 800cede:	2f58      	cmp	r7, #88	; 0x58
 800cee0:	f000 80a3 	beq.w	800d02a <_printf_i+0x16e>
 800cee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceec:	e03a      	b.n	800cf64 <_printf_i+0xa8>
 800ceee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cef2:	2b15      	cmp	r3, #21
 800cef4:	d8f6      	bhi.n	800cee4 <_printf_i+0x28>
 800cef6:	a101      	add	r1, pc, #4	; (adr r1, 800cefc <_printf_i+0x40>)
 800cef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cefc:	0800cf55 	.word	0x0800cf55
 800cf00:	0800cf69 	.word	0x0800cf69
 800cf04:	0800cee5 	.word	0x0800cee5
 800cf08:	0800cee5 	.word	0x0800cee5
 800cf0c:	0800cee5 	.word	0x0800cee5
 800cf10:	0800cee5 	.word	0x0800cee5
 800cf14:	0800cf69 	.word	0x0800cf69
 800cf18:	0800cee5 	.word	0x0800cee5
 800cf1c:	0800cee5 	.word	0x0800cee5
 800cf20:	0800cee5 	.word	0x0800cee5
 800cf24:	0800cee5 	.word	0x0800cee5
 800cf28:	0800d075 	.word	0x0800d075
 800cf2c:	0800cf99 	.word	0x0800cf99
 800cf30:	0800d057 	.word	0x0800d057
 800cf34:	0800cee5 	.word	0x0800cee5
 800cf38:	0800cee5 	.word	0x0800cee5
 800cf3c:	0800d097 	.word	0x0800d097
 800cf40:	0800cee5 	.word	0x0800cee5
 800cf44:	0800cf99 	.word	0x0800cf99
 800cf48:	0800cee5 	.word	0x0800cee5
 800cf4c:	0800cee5 	.word	0x0800cee5
 800cf50:	0800d05f 	.word	0x0800d05f
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	1d1a      	adds	r2, r3, #4
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	602a      	str	r2, [r5, #0]
 800cf5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf64:	2301      	movs	r3, #1
 800cf66:	e0a3      	b.n	800d0b0 <_printf_i+0x1f4>
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	6829      	ldr	r1, [r5, #0]
 800cf6c:	0606      	lsls	r6, r0, #24
 800cf6e:	f101 0304 	add.w	r3, r1, #4
 800cf72:	d50a      	bpl.n	800cf8a <_printf_i+0xce>
 800cf74:	680e      	ldr	r6, [r1, #0]
 800cf76:	602b      	str	r3, [r5, #0]
 800cf78:	2e00      	cmp	r6, #0
 800cf7a:	da03      	bge.n	800cf84 <_printf_i+0xc8>
 800cf7c:	232d      	movs	r3, #45	; 0x2d
 800cf7e:	4276      	negs	r6, r6
 800cf80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf84:	485e      	ldr	r0, [pc, #376]	; (800d100 <_printf_i+0x244>)
 800cf86:	230a      	movs	r3, #10
 800cf88:	e019      	b.n	800cfbe <_printf_i+0x102>
 800cf8a:	680e      	ldr	r6, [r1, #0]
 800cf8c:	602b      	str	r3, [r5, #0]
 800cf8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf92:	bf18      	it	ne
 800cf94:	b236      	sxthne	r6, r6
 800cf96:	e7ef      	b.n	800cf78 <_printf_i+0xbc>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	6820      	ldr	r0, [r4, #0]
 800cf9c:	1d19      	adds	r1, r3, #4
 800cf9e:	6029      	str	r1, [r5, #0]
 800cfa0:	0601      	lsls	r1, r0, #24
 800cfa2:	d501      	bpl.n	800cfa8 <_printf_i+0xec>
 800cfa4:	681e      	ldr	r6, [r3, #0]
 800cfa6:	e002      	b.n	800cfae <_printf_i+0xf2>
 800cfa8:	0646      	lsls	r6, r0, #25
 800cfaa:	d5fb      	bpl.n	800cfa4 <_printf_i+0xe8>
 800cfac:	881e      	ldrh	r6, [r3, #0]
 800cfae:	4854      	ldr	r0, [pc, #336]	; (800d100 <_printf_i+0x244>)
 800cfb0:	2f6f      	cmp	r7, #111	; 0x6f
 800cfb2:	bf0c      	ite	eq
 800cfb4:	2308      	moveq	r3, #8
 800cfb6:	230a      	movne	r3, #10
 800cfb8:	2100      	movs	r1, #0
 800cfba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfbe:	6865      	ldr	r5, [r4, #4]
 800cfc0:	60a5      	str	r5, [r4, #8]
 800cfc2:	2d00      	cmp	r5, #0
 800cfc4:	bfa2      	ittt	ge
 800cfc6:	6821      	ldrge	r1, [r4, #0]
 800cfc8:	f021 0104 	bicge.w	r1, r1, #4
 800cfcc:	6021      	strge	r1, [r4, #0]
 800cfce:	b90e      	cbnz	r6, 800cfd4 <_printf_i+0x118>
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	d04d      	beq.n	800d070 <_printf_i+0x1b4>
 800cfd4:	4615      	mov	r5, r2
 800cfd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfda:	fb03 6711 	mls	r7, r3, r1, r6
 800cfde:	5dc7      	ldrb	r7, [r0, r7]
 800cfe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfe4:	4637      	mov	r7, r6
 800cfe6:	42bb      	cmp	r3, r7
 800cfe8:	460e      	mov	r6, r1
 800cfea:	d9f4      	bls.n	800cfd6 <_printf_i+0x11a>
 800cfec:	2b08      	cmp	r3, #8
 800cfee:	d10b      	bne.n	800d008 <_printf_i+0x14c>
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	07de      	lsls	r6, r3, #31
 800cff4:	d508      	bpl.n	800d008 <_printf_i+0x14c>
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	6861      	ldr	r1, [r4, #4]
 800cffa:	4299      	cmp	r1, r3
 800cffc:	bfde      	ittt	le
 800cffe:	2330      	movle	r3, #48	; 0x30
 800d000:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d004:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d008:	1b52      	subs	r2, r2, r5
 800d00a:	6122      	str	r2, [r4, #16]
 800d00c:	f8cd a000 	str.w	sl, [sp]
 800d010:	464b      	mov	r3, r9
 800d012:	aa03      	add	r2, sp, #12
 800d014:	4621      	mov	r1, r4
 800d016:	4640      	mov	r0, r8
 800d018:	f7ff fee2 	bl	800cde0 <_printf_common>
 800d01c:	3001      	adds	r0, #1
 800d01e:	d14c      	bne.n	800d0ba <_printf_i+0x1fe>
 800d020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d024:	b004      	add	sp, #16
 800d026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02a:	4835      	ldr	r0, [pc, #212]	; (800d100 <_printf_i+0x244>)
 800d02c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d030:	6829      	ldr	r1, [r5, #0]
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	f851 6b04 	ldr.w	r6, [r1], #4
 800d038:	6029      	str	r1, [r5, #0]
 800d03a:	061d      	lsls	r5, r3, #24
 800d03c:	d514      	bpl.n	800d068 <_printf_i+0x1ac>
 800d03e:	07df      	lsls	r7, r3, #31
 800d040:	bf44      	itt	mi
 800d042:	f043 0320 	orrmi.w	r3, r3, #32
 800d046:	6023      	strmi	r3, [r4, #0]
 800d048:	b91e      	cbnz	r6, 800d052 <_printf_i+0x196>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	f023 0320 	bic.w	r3, r3, #32
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	2310      	movs	r3, #16
 800d054:	e7b0      	b.n	800cfb8 <_printf_i+0xfc>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	f043 0320 	orr.w	r3, r3, #32
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	2378      	movs	r3, #120	; 0x78
 800d060:	4828      	ldr	r0, [pc, #160]	; (800d104 <_printf_i+0x248>)
 800d062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d066:	e7e3      	b.n	800d030 <_printf_i+0x174>
 800d068:	0659      	lsls	r1, r3, #25
 800d06a:	bf48      	it	mi
 800d06c:	b2b6      	uxthmi	r6, r6
 800d06e:	e7e6      	b.n	800d03e <_printf_i+0x182>
 800d070:	4615      	mov	r5, r2
 800d072:	e7bb      	b.n	800cfec <_printf_i+0x130>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	6826      	ldr	r6, [r4, #0]
 800d078:	6961      	ldr	r1, [r4, #20]
 800d07a:	1d18      	adds	r0, r3, #4
 800d07c:	6028      	str	r0, [r5, #0]
 800d07e:	0635      	lsls	r5, r6, #24
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	d501      	bpl.n	800d088 <_printf_i+0x1cc>
 800d084:	6019      	str	r1, [r3, #0]
 800d086:	e002      	b.n	800d08e <_printf_i+0x1d2>
 800d088:	0670      	lsls	r0, r6, #25
 800d08a:	d5fb      	bpl.n	800d084 <_printf_i+0x1c8>
 800d08c:	8019      	strh	r1, [r3, #0]
 800d08e:	2300      	movs	r3, #0
 800d090:	6123      	str	r3, [r4, #16]
 800d092:	4615      	mov	r5, r2
 800d094:	e7ba      	b.n	800d00c <_printf_i+0x150>
 800d096:	682b      	ldr	r3, [r5, #0]
 800d098:	1d1a      	adds	r2, r3, #4
 800d09a:	602a      	str	r2, [r5, #0]
 800d09c:	681d      	ldr	r5, [r3, #0]
 800d09e:	6862      	ldr	r2, [r4, #4]
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7f3 f89c 	bl	80001e0 <memchr>
 800d0a8:	b108      	cbz	r0, 800d0ae <_printf_i+0x1f2>
 800d0aa:	1b40      	subs	r0, r0, r5
 800d0ac:	6060      	str	r0, [r4, #4]
 800d0ae:	6863      	ldr	r3, [r4, #4]
 800d0b0:	6123      	str	r3, [r4, #16]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b8:	e7a8      	b.n	800d00c <_printf_i+0x150>
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	47d0      	blx	sl
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d0ab      	beq.n	800d020 <_printf_i+0x164>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	079b      	lsls	r3, r3, #30
 800d0cc:	d413      	bmi.n	800d0f6 <_printf_i+0x23a>
 800d0ce:	68e0      	ldr	r0, [r4, #12]
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	4298      	cmp	r0, r3
 800d0d4:	bfb8      	it	lt
 800d0d6:	4618      	movlt	r0, r3
 800d0d8:	e7a4      	b.n	800d024 <_printf_i+0x168>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	4632      	mov	r2, r6
 800d0de:	4649      	mov	r1, r9
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	47d0      	blx	sl
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	d09b      	beq.n	800d020 <_printf_i+0x164>
 800d0e8:	3501      	adds	r5, #1
 800d0ea:	68e3      	ldr	r3, [r4, #12]
 800d0ec:	9903      	ldr	r1, [sp, #12]
 800d0ee:	1a5b      	subs	r3, r3, r1
 800d0f0:	42ab      	cmp	r3, r5
 800d0f2:	dcf2      	bgt.n	800d0da <_printf_i+0x21e>
 800d0f4:	e7eb      	b.n	800d0ce <_printf_i+0x212>
 800d0f6:	2500      	movs	r5, #0
 800d0f8:	f104 0619 	add.w	r6, r4, #25
 800d0fc:	e7f5      	b.n	800d0ea <_printf_i+0x22e>
 800d0fe:	bf00      	nop
 800d100:	0800fbd6 	.word	0x0800fbd6
 800d104:	0800fbe7 	.word	0x0800fbe7

0800d108 <memmove>:
 800d108:	4288      	cmp	r0, r1
 800d10a:	b510      	push	{r4, lr}
 800d10c:	eb01 0402 	add.w	r4, r1, r2
 800d110:	d902      	bls.n	800d118 <memmove+0x10>
 800d112:	4284      	cmp	r4, r0
 800d114:	4623      	mov	r3, r4
 800d116:	d807      	bhi.n	800d128 <memmove+0x20>
 800d118:	1e43      	subs	r3, r0, #1
 800d11a:	42a1      	cmp	r1, r4
 800d11c:	d008      	beq.n	800d130 <memmove+0x28>
 800d11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d122:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d126:	e7f8      	b.n	800d11a <memmove+0x12>
 800d128:	4402      	add	r2, r0
 800d12a:	4601      	mov	r1, r0
 800d12c:	428a      	cmp	r2, r1
 800d12e:	d100      	bne.n	800d132 <memmove+0x2a>
 800d130:	bd10      	pop	{r4, pc}
 800d132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d13a:	e7f7      	b.n	800d12c <memmove+0x24>

0800d13c <_realloc_r>:
 800d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d140:	4680      	mov	r8, r0
 800d142:	4614      	mov	r4, r2
 800d144:	460e      	mov	r6, r1
 800d146:	b921      	cbnz	r1, 800d152 <_realloc_r+0x16>
 800d148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d14c:	4611      	mov	r1, r2
 800d14e:	f7ff babd 	b.w	800c6cc <_malloc_r>
 800d152:	b92a      	cbnz	r2, 800d160 <_realloc_r+0x24>
 800d154:	f7ff fa4e 	bl	800c5f4 <_free_r>
 800d158:	4625      	mov	r5, r4
 800d15a:	4628      	mov	r0, r5
 800d15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d160:	f000 f81b 	bl	800d19a <_malloc_usable_size_r>
 800d164:	4284      	cmp	r4, r0
 800d166:	4607      	mov	r7, r0
 800d168:	d802      	bhi.n	800d170 <_realloc_r+0x34>
 800d16a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d16e:	d812      	bhi.n	800d196 <_realloc_r+0x5a>
 800d170:	4621      	mov	r1, r4
 800d172:	4640      	mov	r0, r8
 800d174:	f7ff faaa 	bl	800c6cc <_malloc_r>
 800d178:	4605      	mov	r5, r0
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0ed      	beq.n	800d15a <_realloc_r+0x1e>
 800d17e:	42bc      	cmp	r4, r7
 800d180:	4622      	mov	r2, r4
 800d182:	4631      	mov	r1, r6
 800d184:	bf28      	it	cs
 800d186:	463a      	movcs	r2, r7
 800d188:	f7ff fa08 	bl	800c59c <memcpy>
 800d18c:	4631      	mov	r1, r6
 800d18e:	4640      	mov	r0, r8
 800d190:	f7ff fa30 	bl	800c5f4 <_free_r>
 800d194:	e7e1      	b.n	800d15a <_realloc_r+0x1e>
 800d196:	4635      	mov	r5, r6
 800d198:	e7df      	b.n	800d15a <_realloc_r+0x1e>

0800d19a <_malloc_usable_size_r>:
 800d19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d19e:	1f18      	subs	r0, r3, #4
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bfbc      	itt	lt
 800d1a4:	580b      	ldrlt	r3, [r1, r0]
 800d1a6:	18c0      	addlt	r0, r0, r3
 800d1a8:	4770      	bx	lr
	...

0800d1ac <_init>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr

0800d1b8 <_fini>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	bf00      	nop
 800d1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1be:	bc08      	pop	{r3}
 800d1c0:	469e      	mov	lr, r3
 800d1c2:	4770      	bx	lr
