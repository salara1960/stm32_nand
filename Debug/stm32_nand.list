
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f8  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d20c  0800d20c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d20c  0800d20c  0001d20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d214  0800d214  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d214  0800d214  0001d214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d218  0800d218  0001d218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800d21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000058bc  200000b0  200000b0  000200b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000596c  2000596c  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022112  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004222  00000000  00000000  000421f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  00046418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d7c  00000000  00000000  00047ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea3f  00000000  00000000  0004dc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2d56  00000000  00000000  0006c6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f409  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001940  00000000  00000000  0014f460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a44  00000000  00000000  00150da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adfc 	.word	0x0800adfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800adfc 	.word	0x0800adfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f001 fe79 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f87b 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa1f 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9e7 	bl	8001040 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f96f 	bl	8000f54 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8dd 	bl	8000e34 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fabd 	bl	80011f8 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9b5 	bl	8000fec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f931 	bl	8000ee8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f001 fea5 	bl	80029dc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <main+0xd4>)
 8000c98:	f002 fd44 	bl	8003724 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4824      	ldr	r0, [pc, #144]	; (8000d34 <main+0xd8>)
 8000ca4:	f002 fd3e 	bl	8003724 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000ca8:	20c8      	movs	r0, #200	; 0xc8
 8000caa:	f001 fe97 	bl	80029dc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <main+0xd4>)
 8000cb4:	f002 fd36 	bl	8003724 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481d      	ldr	r0, [pc, #116]	; (8000d34 <main+0xd8>)
 8000cc0:	f002 fd30 	bl	8003724 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <main+0xdc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 fca3 	bl	8005620 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0xe0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4917      	ldr	r1, [pc, #92]	; (8000d40 <main+0xe4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 f91b 	bl	8005f1e <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <main+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fb59 	bl	80013a4 <set_Date>

  ST7789_Reset();
 8000cf2:	f001 f8bd 	bl	8001e70 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <main+0xec>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f8d2 	bl	8001ea4 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f006 fa72 	bl	80071e8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <main+0xf0>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f006 fb66 	bl	80073da <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <main+0xf4>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <main+0xf8>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <main+0xfc>)
 8000d1a:	f006 fab1 	bl	8007280 <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <main+0x100>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d24:	f006 fa86 	bl	8007234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LOOP_FOREVER();
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f001 fe57 	bl	80029dc <HAL_Delay>
 8000d2e:	e7fb      	b.n	8000d28 <main+0xcc>
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	2000001c 	.word	0x2000001c
 8000d3c:	20000020 	.word	0x20000020
 8000d40:	20000af0 	.word	0x20000af0
 8000d44:	20000014 	.word	0x20000014
 8000d48:	20000af6 	.word	0x20000af6
 8000d4c:	0800d03c 	.word	0x0800d03c
 8000d50:	200002d4 	.word	0x200002d4
 8000d54:	0800d018 	.word	0x0800d018
 8000d58:	080017e1 	.word	0x080017e1
 8000d5c:	200002d0 	.word	0x200002d0

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f009 fa7a 	bl	800a268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fdfc 	bl	80039e4 <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f000 feab 	bl	8001b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2105      	movs	r1, #5
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 f85d 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f000 fe94 	bl	8001b4c <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <MX_RTC_Init+0xb0>)
 8000e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e5a:	227f      	movs	r2, #127	; 0x7f
 8000e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e60:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e7a:	f003 fb5f 	bl	800453c <HAL_RTC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e84:	f000 fe62 	bl	8001b4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000ea4:	f003 fbdb 	bl	800465e <HAL_RTC_SetTime>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eae:	f000 fe4d 	bl	8001b4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000eca:	f003 fce3 	bl	8004894 <HAL_RTC_SetDate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ed4:	f000 fe3a 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000cc 	.word	0x200000cc
 8000ee4:	40002800 	.word	0x40002800

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f003 fe31 	bl	8004ba0 <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 fe02 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000ec 	.word	0x200000ec
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	22f9      	movs	r2, #249	; 0xf9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f004 faf1 	bl	8005580 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f000 fdd2 	bl	8001b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f004 fcab 	bl	8005910 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 fdc4 	bl	8001b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f004 fec7 	bl	8005d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 fdb6 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001a4 	.word	0x200001a4

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART3_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001024:	f004 ff2e 	bl	8005e84 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 fd8d 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001ec 	.word	0x200001ec
 800103c:	40004800 	.word	0x40004800

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_DMA_Init+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_DMA_Init+0x68>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_DMA_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x68>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	200e      	movs	r0, #14
 8001084:	f001 fd86 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f001 fd9f 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	203b      	movs	r0, #59	; 0x3b
 8001094:	f001 fd7e 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001098:	203b      	movs	r0, #59	; 0x3b
 800109a:	f001 fd97 	bl	8002bcc <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	210e      	movs	r1, #14
 800116e:	481f      	ldr	r0, [pc, #124]	; (80011ec <MX_GPIO_Init+0x140>)
 8001170:	f002 fad8 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	481d      	ldr	r0, [pc, #116]	; (80011f0 <MX_GPIO_Init+0x144>)
 800117c:	f002 fad2 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_GPIO_Init+0x148>)
 8001186:	f002 facd 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 800118a:	230e      	movs	r3, #14
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_GPIO_Init+0x140>)
 80011a2:	f002 f923 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x144>)
 80011c0:	f002 f914 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	2302      	movs	r3, #2
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_GPIO_Init+0x148>)
 80011dc:	f002 f906 	bl	80033ec <HAL_GPIO_Init>

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <MX_FSMC_Init+0xc0>)
 800121c:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001220:	2210      	movs	r2, #16
 8001222:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001226:	2202      	movs	r2, #2
 8001228:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_FSMC_Init+0xbc>)
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8001274:	23fc      	movs	r3, #252	; 0xfc
 8001276:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8001278:	23fc      	movs	r3, #252	; 0xfc
 800127a:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 800127c:	23fc      	movs	r3, #252	; 0xfc
 800127e:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8001280:	23fc      	movs	r3, #252	; 0xfc
 8001282:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8001284:	23fc      	movs	r3, #252	; 0xfc
 8001286:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8001288:	23fc      	movs	r3, #252	; 0xfc
 800128a:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 800128c:	23fc      	movs	r3, #252	; 0xfc
 800128e:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8001290:	23fc      	movs	r3, #252	; 0xfc
 8001292:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8001294:	463a      	mov	r2, r7
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_FSMC_Init+0xbc>)
 800129e:	f002 fa74 	bl	800378a <HAL_NAND_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80012a8:	f000 fc50 	bl	8001b4c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000290 	.word	0x20000290
 80012b8:	a0000060 	.word	0xa0000060

080012bc <errLedOn>:

/* USER CODE BEGIN 4 */
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if (on)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <errLedOn+0x34>)
 80012d4:	f002 fa26 	bl	8003724 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80012d8:	e005      	b.n	80012e6 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <errLedOn+0x34>)
 80012e2:	f002 fa1f 	bl	8003724 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020c00 	.word	0x40020c00

080012f4 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	return secCounter;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <get_secCounter+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200002e0 	.word	0x200002e0

0800130c <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	secCounter++;
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <inc_secCounter+0x18>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <inc_secCounter+0x18>)
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200002e0 	.word	0x200002e0

08001328 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	return msCounter;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <get_msCounter+0x18>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200002e8 	.word	0x200002e8

08001344 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	msCounter++;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <inc_msCounter+0x20>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	1c50      	adds	r0, r2, #1
 8001350:	f143 0100 	adc.w	r1, r3, #0
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <inc_msCounter+0x20>)
 8001356:	e9c3 0100 	strd	r0, r1, [r3]
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	200002e8 	.word	0x200002e8

08001368 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001370:	f7ff ffc0 	bl	80012f4 <get_secCounter>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800138a:	f7ff ffb3 	bl	80012f4 <get_secCounter>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4293      	cmp	r3, r2
 8001394:	bf94      	ite	ls
 8001396:	2301      	movls	r3, #1
 8001398:	2300      	movhi	r3, #0
 800139a:	b2db      	uxtb	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm ts;
	time_t ep = (time_t)usec;
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	2000      	movs	r0, #0
 80013b0:	460a      	mov	r2, r1
 80013b2:	4603      	mov	r3, r0
 80013b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	gmtime_r(&ep, &ts);
 80013b8:	f107 0214 	add.w	r2, r7, #20
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fe68 	bl	800a098 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	sDate.Month   = ts.tm_mon + 1;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Date    = ts.tm_mday;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Year    = ts.tm_year;
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80013ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	; (8001460 <set_Date+0xbc>)
 80013f6:	f003 fa4d 	bl	8004894 <HAL_RTC_SetDate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <set_Date+0x6a>
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <set_Date+0xc0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <set_Date+0xc0>)
 800140a:	6013      	str	r3, [r2, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 800140c:	e023      	b.n	8001456 <set_Date+0xb2>
		sTime.Hours   = ts.tm_hour + tZone;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <set_Date+0xc4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sTime.Minutes = ts.tm_min;
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		sTime.Seconds = ts.tm_sec;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800142e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <set_Date+0xbc>)
 8001438:	f003 f911 	bl	800465e <HAL_RTC_SetTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <set_Date+0xac>
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <set_Date+0xc0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <set_Date+0xc0>)
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	e002      	b.n	8001456 <set_Date+0xb2>
			setDate = true;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <set_Date+0xc8>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	3750      	adds	r7, #80	; 0x50
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000cc 	.word	0x200000cc
 8001464:	200002dc 	.word	0x200002dc
 8001468:	20000af5 	.word	0x20000af5
 800146c:	20000af4 	.word	0x20000af4

08001470 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b093      	sub	sp, #76	; 0x4c
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 800147c:	4b3f      	ldr	r3, [pc, #252]	; (800157c <sec2str+0x10c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d040      	beq.n	800150c <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800148a:	f7ff ff33 	bl	80012f4 <get_secCounter>
 800148e:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	4a3b      	ldr	r2, [pc, #236]	; (8001580 <sec2str+0x110>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c1b      	lsrs	r3, r3, #16
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 800149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <sec2str+0x110>)
 80014a0:	fba2 1203 	umull	r1, r2, r2, r3
 80014a4:	0c12      	lsrs	r2, r2, #16
 80014a6:	4937      	ldr	r1, [pc, #220]	; (8001584 <sec2str+0x114>)
 80014a8:	fb01 f202 	mul.w	r2, r1, r2
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80014b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b2:	4a35      	ldr	r2, [pc, #212]	; (8001588 <sec2str+0x118>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0adb      	lsrs	r3, r3, #11
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	4a32      	ldr	r2, [pc, #200]	; (8001588 <sec2str+0x118>)
 80014c0:	fba2 1203 	umull	r1, r2, r2, r3
 80014c4:	0ad2      	lsrs	r2, r2, #11
 80014c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80014ca:	fb01 f202 	mul.w	r2, r1, r2
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80014d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d4:	4a2d      	ldr	r2, [pc, #180]	; (800158c <sec2str+0x11c>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80014de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <sec2str+0x11c>)
 80014e2:	fba3 1302 	umull	r1, r3, r3, r2
 80014e6:	0959      	lsrs	r1, r3, #5
 80014e8:	460b      	mov	r3, r1
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a5b      	subs	r3, r3, r1
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001500:	4923      	ldr	r1, [pc, #140]	; (8001590 <sec2str+0x120>)
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f009 f828 	bl	800a558 <siprintf>
 8001508:	6378      	str	r0, [r7, #52]	; 0x34
 800150a:	e032      	b.n	8001572 <sec2str+0x102>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	481f      	ldr	r0, [pc, #124]	; (8001594 <sec2str+0x124>)
 8001516:	f003 fa64 	bl	80049e2 <HAL_RTC_GetDate>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <sec2str+0xbe>
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <sec2str+0x128>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <sec2str+0x128>)
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e021      	b.n	8001572 <sec2str+0x102>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <sec2str+0x124>)
 8001538:	f003 f94e 	bl	80047d8 <HAL_RTC_GetTime>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <sec2str+0xe0>
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <sec2str+0x128>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <sec2str+0x128>)
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e010      	b.n	8001572 <sec2str+0x102>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 8001550:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001552:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001554:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001556:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001558:	7c3b      	ldrb	r3, [r7, #16]
 800155a:	7c7a      	ldrb	r2, [r7, #17]
 800155c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800155e:	9102      	str	r1, [sp, #8]
 8001560:	9201      	str	r2, [sp, #4]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4623      	mov	r3, r4
 8001566:	4602      	mov	r2, r0
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <sec2str+0x12c>)
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f008 fff4 	bl	800a558 <siprintf>
 8001570:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001574:	4618      	mov	r0, r3
 8001576:	373c      	adds	r7, #60	; 0x3c
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000af4 	.word	0x20000af4
 8001580:	c22e4507 	.word	0xc22e4507
 8001584:	00015180 	.word	0x00015180
 8001588:	91a2b3c5 	.word	0x91a2b3c5
 800158c:	88888889 	.word	0x88888889
 8001590:	0800ae50 	.word	0x0800ae50
 8001594:	200000cc 	.word	0x200000cc
 8001598:	200002dc 	.word	0x200002dc
 800159c:	0800ae68 	.word	0x0800ae68

080015a0 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 80015a0:	b40e      	push	{r1, r2, r3}
 80015a2:	b590      	push	{r4, r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	613b      	str	r3, [r7, #16]
int dl = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <Report+0xbc>)
 80015b8:	60fb      	str	r3, [r7, #12]

	//if (buf) {
	    *buf = '\0';
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
		if (addTime) {
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <Report+0x4c>
			dl = sec2str(buf);
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff ff52 	bl	8001470 <sec2str>
 80015cc:	6178      	str	r0, [r7, #20]
			strcat(buf, "| ");
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7fe fdfe 	bl	80001d0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <Report+0xc0>)
 80015de:	8811      	ldrh	r1, [r2, #0]
 80015e0:	7892      	ldrb	r2, [r2, #2]
 80015e2:	8019      	strh	r1, [r3, #0]
 80015e4:	709a      	strb	r2, [r3, #2]
			dl += 2;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3302      	adds	r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
		}

		va_start(args, fmt);
 80015ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f0:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	18d0      	adds	r0, r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	1ad1      	subs	r1, r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	f009 f89f 	bl	800a744 <vsniprintf>

		uartRdy = false;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <Report+0xc4>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <Report+0xc8>)
 800160e:	681c      	ldr	r4, [r3, #0]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7fe fddd 	bl	80001d0 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	b29b      	uxth	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	68f9      	ldr	r1, [r7, #12]
 800161e:	4620      	mov	r0, r4
 8001620:	f004 fcae 	bl	8005f80 <HAL_UART_Transmit_DMA>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <Report+0x9e>
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <Report+0xcc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <Report+0xcc>)
 8001634:	6013      	str	r3, [r2, #0]
		while (!uartRdy) HAL_Delay(1);
 8001636:	e002      	b.n	800163e <Report+0x9e>
 8001638:	2001      	movs	r0, #1
 800163a:	f001 f9cf 	bl	80029dc <HAL_Delay>
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <Report+0xc4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f083 0301 	eor.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f5      	bne.n	8001638 <Report+0x98>
		va_end(args);

	//	free(buf);
	//}

	return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001658:	b003      	add	sp, #12
 800165a:	4770      	bx	lr
 800165c:	200002f0 	.word	0x200002f0
 8001660:	0800ae84 	.word	0x0800ae84
 8001664:	20000010 	.word	0x20000010
 8001668:	20000020 	.word	0x20000020
 800166c:	200002dc 	.word	0x200002dc

08001670 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_UART_RxCpltCallback+0xf0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d169      	bne.n	8001756 <HAL_UART_RxCpltCallback+0xe6>
		rxBuf[ruk++] = (char)rxByte;
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_UART_RxCpltCallback+0xf4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	b291      	uxth	r1, r2
 800168a:	4a36      	ldr	r2, [pc, #216]	; (8001764 <HAL_UART_RxCpltCallback+0xf4>)
 800168c:	8011      	strh	r1, [r2, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_UART_RxCpltCallback+0xf8>)
 8001692:	7819      	ldrb	r1, [r3, #0]
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_UART_RxCpltCallback+0xfc>)
 8001696:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_UART_RxCpltCallback+0xf8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0a      	cmp	r3, #10
 800169e:	d155      	bne.n	800174c <HAL_UART_RxCpltCallback+0xdc>
			char *uk = NULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
			if (strstr(rxBuf, s_restart)) {
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <HAL_UART_RxCpltCallback+0x100>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <HAL_UART_RxCpltCallback+0xfc>)
 80016ac:	f008 ff7c 	bl	800a5a8 <strstr>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_UART_RxCpltCallback+0x52>
				flags.restart = 1;
 80016b6:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <HAL_UART_RxCpltCallback+0x104>)
 80016b8:	7813      	ldrb	r3, [r2, #0]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	7013      	strb	r3, [r2, #0]
 80016c0:	e03b      	b.n	800173a <HAL_UART_RxCpltCallback+0xca>
			} else if ((uk = strstr(rxBuf, s_epoch))) {
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_UART_RxCpltCallback+0x108>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <HAL_UART_RxCpltCallback+0xfc>)
 80016ca:	f008 ff6d 	bl	800a5a8 <strstr>
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d031      	beq.n	800173a <HAL_UART_RxCpltCallback+0xca>
				uk += strlen(s_epoch);
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_UART_RxCpltCallback+0x108>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fd78 	bl	80001d0 <strlen>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
				if (*uk != '?') {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b3f      	cmp	r3, #63	; 0x3f
 80016ee:	d01c      	beq.n	800172a <HAL_UART_RxCpltCallback+0xba>
					if (strlen(uk) < 10) setDate = false;
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7fe fd6d 	bl	80001d0 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d803      	bhi.n	8001704 <HAL_UART_RxCpltCallback+0x94>
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <HAL_UART_RxCpltCallback+0x10c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e01a      	b.n	800173a <HAL_UART_RxCpltCallback+0xca>
					else {
						uint32_t ep = (uint32_t)atol(uk);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f008 fcb5 	bl	800a074 <atol>
 800170a:	4603      	mov	r3, r0
 800170c:	60bb      	str	r3, [r7, #8]
						if (ep > epoch) {
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_RxCpltCallback+0x110>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	429a      	cmp	r2, r3
 8001716:	d910      	bls.n	800173a <HAL_UART_RxCpltCallback+0xca>
							epoch = ep;
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_UART_RxCpltCallback+0x110>)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	6013      	str	r3, [r2, #0]
							flags.time_set = 1;
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_UART_RxCpltCallback+0x104>)
 8001720:	7813      	ldrb	r3, [r2, #0]
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	7013      	strb	r3, [r2, #0]
 8001728:	e007      	b.n	800173a <HAL_UART_RxCpltCallback+0xca>
						}
					}
				} else {
					setDate = true;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_UART_RxCpltCallback+0x10c>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
					flags.time_show = 1;
 8001730:	4a10      	ldr	r2, [pc, #64]	; (8001774 <HAL_UART_RxCpltCallback+0x104>)
 8001732:	7813      	ldrb	r3, [r2, #0]
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	7013      	strb	r3, [r2, #0]
				}
			}
			ruk = 0;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_UART_RxCpltCallback+0xf4>)
 800173c:	2200      	movs	r2, #0
 800173e:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8001740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001744:	2100      	movs	r1, #0
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <HAL_UART_RxCpltCallback+0xfc>)
 8001748:	f008 fd8e 	bl	800a268 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 800174c:	2201      	movs	r2, #1
 800174e:	4906      	ldr	r1, [pc, #24]	; (8001768 <HAL_UART_RxCpltCallback+0xf8>)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f004 fbe4 	bl	8005f1e <HAL_UART_Receive_IT>
	}
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40004800 	.word	0x40004800
 8001764:	20000af2 	.word	0x20000af2
 8001768:	20000af0 	.word	0x20000af0
 800176c:	200006f0 	.word	0x200006f0
 8001770:	20000008 	.word	0x20000008
 8001774:	200002d8 	.word	0x200002d8
 8001778:	2000000c 	.word	0x2000000c
 800177c:	20000af4 	.word	0x20000af4
 8001780:	20000014 	.word	0x20000014

08001784 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <HAL_UART_TxCpltCallback+0x24>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d102      	bne.n	800179c <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_UART_TxCpltCallback+0x28>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
	}
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40004800 	.word	0x40004800
 80017ac:	20000010 	.word	0x20000010

080017b0 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
/**/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_SPI_TxCpltCallback+0x24>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d102      	bne.n	80017c8 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_SPI_TxCpltCallback+0x28>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
	}
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40013000 	.word	0x40013000
 80017d8:	20000011 	.word	0x20000011
 80017dc:	00000000 	.word	0x00000000

080017e0 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	*(uint8_t *)&flags = 0;
 80017e8:	4ba3      	ldr	r3, [pc, #652]	; (8001a78 <defThread+0x298>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]

	char *stx = (char *)calloc(1, 128);
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	2001      	movs	r0, #1
 80017f2:	f008 fc43 	bl	800a07c <calloc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	60fb      	str	r3, [r7, #12]
	if (!stx) devError |= devMEM;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <defThread+0x2c>
 8001800:	4b9e      	ldr	r3, [pc, #632]	; (8001a7c <defThread+0x29c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	4a9c      	ldr	r2, [pc, #624]	; (8001a7c <defThread+0x29c>)
 800180a:	6013      	str	r3, [r2, #0]

	HAL_Delay(1000);
 800180c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001810:	f001 f8e4 	bl	80029dc <HAL_Delay>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001814:	4b9a      	ldr	r3, [pc, #616]	; (8001a80 <defThread+0x2a0>)
 8001816:	681c      	ldr	r4, [r3, #0]
 8001818:	f008 fafc 	bl	8009e14 <xPortGetFreeHeapSize>
 800181c:	4602      	mov	r2, r0
 800181e:	4b99      	ldr	r3, [pc, #612]	; (8001a84 <defThread+0x2a4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <defThread+0x2a8>)
 800182e:	4622      	mov	r2, r4
 8001830:	4996      	ldr	r1, [pc, #600]	; (8001a8c <defThread+0x2ac>)
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff feb4 	bl	80015a0 <Report>

	//fntKey = &Font_16x26;
	//tFont = &Font_11x18;
	//ipsOn(0);
	uint16_t err_color = BLACK;
 8001838:	2300      	movs	r3, #0
 800183a:	82fb      	strh	r3, [r7, #22]
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 800183c:	4b94      	ldr	r3, [pc, #592]	; (8001a90 <defThread+0x2b0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	22ef      	movs	r2, #239	; 0xef
 800184c:	2100      	movs	r1, #0
 800184e:	2000      	movs	r0, #0
 8001850:	f000 fc0d 	bl	800206e <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8001854:	4b8e      	ldr	r3, [pc, #568]	; (8001a90 <defThread+0x2b0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	b29b      	uxth	r3, r3
 800185c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001860:	b299      	uxth	r1, r3
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	23ef      	movs	r3, #239	; 0xef
 800186a:	22ef      	movs	r2, #239	; 0xef
 800186c:	2000      	movs	r0, #0
 800186e:	f000 fbfe 	bl	800206e <ST7789_Fill>

	strcpy(stx, "NAND : K9F1G08U0E");
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a87      	ldr	r2, [pc, #540]	; (8001a94 <defThread+0x2b4>)
 8001876:	461d      	mov	r5, r3
 8001878:	4614      	mov	r4, r2
 800187a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187c:	6028      	str	r0, [r5, #0]
 800187e:	6069      	str	r1, [r5, #4]
 8001880:	60aa      	str	r2, [r5, #8]
 8001882:	60eb      	str	r3, [r5, #12]
 8001884:	8823      	ldrh	r3, [r4, #0]
 8001886:	822b      	strh	r3, [r5, #16]
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8001888:	4b83      	ldr	r3, [pc, #524]	; (8001a98 <defThread+0x2b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe ff72 	bl	8000778 <__aeabi_i2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	4b7f      	ldr	r3, [pc, #508]	; (8001a98 <defThread+0x2b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	785b      	ldrb	r3, [r3, #1]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe ff6a 	bl	8000778 <__aeabi_i2d>
 80018a4:	a372      	add	r3, pc, #456	; (adr r3, 8001a70 <defThread+0x290>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fce9 	bl	8000280 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fe13 	bl	80004e0 <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7fe ffc3 	bl	800084c <__aeabi_d2uiz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29c      	uxth	r4, r3
					   mkLineCenter(stx, ST7789_WIDTH / tFont->width),
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <defThread+0x2b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	23f0      	movs	r3, #240	; 0xf0
 80018d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fcd3 	bl	8002288 <mkLineCenter>
	ST7789_WriteString(0,
 80018e2:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <defThread+0x2b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6d      	ldr	r2, [pc, #436]	; (8001a9c <defThread+0x2bc>)
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	43d2      	mvns	r2, r2
 80018ec:	b292      	uxth	r2, r2
 80018ee:	496b      	ldr	r1, [pc, #428]	; (8001a9c <defThread+0x2bc>)
 80018f0:	8809      	ldrh	r1, [r1, #0]
 80018f2:	9102      	str	r1, [sp, #8]
 80018f4:	9201      	str	r2, [sp, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	9200      	str	r2, [sp, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4602      	mov	r2, r0
 80018fe:	4621      	mov	r1, r4
 8001900:	2000      	movs	r0, #0
 8001902:	f000 fc6b 	bl	80021dc <ST7789_WriteString>
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f000 fa22 	bl	8001d50 <ipsOn>

	bool led = false;
 800190c:	2300      	movs	r3, #0
 800190e:	757b      	strb	r3, [r7, #21]
	uint32_t tmr = get_tmr(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff fd29 	bl	8001368 <get_tmr>
 8001916:	6138      	str	r0, [r7, #16]

  /* Infinite loop */

  while (1) {

	  if (check_tmr(tmr)) {
 8001918:	6938      	ldr	r0, [r7, #16]
 800191a:	f7ff fd32 	bl	8001382 <check_tmr>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d056      	beq.n	80019d2 <defThread+0x1f2>
		  tmr = get_tmr(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff fd1f 	bl	8001368 <get_tmr>
 800192a:	6138      	str	r0, [r7, #16]
		  //
		  sec2str(stx);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fd9f 	bl	8001470 <sec2str>
		  ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <defThread+0x2b0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	23f0      	movs	r3, #240	; 0xf0
 800193c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	4619      	mov	r1, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fc9f 	bl	8002288 <mkLineCenter>
 800194a:	4601      	mov	r1, r0
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <defThread+0x2b0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001954:	9202      	str	r2, [sp, #8]
 8001956:	221f      	movs	r2, #31
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	460a      	mov	r2, r1
 8001962:	2100      	movs	r1, #0
 8001964:	2008      	movs	r0, #8
 8001966:	f000 fc39 	bl	80021dc <ST7789_WriteString>

		  sprintf(stx, "Error: 0x%04X", (unsigned int)devError);
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <defThread+0x29c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	494b      	ldr	r1, [pc, #300]	; (8001aa0 <defThread+0x2c0>)
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f008 fdf0 	bl	800a558 <siprintf>
		  if (devError) err_color = RED; else err_color = BLACK;
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <defThread+0x29c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <defThread+0x1a8>
 8001980:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001984:	82fb      	strh	r3, [r7, #22]
 8001986:	e001      	b.n	800198c <defThread+0x1ac>
 8001988:	2300      	movs	r3, #0
 800198a:	82fb      	strh	r3, [r7, #22]
		  ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <defThread+0x2b0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	b29b      	uxth	r3, r3
 8001994:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001998:	b29c      	uxth	r4, r3
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <defThread+0x2b0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	23f0      	movs	r3, #240	; 0xf0
 80019a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fc6b 	bl	8002288 <mkLineCenter>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <defThread+0x2b0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019bc:	9202      	str	r2, [sp, #8]
 80019be:	8afa      	ldrh	r2, [r7, #22]
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	9200      	str	r2, [sp, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	460a      	mov	r2, r1
 80019ca:	4621      	mov	r1, r4
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 fc05 	bl	80021dc <ST7789_WriteString>
	  }

	  if (devError) led = true; else led = false;
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <defThread+0x29c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <defThread+0x200>
 80019da:	2301      	movs	r3, #1
 80019dc:	757b      	strb	r3, [r7, #21]
 80019de:	e001      	b.n	80019e4 <defThread+0x204>
 80019e0:	2300      	movs	r3, #0
 80019e2:	757b      	strb	r3, [r7, #21]
	  errLedOn(led);
 80019e4:	7d7b      	ldrb	r3, [r7, #21]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fc68 	bl	80012bc <errLedOn>

	  if (flags.restart) {
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <defThread+0x298>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <defThread+0x22e>
		  flags.restart = 0;
 80019fa:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <defThread+0x298>)
 80019fc:	7813      	ldrb	r3, [r2, #0]
 80019fe:	f36f 0300 	bfc	r3, #0, #1
 8001a02:	7013      	strb	r3, [r2, #0]
		  break;
 8001a04:	bf00      	nop
	  }

	  osDelay(250);
  }

  if (stx) free(stx);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d052      	beq.n	8001ab2 <defThread+0x2d2>
 8001a0c:	e04e      	b.n	8001aac <defThread+0x2cc>
	  } else if (flags.time_set) {
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <defThread+0x298>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <defThread+0x252>
		  flags.time_set = 0;
 8001a1c:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <defThread+0x298>)
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	f36f 0341 	bfc	r3, #1, #1
 8001a24:	7013      	strb	r3, [r2, #0]
		  set_Date(epoch);
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <defThread+0x2c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fcba 	bl	80013a4 <set_Date>
 8001a30:	e018      	b.n	8001a64 <defThread+0x284>
	  } else if (flags.time_show) {
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <defThread+0x298>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d011      	beq.n	8001a64 <defThread+0x284>
		  flags.time_show = 0;
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <defThread+0x298>)
 8001a42:	7813      	ldrb	r3, [r2, #0]
 8001a44:	f36f 0382 	bfc	r3, #2, #1
 8001a48:	7013      	strb	r3, [r2, #0]
		  if (stx) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <defThread+0x284>
			  sec2str(stx);
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f7ff fd0d 	bl	8001470 <sec2str>
			  Report(0, "Current date&time -> %s%s", stx, eol);
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <defThread+0x2a4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4912      	ldr	r1, [pc, #72]	; (8001aa8 <defThread+0x2c8>)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fd9e 	bl	80015a0 <Report>
	  osDelay(250);
 8001a64:	20fa      	movs	r0, #250	; 0xfa
 8001a66:	f005 fc9d 	bl	80073a4 <osDelay>
	  if (check_tmr(tmr)) {
 8001a6a:	e755      	b.n	8001918 <defThread+0x138>
 8001a6c:	f3af 8000 	nop.w
 8001a70:	33333333 	.word	0x33333333
 8001a74:	3feb3333 	.word	0x3feb3333
 8001a78:	200002d8 	.word	0x200002d8
 8001a7c:	200002dc 	.word	0x200002dc
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004
 8001a88:	0800d04c 	.word	0x0800d04c
 8001a8c:	0800ae88 	.word	0x0800ae88
 8001a90:	20000024 	.word	0x20000024
 8001a94:	0800aeb4 	.word	0x0800aeb4
 8001a98:	20000028 	.word	0x20000028
 8001a9c:	20000af6 	.word	0x20000af6
 8001aa0:	0800aec8 	.word	0x0800aec8
 8001aa4:	20000014 	.word	0x20000014
 8001aa8:	0800aed8 	.word	0x0800aed8
  if (stx) free(stx);
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f008 fbc5 	bl	800a23c <free>

  Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <defThread+0x304>)
 8001ab4:	681c      	ldr	r4, [r3, #0]
 8001ab6:	f008 f9ad 	bl	8009e14 <xPortGetFreeHeapSize>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <defThread+0x308>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9200      	str	r2, [sp, #0]
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <defThread+0x30c>)
 8001acc:	4622      	mov	r2, r4
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <defThread+0x310>)
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fd65 	bl	80015a0 <Report>
  osDelay(1000);
 8001ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ada:	f005 fc63 	bl	80073a4 <osDelay>

  NVIC_SystemReset();
 8001ade:	f7ff f8a7 	bl	8000c30 <__NVIC_SystemReset>
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	0800d04c 	.word	0x0800d04c
 8001af0:	0800aef4 	.word	0x0800aef4

08001af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d102      	bne.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001b06:	f000 ff49 	bl	800299c <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8001b0a:	e016      	b.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d111      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8001b16:	f7ff fc07 	bl	8001328 <get_msCounter>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	f002 0403 	and.w	r4, r2, #3
 8001b22:	2500      	movs	r5, #0
 8001b24:	1ee3      	subs	r3, r4, #3
 8001b26:	432b      	orrs	r3, r5
 8001b28:	d105      	bne.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8001b2a:	f7ff fbef 	bl	800130c <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b32:	f001 fe10 	bl	8003756 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8001b36:	f7ff fc05 	bl	8001344 <inc_msCounter>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bdb0      	pop	{r4, r5, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40020800 	.word	0x40020800

08001b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8001b66:	2200      	movs	r2, #0
 8001b68:	2104      	movs	r1, #4
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <ST7789_WriteCommand+0x3c>)
 8001b6c:	f001 fdda 	bl	8003724 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <ST7789_WriteCommand+0x40>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	2396      	movs	r3, #150	; 0x96
 8001b76:	1df9      	adds	r1, r7, #7
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f003 f89a 	bl	8004cb2 <HAL_SPI_Transmit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <ST7789_WriteCommand+0x34>
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <ST7789_WriteCommand+0x44>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f043 0305 	orr.w	r3, r3, #5
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <ST7789_WriteCommand+0x44>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	200002dc 	.word	0x200002dc

08001ba4 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <ST7789_WriteCommands+0x48>)
 8001bb4:	f001 fdb6 	bl	8003724 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <ST7789_WriteCommands+0x4c>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	2196      	movs	r1, #150	; 0x96
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f003 f871 	bl	8004cb2 <HAL_SPI_Transmit>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <ST7789_WriteCommands+0x3e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <ST7789_WriteCommands+0x50>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f043 0305 	orr.w	r3, r3, #5
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <ST7789_WriteCommands+0x50>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	20000018 	.word	0x20000018
 8001bf4:	200002dc 	.word	0x200002dc

08001bf8 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8001c06:	2201      	movs	r2, #1
 8001c08:	2104      	movs	r1, #4
 8001c0a:	481e      	ldr	r0, [pc, #120]	; (8001c84 <ST7789_WriteData+0x8c>)
 8001c0c:	f001 fd8a 	bl	8003724 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8001c10:	e028      	b.n	8001c64 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bf28      	it	cs
 8001c1c:	4613      	movcs	r3, r2
 8001c1e:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <ST7789_WriteData+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <ST7789_WriteData+0x94>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	89ba      	ldrh	r2, [r7, #12]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f97c 	bl	8004f2c <HAL_SPI_Transmit_DMA>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8001c3e:	e002      	b.n	8001c46 <ST7789_WriteData+0x4e>
 8001c40:	2001      	movs	r0, #1
 8001c42:	f000 fecb 	bl	80029dc <HAL_Delay>
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <ST7789_WriteData+0x90>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f5      	bne.n	8001c40 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8001c54:	89bb      	ldrh	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001c5c:	89bb      	ldrh	r3, [r7, #12]
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1d3      	bne.n	8001c12 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <ST7789_WriteData+0x84>
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <ST7789_WriteData+0x98>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f043 0305 	orr.w	r3, r3, #5
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <ST7789_WriteData+0x98>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000011 	.word	0x20000011
 8001c8c:	20000018 	.word	0x20000018
 8001c90:	200002dc 	.word	0x200002dc

08001c94 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <ST7789_WriteDataLine+0x64>)
 8001ca8:	f001 fd3c 	bl	8003724 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <ST7789_WriteDataLine+0x68>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <ST7789_WriteDataLine+0x6c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f935 	bl	8004f2c <HAL_SPI_Transmit_DMA>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8001cc6:	e002      	b.n	8001cce <ST7789_WriteDataLine+0x3a>
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f000 fe87 	bl	80029dc <HAL_Delay>
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <ST7789_WriteDataLine+0x68>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f5      	bne.n	8001cc8 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <ST7789_WriteDataLine+0x5a>
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <ST7789_WriteDataLine+0x70>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f043 0305 	orr.w	r3, r3, #5
 8001cea:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <ST7789_WriteDataLine+0x70>)
 8001cec:	6013      	str	r3, [r2, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	20000011 	.word	0x20000011
 8001d00:	20000018 	.word	0x20000018
 8001d04:	200002dc 	.word	0x200002dc

08001d08 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8001d12:	2201      	movs	r2, #1
 8001d14:	2104      	movs	r1, #4
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <ST7789_WriteSmallData+0x3c>)
 8001d18:	f001 fd04 	bl	8003724 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <ST7789_WriteSmallData+0x40>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	2396      	movs	r3, #150	; 0x96
 8001d22:	1df9      	adds	r1, r7, #7
 8001d24:	2201      	movs	r2, #1
 8001d26:	f002 ffc4 	bl	8004cb2 <HAL_SPI_Transmit>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <ST7789_WriteSmallData+0x34>
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <ST7789_WriteSmallData+0x44>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f043 0305 	orr.w	r3, r3, #5
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <ST7789_WriteSmallData+0x44>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40020000 	.word	0x40020000
 8001d48:	20000018 	.word	0x20000018
 8001d4c:	200002dc 	.word	0x200002dc

08001d50 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <ipsOn+0x18>
 8001d60:	2029      	movs	r0, #41	; 0x29
 8001d62:	f7ff fefb 	bl	8001b5c <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8001d66:	e002      	b.n	8001d6e <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8001d68:	2028      	movs	r0, #40	; 0x28
 8001d6a:	f7ff fef7 	bl	8001b5c <ST7789_WriteCommand>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001d82:	2036      	movs	r0, #54	; 0x36
 8001d84:	f7ff feea 	bl	8001b5c <ST7789_WriteCommand>
	switch (m) {
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d81a      	bhi.n	8001dc4 <ST7789_SetRotation+0x4c>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <ST7789_SetRotation+0x1c>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001dad 	.word	0x08001dad
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001dbd 	.word	0x08001dbd
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001da4:	20c0      	movs	r0, #192	; 0xc0
 8001da6:	f7ff ffaf 	bl	8001d08 <ST7789_WriteSmallData>
		break;
 8001daa:	e00c      	b.n	8001dc6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001dac:	20a0      	movs	r0, #160	; 0xa0
 8001dae:	f7ff ffab 	bl	8001d08 <ST7789_WriteSmallData>
		break;
 8001db2:	e008      	b.n	8001dc6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ffa7 	bl	8001d08 <ST7789_WriteSmallData>
		break;
 8001dba:	e004      	b.n	8001dc6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001dbc:	2060      	movs	r0, #96	; 0x60
 8001dbe:	f7ff ffa3 	bl	8001d08 <ST7789_WriteSmallData>
		break;
 8001dc2:	e000      	b.n	8001dc6 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001dc4:	bf00      	nop
	}
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop

08001dd0 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4623      	mov	r3, r4
 8001de0:	80fb      	strh	r3, [r7, #6]
 8001de2:	4603      	mov	r3, r0
 8001de4:	80bb      	strh	r3, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]
 8001dea:	4613      	mov	r3, r2
 8001dec:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	82fb      	strh	r3, [r7, #22]
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	827b      	strh	r3, [r7, #18]
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001dfe:	202a      	movs	r0, #42	; 0x2a
 8001e00:	f7ff feac 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001e04:	8afb      	ldrh	r3, [r7, #22]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	733b      	strb	r3, [r7, #12]
 8001e0e:	8afb      	ldrh	r3, [r7, #22]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	737b      	strb	r3, [r7, #13]
 8001e14:	8abb      	ldrh	r3, [r7, #20]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	73bb      	strb	r3, [r7, #14]
 8001e1e:	8abb      	ldrh	r3, [r7, #20]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fee4 	bl	8001bf8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001e30:	202b      	movs	r0, #43	; 0x2b
 8001e32:	f7ff fe93 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001e36:	8a7b      	ldrh	r3, [r7, #18]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	723b      	strb	r3, [r7, #8]
 8001e40:	8a7b      	ldrh	r3, [r7, #18]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	727b      	strb	r3, [r7, #9]
 8001e46:	8a3b      	ldrh	r3, [r7, #16]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	72bb      	strb	r3, [r7, #10]
 8001e50:	8a3b      	ldrh	r3, [r7, #16]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fecb 	bl	8001bf8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001e62:	202c      	movs	r0, #44	; 0x2c
 8001e64:	f7ff fe7a 	bl	8001b5c <ST7789_WriteCommand>
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8001e74:	2014      	movs	r0, #20
 8001e76:	f000 fdb1 	bl	80029dc <HAL_Delay>
    ST7789_RST_Clr();
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <ST7789_Reset+0x30>)
 8001e80:	f001 fc50 	bl	8003724 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8001e84:	200a      	movs	r0, #10
 8001e86:	f000 fda9 	bl	80029dc <HAL_Delay>
    ST7789_RST_Set();
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <ST7789_Reset+0x30>)
 8001e90:	f001 fc48 	bl	8003724 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8001e94:	2014      	movs	r0, #20
 8001e96:	f000 fda1 	bl	80029dc <HAL_Delay>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b08f      	sub	sp, #60	; 0x3c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001eae:	203a      	movs	r0, #58	; 0x3a
 8001eb0:	f7ff fe54 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8001eb4:	2055      	movs	r0, #85	; 0x55
 8001eb6:	f7ff ff27 	bl	8001d08 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001eba:	20b2      	movs	r0, #178	; 0xb2
 8001ebc:	f7ff fe4e 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <ST7789_Init+0x108>)
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eca:	6018      	str	r0, [r3, #0]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fe8e 	bl	8001bf8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001edc:	2002      	movs	r0, #2
 8001ede:	f7ff ff4b 	bl	8001d78 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8001ee2:	20b7      	movs	r0, #183	; 0xb7
 8001ee4:	f7ff fe3a 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001ee8:	2035      	movs	r0, #53	; 0x35
 8001eea:	f7ff ff0d 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001eee:	20bb      	movs	r0, #187	; 0xbb
 8001ef0:	f7ff fe34 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001ef4:	2019      	movs	r0, #25
 8001ef6:	f7ff ff07 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001efa:	20c0      	movs	r0, #192	; 0xc0
 8001efc:	f7ff fe2e 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8001f00:	202c      	movs	r0, #44	; 0x2c
 8001f02:	f7ff ff01 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8001f06:	20c2      	movs	r0, #194	; 0xc2
 8001f08:	f7ff fe28 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fefb 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8001f12:	20ff      	movs	r0, #255	; 0xff
 8001f14:	f7ff fef8 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8001f18:	20c3      	movs	r0, #195	; 0xc3
 8001f1a:	f7ff fe1f 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001f1e:	2012      	movs	r0, #18
 8001f20:	f7ff fef2 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8001f24:	20c4      	movs	r0, #196	; 0xc4
 8001f26:	f7ff fe19 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8001f2a:	2020      	movs	r0, #32
 8001f2c:	f7ff feec 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8001f30:	20c6      	movs	r0, #198	; 0xc6
 8001f32:	f7ff fe13 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8001f36:	200f      	movs	r0, #15
 8001f38:	f7ff fee6 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8001f3c:	20d0      	movs	r0, #208	; 0xd0
 8001f3e:	f7ff fe0d 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8001f42:	20a4      	movs	r0, #164	; 0xa4
 8001f44:	f7ff fee0 	bl	8001d08 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8001f48:	20a1      	movs	r0, #161	; 0xa1
 8001f4a:	f7ff fedd 	bl	8001d08 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001f4e:	20e0      	movs	r0, #224	; 0xe0
 8001f50:	f7ff fe04 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <ST7789_Init+0x10c>)
 8001f56:	f107 041c 	add.w	r4, r7, #28
 8001f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f5e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	210e      	movs	r1, #14
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fe46 	bl	8001bf8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001f6c:	20e1      	movs	r0, #225	; 0xe1
 8001f6e:	f7ff fdf5 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <ST7789_Init+0x110>)
 8001f74:	f107 040c 	add.w	r4, r7, #12
 8001f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f7a:	c407      	stmia	r4!, {r0, r1, r2}
 8001f7c:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	210e      	movs	r1, #14
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fe37 	bl	8001bf8 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <ST7789_Init+0x114>)
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8001f8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f92:	2104      	movs	r1, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fe05 	bl	8001ba4 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f80d 	bl	8001fbc <ST7789_Fill_Color>
}
 8001fa2:	bf00      	nop
 8001fa4:	373c      	adds	r7, #60	; 0x3c
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	0800af20 	.word	0x0800af20
 8001fb0:	0800af28 	.word	0x0800af28
 8001fb4:	0800af38 	.word	0x0800af38
 8001fb8:	28131121 	.word	0x28131121

08001fbc <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0fc      	sub	sp, #496	; 0x1f0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001fc8:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8001fcc:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001fce:	23ef      	movs	r3, #239	; 0xef
 8001fd0:	22ef      	movs	r2, #239	; 0xef
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fefb 	bl	8001dd0 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8001fe6:	e024      	b.n	8002032 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8001fe8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001fec:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001ffc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21b      	sxth	r3, r3
 8002006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b219      	sxth	r1, r3
 8002010:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002014:	f107 020c 	add.w	r2, r7, #12
 8002018:	4413      	add	r3, r2
 800201a:	b28a      	uxth	r2, r1
 800201c:	801a      	strh	r2, [r3, #0]
		i += 2;
 800201e:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002022:	3302      	adds	r3, #2
 8002024:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002028:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800202c:	3301      	adds	r3, #1
 800202e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002032:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002036:	2bef      	cmp	r3, #239	; 0xef
 8002038:	d9d6      	bls.n	8001fe8 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800203a:	2300      	movs	r3, #0
 800203c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002040:	e00b      	b.n	800205a <ST7789_Fill_Color+0x9e>
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe22 	bl	8001c94 <ST7789_WriteDataLine>
 8002050:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002054:	3301      	adds	r3, #1
 8002056:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800205a:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800205e:	2bef      	cmp	r3, #239	; 0xef
 8002060:	d9ef      	bls.n	8002042 <ST7789_Fill_Color+0x86>

//#endif
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800206e:	b590      	push	{r4, r7, lr}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	4604      	mov	r4, r0
 8002076:	4608      	mov	r0, r1
 8002078:	4611      	mov	r1, r2
 800207a:	461a      	mov	r2, r3
 800207c:	4623      	mov	r3, r4
 800207e:	80fb      	strh	r3, [r7, #6]
 8002080:	4603      	mov	r3, r0
 8002082:	80bb      	strh	r3, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	2bef      	cmp	r3, #239	; 0xef
 8002090:	d82b      	bhi.n	80020ea <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002092:	883b      	ldrh	r3, [r7, #0]
 8002094:	2bef      	cmp	r3, #239	; 0xef
 8002096:	d828      	bhi.n	80020ea <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002098:	8c3b      	ldrh	r3, [r7, #32]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	723b      	strb	r3, [r7, #8]
 80020a2:	8c3b      	ldrh	r3, [r7, #32]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80020a8:	883b      	ldrh	r3, [r7, #0]
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	88b9      	ldrh	r1, [r7, #4]
 80020ae:	88f8      	ldrh	r0, [r7, #6]
 80020b0:	f7ff fe8e 	bl	8001dd0 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80020b4:	88bb      	ldrh	r3, [r7, #4]
 80020b6:	81fb      	strh	r3, [r7, #14]
 80020b8:	e012      	b.n	80020e0 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	81bb      	strh	r3, [r7, #12]
 80020be:	e008      	b.n	80020d2 <ST7789_Fill+0x64>
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd96 	bl	8001bf8 <ST7789_WriteData>
 80020cc:	89bb      	ldrh	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	81bb      	strh	r3, [r7, #12]
 80020d2:	89ba      	ldrh	r2, [r7, #12]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d9f2      	bls.n	80020c0 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	3301      	adds	r3, #1
 80020de:	81fb      	strh	r3, [r7, #14]
 80020e0:	89fa      	ldrh	r2, [r7, #14]
 80020e2:	883b      	ldrh	r3, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d9e8      	bls.n	80020ba <ST7789_Fill+0x4c>
 80020e8:	e000      	b.n	80020ec <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80020ea:	bf00      	nop
	}
}
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}

080020f2 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80020f2:	b082      	sub	sp, #8
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	4603      	mov	r3, r0
 80020fe:	80fb      	strh	r3, [r7, #6]
 8002100:	460b      	mov	r3, r1
 8002102:	80bb      	strh	r3, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002108:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800210c:	b29a      	uxth	r2, r3
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4413      	add	r3, r2
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29c      	uxth	r4, r3
 8002118:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800211c:	b29a      	uxth	r2, r3
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29b      	uxth	r3, r3
 8002128:	88b9      	ldrh	r1, [r7, #4]
 800212a:	88f8      	ldrh	r0, [r7, #6]
 800212c:	4622      	mov	r2, r4
 800212e:	f7ff fe4f 	bl	8001dd0 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8002132:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	b29b      	uxth	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	733b      	strb	r3, [r7, #12]
 800213c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800213e:	b2db      	uxtb	r3, r3
 8002140:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002142:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b29b      	uxth	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	723b      	strb	r3, [r7, #8]
 800214e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002152:	b2db      	uxtb	r3, r3
 8002154:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e02f      	b.n	80021c0 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8002160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	3b20      	subs	r3, #32
 8002166:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4619      	mov	r1, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	440b      	add	r3, r1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e015      	b.n	80021ae <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <ST7789_WriteChar+0xa8>
				uk = cdata;
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e002      	b.n	80021a0 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80021a0:	2102      	movs	r1, #2
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff fd28 	bl	8001bf8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021b2:	461a      	mov	r2, r3
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d3e3      	bcc.n	8002182 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021c4:	461a      	mov	r2, r3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d3c9      	bcc.n	8002160 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021d8:	b002      	add	sp, #8
 80021da:	4770      	bx	lr

080021dc <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80021dc:	b082      	sub	sp, #8
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af04      	add	r7, sp, #16
 80021e4:	603a      	str	r2, [r7, #0]
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	4603      	mov	r3, r0
 80021ea:	80fb      	strh	r3, [r7, #6]
 80021ec:	460b      	mov	r3, r1
 80021ee:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03f      	beq.n	8002276 <ST7789_WriteString+0x9a>

	while (*str) {
 80021f6:	e039      	b.n	800226c <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	7d3a      	ldrb	r2, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	2bef      	cmp	r3, #239	; 0xef
 8002200:	dd13      	ble.n	800222a <ST7789_WriteString+0x4e>
			x = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002206:	7d7b      	ldrb	r3, [r7, #21]
 8002208:	b29a      	uxth	r2, r3
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8002210:	88bb      	ldrh	r3, [r7, #4]
 8002212:	7d7a      	ldrb	r2, [r7, #21]
 8002214:	4413      	add	r3, r2
 8002216:	2bef      	cmp	r3, #239	; 0xef
 8002218:	dc2f      	bgt.n	800227a <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b20      	cmp	r3, #32
 8002220:	d103      	bne.n	800222a <ST7789_WriteString+0x4e>
				str++;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	603b      	str	r3, [r7, #0]
				continue;
 8002228:	e020      	b.n	800226c <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d012      	beq.n	8002258 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	88b9      	ldrh	r1, [r7, #4]
 8002238:	88f8      	ldrh	r0, [r7, #6]
 800223a:	8c3b      	ldrh	r3, [r7, #32]
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	8bbb      	ldrh	r3, [r7, #28]
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f7ff ff53 	bl	80020f2 <ST7789_WriteChar>
			x += font.width;
 800224c:	7d3b      	ldrb	r3, [r7, #20]
 800224e:	b29a      	uxth	r2, r3
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	4413      	add	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
 8002256:	e006      	b.n	8002266 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800225c:	7d7b      	ldrb	r3, [r7, #21]
 800225e:	b29a      	uxth	r2, r3
 8002260:	88bb      	ldrh	r3, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1c1      	bne.n	80021f8 <ST7789_WriteString+0x1c>
 8002274:	e002      	b.n	800227c <ST7789_WriteString+0xa0>
	if (!str) return;
 8002276:	bf00      	nop
 8002278:	e000      	b.n	800227c <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 800227a:	bf00      	nop
	}
}
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002284:	b002      	add	sp, #8
 8002286:	4770      	bx	lr

08002288 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0a4      	sub	sp, #144	; 0x90
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	227c      	movs	r2, #124	; 0x7c
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f007 ffe1 	bl	800a268 <memset>

	memset(st, 0x20, 127);
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	227f      	movs	r2, #127	; 0x7f
 80022ac:	2120      	movs	r1, #32
 80022ae:	4618      	mov	r0, r3
 80022b0:	f007 ffda 	bl	800a268 <memset>
	int8_t k = strlen(str);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fd ff8b 	bl	80001d0 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80022c0:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	da25      	bge.n	8002316 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	0fda      	lsrs	r2, r3, #31
 80022d4:	4413      	add	r3, r2
 80022d6:	105b      	asrs	r3, r3, #1
 80022d8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 80022dc:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80022e0:	f107 020c 	add.w	r2, r7, #12
 80022e4:	4413      	add	r3, r2
 80022e6:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f007 ffad 	bl	800a24c <memcpy>
		st[k + n*2 + 1] = '\0';
 80022f2:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80022f6:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	3301      	adds	r3, #1
 8002300:	3390      	adds	r3, #144	; 0x90
 8002302:	443b      	add	r3, r7
 8002304:	2200      	movs	r2, #0
 8002306:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f008 f941 	bl	800a598 <strcpy>
	}

	return str;
 8002316:	687b      	ldr	r3, [r7, #4]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3790      	adds	r7, #144	; 0x90
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_MspInit+0x54>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_MspInit+0x54>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_MspInit+0x54>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_MspInit+0x54>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_MspInit+0x54>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_MspInit+0x54>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	210f      	movs	r1, #15
 8002362:	f06f 0001 	mvn.w	r0, #1
 8002366:	f000 fc15 	bl	8002b94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_RTC_MspInit+0x4c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d110      	bne.n	80023ba <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002398:	2302      	movs	r3, #2
 800239a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RTC_MspInit+0x50>)
 800239e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 ffe7 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80023b0:	f7ff fbcc 	bl	8001b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RTC_MspInit+0x54>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40002800 	.word	0x40002800
 80023c8:	00190300 	.word	0x00190300
 80023cc:	42470e3c 	.word	0x42470e3c

080023d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a39      	ldr	r2, [pc, #228]	; (80024d4 <HAL_SPI_MspInit+0x104>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d16b      	bne.n	80024ca <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_SPI_MspInit+0x108>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <HAL_SPI_MspInit+0x108>)
 80023fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <HAL_SPI_MspInit+0x108>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_SPI_MspInit+0x108>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a30      	ldr	r2, [pc, #192]	; (80024d8 <HAL_SPI_MspInit+0x108>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_SPI_MspInit+0x108>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800242a:	23a0      	movs	r3, #160	; 0xa0
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800243a:	2305      	movs	r3, #5
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	4825      	ldr	r0, [pc, #148]	; (80024dc <HAL_SPI_MspInit+0x10c>)
 8002446:	f000 ffd1 	bl	80033ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_SPI_MspInit+0x114>)
 800244e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002452:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002456:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002480:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002484:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002488:	2204      	movs	r2, #4
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 800248e:	2203      	movs	r2, #3
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 8002494:	2200      	movs	r2, #0
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800249e:	4810      	ldr	r0, [pc, #64]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 80024a0:	f000 fba2 	bl	8002be8 <HAL_DMA_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80024aa:	f7ff fb4f 	bl	8001b4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 80024b2:	649a      	str	r2, [r3, #72]	; 0x48
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_SPI_MspInit+0x110>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2105      	movs	r1, #5
 80024be:	2023      	movs	r0, #35	; 0x23
 80024c0:	f000 fb68 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024c4:	2023      	movs	r0, #35	; 0x23
 80024c6:	f000 fb81 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	; 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40013000 	.word	0x40013000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	20000144 	.word	0x20000144
 80024e4:	40026458 	.word	0x40026458

080024e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d115      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_TIM_Base_MspInit+0x48>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <HAL_TIM_Base_MspInit+0x48>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_TIM_Base_MspInit+0x48>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2101      	movs	r1, #1
 800251a:	201c      	movs	r0, #28
 800251c:	f000 fb3a 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002520:	201c      	movs	r0, #28
 8002522:	f000 fb53 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a35      	ldr	r2, [pc, #212]	; (8002628 <HAL_UART_MspInit+0xf4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d163      	bne.n	800261e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_UART_MspInit+0xf8>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a33      	ldr	r2, [pc, #204]	; (800262c <HAL_UART_MspInit+0xf8>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_UART_MspInit+0xf8>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_UART_MspInit+0xf8>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a2c      	ldr	r2, [pc, #176]	; (800262c <HAL_UART_MspInit+0xf8>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_UART_MspInit+0xf8>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800258e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a0:	2307      	movs	r3, #7
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4821      	ldr	r0, [pc, #132]	; (8002630 <HAL_UART_MspInit+0xfc>)
 80025ac:	f000 ff1e 	bl	80033ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025b2:	4a21      	ldr	r2, [pc, #132]	; (8002638 <HAL_UART_MspInit+0x104>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025f2:	4810      	ldr	r0, [pc, #64]	; (8002634 <HAL_UART_MspInit+0x100>)
 80025f4:	f000 faf8 	bl	8002be8 <HAL_DMA_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025fe:	f7ff faa5 	bl	8001b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_UART_MspInit+0x100>)
 8002606:	635a      	str	r2, [r3, #52]	; 0x34
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_UART_MspInit+0x100>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2105      	movs	r1, #5
 8002612:	2027      	movs	r0, #39	; 0x27
 8002614:	f000 fabe 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002618:	2027      	movs	r0, #39	; 0x27
 800261a:	f000 fad7 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40004800 	.word	0x40004800
 800262c:	40023800 	.word	0x40023800
 8002630:	40020400 	.word	0x40020400
 8002634:	20000230 	.word	0x20000230
 8002638:	40026058 	.word	0x40026058

0800263c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_FSMC_MspInit+0x98>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d139      	bne.n	80026cc <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_FSMC_MspInit+0x98>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_FSMC_MspInit+0x9c>)
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_FSMC_MspInit+0x9c>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6393      	str	r3, [r2, #56]	; 0x38
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_FSMC_MspInit+0x9c>)
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800267a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800267e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800268c:	230c      	movs	r3, #12
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <HAL_FSMC_MspInit+0xa0>)
 8002696:	f000 fea9 	bl	80033ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 800269a:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800269e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026ac:	230c      	movs	r3, #12
 80026ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	480a      	ldr	r0, [pc, #40]	; (80026e0 <HAL_FSMC_MspInit+0xa4>)
 80026b6:	f000 fe99 	bl	80033ec <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2105      	movs	r1, #5
 80026be:	2030      	movs	r0, #48	; 0x30
 80026c0:	f000 fa68 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80026c4:	2030      	movs	r0, #48	; 0x30
 80026c6:	f000 fa81 	bl	8002bcc <HAL_NVIC_EnableIRQ>
 80026ca:	e000      	b.n	80026ce <HAL_FSMC_MspInit+0x92>
    return;
 80026cc:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000af8 	.word	0x20000af8
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40020c00 	.word	0x40020c00

080026e4 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80026ec:	f7ff ffa6 	bl	800263c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002708:	2200      	movs	r2, #0
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	2019      	movs	r0, #25
 800270e:	f000 fa41 	bl	8002b94 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002712:	2019      	movs	r0, #25
 8002714:	f000 fa5a 	bl	8002bcc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_InitTick+0xa4>)
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_InitTick+0xa4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6453      	str	r3, [r2, #68]	; 0x44
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_InitTick+0xa4>)
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002734:	f107 0210 	add.w	r2, r7, #16
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f001 fde8 	bl	8004314 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002744:	f001 fdd2 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8002748:	4603      	mov	r3, r0
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <HAL_InitTick+0xa8>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	3b01      	subs	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_InitTick+0xac>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_InitTick+0xb0>)
 8002760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_InitTick+0xac>)
 8002764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002768:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_InitTick+0xac>)
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_InitTick+0xac>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_InitTick+0xac>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800277c:	4809      	ldr	r0, [pc, #36]	; (80027a4 <HAL_InitTick+0xac>)
 800277e:	f002 feff 	bl	8005580 <HAL_TIM_Base_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002788:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HAL_InitTick+0xac>)
 800278a:	f002 ff49 	bl	8005620 <HAL_TIM_Base_Start_IT>
 800278e:	4603      	mov	r3, r0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3730      	adds	r7, #48	; 0x30
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	20000afc 	.word	0x20000afc
 80027a8:	40010000 	.word	0x40010000

080027ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <DMA1_Stream3_IRQHandler+0x10>)
 80027e6:	f000 fb97 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000230 	.word	0x20000230

080027f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027fa:	f002 ff81 	bl	8005700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000afc 	.word	0x20000afc

08002808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM2_IRQHandler+0x10>)
 800280e:	f002 ff77 	bl	8005700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200001a4 	.word	0x200001a4

0800281c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <SPI1_IRQHandler+0x10>)
 8002822:	f002 fc39 	bl	8005098 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200000ec 	.word	0x200000ec

08002830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <USART3_IRQHandler+0x10>)
 8002836:	f003 fc21 	bl	800607c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200001ec 	.word	0x200001ec

08002844 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <FSMC_IRQHandler+0x10>)
 800284a:	f000 ffec 	bl	8003826 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000290 	.word	0x20000290

08002858 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <DMA2_Stream3_IRQHandler+0x10>)
 800285e:	f000 fb5b 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000144 	.word	0x20000144

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f007 fbf6 	bl	800a08c <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <_sbrk+0x64>)
 80028bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20020000 	.word	0x20020000
 80028cc:	00000800 	.word	0x00000800
 80028d0:	20000b44 	.word	0x20000b44
 80028d4:	20005970 	.word	0x20005970

080028d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <SystemInit+0x28>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <SystemInit+0x28>)
 80028e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SystemInit+0x28>)
 80028ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f2:	609a      	str	r2, [r3, #8]
#endif
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002908:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800290a:	e003      	b.n	8002914 <LoopCopyDataInit>

0800290c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800290e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002910:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002912:	3104      	adds	r1, #4

08002914 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002918:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800291a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800291c:	d3f6      	bcc.n	800290c <CopyDataInit>
  ldr  r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002920:	e002      	b.n	8002928 <LoopFillZerobss>

08002922 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002922:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002924:	f842 3b04 	str.w	r3, [r2], #4

08002928 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800292a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800292c:	d3f9      	bcc.n	8002922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800292e:	f7ff ffd3 	bl	80028d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f007 fc5d 	bl	800a1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002936:	f7fe f991 	bl	8000c5c <main>
  bx  lr    
 800293a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800293c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002940:	0800d21c 	.word	0x0800d21c
  ldr  r0, =_sdata
 8002944:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002948:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 800294c:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002950:	2000596c 	.word	0x2000596c

08002954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_Init+0x40>)
 8002962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_Init+0x40>)
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_Init+0x40>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f000 f8fc 	bl	8002b7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002986:	200f      	movs	r0, #15
 8002988:	f7ff feb6 	bl	80026f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298c:	f7ff fcc8 	bl	8002320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00

0800299c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x20>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x24>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_IncTick+0x24>)
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000034 	.word	0x20000034
 80029c0:	20000b48 	.word	0x20000b48

080029c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTick;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_GetTick+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000b48 	.word	0x20000b48

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff ffee 	bl	80029c4 <HAL_GetTick>
 80029e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f4:	d005      	beq.n	8002a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_Delay+0x44>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a02:	bf00      	nop
 8002a04:	f7ff ffde 	bl	80029c4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d8f7      	bhi.n	8002a04 <HAL_Delay+0x28>
  {
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000034 	.word	0x20000034

08002a24 <__NVIC_SetPriorityGrouping>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	; (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	; (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ff4c 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba6:	f7ff ff61 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002baa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f7ff ffb1 	bl	8002b18 <NVIC_EncodePriority>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff80 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002bc4:	bf00      	nop
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff54 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff fee6 	bl	80029c4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e099      	b.n	8002d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c24:	e00f      	b.n	8002c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c26:	f7ff fecd 	bl	80029c4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d908      	bls.n	8002c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e078      	b.n	8002d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e8      	bne.n	8002c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_DMA_Init+0x158>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d107      	bne.n	8002cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d117      	bne.n	8002d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fb01 	bl	80032f4 <DMA_CheckFifoParam>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d06:	2301      	movs	r3, #1
 8002d08:	e016      	b.n	8002d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fab8 	bl	8003288 <DMA_CalcBaseAndBitshift>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	223f      	movs	r2, #63	; 0x3f
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	f010803f 	.word	0xf010803f

08002d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_DMA_Start_IT+0x26>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e040      	b.n	8002dec <HAL_DMA_Start_IT+0xa8>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d12f      	bne.n	8002dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa4a 	bl	800322c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	223f      	movs	r2, #63	; 0x3f
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0216 	orr.w	r2, r2, #22
 8002db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e005      	b.n	8002dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e02:	f7ff fddf 	bl	80029c4 <HAL_GetTick>
 8002e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d008      	beq.n	8002e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e052      	b.n	8002ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0216 	bic.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_DMA_Abort+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0208 	bic.w	r2, r2, #8
 8002e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	e013      	b.n	8002ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e78:	f7ff fda4 	bl	80029c4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d90c      	bls.n	8002ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e015      	b.n	8002ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e4      	bne.n	8002e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	223f      	movs	r2, #63	; 0x3f
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00c      	b.n	8002f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f24:	4b8e      	ldr	r3, [pc, #568]	; (8003160 <HAL_DMA_IRQHandler+0x248>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <HAL_DMA_IRQHandler+0x24c>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2208      	movs	r2, #8
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	2208      	movs	r2, #8
 8002f72:	409a      	lsls	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f043 0202 	orr.w	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2204      	movs	r2, #4
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d043      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03c      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2210      	movs	r2, #16
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d018      	beq.n	800305a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d024      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
 8003046:	e01f      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e016      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0208 	bic.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2220      	movs	r2, #32
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 808f 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8087 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	2220      	movs	r2, #32
 80030b0:	409a      	lsls	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d136      	bne.n	8003130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_IRQHandler+0x1da>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	223f      	movs	r2, #63	; 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003122:	2b00      	cmp	r3, #0
 8003124:	d07e      	beq.n	8003224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
        }
        return;
 800312e:	e079      	b.n	8003224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01d      	beq.n	800317a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	2b00      	cmp	r3, #0
 8003152:	d031      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
 800315c:	e02c      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
 800315e:	bf00      	nop
 8003160:	2000002c 	.word	0x2000002c
 8003164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d023      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e01e      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0210 	bic.w	r2, r2, #16
 8003196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d032      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2205      	movs	r2, #5
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d307      	bcc.n	8003200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f2      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x2cc>
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
 8003222:	e000      	b.n	8003226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003224:	bf00      	nop
    }
  }
}
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d108      	bne.n	800326c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800326a:	e007      	b.n	800327c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3b10      	subs	r3, #16
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <DMA_CalcBaseAndBitshift+0x64>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DMA_CalcBaseAndBitshift+0x68>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d909      	bls.n	80032ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	1d1a      	adds	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58
 80032c8:	e007      	b.n	80032da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	aaaaaaab 	.word	0xaaaaaaab
 80032f0:	0800d070 	.word	0x0800d070

080032f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11f      	bne.n	800334e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d856      	bhi.n	80033c2 <DMA_CheckFifoParam+0xce>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <DMA_CheckFifoParam+0x28>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	0800332d 	.word	0x0800332d
 8003320:	0800333f 	.word	0x0800333f
 8003324:	0800332d 	.word	0x0800332d
 8003328:	080033c3 	.word	0x080033c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d046      	beq.n	80033c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e043      	b.n	80033c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003346:	d140      	bne.n	80033ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334c:	e03d      	b.n	80033ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d121      	bne.n	800339c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d837      	bhi.n	80033ce <DMA_CheckFifoParam+0xda>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <DMA_CheckFifoParam+0x70>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003375 	.word	0x08003375
 8003368:	0800337b 	.word	0x0800337b
 800336c:	08003375 	.word	0x08003375
 8003370:	0800338d 	.word	0x0800338d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e030      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d025      	beq.n	80033d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338a:	e022      	b.n	80033d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003394:	d11f      	bne.n	80033d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800339a:	e01c      	b.n	80033d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d903      	bls.n	80033aa <DMA_CheckFifoParam+0xb6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d003      	beq.n	80033b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033a8:	e018      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      break;
 80033ae:	e015      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      break;
 80033c0:	e00b      	b.n	80033da <DMA_CheckFifoParam+0xe6>
      break;
 80033c2:	bf00      	nop
 80033c4:	e00a      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e008      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e006      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e004      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;   
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
    }
  } 
  
  return status; 
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e16b      	b.n	80036e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 815a 	bne.w	80036da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d005      	beq.n	800343e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	2b02      	cmp	r3, #2
 800343c:	d130      	bne.n	80034a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	2203      	movs	r2, #3
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d017      	beq.n	80034dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d123      	bne.n	8003530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b4 	beq.w	80036da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <HAL_GPIO_Init+0x30c>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	4a5f      	ldr	r2, [pc, #380]	; (80036f8 <HAL_GPIO_Init+0x30c>)
 800357c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_GPIO_Init+0x30c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_GPIO_Init+0x310>)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a52      	ldr	r2, [pc, #328]	; (8003700 <HAL_GPIO_Init+0x314>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <HAL_GPIO_Init+0x226>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <HAL_GPIO_Init+0x318>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d025      	beq.n	800360e <HAL_GPIO_Init+0x222>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a50      	ldr	r2, [pc, #320]	; (8003708 <HAL_GPIO_Init+0x31c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <HAL_GPIO_Init+0x21e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4f      	ldr	r2, [pc, #316]	; (800370c <HAL_GPIO_Init+0x320>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_Init+0x21a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <HAL_GPIO_Init+0x324>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_Init+0x216>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_GPIO_Init+0x328>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_Init+0x212>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	; (8003718 <HAL_GPIO_Init+0x32c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_Init+0x20e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	; (800371c <HAL_GPIO_Init+0x330>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_Init+0x20a>
 80035f2:	2307      	movs	r3, #7
 80035f4:	e00e      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035f6:	2308      	movs	r3, #8
 80035f8:	e00c      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035fa:	2306      	movs	r3, #6
 80035fc:	e00a      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035fe:	2305      	movs	r3, #5
 8003600:	e008      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003602:	2304      	movs	r3, #4
 8003604:	e006      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003606:	2303      	movs	r3, #3
 8003608:	e004      	b.n	8003614 <HAL_GPIO_Init+0x228>
 800360a:	2302      	movs	r3, #2
 800360c:	e002      	b.n	8003614 <HAL_GPIO_Init+0x228>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003612:	2300      	movs	r3, #0
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f002 0203 	and.w	r2, r2, #3
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4093      	lsls	r3, r2
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003624:	4935      	ldr	r1, [pc, #212]	; (80036fc <HAL_GPIO_Init+0x310>)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003656:	4a32      	ldr	r2, [pc, #200]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800365c:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_GPIO_Init+0x334>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_GPIO_Init+0x334>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_GPIO_Init+0x334>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_GPIO_Init+0x334>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d4:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_GPIO_Init+0x334>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	f67f ae90 	bls.w	8003408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40013800 	.word	0x40013800
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00
 8003710:	40021000 	.word	0x40021000
 8003714:	40021400 	.word	0x40021400
 8003718:	40021800 	.word	0x40021800
 800371c:	40021c00 	.word	0x40021c00
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	041a      	lsls	r2, r3, #16
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43d9      	mvns	r1, r3
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	400b      	ands	r3, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e03e      	b.n	800381e <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7fe ff95 	bl	80026e4 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f003 fc1d 	bl	8007004 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	f003 fc57 	bl	8007088 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	f003 fc85 	bl	80070f4 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d108      	bne.n	8003804 <HAL_NAND_Init+0x7a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0204 	orr.w	r2, r2, #4
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e007      	b.n	8003814 <HAL_NAND_Init+0x8a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a1a      	ldr	r2, [r3, #32]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0204 	orr.w	r2, r2, #4
 8003812:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b10      	cmp	r3, #16
 8003834:	d10a      	bne.n	800384c <HAL_NAND_IRQHandler+0x26>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e009      	b.n	8003860 <HAL_NAND_IRQHandler+0x3a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d017      	beq.n	8003894 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8b2 	bl	80039ce <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b10      	cmp	r3, #16
 8003870:	d108      	bne.n	8003884 <HAL_NAND_IRQHandler+0x5e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	e007      	b.n	8003894 <HAL_NAND_IRQHandler+0x6e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b10      	cmp	r3, #16
 800389a:	d10a      	bne.n	80038b2 <HAL_NAND_IRQHandler+0x8c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e009      	b.n	80038c6 <HAL_NAND_IRQHandler+0xa0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d017      	beq.n	80038fa <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f87f 	bl	80039ce <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d108      	bne.n	80038ea <HAL_NAND_IRQHandler+0xc4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0202 	bic.w	r2, r2, #2
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	e007      	b.n	80038fa <HAL_NAND_IRQHandler+0xd4>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0202 	bic.w	r2, r2, #2
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d10a      	bne.n	8003918 <HAL_NAND_IRQHandler+0xf2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e009      	b.n	800392c <HAL_NAND_IRQHandler+0x106>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f84c 	bl	80039ce <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b10      	cmp	r3, #16
 800393c:	d108      	bne.n	8003950 <HAL_NAND_IRQHandler+0x12a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0204 	bic.w	r2, r2, #4
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e007      	b.n	8003960 <HAL_NAND_IRQHandler+0x13a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0204 	bic.w	r2, r2, #4
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b10      	cmp	r3, #16
 8003966:	d10a      	bne.n	800397e <HAL_NAND_IRQHandler+0x158>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e009      	b.n	8003992 <HAL_NAND_IRQHandler+0x16c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f819 	bl	80039ce <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d108      	bne.n	80039b6 <HAL_NAND_IRQHandler+0x190>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b2:	605a      	str	r2, [r3, #4]
  }
}
 80039b4:	e007      	b.n	80039c6 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e267      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d075      	beq.n	8003aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4b7e      	ldr	r3, [pc, #504]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05b      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e242      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x74>
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x98>
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6f      	ldr	r2, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6c      	ldr	r2, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a68      	ldr	r2, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b66      	ldr	r3, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe ff92 	bl	80029c4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe ff8e 	bl	80029c4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e207      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe ff7e 	bl	80029c4 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe ff7a 	bl	80029c4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1f3      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afa:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1c7      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4937      	ldr	r1, [pc, #220]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fe ff33 	bl	80029c4 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fe ff2f 	bl	80029c4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1a8      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4925      	ldr	r1, [pc, #148]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe ff12 	bl	80029c4 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe ff0e 	bl	80029c4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e187      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d036      	beq.n	8003c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fe fef2 	bl	80029c4 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe feee 	bl	80029c4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e167      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x200>
 8003c02:	e01b      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fedb 	bl	80029c4 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e00e      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fe fed7 	bl	80029c4 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d907      	bls.n	8003c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e150      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470000 	.word	0x42470000
 8003c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ea      	bne.n	8003c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8097 	beq.w	8003d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b81      	ldr	r3, [pc, #516]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b7d      	ldr	r3, [pc, #500]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a7c      	ldr	r2, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b7a      	ldr	r3, [pc, #488]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b77      	ldr	r3, [pc, #476]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b74      	ldr	r3, [pc, #464]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a73      	ldr	r2, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fe fe97 	bl	80029c4 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fe fe93 	bl	80029c4 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e10c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x2ea>
 8003cc0:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x30c>
 8003cd6:	4b5f      	ldr	r3, [pc, #380]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a5e      	ldr	r2, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a5b      	ldr	r2, [pc, #364]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6713      	str	r3, [r2, #112]	; 0x70
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 0304 	bic.w	r3, r3, #4
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe fe58 	bl	80029c4 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fe fe54 	bl	80029c4 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0cb      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4b49      	ldr	r3, [pc, #292]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ee      	beq.n	8003d18 <HAL_RCC_OscConfig+0x334>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fe42 	bl	80029c4 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe fe3e 	bl	80029c4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0b5      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ee      	bne.n	8003d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a1 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d82:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d05c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d141      	bne.n	8003e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fe12 	bl	80029c4 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe fe0e 	bl	80029c4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e087      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	491b      	ldr	r1, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fde7 	bl	80029c4 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe fde3 	bl	80029c4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e05c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x416>
 8003e18:	e054      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe fdd0 	bl	80029c4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe fdcc 	bl	80029c4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e045      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x444>
 8003e46:	e03d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e038      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d028      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d121      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d11a      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fcfe 	bl	80029c4 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fe fcfa 	bl	80029c4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fb3c 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	0800d058 	.word	0x0800d058
 8004098:	2000002c 	.word	0x2000002c
 800409c:	20000030 	.word	0x20000030

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b094      	sub	sp, #80	; 0x50
 80040a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	647b      	str	r3, [r7, #68]	; 0x44
 80040ac:	2300      	movs	r3, #0
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b0:	2300      	movs	r3, #0
 80040b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b8:	4b79      	ldr	r3, [pc, #484]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d00d      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x40>
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	f200 80e1 	bhi.w	800428c <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d003      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x3a>
 80040d2:	e0db      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040d8:	e0db      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b73      	ldr	r3, [pc, #460]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80040dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040de:	e0d8      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4b6d      	ldr	r3, [pc, #436]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d063      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	2200      	movs	r2, #0
 80040fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004100:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
 800410e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f04f 0000 	mov.w	r0, #0
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	0159      	lsls	r1, r3, #5
 8004120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004124:	0150      	lsls	r0, r2, #5
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4621      	mov	r1, r4
 800412c:	1a51      	subs	r1, r2, r1
 800412e:	6139      	str	r1, [r7, #16]
 8004130:	4629      	mov	r1, r5
 8004132:	eb63 0301 	sbc.w	r3, r3, r1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004144:	4659      	mov	r1, fp
 8004146:	018b      	lsls	r3, r1, #6
 8004148:	4651      	mov	r1, sl
 800414a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800414e:	4651      	mov	r1, sl
 8004150:	018a      	lsls	r2, r1, #6
 8004152:	4651      	mov	r1, sl
 8004154:	ebb2 0801 	subs.w	r8, r2, r1
 8004158:	4659      	mov	r1, fp
 800415a:	eb63 0901 	sbc.w	r9, r3, r1
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800416e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004172:	4690      	mov	r8, r2
 8004174:	4699      	mov	r9, r3
 8004176:	4623      	mov	r3, r4
 8004178:	eb18 0303 	adds.w	r3, r8, r3
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	462b      	mov	r3, r5
 8004180:	eb49 0303 	adc.w	r3, r9, r3
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004192:	4629      	mov	r1, r5
 8004194:	024b      	lsls	r3, r1, #9
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800419c:	4621      	mov	r1, r4
 800419e:	024a      	lsls	r2, r1, #9
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041b0:	f7fc fbbc 	bl	800092c <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041bc:	e058      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041be:	4b38      	ldr	r3, [pc, #224]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	2200      	movs	r2, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	4611      	mov	r1, r2
 80041ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	f04f 0000 	mov.w	r0, #0
 80041e0:	f04f 0100 	mov.w	r1, #0
 80041e4:	0159      	lsls	r1, r3, #5
 80041e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ea:	0150      	lsls	r0, r2, #5
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4641      	mov	r1, r8
 80041f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041f6:	4649      	mov	r1, r9
 80041f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800420c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004210:	ebb2 040a 	subs.w	r4, r2, sl
 8004214:	eb63 050b 	sbc.w	r5, r3, fp
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	00eb      	lsls	r3, r5, #3
 8004222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004226:	00e2      	lsls	r2, r4, #3
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	4643      	mov	r3, r8
 800422e:	18e3      	adds	r3, r4, r3
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	464b      	mov	r3, r9
 8004234:	eb45 0303 	adc.w	r3, r5, r3
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004246:	4629      	mov	r1, r5
 8004248:	028b      	lsls	r3, r1, #10
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004250:	4621      	mov	r1, r4
 8004252:	028a      	lsls	r2, r1, #10
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425a:	2200      	movs	r2, #0
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	61fa      	str	r2, [r7, #28]
 8004260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004264:	f7fc fb62 	bl	800092c <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428a:	e002      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004294:	4618      	mov	r0, r3
 8004296:	3750      	adds	r7, #80	; 0x50
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	007a1200 	.word	0x007a1200

080042ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	2000002c 	.word	0x2000002c

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042c8:	f7ff fff0 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	0800d068 	.word	0x0800d068

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f0:	f7ff ffdc 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	0800d068 	.word	0x0800d068

08004314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	220f      	movs	r2, #15
 8004322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCC_GetClockConfig+0x5c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <HAL_RCC_GetClockConfig+0x5c>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_GetClockConfig+0x5c>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_GetClockConfig+0x5c>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <HAL_RCC_GetClockConfig+0x60>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0207 	and.w	r2, r3, #7
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	601a      	str	r2, [r3, #0]
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	40023c00 	.word	0x40023c00

08004378 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800439c:	2b00      	cmp	r3, #0
 800439e:	d035      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a0:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fe fb0d 	bl	80029c4 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ae:	f7fe fb09 	bl	80029c4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0b0      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c0:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	019a      	lsls	r2, r3, #6
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	071b      	lsls	r3, r3, #28
 80043d8:	4955      	ldr	r1, [pc, #340]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043e0:	4b52      	ldr	r3, [pc, #328]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043e6:	f7fe faed 	bl	80029c4 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ee:	f7fe fae9 	bl	80029c4 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e090      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004400:	4b4b      	ldr	r3, [pc, #300]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8083 	beq.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b44      	ldr	r3, [pc, #272]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a43      	ldr	r2, [pc, #268]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b41      	ldr	r3, [pc, #260]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004436:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004442:	f7fe fabf 	bl	80029c4 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fe fabb 	bl	80029c4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e062      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004470:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02f      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	d028      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004490:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004496:	4b28      	ldr	r3, [pc, #160]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800449c:	4a24      	ldr	r2, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d114      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe fa89 	bl	80029c4 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b4:	e00a      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fe fa85 	bl	80029c4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e02a      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ee      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e4:	d10d      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fa:	490d      	ldr	r1, [pc, #52]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]
 8004500:	e005      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004508:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800450c:	6093      	str	r3, [r2, #8]
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	4905      	ldr	r1, [pc, #20]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	4313      	orrs	r3, r2
 800451e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	42470068 	.word	0x42470068
 8004530:	40023800 	.word	0x40023800
 8004534:	40007000 	.word	0x40007000
 8004538:	42470e40 	.word	0x42470e40

0800453c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e083      	b.n	8004656 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7f5b      	ldrb	r3, [r3, #29]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd ff0a 	bl	8002378 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	22ca      	movs	r2, #202	; 0xca
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2253      	movs	r2, #83	; 0x53
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 faa8 	bl	8004ad0 <RTC_EnterInitMode>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	22ff      	movs	r2, #255	; 0xff
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e05e      	b.n	8004656 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045aa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68d2      	ldr	r2, [r2, #12]
 80045d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6919      	ldr	r1, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	041a      	lsls	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa3a 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	22ff      	movs	r2, #255	; 0xff
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2204      	movs	r2, #4
 800461e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e018      	b.n	8004656 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	22ff      	movs	r2, #255	; 0xff
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800465e:	b590      	push	{r4, r7, lr}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	7f1b      	ldrb	r3, [r3, #28]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_RTC_SetTime+0x1c>
 8004676:	2302      	movs	r3, #2
 8004678:	e0aa      	b.n	80047d0 <HAL_RTC_SetTime+0x172>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2202      	movs	r2, #2
 8004684:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d126      	bne.n	80046da <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2200      	movs	r2, #0
 800469e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa3f 	bl	8004b28 <RTC_ByteToBcd2>
 80046aa:	4603      	mov	r3, r0
 80046ac:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fa38 	bl	8004b28 <RTC_ByteToBcd2>
 80046b8:	4603      	mov	r3, r0
 80046ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046bc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa30 	bl	8004b28 <RTC_ByteToBcd2>
 80046c8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80046ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	78db      	ldrb	r3, [r3, #3]
 80046d2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e018      	b.n	800470c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046fa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004700:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	78db      	ldrb	r3, [r3, #3]
 8004706:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	22ca      	movs	r2, #202	; 0xca
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2253      	movs	r2, #83	; 0x53
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f9d7 	bl	8004ad0 <RTC_EnterInitMode>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2204      	movs	r2, #4
 8004734:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e047      	b.n	80047d0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800474a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800474e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800475e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	431a      	orrs	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004786:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d111      	bne.n	80047ba <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f972 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	22ff      	movs	r2, #255	; 0xff
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2204      	movs	r2, #4
 80047ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00a      	b.n	80047d0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	22ff      	movs	r2, #255	; 0xff
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80047ce:	2300      	movs	r3, #0
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}

080047d8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800480a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800480e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11a      	bne.n	800488a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f983 	bl	8004b64 <RTC_Bcd2ToByte>
 800485e:	4603      	mov	r3, r0
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f97a 	bl	8004b64 <RTC_Bcd2ToByte>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	789b      	ldrb	r3, [r3, #2]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f971 	bl	8004b64 <RTC_Bcd2ToByte>
 8004882:	4603      	mov	r3, r0
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	7f1b      	ldrb	r3, [r3, #28]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_RTC_SetDate+0x1c>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e094      	b.n	80049da <HAL_RTC_SetDate+0x146>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2202      	movs	r2, #2
 80048ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10e      	bne.n	80048e0 <HAL_RTC_SetDate+0x4c>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	f023 0310 	bic.w	r3, r3, #16
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	330a      	adds	r3, #10
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11c      	bne.n	8004920 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	78db      	ldrb	r3, [r3, #3]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f91c 	bl	8004b28 <RTC_ByteToBcd2>
 80048f0:	4603      	mov	r3, r0
 80048f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f915 	bl	8004b28 <RTC_ByteToBcd2>
 80048fe:	4603      	mov	r3, r0
 8004900:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004902:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	789b      	ldrb	r3, [r3, #2]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f90d 	bl	8004b28 <RTC_ByteToBcd2>
 800490e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004910:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e00e      	b.n	800493e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800492c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004932:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	22ca      	movs	r2, #202	; 0xca
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2253      	movs	r2, #83	; 0x53
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f8be 	bl	8004ad0 <RTC_EnterInitMode>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2204      	movs	r2, #4
 8004966:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e033      	b.n	80049da <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800497c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004980:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004990:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d111      	bne.n	80049c4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f86d 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2204      	movs	r2, #4
 80049b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e00a      	b.n	80049da <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}

080049e2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	0b5b      	lsrs	r3, r3, #13
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11a      	bne.n	8004a76 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	78db      	ldrb	r3, [r3, #3]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f88d 	bl	8004b64 <RTC_Bcd2ToByte>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f884 	bl	8004b64 <RTC_Bcd2ToByte>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	789b      	ldrb	r3, [r3, #2]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f87b 	bl	8004b64 <RTC_Bcd2ToByte>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9c:	f7fd ff92 	bl	80029c4 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004aa2:	e009      	b.n	8004ab8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004aa4:	f7fd ff8e 	bl	80029c4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e007      	b.n	8004ac8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ee      	beq.n	8004aa4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d119      	bne.n	8004b1e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fd ff66 	bl	80029c4 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004afa:	e009      	b.n	8004b10 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004afc:	f7fd ff62 	bl	80029c4 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0a:	d901      	bls.n	8004b10 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e007      	b.n	8004b20 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ee      	beq.n	8004afc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004b36:	e005      	b.n	8004b44 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	3b0a      	subs	r3, #10
 8004b42:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d8f6      	bhi.n	8004b38 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b2db      	uxtb	r3, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	b2db      	uxtb	r3, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e07b      	b.n	8004caa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc2:	d009      	beq.n	8004bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
 8004bca:	e005      	b.n	8004bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd fbec 	bl	80023d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	ea42 0103 	orr.w	r1, r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	f003 0104 	and.w	r1, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0210 	and.w	r2, r3, #16
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b088      	sub	sp, #32
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_SPI_Transmit+0x22>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e126      	b.n	8004f22 <HAL_SPI_Transmit+0x270>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cdc:	f7fd fe72 	bl	80029c4 <HAL_GetTick>
 8004ce0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d002      	beq.n	8004cf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cf6:	e10b      	b.n	8004f10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_Transmit+0x52>
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d08:	e102      	b.n	8004f10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	d10f      	bne.n	8004d72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d007      	beq.n	8004d90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d98:	d14b      	bne.n	8004e32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_Transmit+0xf6>
 8004da2:	8afb      	ldrh	r3, [r7, #22]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d13e      	bne.n	8004e26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dcc:	e02b      	b.n	8004e26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d112      	bne.n	8004e02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e00:	e011      	b.n	8004e26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e02:	f7fd fddf 	bl	80029c4 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d803      	bhi.n	8004e1a <HAL_SPI_Transmit+0x168>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e18:	d102      	bne.n	8004e20 <HAL_SPI_Transmit+0x16e>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e24:	e074      	b.n	8004f10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ce      	bne.n	8004dce <HAL_SPI_Transmit+0x11c>
 8004e30:	e04c      	b.n	8004ecc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Transmit+0x18e>
 8004e3a:	8afb      	ldrh	r3, [r7, #22]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d140      	bne.n	8004ec2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e66:	e02c      	b.n	8004ec2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d113      	bne.n	8004e9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e9c:	e011      	b.n	8004ec2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e9e:	f7fd fd91 	bl	80029c4 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d803      	bhi.n	8004eb6 <HAL_SPI_Transmit+0x204>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_Transmit+0x20a>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ec0:	e026      	b.n	8004f10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1cd      	bne.n	8004e68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fb13 	bl	80054fc <SPI_EndRxTxTransaction>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e000      	b.n	8004f10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_SPI_Transmit_DMA+0x20>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e09b      	b.n	8005084 <HAL_SPI_Transmit_DMA+0x158>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d002      	beq.n	8004f66 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
 8004f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f64:	e089      	b.n	800507a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_SPI_Transmit_DMA+0x46>
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f76:	e080      	b.n	800507a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbe:	d10f      	bne.n	8004fe0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_SPI_Transmit_DMA+0x160>)
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <HAL_SPI_Transmit_DMA+0x164>)
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_SPI_Transmit_DMA+0x168>)
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4619      	mov	r1, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005016:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005018:	f7fd fe94 	bl	8002d44 <HAL_DMA_Start_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	f043 0210 	orr.w	r2, r3, #16
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800503a:	e01e      	b.n	800507a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d007      	beq.n	800505a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005058:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0220 	orr.w	r2, r2, #32
 8005068:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0202 	orr.w	r2, r2, #2
 8005078:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08005369 	.word	0x08005369
 8005090:	080052c1 	.word	0x080052c1
 8005094:	08005385 	.word	0x08005385

08005098 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	099b      	lsrs	r3, r3, #6
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d004      	beq.n	80050dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
    return;
 80050da:	e0d7      	b.n	800528c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_SPI_IRQHandler+0x66>
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	09db      	lsrs	r3, r3, #7
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
    return;
 80050fc:	e0c6      	b.n	800528c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_SPI_IRQHandler+0x8c>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	099b      	lsrs	r3, r3, #6
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80b4 	beq.w	800528c <HAL_SPI_IRQHandler+0x1f4>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80ad 	beq.w	800528c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	099b      	lsrs	r3, r3, #6
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d023      	beq.n	8005186 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d011      	beq.n	800516e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514e:	f043 0204 	orr.w	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	e00b      	b.n	8005186 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	693b      	ldr	r3, [r7, #16]
        return;
 8005184:	e082      	b.n	800528c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d014      	beq.n	80051bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f043 0201 	orr.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f043 0208 	orr.w	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04f      	beq.n	800528a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <HAL_SPI_IRQHandler+0x17e>
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d034      	beq.n	8005280 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0203 	bic.w	r2, r2, #3
 8005224:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d011      	beq.n	8005252 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_SPI_IRQHandler+0x1fc>)
 8005234:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fe4a 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005256:	2b00      	cmp	r3, #0
 8005258:	d016      	beq.n	8005288 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525e:	4a0d      	ldr	r2, [pc, #52]	; (8005294 <HAL_SPI_IRQHandler+0x1fc>)
 8005260:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd fe34 	bl	8002ed4 <HAL_DMA_Abort_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800527e:	e003      	b.n	8005288 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f813 	bl	80052ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005286:	e000      	b.n	800528a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005288:	bf00      	nop
    return;
 800528a:	bf00      	nop
  }
}
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	080053c5 	.word	0x080053c5

08005298 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ce:	f7fd fb79 	bl	80029c4 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e2:	d03b      	beq.n	800535c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0220 	bic.w	r2, r2, #32
 80052f2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0202 	bic.w	r2, r2, #2
 8005302:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	2164      	movs	r1, #100	; 0x64
 8005308:	6978      	ldr	r0, [r7, #20]
 800530a:	f000 f8f7 	bl	80054fc <SPI_EndRxTxTransaction>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005354:	6978      	ldr	r0, [r7, #20]
 8005356:	f7ff ffa9 	bl	80052ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800535a:	e002      	b.n	8005362 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800535c:	6978      	ldr	r0, [r7, #20]
 800535e:	f7fc fa27 	bl	80017b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff ff8e 	bl	8005298 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0203 	bic.w	r2, r2, #3
 80053a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f043 0210 	orr.w	r2, r3, #16
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ff78 	bl	80052ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ff64 	bl	80052ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053fc:	f7fd fae2 	bl	80029c4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4413      	add	r3, r2
 800540a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800540c:	f7fd fada 	bl	80029c4 <HAL_GetTick>
 8005410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005412:	4b39      	ldr	r3, [pc, #228]	; (80054f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	015b      	lsls	r3, r3, #5
 8005418:	0d1b      	lsrs	r3, r3, #20
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005422:	e054      	b.n	80054ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800542a:	d050      	beq.n	80054ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800542c:	f7fd faca 	bl	80029c4 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	429a      	cmp	r2, r3
 800543a:	d902      	bls.n	8005442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d13d      	bne.n	80054be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545a:	d111      	bne.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005464:	d004      	beq.n	8005470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546e:	d107      	bne.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800547e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d10f      	bne.n	80054aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e017      	b.n	80054ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d19b      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	2000002c 	.word	0x2000002c

080054fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <SPI_EndRxTxTransaction+0x7c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <SPI_EndRxTxTransaction+0x80>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0d5b      	lsrs	r3, r3, #21
 8005514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005526:	d112      	bne.n	800554e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff ff5a 	bl	80053ec <SPI_WaitFlagStateUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d016      	beq.n	800556c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e00f      	b.n	800556e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3b01      	subs	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d0f2      	beq.n	800554e <SPI_EndRxTxTransaction+0x52>
 8005568:	e000      	b.n	800556c <SPI_EndRxTxTransaction+0x70>
        break;
 800556a:	bf00      	nop
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	2000002c 	.word	0x2000002c
 800557c:	165e9f81 	.word	0x165e9f81

08005580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e041      	b.n	8005616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fc ff9e 	bl	80024e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 fa96 	bl	8005af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d001      	beq.n	8005638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e04e      	b.n	80056d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d01d      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_TIM_Base_Start_IT+0xdc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d111      	bne.n	80056c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d010      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	e007      	b.n	80056d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800

08005700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d122      	bne.n	800575c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b02      	cmp	r3, #2
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0202 	mvn.w	r2, #2
 800572c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9b5 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 8005748:	e005      	b.n	8005756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f9a7 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f9b8 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b04      	cmp	r3, #4
 8005768:	d122      	bne.n	80057b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d11b      	bne.n	80057b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0204 	mvn.w	r2, #4
 8005780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f98b 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f97d 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f98e 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d122      	bne.n	8005804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d11b      	bne.n	8005804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0208 	mvn.w	r2, #8
 80057d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f961 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f953 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f964 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b10      	cmp	r3, #16
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b10      	cmp	r3, #16
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0210 	mvn.w	r2, #16
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2208      	movs	r2, #8
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f937 	bl	8005ab2 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f929 	bl	8005a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f93a 	bl	8005ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b01      	cmp	r3, #1
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0201 	mvn.w	r2, #1
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc f938 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589c:	2b80      	cmp	r3, #128	; 0x80
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fae0 	bl	8005e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	d10e      	bne.n	80058dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f8ff 	bl	8005ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d10e      	bne.n	8005908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d107      	bne.n	8005908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0220 	mvn.w	r2, #32
 8005900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 faaa 	bl	8005e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIM_ConfigClockSource+0x1c>
 8005928:	2302      	movs	r3, #2
 800592a:	e0b4      	b.n	8005a96 <HAL_TIM_ConfigClockSource+0x186>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800594a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d03e      	beq.n	80059e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596a:	f200 8087 	bhi.w	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	f000 8086 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x172>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597a:	d87f      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d01a      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005980:	2b70      	cmp	r3, #112	; 0x70
 8005982:	d87b      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b60      	cmp	r3, #96	; 0x60
 8005986:	d050      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x11a>
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d877      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d03c      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0xfa>
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d873      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d058      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x13a>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d86f      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d064      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d86b      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d060      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d867      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05c      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d05a      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	e062      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6899      	ldr	r1, [r3, #8]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f000 f9ad 	bl	8005d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	609a      	str	r2, [r3, #8]
      break;
 80059e2:	e04f      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6899      	ldr	r1, [r3, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f000 f996 	bl	8005d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a06:	609a      	str	r2, [r3, #8]
      break;
 8005a08:	e03c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 f90a 	bl	8005c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2150      	movs	r1, #80	; 0x50
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f963 	bl	8005cee <TIM_ITRx_SetConfig>
      break;
 8005a28:	e02c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 f929 	bl	8005c8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2160      	movs	r1, #96	; 0x60
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f953 	bl	8005cee <TIM_ITRx_SetConfig>
      break;
 8005a48:	e01c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 f8ea 	bl	8005c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f943 	bl	8005cee <TIM_ITRx_SetConfig>
      break;
 8005a68:	e00c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f000 f93a 	bl	8005cee <TIM_ITRx_SetConfig>
      break;
 8005a7a:	e003      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a40      	ldr	r2, [pc, #256]	; (8005c04 <TIM_Base_SetConfig+0x114>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3d      	ldr	r2, [pc, #244]	; (8005c08 <TIM_Base_SetConfig+0x118>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a3c      	ldr	r2, [pc, #240]	; (8005c0c <TIM_Base_SetConfig+0x11c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <TIM_Base_SetConfig+0x120>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3a      	ldr	r2, [pc, #232]	; (8005c14 <TIM_Base_SetConfig+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2f      	ldr	r2, [pc, #188]	; (8005c04 <TIM_Base_SetConfig+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02b      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d027      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2c      	ldr	r2, [pc, #176]	; (8005c08 <TIM_Base_SetConfig+0x118>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d023      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <TIM_Base_SetConfig+0x11c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <TIM_Base_SetConfig+0x120>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01b      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <TIM_Base_SetConfig+0x124>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d017      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <TIM_Base_SetConfig+0x128>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <TIM_Base_SetConfig+0x12c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <TIM_Base_SetConfig+0x130>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a25      	ldr	r2, [pc, #148]	; (8005c24 <TIM_Base_SetConfig+0x134>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a24      	ldr	r2, [pc, #144]	; (8005c28 <TIM_Base_SetConfig+0x138>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <TIM_Base_SetConfig+0x13c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <TIM_Base_SetConfig+0x114>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0xf8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <TIM_Base_SetConfig+0x124>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d103      	bne.n	8005bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	615a      	str	r2, [r3, #20]
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40010400 	.word	0x40010400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800
 8005c24:	40001800 	.word	0x40001800
 8005c28:	40001c00 	.word	0x40001c00
 8005c2c:	40002000 	.word	0x40002000

08005c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 030a 	bic.w	r3, r3, #10
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b087      	sub	sp, #28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0210 	bic.w	r2, r3, #16
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	031b      	lsls	r3, r3, #12
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f043 0307 	orr.w	r3, r3, #7
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	609a      	str	r2, [r3, #8]
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	021a      	lsls	r2, r3, #8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e05a      	b.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d022      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d01d      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d018      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10c      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40001800 	.word	0x40001800

08005e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e03f      	b.n	8005f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fb42 	bl	8002534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fe27 	bl	8006b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695a      	ldr	r2, [r3, #20]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d11d      	bne.n	8005f74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_UART_Receive_IT+0x26>
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e016      	b.n	8005f76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Receive_IT+0x38>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e00f      	b.n	8005f76 <HAL_UART_Receive_IT+0x58>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	461a      	mov	r2, r3
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fbd9 	bl	8006722 <UART_Start_Receive_IT>
 8005f70:	4603      	mov	r3, r0
 8005f72:	e000      	b.n	8005f76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d165      	bne.n	8006066 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_UART_Transmit_DMA+0x26>
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e05e      	b.n	8006068 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UART_Transmit_DMA+0x38>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e057      	b.n	8006068 <HAL_UART_Transmit_DMA+0xe8>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2221      	movs	r2, #33	; 0x21
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_UART_Transmit_DMA+0xf0>)
 8005fe6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_UART_Transmit_DMA+0xf4>)
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	4a20      	ldr	r2, [pc, #128]	; (8006078 <HAL_UART_Transmit_DMA+0xf8>)
 8005ff6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006000:	f107 0308 	add.w	r3, r7, #8
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3304      	adds	r3, #4
 8006014:	461a      	mov	r2, r3
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	f7fc fe94 	bl	8002d44 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	617b      	str	r3, [r7, #20]
   return(result);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006044:	62bb      	str	r3, [r7, #40]	; 0x28
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604e:	627a      	str	r2, [r7, #36]	; 0x24
 8006050:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6a39      	ldr	r1, [r7, #32]
 8006054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	61fb      	str	r3, [r7, #28]
   return(result);
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006066:	2302      	movs	r3, #2
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	3730      	adds	r7, #48	; 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	080065d9 	.word	0x080065d9
 8006074:	08006673 	.word	0x08006673
 8006078:	0800668f 	.word	0x0800668f

0800607c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b0ba      	sub	sp, #232	; 0xe8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10f      	bne.n	80060e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_UART_IRQHandler+0x66>
 80060ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fc62 	bl	80069a4 <UART_Receive_IT>
      return;
 80060e0:	e256      	b.n	8006590 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80de 	beq.w	80062a8 <HAL_UART_IRQHandler+0x22c>
 80060ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80d1 	beq.w	80062a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_UART_IRQHandler+0xae>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0201 	orr.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_UART_IRQHandler+0xd2>
 8006136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0202 	orr.w	r2, r3, #2
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <HAL_UART_IRQHandler+0xf6>
 800615a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f043 0204 	orr.w	r2, r3, #4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d011      	beq.n	80061a2 <HAL_UART_IRQHandler+0x126>
 800617e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800618a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0208 	orr.w	r2, r3, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 81ed 	beq.w	8006586 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_UART_IRQHandler+0x14e>
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fbed 	bl	80069a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <HAL_UART_IRQHandler+0x17a>
 80061ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d04f      	beq.n	8006296 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 faf5 	bl	80067e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d141      	bne.n	800628e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3314      	adds	r3, #20
 8006232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800623a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800624e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1d9      	bne.n	800620a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d013      	beq.n	8006286 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	4a7d      	ldr	r2, [pc, #500]	; (8006458 <HAL_UART_IRQHandler+0x3dc>)
 8006264:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	4618      	mov	r0, r3
 800626c:	f7fc fe32 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006280:	4610      	mov	r0, r2
 8006282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006284:	e00e      	b.n	80062a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f990 	bl	80065ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	e00a      	b.n	80062a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f98c 	bl	80065ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	e006      	b.n	80062a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f988 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062a2:	e170      	b.n	8006586 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	bf00      	nop
    return;
 80062a6:	e16e      	b.n	8006586 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 814a 	bne.w	8006546 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8143 	beq.w	8006546 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 813c 	beq.w	8006546 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	f040 80b4 	bne.w	800645c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8140 	beq.w	800658a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800630e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006312:	429a      	cmp	r2, r3
 8006314:	f080 8139 	bcs.w	800658a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800631e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632a:	f000 8088 	beq.w	800643e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800634c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800635a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800635e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1d9      	bne.n	800632e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3314      	adds	r3, #20
 8006380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800638a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3314      	adds	r3, #20
 800639a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800639e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e1      	bne.n	800637a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800640c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640e:	f023 0310 	bic.w	r3, r3, #16
 8006412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006420:	65ba      	str	r2, [r7, #88]	; 0x58
 8006422:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800642e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e3      	bne.n	80063fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	4618      	mov	r0, r3
 800643a:	f7fc fcdb 	bl	8002df4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006446:	b29b      	uxth	r3, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8b6 	bl	80065c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006454:	e099      	b.n	800658a <HAL_UART_IRQHandler+0x50e>
 8006456:	bf00      	nop
 8006458:	080068ad 	.word	0x080068ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006464:	b29b      	uxth	r3, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 808b 	beq.w	800658e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8086 	beq.w	800658e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064a6:	647a      	str	r2, [r7, #68]	; 0x44
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e3      	bne.n	8006482 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3314      	adds	r3, #20
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3314      	adds	r3, #20
 80064da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064de:	633a      	str	r2, [r7, #48]	; 0x30
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e3      	bne.n	80064ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0310 	bic.w	r3, r3, #16
 8006516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006524:	61fa      	str	r2, [r7, #28]
 8006526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	69b9      	ldr	r1, [r7, #24]
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	617b      	str	r3, [r7, #20]
   return(result);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e3      	bne.n	8006500 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f83e 	bl	80065c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006544:	e023      	b.n	800658e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_UART_IRQHandler+0x4ea>
 8006552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9b8 	bl	80068d4 <UART_Transmit_IT>
    return;
 8006564:	e014      	b.n	8006590 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <HAL_UART_IRQHandler+0x514>
 8006572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d008      	beq.n	8006590 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9f8 	bl	8006974 <UART_EndTransmit_IT>
    return;
 8006584:	e004      	b.n	8006590 <HAL_UART_IRQHandler+0x514>
    return;
 8006586:	bf00      	nop
 8006588:	e002      	b.n	8006590 <HAL_UART_IRQHandler+0x514>
      return;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <HAL_UART_IRQHandler+0x514>
      return;
 800658e:	bf00      	nop
  }
}
 8006590:	37e8      	adds	r7, #232	; 0xe8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop

08006598 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b090      	sub	sp, #64	; 0x40
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d137      	bne.n	8006664 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	2200      	movs	r2, #0
 80065f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3314      	adds	r3, #20
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	623b      	str	r3, [r7, #32]
   return(result);
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661a:	633a      	str	r2, [r7, #48]	; 0x30
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	60fb      	str	r3, [r7, #12]
   return(result);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800664e:	61fa      	str	r2, [r7, #28]
 8006650:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	69b9      	ldr	r1, [r7, #24]
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	617b      	str	r3, [r7, #20]
   return(result);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e5      	bne.n	800662e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006662:	e002      	b.n	800666a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006664:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006666:	f7fb f88d 	bl	8001784 <HAL_UART_TxCpltCallback>
}
 800666a:	bf00      	nop
 800666c:	3740      	adds	r7, #64	; 0x40
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff ff89 	bl	8006598 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b21      	cmp	r3, #33	; 0x21
 80066c0:	d108      	bne.n	80066d4 <UART_DMAError+0x46>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80066ce:	68b8      	ldr	r0, [r7, #8]
 80066d0:	f000 f861 	bl	8006796 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	d108      	bne.n	8006708 <UART_DMAError+0x7a>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006702:	68b8      	ldr	r0, [r7, #8]
 8006704:	f000 f86f 	bl	80067e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	f043 0210 	orr.w	r2, r3, #16
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006714:	68b8      	ldr	r0, [r7, #8]
 8006716:	f7ff ff49 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	4613      	mov	r3, r2
 800672e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2222      	movs	r2, #34	; 0x22
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006766:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0220 	orr.w	r2, r2, #32
 8006786:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006796:	b480      	push	{r7}
 8006798:	b089      	sub	sp, #36	; 0x24
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	61ba      	str	r2, [r7, #24]
 80067c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6979      	ldr	r1, [r7, #20]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80067da:	bf00      	nop
 80067dc:	3724      	adds	r7, #36	; 0x24
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b095      	sub	sp, #84	; 0x54
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800680e:	643a      	str	r2, [r7, #64]	; 0x40
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	61fb      	str	r3, [r7, #28]
   return(result);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	64bb      	str	r3, [r7, #72]	; 0x48
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	2b01      	cmp	r3, #1
 800685c:	d119      	bne.n	8006892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	60bb      	str	r3, [r7, #8]
   return(result);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f023 0310 	bic.w	r3, r3, #16
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800687e:	61ba      	str	r2, [r7, #24]
 8006880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6979      	ldr	r1, [r7, #20]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	613b      	str	r3, [r7, #16]
   return(result);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e5      	bne.n	800685e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068a0:	bf00      	nop
 80068a2:	3754      	adds	r7, #84	; 0x54
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fe70 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b21      	cmp	r3, #33	; 0x21
 80068e6:	d13e      	bne.n	8006966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	d114      	bne.n	800691c <UART_Transmit_IT+0x48>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d110      	bne.n	800691c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800690e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	1c9a      	adds	r2, r3, #2
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]
 800691a:	e008      	b.n	800692e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6211      	str	r1, [r2, #32]
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4619      	mov	r1, r3
 800693c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fa fef5 	bl	8001784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08c      	sub	sp, #48	; 0x30
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b22      	cmp	r3, #34	; 0x22
 80069b6:	f040 80ab 	bne.w	8006b10 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d117      	bne.n	80069f4 <UART_Receive_IT+0x50>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d113      	bne.n	80069f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	1c9a      	adds	r2, r3, #2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
 80069f2:	e026      	b.n	8006a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a06:	d007      	beq.n	8006a18 <UART_Receive_IT+0x74>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <UART_Receive_IT+0x82>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d15a      	bne.n	8006b0c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0220 	bic.w	r2, r2, #32
 8006a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695a      	ldr	r2, [r3, #20]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d135      	bne.n	8006b02 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	623a      	str	r2, [r7, #32]
 8006abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	69f9      	ldr	r1, [r7, #28]
 8006ac2:	6a3a      	ldr	r2, [r7, #32]
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b10      	cmp	r3, #16
 8006adc:	d10a      	bne.n	8006af4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fd60 	bl	80065c0 <HAL_UARTEx_RxEventCallback>
 8006b00:	e002      	b.n	8006b08 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fa fdb4 	bl	8001670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e002      	b.n	8006b12 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3730      	adds	r7, #48	; 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b20:	b0c0      	sub	sp, #256	; 0x100
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	68d9      	ldr	r1, [r3, #12]
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	ea40 0301 	orr.w	r3, r0, r1
 8006b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b74:	f021 010c 	bic.w	r1, r1, #12
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b82:	430b      	orrs	r3, r1
 8006b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b96:	6999      	ldr	r1, [r3, #24]
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	ea40 0301 	orr.w	r3, r0, r1
 8006ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b8f      	ldr	r3, [pc, #572]	; (8006de8 <UART_SetConfig+0x2cc>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d005      	beq.n	8006bbc <UART_SetConfig+0xa0>
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4b8d      	ldr	r3, [pc, #564]	; (8006dec <UART_SetConfig+0x2d0>)
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d104      	bne.n	8006bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7fd fb96 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8006bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bc4:	e003      	b.n	8006bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bc6:	f7fd fb7d 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8006bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd8:	f040 810c 	bne.w	8006df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bee:	4622      	mov	r2, r4
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	1891      	adds	r1, r2, r2
 8006bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bf6:	415b      	adcs	r3, r3
 8006bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bfe:	4621      	mov	r1, r4
 8006c00:	eb12 0801 	adds.w	r8, r2, r1
 8006c04:	4629      	mov	r1, r5
 8006c06:	eb43 0901 	adc.w	r9, r3, r1
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c1e:	4690      	mov	r8, r2
 8006c20:	4699      	mov	r9, r3
 8006c22:	4623      	mov	r3, r4
 8006c24:	eb18 0303 	adds.w	r3, r8, r3
 8006c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	eb49 0303 	adc.w	r3, r9, r3
 8006c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	18db      	adds	r3, r3, r3
 8006c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c50:	4613      	mov	r3, r2
 8006c52:	eb42 0303 	adc.w	r3, r2, r3
 8006c56:	657b      	str	r3, [r7, #84]	; 0x54
 8006c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c60:	f7f9 fe64 	bl	800092c <__aeabi_uldivmod>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4b61      	ldr	r3, [pc, #388]	; (8006df0 <UART_SetConfig+0x2d4>)
 8006c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	011c      	lsls	r4, r3, #4
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c84:	4642      	mov	r2, r8
 8006c86:	464b      	mov	r3, r9
 8006c88:	1891      	adds	r1, r2, r2
 8006c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c8c:	415b      	adcs	r3, r3
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c94:	4641      	mov	r1, r8
 8006c96:	eb12 0a01 	adds.w	sl, r2, r1
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb4:	4692      	mov	sl, r2
 8006cb6:	469b      	mov	fp, r3
 8006cb8:	4643      	mov	r3, r8
 8006cba:	eb1a 0303 	adds.w	r3, sl, r3
 8006cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	18db      	adds	r3, r3, r3
 8006ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	eb42 0303 	adc.w	r3, r2, r3
 8006cec:	647b      	str	r3, [r7, #68]	; 0x44
 8006cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cf6:	f7f9 fe19 	bl	800092c <__aeabi_uldivmod>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4b3b      	ldr	r3, [pc, #236]	; (8006df0 <UART_SetConfig+0x2d4>)
 8006d02:	fba3 2301 	umull	r2, r3, r3, r1
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2264      	movs	r2, #100	; 0x64
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	1acb      	subs	r3, r1, r3
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d16:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <UART_SetConfig+0x2d4>)
 8006d18:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d24:	441c      	add	r4, r3
 8006d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d40:	415b      	adcs	r3, r3
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d48:	4641      	mov	r1, r8
 8006d4a:	1851      	adds	r1, r2, r1
 8006d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8006d4e:	4649      	mov	r1, r9
 8006d50:	414b      	adcs	r3, r1
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d60:	4659      	mov	r1, fp
 8006d62:	00cb      	lsls	r3, r1, #3
 8006d64:	4651      	mov	r1, sl
 8006d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6a:	4651      	mov	r1, sl
 8006d6c:	00ca      	lsls	r2, r1, #3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	4642      	mov	r2, r8
 8006d76:	189b      	adds	r3, r3, r2
 8006d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	460a      	mov	r2, r1
 8006d80:	eb42 0303 	adc.w	r3, r2, r3
 8006d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	18db      	adds	r3, r3, r3
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da2:	4613      	mov	r3, r2
 8006da4:	eb42 0303 	adc.w	r3, r2, r3
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006db2:	f7f9 fdbb 	bl	800092c <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <UART_SetConfig+0x2d4>)
 8006dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	2164      	movs	r1, #100	; 0x64
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	3332      	adds	r3, #50	; 0x32
 8006dce:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <UART_SetConfig+0x2d4>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	f003 0207 	and.w	r2, r3, #7
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4422      	add	r2, r4
 8006de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006de4:	e105      	b.n	8006ff2 <UART_SetConfig+0x4d6>
 8006de6:	bf00      	nop
 8006de8:	40011000 	.word	0x40011000
 8006dec:	40011400 	.word	0x40011400
 8006df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	1891      	adds	r1, r2, r2
 8006e0c:	6239      	str	r1, [r7, #32]
 8006e0e:	415b      	adcs	r3, r3
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
 8006e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e16:	4641      	mov	r1, r8
 8006e18:	1854      	adds	r4, r2, r1
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	eb43 0501 	adc.w	r5, r3, r1
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	00eb      	lsls	r3, r5, #3
 8006e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e2e:	00e2      	lsls	r2, r4, #3
 8006e30:	4614      	mov	r4, r2
 8006e32:	461d      	mov	r5, r3
 8006e34:	4643      	mov	r3, r8
 8006e36:	18e3      	adds	r3, r4, r3
 8006e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	eb45 0303 	adc.w	r3, r5, r3
 8006e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e62:	4629      	mov	r1, r5
 8006e64:	008b      	lsls	r3, r1, #2
 8006e66:	4621      	mov	r1, r4
 8006e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	008a      	lsls	r2, r1, #2
 8006e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e74:	f7f9 fd5a 	bl	800092c <__aeabi_uldivmod>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4b60      	ldr	r3, [pc, #384]	; (8007000 <UART_SetConfig+0x4e4>)
 8006e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	011c      	lsls	r4, r3, #4
 8006e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	1891      	adds	r1, r2, r2
 8006e9e:	61b9      	str	r1, [r7, #24]
 8006ea0:	415b      	adcs	r3, r3
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea8:	4641      	mov	r1, r8
 8006eaa:	1851      	adds	r1, r2, r1
 8006eac:	6139      	str	r1, [r7, #16]
 8006eae:	4649      	mov	r1, r9
 8006eb0:	414b      	adcs	r3, r1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	00cb      	lsls	r3, r1, #3
 8006ec4:	4651      	mov	r1, sl
 8006ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eca:	4651      	mov	r1, sl
 8006ecc:	00ca      	lsls	r2, r1, #3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006edc:	464b      	mov	r3, r9
 8006ede:	460a      	mov	r2, r1
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f00:	4649      	mov	r1, r9
 8006f02:	008b      	lsls	r3, r1, #2
 8006f04:	4641      	mov	r1, r8
 8006f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	008a      	lsls	r2, r1, #2
 8006f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f12:	f7f9 fd0b 	bl	800092c <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4b39      	ldr	r3, [pc, #228]	; (8007000 <UART_SetConfig+0x4e4>)
 8006f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	2164      	movs	r1, #100	; 0x64
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	3332      	adds	r3, #50	; 0x32
 8006f2e:	4a34      	ldr	r2, [pc, #208]	; (8007000 <UART_SetConfig+0x4e4>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f3a:	441c      	add	r4, r3
 8006f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f40:	2200      	movs	r2, #0
 8006f42:	673b      	str	r3, [r7, #112]	; 0x70
 8006f44:	677a      	str	r2, [r7, #116]	; 0x74
 8006f46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f4a:	4642      	mov	r2, r8
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	1891      	adds	r1, r2, r2
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	415b      	adcs	r3, r3
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	1851      	adds	r1, r2, r1
 8006f5e:	6039      	str	r1, [r7, #0]
 8006f60:	4649      	mov	r1, r9
 8006f62:	414b      	adcs	r3, r1
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f72:	4659      	mov	r1, fp
 8006f74:	00cb      	lsls	r3, r1, #3
 8006f76:	4651      	mov	r1, sl
 8006f78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	00ca      	lsls	r2, r1, #3
 8006f80:	4610      	mov	r0, r2
 8006f82:	4619      	mov	r1, r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	4642      	mov	r2, r8
 8006f88:	189b      	adds	r3, r3, r2
 8006f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	460a      	mov	r2, r1
 8006f90:	eb42 0303 	adc.w	r3, r2, r3
 8006f94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8006fa0:	667a      	str	r2, [r7, #100]	; 0x64
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fae:	4649      	mov	r1, r9
 8006fb0:	008b      	lsls	r3, r1, #2
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb8:	4641      	mov	r1, r8
 8006fba:	008a      	lsls	r2, r1, #2
 8006fbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fc0:	f7f9 fcb4 	bl	800092c <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <UART_SetConfig+0x4e4>)
 8006fca:	fba3 1302 	umull	r1, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2164      	movs	r1, #100	; 0x64
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	3332      	adds	r3, #50	; 0x32
 8006fdc:	4a08      	ldr	r2, [pc, #32]	; (8007000 <UART_SetConfig+0x4e4>)
 8006fde:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	f003 020f 	and.w	r2, r3, #15
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4422      	add	r2, r4
 8006ff0:	609a      	str	r2, [r3, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ffe:	bf00      	nop
 8007000:	51eb851f 	.word	0x51eb851f

08007004 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b10      	cmp	r3, #16
 8007018:	d103      	bne.n	8007022 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e002      	b.n	8007028 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4b16      	ldr	r3, [pc, #88]	; (8007084 <FSMC_NAND_Init+0x80>)
 800702c:	4013      	ands	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8007038:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 800703e:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8007044:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 800704c:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	f043 0308 	orr.w	r3, r3, #8
 800705e:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b10      	cmp	r3, #16
 8007066:	d103      	bne.n	8007070 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e002      	b.n	8007076 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	fff00181 	.word	0xfff00181

08007088 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b10      	cmp	r3, #16
 800709c:	d103      	bne.n	80070a6 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e002      	b.n	80070ac <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80070ba:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80070c2:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80070ca:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b10      	cmp	r3, #16
 80070d6:	d103      	bne.n	80070e0 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	609a      	str	r2, [r3, #8]
 80070de:	e002      	b.n	80070e6 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b10      	cmp	r3, #16
 8007108:	d103      	bne.n	8007112 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e002      	b.n	8007118 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007126:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 800712e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007136:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b10      	cmp	r3, #16
 8007142:	d103      	bne.n	800714c <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	60da      	str	r2, [r3, #12]
 800714a:	e002      	b.n	8007152 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <__NVIC_SetPriority>:
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800716c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007170:	2b00      	cmp	r3, #0
 8007172:	db0a      	blt.n	800718a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	490c      	ldr	r1, [pc, #48]	; (80071ac <__NVIC_SetPriority+0x4c>)
 800717a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717e:	0112      	lsls	r2, r2, #4
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	440b      	add	r3, r1
 8007184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007188:	e00a      	b.n	80071a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	4908      	ldr	r1, [pc, #32]	; (80071b0 <__NVIC_SetPriority+0x50>)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	3b04      	subs	r3, #4
 8007198:	0112      	lsls	r2, r2, #4
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	440b      	add	r3, r1
 800719e:	761a      	strb	r2, [r3, #24]
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	e000e100 	.word	0xe000e100
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <SysTick_Handler+0x1c>)
 80071ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071bc:	f001 fea4 	bl	8008f08 <xTaskGetSchedulerState>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071c6:	f002 fc8f 	bl	8009ae8 <xPortSysTickHandler>
  }
}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000e010 	.word	0xe000e010

080071d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071d8:	2100      	movs	r1, #0
 80071da:	f06f 0004 	mvn.w	r0, #4
 80071de:	f7ff ffbf 	bl	8007160 <__NVIC_SetPriority>
#endif
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ee:	f3ef 8305 	mrs	r3, IPSR
 80071f2:	603b      	str	r3, [r7, #0]
  return(result);
 80071f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071fa:	f06f 0305 	mvn.w	r3, #5
 80071fe:	607b      	str	r3, [r7, #4]
 8007200:	e00f      	b.n	8007222 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <osKernelInitialize+0x44>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d108      	bne.n	800721c <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800720a:	4809      	ldr	r0, [pc, #36]	; (8007230 <osKernelInitialize+0x48>)
 800720c:	f002 fe68 	bl	8009ee0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <osKernelInitialize+0x44>)
 8007212:	2201      	movs	r2, #1
 8007214:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007216:	2300      	movs	r3, #0
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	e002      	b.n	8007222 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800721c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007220:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007222:	687b      	ldr	r3, [r7, #4]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000b4c 	.word	0x20000b4c
 8007230:	20000038 	.word	0x20000038

08007234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723a:	f3ef 8305 	mrs	r3, IPSR
 800723e:	603b      	str	r3, [r7, #0]
  return(result);
 8007240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007246:	f06f 0305 	mvn.w	r3, #5
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	e010      	b.n	8007270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <osKernelStart+0x48>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d109      	bne.n	800726a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007256:	f7ff ffbd 	bl	80071d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <osKernelStart+0x48>)
 800725c:	2202      	movs	r2, #2
 800725e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007260:	f001 f9f6 	bl	8008650 <vTaskStartScheduler>
      stat = osOK;
 8007264:	2300      	movs	r3, #0
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e002      	b.n	8007270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800726e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007270:	687b      	ldr	r3, [r7, #4]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000b4c 	.word	0x20000b4c

08007280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af04      	add	r7, sp, #16
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007290:	f3ef 8305 	mrs	r3, IPSR
 8007294:	617b      	str	r3, [r7, #20]
  return(result);
 8007296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007298:	2b00      	cmp	r3, #0
 800729a:	d17e      	bne.n	800739a <osThreadNew+0x11a>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d07b      	beq.n	800739a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072a2:	2380      	movs	r3, #128	; 0x80
 80072a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072a6:	2318      	movs	r3, #24
 80072a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d045      	beq.n	8007346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <osThreadNew+0x48>
        name = attr->name;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <osThreadNew+0x6e>
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b38      	cmp	r3, #56	; 0x38
 80072e0:	d805      	bhi.n	80072ee <osThreadNew+0x6e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <osThreadNew+0x72>
        return (NULL);
 80072ee:	2300      	movs	r3, #0
 80072f0:	e054      	b.n	800739c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	089b      	lsrs	r3, r3, #2
 8007300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00e      	beq.n	8007328 <osThreadNew+0xa8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2bbb      	cmp	r3, #187	; 0xbb
 8007310:	d90a      	bls.n	8007328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007316:	2b00      	cmp	r3, #0
 8007318:	d006      	beq.n	8007328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <osThreadNew+0xa8>
        mem = 1;
 8007322:	2301      	movs	r3, #1
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e010      	b.n	800734a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10c      	bne.n	800734a <osThreadNew+0xca>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <osThreadNew+0xca>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d104      	bne.n	800734a <osThreadNew+0xca>
          mem = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	e001      	b.n	800734a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d110      	bne.n	8007372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 ff86 	bl	8008278 <xTaskCreateStatic>
 800736c:	4603      	mov	r3, r0
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	e013      	b.n	800739a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d110      	bne.n	800739a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	b29a      	uxth	r2, r3
 800737c:	f107 0310 	add.w	r3, r7, #16
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 ffd1 	bl	8008332 <xTaskCreate>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d001      	beq.n	800739a <osThreadNew+0x11a>
            hTask = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800739a:	693b      	ldr	r3, [r7, #16]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3728      	adds	r7, #40	; 0x28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ac:	f3ef 8305 	mrs	r3, IPSR
 80073b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <osDelay+0x1c>
    stat = osErrorISR;
 80073b8:	f06f 0305 	mvn.w	r3, #5
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e007      	b.n	80073d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 f90c 	bl	80085e8 <vTaskDelay>
    }
  }

  return (stat);
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80073da:	b580      	push	{r7, lr}
 80073dc:	b08a      	sub	sp, #40	; 0x28
 80073de:	af02      	add	r7, sp, #8
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ea:	f3ef 8305 	mrs	r3, IPSR
 80073ee:	613b      	str	r3, [r7, #16]
  return(result);
 80073f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d175      	bne.n	80074e2 <osSemaphoreNew+0x108>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d072      	beq.n	80074e2 <osSemaphoreNew+0x108>
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	429a      	cmp	r2, r3
 8007402:	d86e      	bhi.n	80074e2 <osSemaphoreNew+0x108>
    mem = -1;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007408:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d015      	beq.n	800743c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <osSemaphoreNew+0x4c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b4f      	cmp	r3, #79	; 0x4f
 800741e:	d902      	bls.n	8007426 <osSemaphoreNew+0x4c>
        mem = 1;
 8007420:	2301      	movs	r3, #1
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	e00c      	b.n	8007440 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d108      	bne.n	8007440 <osSemaphoreNew+0x66>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <osSemaphoreNew+0x66>
          mem = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e001      	b.n	8007440 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007446:	d04c      	beq.n	80074e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d128      	bne.n	80074a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d10a      	bne.n	800746a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2203      	movs	r2, #3
 800745a:	9200      	str	r2, [sp, #0]
 800745c:	2200      	movs	r2, #0
 800745e:	2100      	movs	r1, #0
 8007460:	2001      	movs	r0, #1
 8007462:	f000 f993 	bl	800778c <xQueueGenericCreateStatic>
 8007466:	61f8      	str	r0, [r7, #28]
 8007468:	e005      	b.n	8007476 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800746a:	2203      	movs	r2, #3
 800746c:	2100      	movs	r1, #0
 800746e:	2001      	movs	r0, #1
 8007470:	f000 fa04 	bl	800787c <xQueueGenericCreate>
 8007474:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d022      	beq.n	80074c2 <osSemaphoreNew+0xe8>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01f      	beq.n	80074c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007482:	2300      	movs	r3, #0
 8007484:	2200      	movs	r2, #0
 8007486:	2100      	movs	r1, #0
 8007488:	69f8      	ldr	r0, [r7, #28]
 800748a:	f000 fabf 	bl	8007a0c <xQueueGenericSend>
 800748e:	4603      	mov	r3, r0
 8007490:	2b01      	cmp	r3, #1
 8007492:	d016      	beq.n	80074c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007494:	69f8      	ldr	r0, [r7, #28]
 8007496:	f000 fd33 	bl	8007f00 <vQueueDelete>
            hSemaphore = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	e010      	b.n	80074c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d108      	bne.n	80074b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	461a      	mov	r2, r3
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fa41 	bl	8007936 <xQueueCreateCountingSemaphoreStatic>
 80074b4:	61f8      	str	r0, [r7, #28]
 80074b6:	e004      	b.n	80074c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fa72 	bl	80079a4 <xQueueCreateCountingSemaphore>
 80074c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e001      	b.n	80074da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	69f8      	ldr	r0, [r7, #28]
 80074de:	f000 fe43 	bl	8008168 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074e2:	69fb      	ldr	r3, [r7, #28]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a07      	ldr	r2, [pc, #28]	; (8007518 <vApplicationGetIdleTaskMemory+0x2c>)
 80074fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a06      	ldr	r2, [pc, #24]	; (800751c <vApplicationGetIdleTaskMemory+0x30>)
 8007502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	601a      	str	r2, [r3, #0]
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20004b50 	.word	0x20004b50
 800751c:	20004c0c 	.word	0x20004c0c

08007520 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a07      	ldr	r2, [pc, #28]	; (800754c <vApplicationGetTimerTaskMemory+0x2c>)
 8007530:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4a06      	ldr	r2, [pc, #24]	; (8007550 <vApplicationGetTimerTaskMemory+0x30>)
 8007536:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800753e:	601a      	str	r2, [r3, #0]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20004e0c 	.word	0x20004e0c
 8007550:	20004ec8 	.word	0x20004ec8

08007554 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f103 0208 	add.w	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800756c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f103 0208 	add.w	r2, r3, #8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f103 0208 	add.w	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800760c:	d103      	bne.n	8007616 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e00c      	b.n	8007630 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3308      	adds	r3, #8
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e002      	b.n	8007624 <vListInsert+0x2e>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d2f6      	bcs.n	800761e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6892      	ldr	r2, [r2, #8]
 800767e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6852      	ldr	r2, [r2, #4]
 8007688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d103      	bne.n	800769c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	1e5a      	subs	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076e6:	f002 f96d 	bl	80099c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	441a      	add	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	3b01      	subs	r3, #1
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	22ff      	movs	r2, #255	; 0xff
 8007732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d114      	bne.n	8007766 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01a      	beq.n	800777a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3310      	adds	r3, #16
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fa1b 	bl	8008b84 <xTaskRemoveFromEventList>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d012      	beq.n	800777a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <xQueueGenericReset+0xcc>)
 8007756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	e009      	b.n	800777a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3310      	adds	r3, #16
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fef2 	bl	8007554 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3324      	adds	r3, #36	; 0x24
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff feed 	bl	8007554 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800777a:	f002 f953 	bl	8009a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800777e:	2301      	movs	r3, #1
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08e      	sub	sp, #56	; 0x38
 8007790:	af02      	add	r7, sp, #8
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <xQueueGenericCreateStatic+0x52>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <xQueueGenericCreateStatic+0x56>
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <xQueueGenericCreateStatic+0x58>
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	623b      	str	r3, [r7, #32]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d102      	bne.n	800780a <xQueueGenericCreateStatic+0x7e>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <xQueueGenericCreateStatic+0x82>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <xQueueGenericCreateStatic+0x84>
 800780e:	2300      	movs	r3, #0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	61fb      	str	r3, [r7, #28]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800782a:	2350      	movs	r3, #80	; 0x50
 800782c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b50      	cmp	r3, #80	; 0x50
 8007832:	d00a      	beq.n	800784a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	61bb      	str	r3, [r7, #24]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800784a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800785e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f83f 	bl	80078f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007874:	4618      	mov	r0, r3
 8007876:	3730      	adds	r7, #48	; 0x30
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	613b      	str	r3, [r7, #16]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	3350      	adds	r3, #80	; 0x50
 80078b4:	4618      	mov	r0, r3
 80078b6:	f002 f9a7 	bl	8009c08 <pvPortMalloc>
 80078ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	3350      	adds	r3, #80	; 0x50
 80078ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078d4:	79fa      	ldrb	r2, [r7, #7]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	4613      	mov	r3, r2
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f805 	bl	80078f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078e6:	69bb      	ldr	r3, [r7, #24]
	}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	e002      	b.n	8007912 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800791e:	2101      	movs	r1, #1
 8007920:	69b8      	ldr	r0, [r7, #24]
 8007922:	f7ff fecb 	bl	80076bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007936:	b580      	push	{r7, lr}
 8007938:	b08a      	sub	sp, #40	; 0x28
 800793a:	af02      	add	r7, sp, #8
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	61bb      	str	r3, [r7, #24]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	429a      	cmp	r2, r3
 8007964:	d90a      	bls.n	800797c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	617b      	str	r3, [r7, #20]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800797c:	2302      	movs	r3, #2
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ff00 	bl	800778c <xQueueGenericCreateStatic>
 800798c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800799a:	69fb      	ldr	r3, [r7, #28]
	}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	613b      	str	r3, [r7, #16]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d90a      	bls.n	80079e8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60fb      	str	r3, [r7, #12]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80079e8:	2202      	movs	r2, #2
 80079ea:	2100      	movs	r1, #0
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff45 	bl	800787c <xQueueGenericCreate>
 80079f2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a00:	697b      	ldr	r3, [r7, #20]
	}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08e      	sub	sp, #56	; 0x38
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xQueueGenericSend+0x32>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <xQueueGenericSend+0x40>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <xQueueGenericSend+0x44>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <xQueueGenericSend+0x46>
 8007a50:	2300      	movs	r3, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <xQueueGenericSend+0x60>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d103      	bne.n	8007a7a <xQueueGenericSend+0x6e>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <xQueueGenericSend+0x72>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <xQueueGenericSend+0x74>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <xQueueGenericSend+0x8e>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	623b      	str	r3, [r7, #32]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a9a:	f001 fa35 	bl	8008f08 <xTaskGetSchedulerState>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <xQueueGenericSend+0x9e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <xQueueGenericSend+0xa2>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <xQueueGenericSend+0xa4>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <xQueueGenericSend+0xbe>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	61fb      	str	r3, [r7, #28]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aca:	f001 ff7b 	bl	80099c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d302      	bcc.n	8007ae0 <xQueueGenericSend+0xd4>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d129      	bne.n	8007b34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae6:	f000 fa2e 	bl	8007f46 <prvCopyDataToQueue>
 8007aea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d010      	beq.n	8007b16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f843 	bl	8008b84 <xTaskRemoveFromEventList>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d013      	beq.n	8007b2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b04:	4b3f      	ldr	r3, [pc, #252]	; (8007c04 <xQueueGenericSend+0x1f8>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	e00a      	b.n	8007b2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b1c:	4b39      	ldr	r3, [pc, #228]	; (8007c04 <xQueueGenericSend+0x1f8>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b2c:	f001 ff7a 	bl	8009a24 <vPortExitCritical>
				return pdPASS;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e063      	b.n	8007bfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b3a:	f001 ff73 	bl	8009a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e05c      	b.n	8007bfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 f87d 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b52:	2301      	movs	r3, #1
 8007b54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b56:	f001 ff65 	bl	8009a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b5a:	f000 fde9 	bl	8008730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b5e:	f001 ff31 	bl	80099c4 <vPortEnterCritical>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b68:	b25b      	sxtb	r3, r3
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b6e:	d103      	bne.n	8007b78 <xQueueGenericSend+0x16c>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b7e:	b25b      	sxtb	r3, r3
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b84:	d103      	bne.n	8007b8e <xQueueGenericSend+0x182>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b8e:	f001 ff49 	bl	8009a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b92:	1d3a      	adds	r2, r7, #4
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f86c 	bl	8008c78 <xTaskCheckForTimeOut>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d124      	bne.n	8007bf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba8:	f000 fac5 	bl	8008136 <prvIsQueueFull>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d018      	beq.n	8007be4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	3310      	adds	r3, #16
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 ff92 	bl	8008ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bc2:	f000 fa50 	bl	8008066 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bc6:	f000 fdc1 	bl	800874c <xTaskResumeAll>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f af7c 	bne.w	8007aca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <xQueueGenericSend+0x1f8>)
 8007bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	e772      	b.n	8007aca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007be6:	f000 fa3e 	bl	8008066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bea:	f000 fdaf 	bl	800874c <xTaskResumeAll>
 8007bee:	e76c      	b.n	8007aca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf2:	f000 fa38 	bl	8008066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bf6:	f000 fda9 	bl	800874c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3738      	adds	r7, #56	; 0x38
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b090      	sub	sp, #64	; 0x40
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <xQueueGenericSendFromISR+0x3c>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <xQueueGenericSendFromISR+0x40>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <xQueueGenericSendFromISR+0x42>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d103      	bne.n	8007c72 <xQueueGenericSendFromISR+0x6a>
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <xQueueGenericSendFromISR+0x6e>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueGenericSendFromISR+0x70>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	623b      	str	r3, [r7, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c92:	f001 ff79 	bl	8009b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c96:	f3ef 8211 	mrs	r2, BASEPRI
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61fa      	str	r2, [r7, #28]
 8007cac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <xQueueGenericSendFromISR+0xbc>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d12f      	bne.n	8007d24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cda:	f000 f934 	bl	8007f46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce6:	d112      	bne.n	8007d0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d016      	beq.n	8007d1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 ff45 	bl	8008b84 <xTaskRemoveFromEventList>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00e      	beq.n	8007d1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	e007      	b.n	8007d1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d12:	3301      	adds	r3, #1
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	b25a      	sxtb	r2, r3
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d22:	e001      	b.n	8007d28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3740      	adds	r7, #64	; 0x40
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	; 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <xQueueReceive+0x30>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	623b      	str	r3, [r7, #32]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <xQueueReceive+0x3e>
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <xQueueReceive+0x42>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <xQueueReceive+0x44>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <xQueueReceive+0x5e>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	61fb      	str	r3, [r7, #28]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d9e:	f001 f8b3 	bl	8008f08 <xTaskGetSchedulerState>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <xQueueReceive+0x6e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <xQueueReceive+0x72>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <xQueueReceive+0x74>
 8007db2:	2300      	movs	r3, #0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueReceive+0x8e>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61bb      	str	r3, [r7, #24]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dce:	f001 fdf9 	bl	80099c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01f      	beq.n	8007e1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de2:	f000 f91a 	bl	800801a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	1e5a      	subs	r2, r3, #1
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00f      	beq.n	8007e16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	3310      	adds	r3, #16
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fec2 	bl	8008b84 <xTaskRemoveFromEventList>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e06:	4b3d      	ldr	r3, [pc, #244]	; (8007efc <xQueueReceive+0x1bc>)
 8007e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e16:	f001 fe05 	bl	8009a24 <vPortExitCritical>
				return pdPASS;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e069      	b.n	8007ef2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e24:	f001 fdfe 	bl	8009a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e062      	b.n	8007ef2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e32:	f107 0310 	add.w	r3, r7, #16
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 ff08 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e40:	f001 fdf0 	bl	8009a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e44:	f000 fc74 	bl	8008730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e48:	f001 fdbc 	bl	80099c4 <vPortEnterCritical>
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e52:	b25b      	sxtb	r3, r3
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e58:	d103      	bne.n	8007e62 <xQueueReceive+0x122>
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e6e:	d103      	bne.n	8007e78 <xQueueReceive+0x138>
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e78:	f001 fdd4 	bl	8009a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e7c:	1d3a      	adds	r2, r7, #4
 8007e7e:	f107 0310 	add.w	r3, r7, #16
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fef7 	bl	8008c78 <xTaskCheckForTimeOut>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d123      	bne.n	8007ed8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e92:	f000 f93a 	bl	800810a <prvIsQueueEmpty>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d017      	beq.n	8007ecc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fe1d 	bl	8008ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eac:	f000 f8db 	bl	8008066 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eb0:	f000 fc4c 	bl	800874c <xTaskResumeAll>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d189      	bne.n	8007dce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <xQueueReceive+0x1bc>)
 8007ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	e780      	b.n	8007dce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f000 f8ca 	bl	8008066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ed2:	f000 fc3b 	bl	800874c <xTaskResumeAll>
 8007ed6:	e77a      	b.n	8007dce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eda:	f000 f8c4 	bl	8008066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ede:	f000 fc35 	bl	800874c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee4:	f000 f911 	bl	800810a <prvIsQueueEmpty>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f43f af6f 	beq.w	8007dce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3730      	adds	r7, #48	; 0x30
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	e000ed04 	.word	0xe000ed04

08007f00 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <vQueueDelete+0x28>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	60bb      	str	r3, [r7, #8]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f947 	bl	80081bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f001 ff09 	bl	8009d50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10d      	bne.n	8007f80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d14d      	bne.n	8008008 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 ffe7 	bl	8008f44 <xTaskPriorityDisinherit>
 8007f76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	e043      	b.n	8008008 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d119      	bne.n	8007fba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6858      	ldr	r0, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	f002 f95b 	bl	800a24c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d32b      	bcc.n	8008008 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	605a      	str	r2, [r3, #4]
 8007fb8:	e026      	b.n	8008008 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68d8      	ldr	r0, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	f002 f941 	bl	800a24c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	425b      	negs	r3, r3
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d207      	bcs.n	8007ff6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	425b      	negs	r3, r3
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d105      	bne.n	8008008 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3b01      	subs	r3, #1
 8008006:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d018      	beq.n	800805e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	429a      	cmp	r2, r3
 8008044:	d303      	bcc.n	800804e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68d9      	ldr	r1, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	461a      	mov	r2, r3
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	f002 f8f7 	bl	800a24c <memcpy>
	}
}
 800805e:	bf00      	nop
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800806e:	f001 fca9 	bl	80099c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008078:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800807a:	e011      	b.n	80080a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d012      	beq.n	80080aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fd7b 	bl	8008b84 <xTaskRemoveFromEventList>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008094:	f000 fe52 	bl	8008d3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	3b01      	subs	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dce9      	bgt.n	800807c <prvUnlockQueue+0x16>
 80080a8:	e000      	b.n	80080ac <prvUnlockQueue+0x46>
					break;
 80080aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	22ff      	movs	r2, #255	; 0xff
 80080b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080b4:	f001 fcb6 	bl	8009a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080b8:	f001 fc84 	bl	80099c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080c4:	e011      	b.n	80080ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d012      	beq.n	80080f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3310      	adds	r3, #16
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fd56 	bl	8008b84 <xTaskRemoveFromEventList>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080de:	f000 fe2d 	bl	8008d3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dce9      	bgt.n	80080c6 <prvUnlockQueue+0x60>
 80080f2:	e000      	b.n	80080f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	22ff      	movs	r2, #255	; 0xff
 80080fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080fe:	f001 fc91 	bl	8009a24 <vPortExitCritical>
}
 8008102:	bf00      	nop
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008112:	f001 fc57 	bl	80099c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800811e:	2301      	movs	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e001      	b.n	8008128 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008128:	f001 fc7c 	bl	8009a24 <vPortExitCritical>

	return xReturn;
 800812c:	68fb      	ldr	r3, [r7, #12]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813e:	f001 fc41 	bl	80099c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	429a      	cmp	r2, r3
 800814c:	d102      	bne.n	8008154 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	e001      	b.n	8008158 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008158:	f001 fc64 	bl	8009a24 <vPortExitCritical>

	return xReturn;
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e014      	b.n	80081a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008178:	4a0f      	ldr	r2, [pc, #60]	; (80081b8 <vQueueAddToRegistry+0x50>)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008184:	490c      	ldr	r1, [pc, #48]	; (80081b8 <vQueueAddToRegistry+0x50>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800818e:	4a0a      	ldr	r2, [pc, #40]	; (80081b8 <vQueueAddToRegistry+0x50>)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	4413      	add	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800819a:	e006      	b.n	80081aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3301      	adds	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b07      	cmp	r3, #7
 80081a6:	d9e7      	bls.n	8008178 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	200052c8 	.word	0x200052c8

080081bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e016      	b.n	80081f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081ca:	4a10      	ldr	r2, [pc, #64]	; (800820c <vQueueUnregisterQueue+0x50>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4413      	add	r3, r2
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d10b      	bne.n	80081f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80081da:	4a0c      	ldr	r2, [pc, #48]	; (800820c <vQueueUnregisterQueue+0x50>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2100      	movs	r1, #0
 80081e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80081e4:	4a09      	ldr	r2, [pc, #36]	; (800820c <vQueueUnregisterQueue+0x50>)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	4413      	add	r3, r2
 80081ec:	2200      	movs	r2, #0
 80081ee:	605a      	str	r2, [r3, #4]
				break;
 80081f0:	e006      	b.n	8008200 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b07      	cmp	r3, #7
 80081fc:	d9e5      	bls.n	80081ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80081fe:	bf00      	nop
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	200052c8 	.word	0x200052c8

08008210 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008220:	f001 fbd0 	bl	80099c4 <vPortEnterCritical>
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800822a:	b25b      	sxtb	r3, r3
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008230:	d103      	bne.n	800823a <vQueueWaitForMessageRestricted+0x2a>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008240:	b25b      	sxtb	r3, r3
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008246:	d103      	bne.n	8008250 <vQueueWaitForMessageRestricted+0x40>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008250:	f001 fbe8 	bl	8009a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	3324      	adds	r3, #36	; 0x24
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fc61 	bl	8008b2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800826a:	6978      	ldr	r0, [r7, #20]
 800826c:	f7ff fefb 	bl	8008066 <prvUnlockQueue>
	}
 8008270:	bf00      	nop
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	; 0x38
 800827c:	af04      	add	r7, sp, #16
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	623b      	str	r3, [r7, #32]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xTaskCreateStatic+0x46>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	61fb      	str	r3, [r7, #28]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082be:	23bc      	movs	r3, #188	; 0xbc
 80082c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2bbc      	cmp	r3, #188	; 0xbc
 80082c6:	d00a      	beq.n	80082de <xTaskCreateStatic+0x66>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	61bb      	str	r3, [r7, #24]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01e      	beq.n	8008324 <xTaskCreateStatic+0xac>
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01b      	beq.n	8008324 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	2202      	movs	r2, #2
 80082fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082fe:	2300      	movs	r3, #0
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	9302      	str	r3, [sp, #8]
 8008306:	f107 0314 	add.w	r3, r7, #20
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f850 	bl	80083bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800831e:	f000 f8f3 	bl	8008508 <prvAddNewTaskToReadyList>
 8008322:	e001      	b.n	8008328 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008328:	697b      	ldr	r3, [r7, #20]
	}
 800832a:	4618      	mov	r0, r3
 800832c:	3728      	adds	r7, #40	; 0x28
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008332:	b580      	push	{r7, lr}
 8008334:	b08c      	sub	sp, #48	; 0x30
 8008336:	af04      	add	r7, sp, #16
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	603b      	str	r3, [r7, #0]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fc5e 	bl	8009c08 <pvPortMalloc>
 800834c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008354:	20bc      	movs	r0, #188	; 0xbc
 8008356:	f001 fc57 	bl	8009c08 <pvPortMalloc>
 800835a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
 8008368:	e005      	b.n	8008376 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800836a:	6978      	ldr	r0, [r7, #20]
 800836c:	f001 fcf0 	bl	8009d50 <vPortFree>
 8008370:	e001      	b.n	8008376 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d017      	beq.n	80083ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	2300      	movs	r3, #0
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f80e 	bl	80083bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083a0:	69f8      	ldr	r0, [r7, #28]
 80083a2:	f000 f8b1 	bl	8008508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e002      	b.n	80083b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083b2:	69bb      	ldr	r3, [r7, #24]
	}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3720      	adds	r7, #32
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	461a      	mov	r2, r3
 80083d4:	21a5      	movs	r1, #165	; 0xa5
 80083d6:	f001 ff47 	bl	800a268 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083e4:	3b01      	subs	r3, #1
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f023 0307 	bic.w	r3, r3, #7
 80083f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <prvInitialiseNewTask+0x58>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	617b      	str	r3, [r7, #20]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01f      	beq.n	800845a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e012      	b.n	8008446 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	7819      	ldrb	r1, [r3, #0]
 8008428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	3334      	adds	r3, #52	; 0x34
 8008430:	460a      	mov	r2, r1
 8008432:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3301      	adds	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d9e9      	bls.n	8008420 <prvInitialiseNewTask+0x64>
 800844c:	e000      	b.n	8008450 <prvInitialiseNewTask+0x94>
			{
				break;
 800844e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008458:	e003      	b.n	8008462 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	2b37      	cmp	r3, #55	; 0x37
 8008466:	d901      	bls.n	800846c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008468:	2337      	movs	r3, #55	; 0x37
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008470:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008476:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2200      	movs	r2, #0
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f886 	bl	8007594 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	3318      	adds	r3, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff f881 	bl	8007594 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008496:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	3354      	adds	r3, #84	; 0x54
 80084bc:	2260      	movs	r2, #96	; 0x60
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fed1 	bl	800a268 <memset>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	4a0c      	ldr	r2, [pc, #48]	; (80084fc <prvInitialiseNewTask+0x140>)
 80084ca:	659a      	str	r2, [r3, #88]	; 0x58
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	4a0c      	ldr	r2, [pc, #48]	; (8008500 <prvInitialiseNewTask+0x144>)
 80084d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	4a0b      	ldr	r2, [pc, #44]	; (8008504 <prvInitialiseNewTask+0x148>)
 80084d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	69b8      	ldr	r0, [r7, #24]
 80084de:	f001 f941 	bl	8009764 <pxPortInitialiseStack>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f4:	bf00      	nop
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	0800d098 	.word	0x0800d098
 8008500:	0800d0b8 	.word	0x0800d0b8
 8008504:	0800d078 	.word	0x0800d078

08008508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008510:	f001 fa58 	bl	80099c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008514:	4b2d      	ldr	r3, [pc, #180]	; (80085cc <prvAddNewTaskToReadyList+0xc4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	4a2c      	ldr	r2, [pc, #176]	; (80085cc <prvAddNewTaskToReadyList+0xc4>)
 800851c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800851e:	4b2c      	ldr	r3, [pc, #176]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008526:	4a2a      	ldr	r2, [pc, #168]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800852c:	4b27      	ldr	r3, [pc, #156]	; (80085cc <prvAddNewTaskToReadyList+0xc4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d110      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008534:	f000 fc26 	bl	8008d84 <prvInitialiseTaskLists>
 8008538:	e00d      	b.n	8008556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800853a:	4b26      	ldr	r3, [pc, #152]	; (80085d4 <prvAddNewTaskToReadyList+0xcc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d802      	bhi.n	8008556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008550:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008556:	4b20      	ldr	r3, [pc, #128]	; (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 800855e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008560:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <prvAddNewTaskToReadyList+0xd4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <prvAddNewTaskToReadyList+0x74>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a18      	ldr	r2, [pc, #96]	; (80085dc <prvAddNewTaskToReadyList+0xd4>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <prvAddNewTaskToReadyList+0xd8>)
 800858a:	441a      	add	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7ff f80b 	bl	80075ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008598:	f001 fa44 	bl	8009a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <prvAddNewTaskToReadyList+0xcc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085a4:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d207      	bcs.n	80085c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <prvAddNewTaskToReadyList+0xdc>)
 80085b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200057dc 	.word	0x200057dc
 80085d0:	20005308 	.word	0x20005308
 80085d4:	200057e8 	.word	0x200057e8
 80085d8:	200057f8 	.word	0x200057f8
 80085dc:	200057e4 	.word	0x200057e4
 80085e0:	2000530c 	.word	0x2000530c
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d017      	beq.n	800862a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085fa:	4b13      	ldr	r3, [pc, #76]	; (8008648 <vTaskDelay+0x60>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <vTaskDelay+0x30>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008618:	f000 f88a 	bl	8008730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800861c:	2100      	movs	r1, #0
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fcfe 	bl	8009020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008624:	f000 f892 	bl	800874c <xTaskResumeAll>
 8008628:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d107      	bne.n	8008640 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008630:	4b06      	ldr	r3, [pc, #24]	; (800864c <vTaskDelay+0x64>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008640:	bf00      	nop
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20005804 	.word	0x20005804
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08a      	sub	sp, #40	; 0x28
 8008654:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800865e:	463a      	mov	r2, r7
 8008660:	1d39      	adds	r1, r7, #4
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe ff40 	bl	80074ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	9202      	str	r2, [sp, #8]
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	2300      	movs	r3, #0
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	2300      	movs	r3, #0
 800867c:	460a      	mov	r2, r1
 800867e:	4924      	ldr	r1, [pc, #144]	; (8008710 <vTaskStartScheduler+0xc0>)
 8008680:	4824      	ldr	r0, [pc, #144]	; (8008714 <vTaskStartScheduler+0xc4>)
 8008682:	f7ff fdf9 	bl	8008278 <xTaskCreateStatic>
 8008686:	4603      	mov	r3, r0
 8008688:	4a23      	ldr	r2, [pc, #140]	; (8008718 <vTaskStartScheduler+0xc8>)
 800868a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800868c:	4b22      	ldr	r3, [pc, #136]	; (8008718 <vTaskStartScheduler+0xc8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008694:	2301      	movs	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e001      	b.n	800869e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d102      	bne.n	80086aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086a4:	f000 fd10 	bl	80090c8 <xTimerCreateTimerTask>
 80086a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d11b      	bne.n	80086e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	613b      	str	r3, [r7, #16]
}
 80086c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086c4:	4b15      	ldr	r3, [pc, #84]	; (800871c <vTaskStartScheduler+0xcc>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3354      	adds	r3, #84	; 0x54
 80086ca:	4a15      	ldr	r2, [pc, #84]	; (8008720 <vTaskStartScheduler+0xd0>)
 80086cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086ce:	4b15      	ldr	r3, [pc, #84]	; (8008724 <vTaskStartScheduler+0xd4>)
 80086d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086d6:	4b14      	ldr	r3, [pc, #80]	; (8008728 <vTaskStartScheduler+0xd8>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086dc:	4b13      	ldr	r3, [pc, #76]	; (800872c <vTaskStartScheduler+0xdc>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086e2:	f001 f8cd 	bl	8009880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086e6:	e00e      	b.n	8008706 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ee:	d10a      	bne.n	8008706 <vTaskStartScheduler+0xb6>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	60fb      	str	r3, [r7, #12]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <vTaskStartScheduler+0xb4>
}
 8008706:	bf00      	nop
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	0800af48 	.word	0x0800af48
 8008714:	08008d55 	.word	0x08008d55
 8008718:	20005800 	.word	0x20005800
 800871c:	20005308 	.word	0x20005308
 8008720:	2000004c 	.word	0x2000004c
 8008724:	200057fc 	.word	0x200057fc
 8008728:	200057e8 	.word	0x200057e8
 800872c:	200057e0 	.word	0x200057e0

08008730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <vTaskSuspendAll+0x18>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	4a03      	ldr	r2, [pc, #12]	; (8008748 <vTaskSuspendAll+0x18>)
 800873c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800873e:	bf00      	nop
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	20005804 	.word	0x20005804

0800874c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800875a:	4b42      	ldr	r3, [pc, #264]	; (8008864 <xTaskResumeAll+0x118>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <xTaskResumeAll+0x2c>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	603b      	str	r3, [r7, #0]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008778:	f001 f924 	bl	80099c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800877c:	4b39      	ldr	r3, [pc, #228]	; (8008864 <xTaskResumeAll+0x118>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	4a38      	ldr	r2, [pc, #224]	; (8008864 <xTaskResumeAll+0x118>)
 8008784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008786:	4b37      	ldr	r3, [pc, #220]	; (8008864 <xTaskResumeAll+0x118>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d162      	bne.n	8008854 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800878e:	4b36      	ldr	r3, [pc, #216]	; (8008868 <xTaskResumeAll+0x11c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d05e      	beq.n	8008854 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008796:	e02f      	b.n	80087f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008798:	4b34      	ldr	r3, [pc, #208]	; (800886c <xTaskResumeAll+0x120>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3318      	adds	r3, #24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe ff5f 	bl	8007668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe ff5a 	bl	8007668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b2d      	ldr	r3, [pc, #180]	; (8008870 <xTaskResumeAll+0x124>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d903      	bls.n	80087c8 <xTaskResumeAll+0x7c>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a2a      	ldr	r2, [pc, #168]	; (8008870 <xTaskResumeAll+0x124>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4a27      	ldr	r2, [pc, #156]	; (8008874 <xTaskResumeAll+0x128>)
 80087d6:	441a      	add	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fe fee5 	bl	80075ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e8:	4b23      	ldr	r3, [pc, #140]	; (8008878 <xTaskResumeAll+0x12c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d302      	bcc.n	80087f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80087f2:	4b22      	ldr	r3, [pc, #136]	; (800887c <xTaskResumeAll+0x130>)
 80087f4:	2201      	movs	r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087f8:	4b1c      	ldr	r3, [pc, #112]	; (800886c <xTaskResumeAll+0x120>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1cb      	bne.n	8008798 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008806:	f000 fb5f 	bl	8008ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800880a:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <xTaskResumeAll+0x134>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d010      	beq.n	8008838 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008816:	f000 f847 	bl	80088a8 <xTaskIncrementTick>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008820:	4b16      	ldr	r3, [pc, #88]	; (800887c <xTaskResumeAll+0x130>)
 8008822:	2201      	movs	r2, #1
 8008824:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3b01      	subs	r3, #1
 800882a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f1      	bne.n	8008816 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008832:	4b13      	ldr	r3, [pc, #76]	; (8008880 <xTaskResumeAll+0x134>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008838:	4b10      	ldr	r3, [pc, #64]	; (800887c <xTaskResumeAll+0x130>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008840:	2301      	movs	r3, #1
 8008842:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <xTaskResumeAll+0x138>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008854:	f001 f8e6 	bl	8009a24 <vPortExitCritical>

	return xAlreadyYielded;
 8008858:	68bb      	ldr	r3, [r7, #8]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20005804 	.word	0x20005804
 8008868:	200057dc 	.word	0x200057dc
 800886c:	2000579c 	.word	0x2000579c
 8008870:	200057e4 	.word	0x200057e4
 8008874:	2000530c 	.word	0x2000530c
 8008878:	20005308 	.word	0x20005308
 800887c:	200057f0 	.word	0x200057f0
 8008880:	200057ec 	.word	0x200057ec
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <xTaskGetTickCount+0x1c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008894:	687b      	ldr	r3, [r7, #4]
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	200057e0 	.word	0x200057e0

080088a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b2:	4b4f      	ldr	r3, [pc, #316]	; (80089f0 <xTaskIncrementTick+0x148>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 808f 	bne.w	80089da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088bc:	4b4d      	ldr	r3, [pc, #308]	; (80089f4 <xTaskIncrementTick+0x14c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3301      	adds	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088c4:	4a4b      	ldr	r2, [pc, #300]	; (80089f4 <xTaskIncrementTick+0x14c>)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d120      	bne.n	8008912 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088d0:	4b49      	ldr	r3, [pc, #292]	; (80089f8 <xTaskIncrementTick+0x150>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	603b      	str	r3, [r7, #0]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <xTaskIncrementTick+0x46>
 80088f0:	4b41      	ldr	r3, [pc, #260]	; (80089f8 <xTaskIncrementTick+0x150>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	4b41      	ldr	r3, [pc, #260]	; (80089fc <xTaskIncrementTick+0x154>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a3f      	ldr	r2, [pc, #252]	; (80089f8 <xTaskIncrementTick+0x150>)
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	4a3f      	ldr	r2, [pc, #252]	; (80089fc <xTaskIncrementTick+0x154>)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	4b3e      	ldr	r3, [pc, #248]	; (8008a00 <xTaskIncrementTick+0x158>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	4a3d      	ldr	r2, [pc, #244]	; (8008a00 <xTaskIncrementTick+0x158>)
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	f000 fadb 	bl	8008ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008912:	4b3c      	ldr	r3, [pc, #240]	; (8008a04 <xTaskIncrementTick+0x15c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	429a      	cmp	r2, r3
 800891a:	d349      	bcc.n	80089b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800891c:	4b36      	ldr	r3, [pc, #216]	; (80089f8 <xTaskIncrementTick+0x150>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008926:	4b37      	ldr	r3, [pc, #220]	; (8008a04 <xTaskIncrementTick+0x15c>)
 8008928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800892c:	601a      	str	r2, [r3, #0]
					break;
 800892e:	e03f      	b.n	80089b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008930:	4b31      	ldr	r3, [pc, #196]	; (80089f8 <xTaskIncrementTick+0x150>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	429a      	cmp	r2, r3
 8008946:	d203      	bcs.n	8008950 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008948:	4a2e      	ldr	r2, [pc, #184]	; (8008a04 <xTaskIncrementTick+0x15c>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800894e:	e02f      	b.n	80089b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3304      	adds	r3, #4
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe fe87 	bl	8007668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	3318      	adds	r3, #24
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fe7e 	bl	8007668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <xTaskIncrementTick+0x160>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d903      	bls.n	8008980 <xTaskIncrementTick+0xd8>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a22      	ldr	r2, [pc, #136]	; (8008a08 <xTaskIncrementTick+0x160>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4a1f      	ldr	r2, [pc, #124]	; (8008a0c <xTaskIncrementTick+0x164>)
 800898e:	441a      	add	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7fe fe09 	bl	80075ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <xTaskIncrementTick+0x168>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d3b8      	bcc.n	800891c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089aa:	2301      	movs	r3, #1
 80089ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ae:	e7b5      	b.n	800891c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <xTaskIncrementTick+0x168>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b6:	4915      	ldr	r1, [pc, #84]	; (8008a0c <xTaskIncrementTick+0x164>)
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d901      	bls.n	80089cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089cc:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <xTaskIncrementTick+0x16c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e004      	b.n	80089e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089da:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <xTaskIncrementTick+0x170>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3301      	adds	r3, #1
 80089e0:	4a0d      	ldr	r2, [pc, #52]	; (8008a18 <xTaskIncrementTick+0x170>)
 80089e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089e4:	697b      	ldr	r3, [r7, #20]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20005804 	.word	0x20005804
 80089f4:	200057e0 	.word	0x200057e0
 80089f8:	20005794 	.word	0x20005794
 80089fc:	20005798 	.word	0x20005798
 8008a00:	200057f4 	.word	0x200057f4
 8008a04:	200057fc 	.word	0x200057fc
 8008a08:	200057e4 	.word	0x200057e4
 8008a0c:	2000530c 	.word	0x2000530c
 8008a10:	20005308 	.word	0x20005308
 8008a14:	200057f0 	.word	0x200057f0
 8008a18:	200057ec 	.word	0x200057ec

08008a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a22:	4b2a      	ldr	r3, [pc, #168]	; (8008acc <vTaskSwitchContext+0xb0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a2a:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <vTaskSwitchContext+0xb4>)
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a30:	e046      	b.n	8008ac0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a32:	4b27      	ldr	r3, [pc, #156]	; (8008ad0 <vTaskSwitchContext+0xb4>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a38:	4b26      	ldr	r3, [pc, #152]	; (8008ad4 <vTaskSwitchContext+0xb8>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	e010      	b.n	8008a62 <vTaskSwitchContext+0x46>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <vTaskSwitchContext+0x40>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	607b      	str	r3, [r7, #4]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <vTaskSwitchContext+0x3e>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	491d      	ldr	r1, [pc, #116]	; (8008ad8 <vTaskSwitchContext+0xbc>)
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0e4      	beq.n	8008a40 <vTaskSwitchContext+0x24>
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <vTaskSwitchContext+0xbc>)
 8008a82:	4413      	add	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	605a      	str	r2, [r3, #4]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3308      	adds	r3, #8
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d104      	bne.n	8008aa6 <vTaskSwitchContext+0x8a>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	605a      	str	r2, [r3, #4]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	4a0b      	ldr	r2, [pc, #44]	; (8008adc <vTaskSwitchContext+0xc0>)
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4a08      	ldr	r2, [pc, #32]	; (8008ad4 <vTaskSwitchContext+0xb8>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <vTaskSwitchContext+0xc0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3354      	adds	r3, #84	; 0x54
 8008abc:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <vTaskSwitchContext+0xc4>)
 8008abe:	6013      	str	r3, [r2, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20005804 	.word	0x20005804
 8008ad0:	200057f0 	.word	0x200057f0
 8008ad4:	200057e4 	.word	0x200057e4
 8008ad8:	2000530c 	.word	0x2000530c
 8008adc:	20005308 	.word	0x20005308
 8008ae0:	2000004c 	.word	0x2000004c

08008ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <vTaskPlaceOnEventList+0x44>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3318      	adds	r3, #24
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fe fd6f 	bl	80075f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b18:	2101      	movs	r1, #1
 8008b1a:	6838      	ldr	r0, [r7, #0]
 8008b1c:	f000 fa80 	bl	8009020 <prvAddCurrentTaskToDelayedList>
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20005308 	.word	0x20005308

08008b2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10a      	bne.n	8008b54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	617b      	str	r3, [r7, #20]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3318      	adds	r3, #24
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7fe fd26 	bl	80075ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	68b8      	ldr	r0, [r7, #8]
 8008b72:	f000 fa55 	bl	8009020 <prvAddCurrentTaskToDelayedList>
	}
 8008b76:	bf00      	nop
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20005308 	.word	0x20005308

08008b84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60fb      	str	r3, [r7, #12]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3318      	adds	r3, #24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fd57 	bl	8007668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bba:	4b1e      	ldr	r3, [pc, #120]	; (8008c34 <xTaskRemoveFromEventList+0xb0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11d      	bne.n	8008bfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fd4e 	bl	8007668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <xTaskRemoveFromEventList+0xb4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <xTaskRemoveFromEventList+0x5c>
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <xTaskRemoveFromEventList+0xb4>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4a13      	ldr	r2, [pc, #76]	; (8008c3c <xTaskRemoveFromEventList+0xb8>)
 8008bee:	441a      	add	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe fcd9 	bl	80075ae <vListInsertEnd>
 8008bfc:	e005      	b.n	8008c0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	3318      	adds	r3, #24
 8008c02:	4619      	mov	r1, r3
 8008c04:	480e      	ldr	r0, [pc, #56]	; (8008c40 <xTaskRemoveFromEventList+0xbc>)
 8008c06:	f7fe fcd2 	bl	80075ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <xTaskRemoveFromEventList+0xc0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d905      	bls.n	8008c24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <xTaskRemoveFromEventList+0xc4>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e001      	b.n	8008c28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c28:	697b      	ldr	r3, [r7, #20]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20005804 	.word	0x20005804
 8008c38:	200057e4 	.word	0x200057e4
 8008c3c:	2000530c 	.word	0x2000530c
 8008c40:	2000579c 	.word	0x2000579c
 8008c44:	20005308 	.word	0x20005308
 8008c48:	200057f0 	.word	0x200057f0

08008c4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <vTaskInternalSetTimeOutState+0x24>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <vTaskInternalSetTimeOutState+0x28>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	200057f4 	.word	0x200057f4
 8008c74:	200057e0 	.word	0x200057e0

08008c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	613b      	str	r3, [r7, #16]
}
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	60fb      	str	r3, [r7, #12]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008cba:	f000 fe83 	bl	80099c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cbe:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <xTaskCheckForTimeOut+0xbc>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd6:	d102      	bne.n	8008cde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e023      	b.n	8008d26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b15      	ldr	r3, [pc, #84]	; (8008d38 <xTaskCheckForTimeOut+0xc0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d007      	beq.n	8008cfa <xTaskCheckForTimeOut+0x82>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	e015      	b.n	8008d26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d20b      	bcs.n	8008d1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	1ad2      	subs	r2, r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff ff9b 	bl	8008c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	e004      	b.n	8008d26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d26:	f000 fe7d 	bl	8009a24 <vPortExitCritical>

	return xReturn;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3720      	adds	r7, #32
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200057e0 	.word	0x200057e0
 8008d38:	200057f4 	.word	0x200057f4

08008d3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d40:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <vTaskMissedYield+0x14>)
 8008d42:	2201      	movs	r2, #1
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	bf00      	nop
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	200057f0 	.word	0x200057f0

08008d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d5c:	f000 f852 	bl	8008e04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <prvIdleTask+0x28>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d9f9      	bls.n	8008d5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <prvIdleTask+0x2c>)
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d78:	e7f0      	b.n	8008d5c <prvIdleTask+0x8>
 8008d7a:	bf00      	nop
 8008d7c:	2000530c 	.word	0x2000530c
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	607b      	str	r3, [r7, #4]
 8008d8e:	e00c      	b.n	8008daa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <prvInitialiseTaskLists+0x60>)
 8008d9c:	4413      	add	r3, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fbd8 	bl	8007554 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3301      	adds	r3, #1
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b37      	cmp	r3, #55	; 0x37
 8008dae:	d9ef      	bls.n	8008d90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008db0:	480d      	ldr	r0, [pc, #52]	; (8008de8 <prvInitialiseTaskLists+0x64>)
 8008db2:	f7fe fbcf 	bl	8007554 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008db6:	480d      	ldr	r0, [pc, #52]	; (8008dec <prvInitialiseTaskLists+0x68>)
 8008db8:	f7fe fbcc 	bl	8007554 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dbc:	480c      	ldr	r0, [pc, #48]	; (8008df0 <prvInitialiseTaskLists+0x6c>)
 8008dbe:	f7fe fbc9 	bl	8007554 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dc2:	480c      	ldr	r0, [pc, #48]	; (8008df4 <prvInitialiseTaskLists+0x70>)
 8008dc4:	f7fe fbc6 	bl	8007554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dc8:	480b      	ldr	r0, [pc, #44]	; (8008df8 <prvInitialiseTaskLists+0x74>)
 8008dca:	f7fe fbc3 	bl	8007554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <prvInitialiseTaskLists+0x78>)
 8008dd0:	4a05      	ldr	r2, [pc, #20]	; (8008de8 <prvInitialiseTaskLists+0x64>)
 8008dd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <prvInitialiseTaskLists+0x7c>)
 8008dd6:	4a05      	ldr	r2, [pc, #20]	; (8008dec <prvInitialiseTaskLists+0x68>)
 8008dd8:	601a      	str	r2, [r3, #0]
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	2000530c 	.word	0x2000530c
 8008de8:	2000576c 	.word	0x2000576c
 8008dec:	20005780 	.word	0x20005780
 8008df0:	2000579c 	.word	0x2000579c
 8008df4:	200057b0 	.word	0x200057b0
 8008df8:	200057c8 	.word	0x200057c8
 8008dfc:	20005794 	.word	0x20005794
 8008e00:	20005798 	.word	0x20005798

08008e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e0a:	e019      	b.n	8008e40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e0c:	f000 fdda 	bl	80099c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e10:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <prvCheckTasksWaitingTermination+0x50>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fc23 	bl	8007668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e22:	4b0d      	ldr	r3, [pc, #52]	; (8008e58 <prvCheckTasksWaitingTermination+0x54>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	4a0b      	ldr	r2, [pc, #44]	; (8008e58 <prvCheckTasksWaitingTermination+0x54>)
 8008e2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <prvCheckTasksWaitingTermination+0x58>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <prvCheckTasksWaitingTermination+0x58>)
 8008e34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e36:	f000 fdf5 	bl	8009a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f810 	bl	8008e60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <prvCheckTasksWaitingTermination+0x58>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e1      	bne.n	8008e0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	200057b0 	.word	0x200057b0
 8008e58:	200057dc 	.word	0x200057dc
 8008e5c:	200057c4 	.word	0x200057c4

08008e60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3354      	adds	r3, #84	; 0x54
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 fb07 	bl	800a480 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d108      	bne.n	8008e8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 ff65 	bl	8009d50 <vPortFree>
				vPortFree( pxTCB );
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 ff62 	bl	8009d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e8c:	e018      	b.n	8008ec0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d103      	bne.n	8008ea0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 ff59 	bl	8009d50 <vPortFree>
	}
 8008e9e:	e00f      	b.n	8008ec0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d00a      	beq.n	8008ec0 <prvDeleteTCB+0x60>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	60fb      	str	r3, [r7, #12]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <prvDeleteTCB+0x5e>
	}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <prvResetNextTaskUnblockTime+0x38>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <prvResetNextTaskUnblockTime+0x3c>)
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ede:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ee0:	e008      	b.n	8008ef4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee2:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <prvResetNextTaskUnblockTime+0x38>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4a04      	ldr	r2, [pc, #16]	; (8008f04 <prvResetNextTaskUnblockTime+0x3c>)
 8008ef2:	6013      	str	r3, [r2, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	20005794 	.word	0x20005794
 8008f04:	200057fc 	.word	0x200057fc

08008f08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f0e:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <xTaskGetSchedulerState+0x34>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f16:	2301      	movs	r3, #1
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	e008      	b.n	8008f2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1c:	4b08      	ldr	r3, [pc, #32]	; (8008f40 <xTaskGetSchedulerState+0x38>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f24:	2302      	movs	r3, #2
 8008f26:	607b      	str	r3, [r7, #4]
 8008f28:	e001      	b.n	8008f2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f2e:	687b      	ldr	r3, [r7, #4]
	}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	200057e8 	.word	0x200057e8
 8008f40:	20005804 	.word	0x20005804

08008f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d056      	beq.n	8009008 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f5a:	4b2e      	ldr	r3, [pc, #184]	; (8009014 <xTaskPriorityDisinherit+0xd0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d00a      	beq.n	8008f7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	60fb      	str	r3, [r7, #12]
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60bb      	str	r3, [r7, #8]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9c:	1e5a      	subs	r2, r3, #1
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d02c      	beq.n	8009008 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d128      	bne.n	8009008 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fb54 	bl	8007668 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <xTaskPriorityDisinherit+0xd4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d903      	bls.n	8008fe8 <xTaskPriorityDisinherit+0xa4>
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	4a0c      	ldr	r2, [pc, #48]	; (8009018 <xTaskPriorityDisinherit+0xd4>)
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4a09      	ldr	r2, [pc, #36]	; (800901c <xTaskPriorityDisinherit+0xd8>)
 8008ff6:	441a      	add	r2, r3
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f7fe fad5 	bl	80075ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009004:	2301      	movs	r3, #1
 8009006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009008:	697b      	ldr	r3, [r7, #20]
	}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20005308 	.word	0x20005308
 8009018:	200057e4 	.word	0x200057e4
 800901c:	2000530c 	.word	0x2000530c

08009020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800902a:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009030:	4b20      	ldr	r3, [pc, #128]	; (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3304      	adds	r3, #4
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fb16 	bl	8007668 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009042:	d10a      	bne.n	800905a <prvAddCurrentTaskToDelayedList+0x3a>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d007      	beq.n	800905a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800904a:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4819      	ldr	r0, [pc, #100]	; (80090b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009054:	f7fe faab 	bl	80075ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009058:	e026      	b.n	80090a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	429a      	cmp	r2, r3
 8009070:	d209      	bcs.n	8009086 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fab9 	bl	80075f6 <vListInsert>
}
 8009084:	e010      	b.n	80090a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f7fe faaf 	bl	80075f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009098:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d202      	bcs.n	80090a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6013      	str	r3, [r2, #0]
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200057e0 	.word	0x200057e0
 80090b4:	20005308 	.word	0x20005308
 80090b8:	200057c8 	.word	0x200057c8
 80090bc:	20005798 	.word	0x20005798
 80090c0:	20005794 	.word	0x20005794
 80090c4:	200057fc 	.word	0x200057fc

080090c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08a      	sub	sp, #40	; 0x28
 80090cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090d2:	f000 fb07 	bl	80096e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090d6:	4b1c      	ldr	r3, [pc, #112]	; (8009148 <xTimerCreateTimerTask+0x80>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d021      	beq.n	8009122 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090e6:	1d3a      	adds	r2, r7, #4
 80090e8:	f107 0108 	add.w	r1, r7, #8
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fa15 	bl	8007520 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	9202      	str	r2, [sp, #8]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	2302      	movs	r3, #2
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	2300      	movs	r3, #0
 8009106:	460a      	mov	r2, r1
 8009108:	4910      	ldr	r1, [pc, #64]	; (800914c <xTimerCreateTimerTask+0x84>)
 800910a:	4811      	ldr	r0, [pc, #68]	; (8009150 <xTimerCreateTimerTask+0x88>)
 800910c:	f7ff f8b4 	bl	8008278 <xTaskCreateStatic>
 8009110:	4603      	mov	r3, r0
 8009112:	4a10      	ldr	r2, [pc, #64]	; (8009154 <xTimerCreateTimerTask+0x8c>)
 8009114:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <xTimerCreateTimerTask+0x8c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800911e:	2301      	movs	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	613b      	str	r3, [r7, #16]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800913e:	697b      	ldr	r3, [r7, #20]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20005838 	.word	0x20005838
 800914c:	0800af50 	.word	0x0800af50
 8009150:	0800928d 	.word	0x0800928d
 8009154:	2000583c 	.word	0x2000583c

08009158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	; 0x28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009166:	2300      	movs	r3, #0
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	623b      	str	r3, [r7, #32]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009186:	4b1a      	ldr	r3, [pc, #104]	; (80091f0 <xTimerGenericCommand+0x98>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d02a      	beq.n	80091e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b05      	cmp	r3, #5
 800919e:	dc18      	bgt.n	80091d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091a0:	f7ff feb2 	bl	8008f08 <xTaskGetSchedulerState>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d109      	bne.n	80091be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091aa:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <xTimerGenericCommand+0x98>)
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	f107 0110 	add.w	r1, r7, #16
 80091b2:	2300      	movs	r3, #0
 80091b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b6:	f7fe fc29 	bl	8007a0c <xQueueGenericSend>
 80091ba:	6278      	str	r0, [r7, #36]	; 0x24
 80091bc:	e012      	b.n	80091e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <xTimerGenericCommand+0x98>)
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	f107 0110 	add.w	r1, r7, #16
 80091c6:	2300      	movs	r3, #0
 80091c8:	2200      	movs	r2, #0
 80091ca:	f7fe fc1f 	bl	8007a0c <xQueueGenericSend>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24
 80091d0:	e008      	b.n	80091e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <xTimerGenericCommand+0x98>)
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f107 0110 	add.w	r1, r7, #16
 80091da:	2300      	movs	r3, #0
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	f7fe fd13 	bl	8007c08 <xQueueGenericSendFromISR>
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3728      	adds	r7, #40	; 0x28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	20005838 	.word	0x20005838

080091f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091fe:	4b22      	ldr	r3, [pc, #136]	; (8009288 <prvProcessExpiredTimer+0x94>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	3304      	adds	r3, #4
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fa2b 	bl	8007668 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d022      	beq.n	8009266 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	699a      	ldr	r2, [r3, #24]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	18d1      	adds	r1, r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	f000 f8d1 	bl	80093d4 <prvInsertTimerInActiveList>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d01f      	beq.n	8009278 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009238:	2300      	movs	r3, #0
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	2300      	movs	r3, #0
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	2100      	movs	r1, #0
 8009242:	6978      	ldr	r0, [r7, #20]
 8009244:	f7ff ff88 	bl	8009158 <xTimerGenericCommand>
 8009248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d113      	bne.n	8009278 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60fb      	str	r3, [r7, #12]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800926c:	f023 0301 	bic.w	r3, r3, #1
 8009270:	b2da      	uxtb	r2, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	6978      	ldr	r0, [r7, #20]
 800927e:	4798      	blx	r3
}
 8009280:	bf00      	nop
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20005830 	.word	0x20005830

0800928c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009294:	f107 0308 	add.w	r3, r7, #8
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f857 	bl	800934c <prvGetNextExpireTime>
 800929e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4619      	mov	r1, r3
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f803 	bl	80092b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092aa:	f000 f8d5 	bl	8009458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092ae:	e7f1      	b.n	8009294 <prvTimerTask+0x8>

080092b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092ba:	f7ff fa39 	bl	8008730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092be:	f107 0308 	add.w	r3, r7, #8
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f866 	bl	8009394 <prvSampleTimeNow>
 80092c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d130      	bne.n	8009332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <prvProcessTimerOrBlockTask+0x3c>
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d806      	bhi.n	80092ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092de:	f7ff fa35 	bl	800874c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff ff85 	bl	80091f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092ea:	e024      	b.n	8009336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <prvProcessTimerOrBlockTask+0x90>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <prvProcessTimerOrBlockTask+0x50>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <prvProcessTimerOrBlockTask+0x52>
 8009300:	2300      	movs	r3, #0
 8009302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <prvProcessTimerOrBlockTask+0x94>)
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	4619      	mov	r1, r3
 8009312:	f7fe ff7d 	bl	8008210 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009316:	f7ff fa19 	bl	800874c <xTaskResumeAll>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009320:	4b09      	ldr	r3, [pc, #36]	; (8009348 <prvProcessTimerOrBlockTask+0x98>)
 8009322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	f3bf 8f6f 	isb	sy
}
 8009330:	e001      	b.n	8009336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009332:	f7ff fa0b 	bl	800874c <xTaskResumeAll>
}
 8009336:	bf00      	nop
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20005834 	.word	0x20005834
 8009344:	20005838 	.word	0x20005838
 8009348:	e000ed04 	.word	0xe000ed04

0800934c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009354:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <prvGetNextExpireTime+0x44>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <prvGetNextExpireTime+0x16>
 800935e:	2201      	movs	r2, #1
 8009360:	e000      	b.n	8009364 <prvGetNextExpireTime+0x18>
 8009362:	2200      	movs	r2, #0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <prvGetNextExpireTime+0x44>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60fb      	str	r3, [r7, #12]
 800937a:	e001      	b.n	8009380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009380:	68fb      	ldr	r3, [r7, #12]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	20005830 	.word	0x20005830

08009394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800939c:	f7ff fa74 	bl	8008888 <xTaskGetTickCount>
 80093a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <prvSampleTimeNow+0x3c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d205      	bcs.n	80093b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093ac:	f000 f936 	bl	800961c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e002      	b.n	80093be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093be:	4a04      	ldr	r2, [pc, #16]	; (80093d0 <prvSampleTimeNow+0x3c>)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093c4:	68fb      	ldr	r3, [r7, #12]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20005840 	.word	0x20005840

080093d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d812      	bhi.n	8009420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	429a      	cmp	r2, r3
 8009406:	d302      	bcc.n	800940e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e01b      	b.n	8009446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800940e:	4b10      	ldr	r3, [pc, #64]	; (8009450 <prvInsertTimerInActiveList+0x7c>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3304      	adds	r3, #4
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f7fe f8ec 	bl	80075f6 <vListInsert>
 800941e:	e012      	b.n	8009446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d206      	bcs.n	8009436 <prvInsertTimerInActiveList+0x62>
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d302      	bcc.n	8009436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	e007      	b.n	8009446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009436:	4b07      	ldr	r3, [pc, #28]	; (8009454 <prvInsertTimerInActiveList+0x80>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3304      	adds	r3, #4
 800943e:	4619      	mov	r1, r3
 8009440:	4610      	mov	r0, r2
 8009442:	f7fe f8d8 	bl	80075f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20005834 	.word	0x20005834
 8009454:	20005830 	.word	0x20005830

08009458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08e      	sub	sp, #56	; 0x38
 800945c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800945e:	e0ca      	b.n	80095f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	da18      	bge.n	8009498 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009466:	1d3b      	adds	r3, r7, #4
 8009468:	3304      	adds	r3, #4
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10a      	bne.n	8009488 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	61fb      	str	r3, [r7, #28]
}
 8009484:	bf00      	nop
 8009486:	e7fe      	b.n	8009486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800948e:	6850      	ldr	r0, [r2, #4]
 8009490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009492:	6892      	ldr	r2, [r2, #8]
 8009494:	4611      	mov	r1, r2
 8009496:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f2c0 80aa 	blt.w	80095f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe f8d9 	bl	8007668 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094b6:	463b      	mov	r3, r7
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff ff6b 	bl	8009394 <prvSampleTimeNow>
 80094be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	f200 8097 	bhi.w	80095f6 <prvProcessReceivedCommands+0x19e>
 80094c8:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <prvProcessReceivedCommands+0x78>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	080094f9 	.word	0x080094f9
 80094d4:	080094f9 	.word	0x080094f9
 80094d8:	080094f9 	.word	0x080094f9
 80094dc:	0800956d 	.word	0x0800956d
 80094e0:	08009581 	.word	0x08009581
 80094e4:	080095cb 	.word	0x080095cb
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	080094f9 	.word	0x080094f9
 80094f0:	0800956d 	.word	0x0800956d
 80094f4:	08009581 	.word	0x08009581
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094fe:	f043 0301 	orr.w	r3, r3, #1
 8009502:	b2da      	uxtb	r2, r3
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	18d1      	adds	r1, r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009518:	f7ff ff5c 	bl	80093d4 <prvInsertTimerInActiveList>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d069      	beq.n	80095f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d05e      	beq.n	80095f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	441a      	add	r2, r3
 8009540:	2300      	movs	r3, #0
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	2300      	movs	r3, #0
 8009546:	2100      	movs	r1, #0
 8009548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954a:	f7ff fe05 	bl	8009158 <xTimerGenericCommand>
 800954e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d14f      	bne.n	80095f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	61bb      	str	r3, [r7, #24]
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009572:	f023 0301 	bic.w	r3, r3, #1
 8009576:	b2da      	uxtb	r2, r3
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800957e:	e03a      	b.n	80095f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009586:	f043 0301 	orr.w	r3, r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	617b      	str	r3, [r7, #20]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	18d1      	adds	r1, r2, r3
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c4:	f7ff ff06 	bl	80093d4 <prvInsertTimerInActiveList>
					break;
 80095c8:	e015      	b.n	80095f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095da:	f000 fbb9 	bl	8009d50 <vPortFree>
 80095de:	e00a      	b.n	80095f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e6:	f023 0301 	bic.w	r3, r3, #1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095f2:	e000      	b.n	80095f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095f6:	4b08      	ldr	r3, [pc, #32]	; (8009618 <prvProcessReceivedCommands+0x1c0>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	1d39      	adds	r1, r7, #4
 80095fc:	2200      	movs	r2, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fb9e 	bl	8007d40 <xQueueReceive>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	f47f af2a 	bne.w	8009460 <prvProcessReceivedCommands+0x8>
	}
}
 800960c:	bf00      	nop
 800960e:	bf00      	nop
 8009610:	3730      	adds	r7, #48	; 0x30
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20005838 	.word	0x20005838

0800961c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009622:	e048      	b.n	80096b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009624:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <prvSwitchTimerLists+0xc0>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800962e:	4b2b      	ldr	r3, [pc, #172]	; (80096dc <prvSwitchTimerLists+0xc0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3304      	adds	r3, #4
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe f813 	bl	8007668 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b00      	cmp	r3, #0
 8009656:	d02e      	beq.n	80096b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4413      	add	r3, r2
 8009660:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	d90e      	bls.n	8009688 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009676:	4b19      	ldr	r3, [pc, #100]	; (80096dc <prvSwitchTimerLists+0xc0>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3304      	adds	r3, #4
 800967e:	4619      	mov	r1, r3
 8009680:	4610      	mov	r0, r2
 8009682:	f7fd ffb8 	bl	80075f6 <vListInsert>
 8009686:	e016      	b.n	80096b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009688:	2300      	movs	r3, #0
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	2300      	movs	r3, #0
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	2100      	movs	r1, #0
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff fd60 	bl	8009158 <xTimerGenericCommand>
 8009698:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	603b      	str	r3, [r7, #0]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <prvSwitchTimerLists+0xc0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1b1      	bne.n	8009624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <prvSwitchTimerLists+0xc0>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <prvSwitchTimerLists+0xc4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a04      	ldr	r2, [pc, #16]	; (80096dc <prvSwitchTimerLists+0xc0>)
 80096cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096ce:	4a04      	ldr	r2, [pc, #16]	; (80096e0 <prvSwitchTimerLists+0xc4>)
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	6013      	str	r3, [r2, #0]
}
 80096d4:	bf00      	nop
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20005830 	.word	0x20005830
 80096e0:	20005834 	.word	0x20005834

080096e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096ea:	f000 f96b 	bl	80099c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096ee:	4b15      	ldr	r3, [pc, #84]	; (8009744 <prvCheckForValidListAndQueue+0x60>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d120      	bne.n	8009738 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096f6:	4814      	ldr	r0, [pc, #80]	; (8009748 <prvCheckForValidListAndQueue+0x64>)
 80096f8:	f7fd ff2c 	bl	8007554 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096fc:	4813      	ldr	r0, [pc, #76]	; (800974c <prvCheckForValidListAndQueue+0x68>)
 80096fe:	f7fd ff29 	bl	8007554 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009702:	4b13      	ldr	r3, [pc, #76]	; (8009750 <prvCheckForValidListAndQueue+0x6c>)
 8009704:	4a10      	ldr	r2, [pc, #64]	; (8009748 <prvCheckForValidListAndQueue+0x64>)
 8009706:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009708:	4b12      	ldr	r3, [pc, #72]	; (8009754 <prvCheckForValidListAndQueue+0x70>)
 800970a:	4a10      	ldr	r2, [pc, #64]	; (800974c <prvCheckForValidListAndQueue+0x68>)
 800970c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800970e:	2300      	movs	r3, #0
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	4b11      	ldr	r3, [pc, #68]	; (8009758 <prvCheckForValidListAndQueue+0x74>)
 8009714:	4a11      	ldr	r2, [pc, #68]	; (800975c <prvCheckForValidListAndQueue+0x78>)
 8009716:	2110      	movs	r1, #16
 8009718:	200a      	movs	r0, #10
 800971a:	f7fe f837 	bl	800778c <xQueueGenericCreateStatic>
 800971e:	4603      	mov	r3, r0
 8009720:	4a08      	ldr	r2, [pc, #32]	; (8009744 <prvCheckForValidListAndQueue+0x60>)
 8009722:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <prvCheckForValidListAndQueue+0x60>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d005      	beq.n	8009738 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <prvCheckForValidListAndQueue+0x60>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	490b      	ldr	r1, [pc, #44]	; (8009760 <prvCheckForValidListAndQueue+0x7c>)
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fd18 	bl	8008168 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009738:	f000 f974 	bl	8009a24 <vPortExitCritical>
}
 800973c:	bf00      	nop
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20005838 	.word	0x20005838
 8009748:	20005808 	.word	0x20005808
 800974c:	2000581c 	.word	0x2000581c
 8009750:	20005830 	.word	0x20005830
 8009754:	20005834 	.word	0x20005834
 8009758:	200058e4 	.word	0x200058e4
 800975c:	20005844 	.word	0x20005844
 8009760:	0800af58 	.word	0x0800af58

08009764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3b04      	subs	r3, #4
 8009774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800977c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b04      	subs	r3, #4
 8009782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f023 0201 	bic.w	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b04      	subs	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009794:	4a0c      	ldr	r2, [pc, #48]	; (80097c8 <pxPortInitialiseStack+0x64>)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3b14      	subs	r3, #20
 800979e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f06f 0202 	mvn.w	r2, #2
 80097b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3b20      	subs	r3, #32
 80097b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	080097cd 	.word	0x080097cd

080097cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097d6:	4b12      	ldr	r3, [pc, #72]	; (8009820 <prvTaskExitError+0x54>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097de:	d00a      	beq.n	80097f6 <prvTaskExitError+0x2a>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <prvTaskExitError+0x28>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	60bb      	str	r3, [r7, #8]
}
 8009808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800980a:	bf00      	nop
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0fc      	beq.n	800980c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000048 	.word	0x20000048
	...

08009830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009830:	4b07      	ldr	r3, [pc, #28]	; (8009850 <pxCurrentTCBConst2>)
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	6808      	ldr	r0, [r1, #0]
 8009836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983a:	f380 8809 	msr	PSP, r0
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f04f 0000 	mov.w	r0, #0
 8009846:	f380 8811 	msr	BASEPRI, r0
 800984a:	4770      	bx	lr
 800984c:	f3af 8000 	nop.w

08009850 <pxCurrentTCBConst2>:
 8009850:	20005308 	.word	0x20005308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop

08009858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009858:	4808      	ldr	r0, [pc, #32]	; (800987c <prvPortStartFirstTask+0x24>)
 800985a:	6800      	ldr	r0, [r0, #0]
 800985c:	6800      	ldr	r0, [r0, #0]
 800985e:	f380 8808 	msr	MSP, r0
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8814 	msr	CONTROL, r0
 800986a:	b662      	cpsie	i
 800986c:	b661      	cpsie	f
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	df00      	svc	0
 8009878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800987a:	bf00      	nop
 800987c:	e000ed08 	.word	0xe000ed08

08009880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009886:	4b46      	ldr	r3, [pc, #280]	; (80099a0 <xPortStartScheduler+0x120>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a46      	ldr	r2, [pc, #280]	; (80099a4 <xPortStartScheduler+0x124>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d10a      	bne.n	80098a6 <xPortStartScheduler+0x26>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	613b      	str	r3, [r7, #16]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098a6:	4b3e      	ldr	r3, [pc, #248]	; (80099a0 <xPortStartScheduler+0x120>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a3f      	ldr	r2, [pc, #252]	; (80099a8 <xPortStartScheduler+0x128>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10a      	bne.n	80098c6 <xPortStartScheduler+0x46>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	60fb      	str	r3, [r7, #12]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098c6:	4b39      	ldr	r3, [pc, #228]	; (80099ac <xPortStartScheduler+0x12c>)
 80098c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	22ff      	movs	r2, #255	; 0xff
 80098d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <xPortStartScheduler+0x130>)
 80098ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098ee:	4b31      	ldr	r3, [pc, #196]	; (80099b4 <xPortStartScheduler+0x134>)
 80098f0:	2207      	movs	r2, #7
 80098f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098f4:	e009      	b.n	800990a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80098f6:	4b2f      	ldr	r3, [pc, #188]	; (80099b4 <xPortStartScheduler+0x134>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	4a2d      	ldr	r2, [pc, #180]	; (80099b4 <xPortStartScheduler+0x134>)
 80098fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	b2db      	uxtb	r3, r3
 8009908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009912:	2b80      	cmp	r3, #128	; 0x80
 8009914:	d0ef      	beq.n	80098f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009916:	4b27      	ldr	r3, [pc, #156]	; (80099b4 <xPortStartScheduler+0x134>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f1c3 0307 	rsb	r3, r3, #7
 800991e:	2b04      	cmp	r3, #4
 8009920:	d00a      	beq.n	8009938 <xPortStartScheduler+0xb8>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	60bb      	str	r3, [r7, #8]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009938:	4b1e      	ldr	r3, [pc, #120]	; (80099b4 <xPortStartScheduler+0x134>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <xPortStartScheduler+0x134>)
 8009940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009942:	4b1c      	ldr	r3, [pc, #112]	; (80099b4 <xPortStartScheduler+0x134>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800994a:	4a1a      	ldr	r2, [pc, #104]	; (80099b4 <xPortStartScheduler+0x134>)
 800994c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	b2da      	uxtb	r2, r3
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009956:	4b18      	ldr	r3, [pc, #96]	; (80099b8 <xPortStartScheduler+0x138>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a17      	ldr	r2, [pc, #92]	; (80099b8 <xPortStartScheduler+0x138>)
 800995c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009962:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <xPortStartScheduler+0x138>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a14      	ldr	r2, [pc, #80]	; (80099b8 <xPortStartScheduler+0x138>)
 8009968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800996c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800996e:	f000 f8dd 	bl	8009b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009972:	4b12      	ldr	r3, [pc, #72]	; (80099bc <xPortStartScheduler+0x13c>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009978:	f000 f8fc 	bl	8009b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800997c:	4b10      	ldr	r3, [pc, #64]	; (80099c0 <xPortStartScheduler+0x140>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0f      	ldr	r2, [pc, #60]	; (80099c0 <xPortStartScheduler+0x140>)
 8009982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009988:	f7ff ff66 	bl	8009858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800998c:	f7ff f846 	bl	8008a1c <vTaskSwitchContext>
	prvTaskExitError();
 8009990:	f7ff ff1c 	bl	80097cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	e000ed00 	.word	0xe000ed00
 80099a4:	410fc271 	.word	0x410fc271
 80099a8:	410fc270 	.word	0x410fc270
 80099ac:	e000e400 	.word	0xe000e400
 80099b0:	20005934 	.word	0x20005934
 80099b4:	20005938 	.word	0x20005938
 80099b8:	e000ed20 	.word	0xe000ed20
 80099bc:	20000048 	.word	0x20000048
 80099c0:	e000ef34 	.word	0xe000ef34

080099c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	607b      	str	r3, [r7, #4]
}
 80099dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099de:	4b0f      	ldr	r3, [pc, #60]	; (8009a1c <vPortEnterCritical+0x58>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3301      	adds	r3, #1
 80099e4:	4a0d      	ldr	r2, [pc, #52]	; (8009a1c <vPortEnterCritical+0x58>)
 80099e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099e8:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <vPortEnterCritical+0x58>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d10f      	bne.n	8009a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099f0:	4b0b      	ldr	r3, [pc, #44]	; (8009a20 <vPortEnterCritical+0x5c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	603b      	str	r3, [r7, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <vPortEnterCritical+0x4a>
	}
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20000048 	.word	0x20000048
 8009a20:	e000ed04 	.word	0xe000ed04

08009a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a2a:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <vPortExitCritical+0x50>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <vPortExitCritical+0x24>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	607b      	str	r3, [r7, #4]
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <vPortExitCritical+0x50>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4a09      	ldr	r2, [pc, #36]	; (8009a74 <vPortExitCritical+0x50>)
 8009a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a52:	4b08      	ldr	r3, [pc, #32]	; (8009a74 <vPortExitCritical+0x50>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d105      	bne.n	8009a66 <vPortExitCritical+0x42>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	f383 8811 	msr	BASEPRI, r3
}
 8009a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a66:	bf00      	nop
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000048 	.word	0x20000048
	...

08009a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a80:	f3ef 8009 	mrs	r0, PSP
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	4b15      	ldr	r3, [pc, #84]	; (8009ae0 <pxCurrentTCBConst>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f01e 0f10 	tst.w	lr, #16
 8009a90:	bf08      	it	eq
 8009a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9a:	6010      	str	r0, [r2, #0]
 8009a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009aa4:	f380 8811 	msr	BASEPRI, r0
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f7fe ffb4 	bl	8008a1c <vTaskSwitchContext>
 8009ab4:	f04f 0000 	mov.w	r0, #0
 8009ab8:	f380 8811 	msr	BASEPRI, r0
 8009abc:	bc09      	pop	{r0, r3}
 8009abe:	6819      	ldr	r1, [r3, #0]
 8009ac0:	6808      	ldr	r0, [r1, #0]
 8009ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac6:	f01e 0f10 	tst.w	lr, #16
 8009aca:	bf08      	it	eq
 8009acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ad0:	f380 8809 	msr	PSP, r0
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	f3af 8000 	nop.w

08009ae0 <pxCurrentTCBConst>:
 8009ae0:	20005308 	.word	0x20005308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop

08009ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	607b      	str	r3, [r7, #4]
}
 8009b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b02:	f7fe fed1 	bl	80088a8 <xTaskIncrementTick>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <xPortSysTickHandler+0x40>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
}
 8009b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <vPortSetupTimerInterrupt+0x38>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <vPortSetupTimerInterrupt+0x3c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a0a      	ldr	r2, [pc, #40]	; (8009b6c <vPortSetupTimerInterrupt+0x40>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	099b      	lsrs	r3, r3, #6
 8009b48:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <vPortSetupTimerInterrupt+0x44>)
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b4e:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b50:	2207      	movs	r2, #7
 8009b52:	601a      	str	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	e000e010 	.word	0xe000e010
 8009b64:	e000e018 	.word	0xe000e018
 8009b68:	2000002c 	.word	0x2000002c
 8009b6c:	10624dd3 	.word	0x10624dd3
 8009b70:	e000e014 	.word	0xe000e014

08009b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b84 <vPortEnableVFP+0x10>
 8009b78:	6801      	ldr	r1, [r0, #0]
 8009b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b7e:	6001      	str	r1, [r0, #0]
 8009b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b82:	bf00      	nop
 8009b84:	e000ed88 	.word	0xe000ed88

08009b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b8e:	f3ef 8305 	mrs	r3, IPSR
 8009b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b0f      	cmp	r3, #15
 8009b98:	d914      	bls.n	8009bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b9a:	4a17      	ldr	r2, [pc, #92]	; (8009bf8 <vPortValidateInterruptPriority+0x70>)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ba4:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <vPortValidateInterruptPriority+0x74>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	7afa      	ldrb	r2, [r7, #11]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d20a      	bcs.n	8009bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	607b      	str	r3, [r7, #4]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bc4:	4b0e      	ldr	r3, [pc, #56]	; (8009c00 <vPortValidateInterruptPriority+0x78>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <vPortValidateInterruptPriority+0x7c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d90a      	bls.n	8009bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	603b      	str	r3, [r7, #0]
}
 8009be6:	bf00      	nop
 8009be8:	e7fe      	b.n	8009be8 <vPortValidateInterruptPriority+0x60>
	}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	e000e3f0 	.word	0xe000e3f0
 8009bfc:	20005934 	.word	0x20005934
 8009c00:	e000ed0c 	.word	0xe000ed0c
 8009c04:	20005938 	.word	0x20005938

08009c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8009c14:	4b48      	ldr	r3, [pc, #288]	; (8009d38 <pvPortMalloc+0x130>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <pvPortMalloc+0x2a>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60fb      	str	r3, [r7, #12]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8009c32:	f7fe fd7d 	bl	8008730 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c36:	4b41      	ldr	r3, [pc, #260]	; (8009d3c <pvPortMalloc+0x134>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d172      	bne.n	8009d28 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00d      	beq.n	8009c64 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8009c48:	2208      	movs	r2, #8
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	3308      	adds	r3, #8
 8009c62:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d05e      	beq.n	8009d28 <pvPortMalloc+0x120>
 8009c6a:	4b35      	ldr	r3, [pc, #212]	; (8009d40 <pvPortMalloc+0x138>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d859      	bhi.n	8009d28 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c74:	4b33      	ldr	r3, [pc, #204]	; (8009d44 <pvPortMalloc+0x13c>)
 8009c76:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8009c78:	4b32      	ldr	r3, [pc, #200]	; (8009d44 <pvPortMalloc+0x13c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c7e:	e004      	b.n	8009c8a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d903      	bls.n	8009c9c <pvPortMalloc+0x94>
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1f1      	bne.n	8009c80 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c9c:	4b26      	ldr	r3, [pc, #152]	; (8009d38 <pvPortMalloc+0x130>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d040      	beq.n	8009d28 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2208      	movs	r2, #8
 8009cac:	4413      	add	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d90f      	bls.n	8009ce8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cc8:	69fa      	ldr	r2, [r7, #28]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8009ce2:	6938      	ldr	r0, [r7, #16]
 8009ce4:	f000 f8a2 	bl	8009e2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ce8:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <pvPortMalloc+0x138>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	4a13      	ldr	r2, [pc, #76]	; (8009d40 <pvPortMalloc+0x138>)
 8009cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cf6:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <pvPortMalloc+0x138>)
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <pvPortMalloc+0x140>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d203      	bcs.n	8009d0a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d02:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <pvPortMalloc+0x138>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a10      	ldr	r2, [pc, #64]	; (8009d48 <pvPortMalloc+0x140>)
 8009d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <pvPortMalloc+0x134>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d1e:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <pvPortMalloc+0x144>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <pvPortMalloc+0x144>)
 8009d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d28:	f7fe fd10 	bl	800874c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8009d2c:	697b      	ldr	r3, [r7, #20]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3720      	adds	r7, #32
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20005944 	.word	0x20005944
 8009d3c:	20005958 	.word	0x20005958
 8009d40:	20005948 	.word	0x20005948
 8009d44:	2000593c 	.word	0x2000593c
 8009d48:	2000594c 	.word	0x2000594c
 8009d4c:	20005950 	.word	0x20005950

08009d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d04d      	beq.n	8009dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d62:	2308      	movs	r3, #8
 8009d64:	425b      	negs	r3, r3
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4413      	add	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	4b24      	ldr	r3, [pc, #144]	; (8009e08 <vPortFree+0xb8>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4013      	ands	r3, r2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <vPortFree+0x44>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	60fb      	str	r3, [r7, #12]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <vPortFree+0x62>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60bb      	str	r3, [r7, #8]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <vPortFree+0xb8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01e      	beq.n	8009dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11a      	bne.n	8009dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <vPortFree+0xb8>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	43db      	mvns	r3, r3
 8009dd2:	401a      	ands	r2, r3
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dd8:	f7fe fcaa 	bl	8008730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <vPortFree+0xbc>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4413      	add	r3, r2
 8009de6:	4a09      	ldr	r2, [pc, #36]	; (8009e0c <vPortFree+0xbc>)
 8009de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dea:	6938      	ldr	r0, [r7, #16]
 8009dec:	f000 f81e 	bl	8009e2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009df0:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <vPortFree+0xc0>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	4a06      	ldr	r2, [pc, #24]	; (8009e10 <vPortFree+0xc0>)
 8009df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dfa:	f7fe fca7 	bl	800874c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dfe:	bf00      	nop
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20005958 	.word	0x20005958
 8009e0c:	20005948 	.word	0x20005948
 8009e10:	20005954 	.word	0x20005954

08009e14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8009e14:	b480      	push	{r7}
 8009e16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8009e18:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <xPortGetFreeHeapSize+0x14>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20005948 	.word	0x20005948

08009e2c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e34:	4b28      	ldr	r3, [pc, #160]	; (8009ed8 <prvInsertBlockIntoFreeList+0xac>)
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e002      	b.n	8009e40 <prvInsertBlockIntoFreeList+0x14>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d8f7      	bhi.n	8009e3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	4413      	add	r3, r2
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d108      	bne.n	8009e6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	441a      	add	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d118      	bne.n	8009eb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4b15      	ldr	r3, [pc, #84]	; (8009edc <prvInsertBlockIntoFreeList+0xb0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d00d      	beq.n	8009eaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	441a      	add	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	e008      	b.n	8009ebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <prvInsertBlockIntoFreeList+0xb0>)
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	e003      	b.n	8009ebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d002      	beq.n	8009eca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	2000593c 	.word	0x2000593c
 8009edc:	20005944 	.word	0x20005944

08009ee0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b08f      	sub	sp, #60	; 0x3c
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8009ef4:	4b5a      	ldr	r3, [pc, #360]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <vPortDefineHeapRegions+0x32>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	617b      	str	r3, [r7, #20]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	4413      	add	r3, r2
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8009f1c:	e07d      	b.n	800a01a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	f003 0307 	and.w	r3, r3, #7
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00e      	beq.n	8009f52 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	3307      	adds	r3, #7
 8009f38:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8009f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3c:	f023 0307 	bic.w	r3, r3, #7
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f4e:	4413      	add	r3, r2
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4a41      	ldr	r2, [pc, #260]	; (800a064 <vPortDefineHeapRegions+0x184>)
 8009f60:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8009f62:	4b40      	ldr	r3, [pc, #256]	; (800a064 <vPortDefineHeapRegions+0x184>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]
 8009f68:	e01f      	b.n	8009faa <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8009f6a:	4b3d      	ldr	r3, [pc, #244]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	613b      	str	r3, [r7, #16]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8009f88:	4b35      	ldr	r3, [pc, #212]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d80a      	bhi.n	8009faa <vPortDefineHeapRegions+0xca>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	60fb      	str	r3, [r7, #12]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8009faa:	4b2d      	ldr	r3, [pc, #180]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb4:	4413      	add	r3, r2
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8009fb8:	2208      	movs	r2, #8
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	f023 0307 	bic.w	r3, r3, #7
 8009fc6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	4a25      	ldr	r2, [pc, #148]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009fcc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8009fce:	4b24      	ldr	r3, [pc, #144]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8009fd6:	4b22      	ldr	r3, [pc, #136]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe6:	1ad2      	subs	r2, r2, r3
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8009fec:	4b1c      	ldr	r3, [pc, #112]	; (800a060 <vPortDefineHeapRegions+0x180>)
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	6a3a      	ldr	r2, [r7, #32]
 8009ffe:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a006:	4413      	add	r3, r2
 800a008:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	3301      	adds	r3, #1
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	4413      	add	r3, r2
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f47f af7d 	bne.w	8009f1e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a024:	4a10      	ldr	r2, [pc, #64]	; (800a068 <vPortDefineHeapRegions+0x188>)
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800a02a:	4a10      	ldr	r2, [pc, #64]	; (800a06c <vPortDefineHeapRegions+0x18c>)
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60bb      	str	r3, [r7, #8]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a04c:	4b08      	ldr	r3, [pc, #32]	; (800a070 <vPortDefineHeapRegions+0x190>)
 800a04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	bf00      	nop
 800a056:	373c      	adds	r7, #60	; 0x3c
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	20005944 	.word	0x20005944
 800a064:	2000593c 	.word	0x2000593c
 800a068:	2000594c 	.word	0x2000594c
 800a06c:	20005948 	.word	0x20005948
 800a070:	20005958 	.word	0x20005958

0800a074 <atol>:
 800a074:	220a      	movs	r2, #10
 800a076:	2100      	movs	r1, #0
 800a078:	f000 bb2e 	b.w	800a6d8 <strtol>

0800a07c <calloc>:
 800a07c:	4b02      	ldr	r3, [pc, #8]	; (800a088 <calloc+0xc>)
 800a07e:	460a      	mov	r2, r1
 800a080:	4601      	mov	r1, r0
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	f000 b8f8 	b.w	800a278 <_calloc_r>
 800a088:	2000004c 	.word	0x2000004c

0800a08c <__errno>:
 800a08c:	4b01      	ldr	r3, [pc, #4]	; (800a094 <__errno+0x8>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000004c 	.word	0x2000004c

0800a098 <gmtime_r>:
 800a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	4a4f      	ldr	r2, [pc, #316]	; (800a1e0 <gmtime_r+0x148>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	f7f6 fbef 	bl	800088c <__aeabi_ldivmod>
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	4a4b      	ldr	r2, [pc, #300]	; (800a1e0 <gmtime_r+0x148>)
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f7f6 fbe8 	bl	800088c <__aeabi_ldivmod>
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a0c2:	bfb7      	itett	lt
 800a0c4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a0c8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a0cc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a0d0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a0d4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a0d8:	fbb2 f1f0 	udiv	r1, r2, r0
 800a0dc:	fb00 2211 	mls	r2, r0, r1, r2
 800a0e0:	203c      	movs	r0, #60	; 0x3c
 800a0e2:	60a1      	str	r1, [r4, #8]
 800a0e4:	fbb2 f1f0 	udiv	r1, r2, r0
 800a0e8:	fb00 2211 	mls	r2, r0, r1, r2
 800a0ec:	6061      	str	r1, [r4, #4]
 800a0ee:	6022      	str	r2, [r4, #0]
 800a0f0:	2107      	movs	r1, #7
 800a0f2:	1cda      	adds	r2, r3, #3
 800a0f4:	fb92 f1f1 	sdiv	r1, r2, r1
 800a0f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a0fc:	1a52      	subs	r2, r2, r1
 800a0fe:	bf48      	it	mi
 800a100:	3207      	addmi	r2, #7
 800a102:	4d38      	ldr	r5, [pc, #224]	; (800a1e4 <gmtime_r+0x14c>)
 800a104:	4838      	ldr	r0, [pc, #224]	; (800a1e8 <gmtime_r+0x150>)
 800a106:	61a2      	str	r2, [r4, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bfb7      	itett	lt
 800a10c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a110:	fb93 f5f5 	sdivge	r5, r3, r5
 800a114:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a118:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a11c:	fb00 3005 	mla	r0, r0, r5, r3
 800a120:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a124:	fbb0 f2f2 	udiv	r2, r0, r2
 800a128:	4402      	add	r2, r0
 800a12a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a12e:	fbb0 f1f3 	udiv	r1, r0, r3
 800a132:	1a52      	subs	r2, r2, r1
 800a134:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a138:	492c      	ldr	r1, [pc, #176]	; (800a1ec <gmtime_r+0x154>)
 800a13a:	fbb0 f1f1 	udiv	r1, r0, r1
 800a13e:	2764      	movs	r7, #100	; 0x64
 800a140:	1a52      	subs	r2, r2, r1
 800a142:	fbb2 f1fc 	udiv	r1, r2, ip
 800a146:	fbb2 f3f3 	udiv	r3, r2, r3
 800a14a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a14e:	1af3      	subs	r3, r6, r3
 800a150:	4403      	add	r3, r0
 800a152:	fb0c 3311 	mls	r3, ip, r1, r3
 800a156:	2299      	movs	r2, #153	; 0x99
 800a158:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a15c:	f10e 0e02 	add.w	lr, lr, #2
 800a160:	f103 0c01 	add.w	ip, r3, #1
 800a164:	fbbe f0f2 	udiv	r0, lr, r2
 800a168:	4342      	muls	r2, r0
 800a16a:	3202      	adds	r2, #2
 800a16c:	f04f 0805 	mov.w	r8, #5
 800a170:	fbb2 f2f8 	udiv	r2, r2, r8
 800a174:	ebac 0c02 	sub.w	ip, ip, r2
 800a178:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a17c:	4596      	cmp	lr, r2
 800a17e:	bf94      	ite	ls
 800a180:	2202      	movls	r2, #2
 800a182:	f06f 0209 	mvnhi.w	r2, #9
 800a186:	4410      	add	r0, r2
 800a188:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a18c:	fb02 1505 	mla	r5, r2, r5, r1
 800a190:	2801      	cmp	r0, #1
 800a192:	bf98      	it	ls
 800a194:	3501      	addls	r5, #1
 800a196:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a19a:	d30d      	bcc.n	800a1b8 <gmtime_r+0x120>
 800a19c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a1a0:	61e3      	str	r3, [r4, #28]
 800a1a2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a1ac:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a1b0:	6223      	str	r3, [r4, #32]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b8:	078a      	lsls	r2, r1, #30
 800a1ba:	d102      	bne.n	800a1c2 <gmtime_r+0x12a>
 800a1bc:	fb07 1616 	mls	r6, r7, r6, r1
 800a1c0:	b95e      	cbnz	r6, 800a1da <gmtime_r+0x142>
 800a1c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a1c6:	fbb1 f6f2 	udiv	r6, r1, r2
 800a1ca:	fb02 1216 	mls	r2, r2, r6, r1
 800a1ce:	fab2 f282 	clz	r2, r2
 800a1d2:	0952      	lsrs	r2, r2, #5
 800a1d4:	333b      	adds	r3, #59	; 0x3b
 800a1d6:	4413      	add	r3, r2
 800a1d8:	e7e2      	b.n	800a1a0 <gmtime_r+0x108>
 800a1da:	2201      	movs	r2, #1
 800a1dc:	e7fa      	b.n	800a1d4 <gmtime_r+0x13c>
 800a1de:	bf00      	nop
 800a1e0:	00015180 	.word	0x00015180
 800a1e4:	00023ab1 	.word	0x00023ab1
 800a1e8:	fffdc54f 	.word	0xfffdc54f
 800a1ec:	00023ab0 	.word	0x00023ab0

0800a1f0 <__libc_init_array>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4d0d      	ldr	r5, [pc, #52]	; (800a228 <__libc_init_array+0x38>)
 800a1f4:	4c0d      	ldr	r4, [pc, #52]	; (800a22c <__libc_init_array+0x3c>)
 800a1f6:	1b64      	subs	r4, r4, r5
 800a1f8:	10a4      	asrs	r4, r4, #2
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	42a6      	cmp	r6, r4
 800a1fe:	d109      	bne.n	800a214 <__libc_init_array+0x24>
 800a200:	4d0b      	ldr	r5, [pc, #44]	; (800a230 <__libc_init_array+0x40>)
 800a202:	4c0c      	ldr	r4, [pc, #48]	; (800a234 <__libc_init_array+0x44>)
 800a204:	f000 fdfa 	bl	800adfc <_init>
 800a208:	1b64      	subs	r4, r4, r5
 800a20a:	10a4      	asrs	r4, r4, #2
 800a20c:	2600      	movs	r6, #0
 800a20e:	42a6      	cmp	r6, r4
 800a210:	d105      	bne.n	800a21e <__libc_init_array+0x2e>
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	f855 3b04 	ldr.w	r3, [r5], #4
 800a218:	4798      	blx	r3
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7ee      	b.n	800a1fc <__libc_init_array+0xc>
 800a21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a222:	4798      	blx	r3
 800a224:	3601      	adds	r6, #1
 800a226:	e7f2      	b.n	800a20e <__libc_init_array+0x1e>
 800a228:	0800d214 	.word	0x0800d214
 800a22c:	0800d214 	.word	0x0800d214
 800a230:	0800d214 	.word	0x0800d214
 800a234:	0800d218 	.word	0x0800d218

0800a238 <__retarget_lock_acquire_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_release_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <free>:
 800a23c:	4b02      	ldr	r3, [pc, #8]	; (800a248 <free+0xc>)
 800a23e:	4601      	mov	r1, r0
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	f000 b82f 	b.w	800a2a4 <_free_r>
 800a246:	bf00      	nop
 800a248:	2000004c 	.word	0x2000004c

0800a24c <memcpy>:
 800a24c:	440a      	add	r2, r1
 800a24e:	4291      	cmp	r1, r2
 800a250:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a254:	d100      	bne.n	800a258 <memcpy+0xc>
 800a256:	4770      	bx	lr
 800a258:	b510      	push	{r4, lr}
 800a25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a262:	4291      	cmp	r1, r2
 800a264:	d1f9      	bne.n	800a25a <memcpy+0xe>
 800a266:	bd10      	pop	{r4, pc}

0800a268 <memset>:
 800a268:	4402      	add	r2, r0
 800a26a:	4603      	mov	r3, r0
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d100      	bne.n	800a272 <memset+0xa>
 800a270:	4770      	bx	lr
 800a272:	f803 1b01 	strb.w	r1, [r3], #1
 800a276:	e7f9      	b.n	800a26c <memset+0x4>

0800a278 <_calloc_r>:
 800a278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a27a:	fba1 2402 	umull	r2, r4, r1, r2
 800a27e:	b94c      	cbnz	r4, 800a294 <_calloc_r+0x1c>
 800a280:	4611      	mov	r1, r2
 800a282:	9201      	str	r2, [sp, #4]
 800a284:	f000 f87a 	bl	800a37c <_malloc_r>
 800a288:	9a01      	ldr	r2, [sp, #4]
 800a28a:	4605      	mov	r5, r0
 800a28c:	b930      	cbnz	r0, 800a29c <_calloc_r+0x24>
 800a28e:	4628      	mov	r0, r5
 800a290:	b003      	add	sp, #12
 800a292:	bd30      	pop	{r4, r5, pc}
 800a294:	220c      	movs	r2, #12
 800a296:	6002      	str	r2, [r0, #0]
 800a298:	2500      	movs	r5, #0
 800a29a:	e7f8      	b.n	800a28e <_calloc_r+0x16>
 800a29c:	4621      	mov	r1, r4
 800a29e:	f7ff ffe3 	bl	800a268 <memset>
 800a2a2:	e7f4      	b.n	800a28e <_calloc_r+0x16>

0800a2a4 <_free_r>:
 800a2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	d044      	beq.n	800a334 <_free_r+0x90>
 800a2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ae:	9001      	str	r0, [sp, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2b6:	bfb8      	it	lt
 800a2b8:	18e4      	addlt	r4, r4, r3
 800a2ba:	f000 fa51 	bl	800a760 <__malloc_lock>
 800a2be:	4a1e      	ldr	r2, [pc, #120]	; (800a338 <_free_r+0x94>)
 800a2c0:	9801      	ldr	r0, [sp, #4]
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	b933      	cbnz	r3, 800a2d4 <_free_r+0x30>
 800a2c6:	6063      	str	r3, [r4, #4]
 800a2c8:	6014      	str	r4, [r2, #0]
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2d0:	f000 ba4c 	b.w	800a76c <__malloc_unlock>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d908      	bls.n	800a2ea <_free_r+0x46>
 800a2d8:	6825      	ldr	r5, [r4, #0]
 800a2da:	1961      	adds	r1, r4, r5
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	bf01      	itttt	eq
 800a2e0:	6819      	ldreq	r1, [r3, #0]
 800a2e2:	685b      	ldreq	r3, [r3, #4]
 800a2e4:	1949      	addeq	r1, r1, r5
 800a2e6:	6021      	streq	r1, [r4, #0]
 800a2e8:	e7ed      	b.n	800a2c6 <_free_r+0x22>
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	b10b      	cbz	r3, 800a2f4 <_free_r+0x50>
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d9fa      	bls.n	800a2ea <_free_r+0x46>
 800a2f4:	6811      	ldr	r1, [r2, #0]
 800a2f6:	1855      	adds	r5, r2, r1
 800a2f8:	42a5      	cmp	r5, r4
 800a2fa:	d10b      	bne.n	800a314 <_free_r+0x70>
 800a2fc:	6824      	ldr	r4, [r4, #0]
 800a2fe:	4421      	add	r1, r4
 800a300:	1854      	adds	r4, r2, r1
 800a302:	42a3      	cmp	r3, r4
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	d1e0      	bne.n	800a2ca <_free_r+0x26>
 800a308:	681c      	ldr	r4, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	6053      	str	r3, [r2, #4]
 800a30e:	4421      	add	r1, r4
 800a310:	6011      	str	r1, [r2, #0]
 800a312:	e7da      	b.n	800a2ca <_free_r+0x26>
 800a314:	d902      	bls.n	800a31c <_free_r+0x78>
 800a316:	230c      	movs	r3, #12
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	e7d6      	b.n	800a2ca <_free_r+0x26>
 800a31c:	6825      	ldr	r5, [r4, #0]
 800a31e:	1961      	adds	r1, r4, r5
 800a320:	428b      	cmp	r3, r1
 800a322:	bf04      	itt	eq
 800a324:	6819      	ldreq	r1, [r3, #0]
 800a326:	685b      	ldreq	r3, [r3, #4]
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	bf04      	itt	eq
 800a32c:	1949      	addeq	r1, r1, r5
 800a32e:	6021      	streq	r1, [r4, #0]
 800a330:	6054      	str	r4, [r2, #4]
 800a332:	e7ca      	b.n	800a2ca <_free_r+0x26>
 800a334:	b003      	add	sp, #12
 800a336:	bd30      	pop	{r4, r5, pc}
 800a338:	20005960 	.word	0x20005960

0800a33c <sbrk_aligned>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	4e0e      	ldr	r6, [pc, #56]	; (800a378 <sbrk_aligned+0x3c>)
 800a340:	460c      	mov	r4, r1
 800a342:	6831      	ldr	r1, [r6, #0]
 800a344:	4605      	mov	r5, r0
 800a346:	b911      	cbnz	r1, 800a34e <sbrk_aligned+0x12>
 800a348:	f000 f8f6 	bl	800a538 <_sbrk_r>
 800a34c:	6030      	str	r0, [r6, #0]
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f000 f8f1 	bl	800a538 <_sbrk_r>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	d00a      	beq.n	800a370 <sbrk_aligned+0x34>
 800a35a:	1cc4      	adds	r4, r0, #3
 800a35c:	f024 0403 	bic.w	r4, r4, #3
 800a360:	42a0      	cmp	r0, r4
 800a362:	d007      	beq.n	800a374 <sbrk_aligned+0x38>
 800a364:	1a21      	subs	r1, r4, r0
 800a366:	4628      	mov	r0, r5
 800a368:	f000 f8e6 	bl	800a538 <_sbrk_r>
 800a36c:	3001      	adds	r0, #1
 800a36e:	d101      	bne.n	800a374 <sbrk_aligned+0x38>
 800a370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a374:	4620      	mov	r0, r4
 800a376:	bd70      	pop	{r4, r5, r6, pc}
 800a378:	20005964 	.word	0x20005964

0800a37c <_malloc_r>:
 800a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	1ccd      	adds	r5, r1, #3
 800a382:	f025 0503 	bic.w	r5, r5, #3
 800a386:	3508      	adds	r5, #8
 800a388:	2d0c      	cmp	r5, #12
 800a38a:	bf38      	it	cc
 800a38c:	250c      	movcc	r5, #12
 800a38e:	2d00      	cmp	r5, #0
 800a390:	4607      	mov	r7, r0
 800a392:	db01      	blt.n	800a398 <_malloc_r+0x1c>
 800a394:	42a9      	cmp	r1, r5
 800a396:	d905      	bls.n	800a3a4 <_malloc_r+0x28>
 800a398:	230c      	movs	r3, #12
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	2600      	movs	r6, #0
 800a39e:	4630      	mov	r0, r6
 800a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a4:	4e2e      	ldr	r6, [pc, #184]	; (800a460 <_malloc_r+0xe4>)
 800a3a6:	f000 f9db 	bl	800a760 <__malloc_lock>
 800a3aa:	6833      	ldr	r3, [r6, #0]
 800a3ac:	461c      	mov	r4, r3
 800a3ae:	bb34      	cbnz	r4, 800a3fe <_malloc_r+0x82>
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	f7ff ffc2 	bl	800a33c <sbrk_aligned>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	d14d      	bne.n	800a45a <_malloc_r+0xde>
 800a3be:	6834      	ldr	r4, [r6, #0]
 800a3c0:	4626      	mov	r6, r4
 800a3c2:	2e00      	cmp	r6, #0
 800a3c4:	d140      	bne.n	800a448 <_malloc_r+0xcc>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	eb04 0803 	add.w	r8, r4, r3
 800a3d0:	f000 f8b2 	bl	800a538 <_sbrk_r>
 800a3d4:	4580      	cmp	r8, r0
 800a3d6:	d13a      	bne.n	800a44e <_malloc_r+0xd2>
 800a3d8:	6821      	ldr	r1, [r4, #0]
 800a3da:	3503      	adds	r5, #3
 800a3dc:	1a6d      	subs	r5, r5, r1
 800a3de:	f025 0503 	bic.w	r5, r5, #3
 800a3e2:	3508      	adds	r5, #8
 800a3e4:	2d0c      	cmp	r5, #12
 800a3e6:	bf38      	it	cc
 800a3e8:	250c      	movcc	r5, #12
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7ff ffa5 	bl	800a33c <sbrk_aligned>
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d02b      	beq.n	800a44e <_malloc_r+0xd2>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	442b      	add	r3, r5
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	e00e      	b.n	800a41c <_malloc_r+0xa0>
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	1b52      	subs	r2, r2, r5
 800a402:	d41e      	bmi.n	800a442 <_malloc_r+0xc6>
 800a404:	2a0b      	cmp	r2, #11
 800a406:	d916      	bls.n	800a436 <_malloc_r+0xba>
 800a408:	1961      	adds	r1, r4, r5
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	6025      	str	r5, [r4, #0]
 800a40e:	bf18      	it	ne
 800a410:	6059      	strne	r1, [r3, #4]
 800a412:	6863      	ldr	r3, [r4, #4]
 800a414:	bf08      	it	eq
 800a416:	6031      	streq	r1, [r6, #0]
 800a418:	5162      	str	r2, [r4, r5]
 800a41a:	604b      	str	r3, [r1, #4]
 800a41c:	4638      	mov	r0, r7
 800a41e:	f104 060b 	add.w	r6, r4, #11
 800a422:	f000 f9a3 	bl	800a76c <__malloc_unlock>
 800a426:	f026 0607 	bic.w	r6, r6, #7
 800a42a:	1d23      	adds	r3, r4, #4
 800a42c:	1af2      	subs	r2, r6, r3
 800a42e:	d0b6      	beq.n	800a39e <_malloc_r+0x22>
 800a430:	1b9b      	subs	r3, r3, r6
 800a432:	50a3      	str	r3, [r4, r2]
 800a434:	e7b3      	b.n	800a39e <_malloc_r+0x22>
 800a436:	6862      	ldr	r2, [r4, #4]
 800a438:	42a3      	cmp	r3, r4
 800a43a:	bf0c      	ite	eq
 800a43c:	6032      	streq	r2, [r6, #0]
 800a43e:	605a      	strne	r2, [r3, #4]
 800a440:	e7ec      	b.n	800a41c <_malloc_r+0xa0>
 800a442:	4623      	mov	r3, r4
 800a444:	6864      	ldr	r4, [r4, #4]
 800a446:	e7b2      	b.n	800a3ae <_malloc_r+0x32>
 800a448:	4634      	mov	r4, r6
 800a44a:	6876      	ldr	r6, [r6, #4]
 800a44c:	e7b9      	b.n	800a3c2 <_malloc_r+0x46>
 800a44e:	230c      	movs	r3, #12
 800a450:	603b      	str	r3, [r7, #0]
 800a452:	4638      	mov	r0, r7
 800a454:	f000 f98a 	bl	800a76c <__malloc_unlock>
 800a458:	e7a1      	b.n	800a39e <_malloc_r+0x22>
 800a45a:	6025      	str	r5, [r4, #0]
 800a45c:	e7de      	b.n	800a41c <_malloc_r+0xa0>
 800a45e:	bf00      	nop
 800a460:	20005960 	.word	0x20005960

0800a464 <cleanup_glue>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	460c      	mov	r4, r1
 800a468:	6809      	ldr	r1, [r1, #0]
 800a46a:	4605      	mov	r5, r0
 800a46c:	b109      	cbz	r1, 800a472 <cleanup_glue+0xe>
 800a46e:	f7ff fff9 	bl	800a464 <cleanup_glue>
 800a472:	4621      	mov	r1, r4
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a47a:	f7ff bf13 	b.w	800a2a4 <_free_r>
	...

0800a480 <_reclaim_reent>:
 800a480:	4b2c      	ldr	r3, [pc, #176]	; (800a534 <_reclaim_reent+0xb4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4283      	cmp	r3, r0
 800a486:	b570      	push	{r4, r5, r6, lr}
 800a488:	4604      	mov	r4, r0
 800a48a:	d051      	beq.n	800a530 <_reclaim_reent+0xb0>
 800a48c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a48e:	b143      	cbz	r3, 800a4a2 <_reclaim_reent+0x22>
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d14a      	bne.n	800a52c <_reclaim_reent+0xac>
 800a496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	b111      	cbz	r1, 800a4a2 <_reclaim_reent+0x22>
 800a49c:	4620      	mov	r0, r4
 800a49e:	f7ff ff01 	bl	800a2a4 <_free_r>
 800a4a2:	6961      	ldr	r1, [r4, #20]
 800a4a4:	b111      	cbz	r1, 800a4ac <_reclaim_reent+0x2c>
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7ff fefc 	bl	800a2a4 <_free_r>
 800a4ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a4ae:	b111      	cbz	r1, 800a4b6 <_reclaim_reent+0x36>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff fef7 	bl	800a2a4 <_free_r>
 800a4b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4b8:	b111      	cbz	r1, 800a4c0 <_reclaim_reent+0x40>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f7ff fef2 	bl	800a2a4 <_free_r>
 800a4c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a4c2:	b111      	cbz	r1, 800a4ca <_reclaim_reent+0x4a>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff feed 	bl	800a2a4 <_free_r>
 800a4ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a4cc:	b111      	cbz	r1, 800a4d4 <_reclaim_reent+0x54>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7ff fee8 	bl	800a2a4 <_free_r>
 800a4d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a4d6:	b111      	cbz	r1, 800a4de <_reclaim_reent+0x5e>
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7ff fee3 	bl	800a2a4 <_free_r>
 800a4de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a4e0:	b111      	cbz	r1, 800a4e8 <_reclaim_reent+0x68>
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f7ff fede 	bl	800a2a4 <_free_r>
 800a4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ea:	b111      	cbz	r1, 800a4f2 <_reclaim_reent+0x72>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f7ff fed9 	bl	800a2a4 <_free_r>
 800a4f2:	69a3      	ldr	r3, [r4, #24]
 800a4f4:	b1e3      	cbz	r3, 800a530 <_reclaim_reent+0xb0>
 800a4f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4798      	blx	r3
 800a4fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4fe:	b1b9      	cbz	r1, 800a530 <_reclaim_reent+0xb0>
 800a500:	4620      	mov	r0, r4
 800a502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a506:	f7ff bfad 	b.w	800a464 <cleanup_glue>
 800a50a:	5949      	ldr	r1, [r1, r5]
 800a50c:	b941      	cbnz	r1, 800a520 <_reclaim_reent+0xa0>
 800a50e:	3504      	adds	r5, #4
 800a510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a512:	2d80      	cmp	r5, #128	; 0x80
 800a514:	68d9      	ldr	r1, [r3, #12]
 800a516:	d1f8      	bne.n	800a50a <_reclaim_reent+0x8a>
 800a518:	4620      	mov	r0, r4
 800a51a:	f7ff fec3 	bl	800a2a4 <_free_r>
 800a51e:	e7ba      	b.n	800a496 <_reclaim_reent+0x16>
 800a520:	680e      	ldr	r6, [r1, #0]
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff febe 	bl	800a2a4 <_free_r>
 800a528:	4631      	mov	r1, r6
 800a52a:	e7ef      	b.n	800a50c <_reclaim_reent+0x8c>
 800a52c:	2500      	movs	r5, #0
 800a52e:	e7ef      	b.n	800a510 <_reclaim_reent+0x90>
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	bf00      	nop
 800a534:	2000004c 	.word	0x2000004c

0800a538 <_sbrk_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_sbrk_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f8 f992 	bl	800286c <_sbrk>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_sbrk_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_sbrk_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	20005968 	.word	0x20005968

0800a558 <siprintf>:
 800a558:	b40e      	push	{r1, r2, r3}
 800a55a:	b500      	push	{lr}
 800a55c:	b09c      	sub	sp, #112	; 0x70
 800a55e:	ab1d      	add	r3, sp, #116	; 0x74
 800a560:	9002      	str	r0, [sp, #8]
 800a562:	9006      	str	r0, [sp, #24]
 800a564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a568:	4809      	ldr	r0, [pc, #36]	; (800a590 <siprintf+0x38>)
 800a56a:	9107      	str	r1, [sp, #28]
 800a56c:	9104      	str	r1, [sp, #16]
 800a56e:	4909      	ldr	r1, [pc, #36]	; (800a594 <siprintf+0x3c>)
 800a570:	f853 2b04 	ldr.w	r2, [r3], #4
 800a574:	9105      	str	r1, [sp, #20]
 800a576:	6800      	ldr	r0, [r0, #0]
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	a902      	add	r1, sp, #8
 800a57c:	f000 f958 	bl	800a830 <_svfiprintf_r>
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	2200      	movs	r2, #0
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	b01c      	add	sp, #112	; 0x70
 800a588:	f85d eb04 	ldr.w	lr, [sp], #4
 800a58c:	b003      	add	sp, #12
 800a58e:	4770      	bx	lr
 800a590:	2000004c 	.word	0x2000004c
 800a594:	ffff0208 	.word	0xffff0208

0800a598 <strcpy>:
 800a598:	4603      	mov	r3, r0
 800a59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a59e:	f803 2b01 	strb.w	r2, [r3], #1
 800a5a2:	2a00      	cmp	r2, #0
 800a5a4:	d1f9      	bne.n	800a59a <strcpy+0x2>
 800a5a6:	4770      	bx	lr

0800a5a8 <strstr>:
 800a5a8:	780a      	ldrb	r2, [r1, #0]
 800a5aa:	b570      	push	{r4, r5, r6, lr}
 800a5ac:	b96a      	cbnz	r2, 800a5ca <strstr+0x22>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d109      	bne.n	800a5c8 <strstr+0x20>
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0f6      	beq.n	800a5ae <strstr+0x6>
 800a5c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a5c4:	429e      	cmp	r6, r3
 800a5c6:	d0f7      	beq.n	800a5b8 <strstr+0x10>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	7803      	ldrb	r3, [r0, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1ef      	bne.n	800a5b0 <strstr+0x8>
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	e7ec      	b.n	800a5ae <strstr+0x6>

0800a5d4 <_strtol_l.constprop.0>:
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5da:	d001      	beq.n	800a5e0 <_strtol_l.constprop.0+0xc>
 800a5dc:	2b24      	cmp	r3, #36	; 0x24
 800a5de:	d906      	bls.n	800a5ee <_strtol_l.constprop.0+0x1a>
 800a5e0:	f7ff fd54 	bl	800a08c <__errno>
 800a5e4:	2316      	movs	r3, #22
 800a5e6:	6003      	str	r3, [r0, #0]
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a6d4 <_strtol_l.constprop.0+0x100>
 800a5f2:	460d      	mov	r5, r1
 800a5f4:	462e      	mov	r6, r5
 800a5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a5fe:	f017 0708 	ands.w	r7, r7, #8
 800a602:	d1f7      	bne.n	800a5f4 <_strtol_l.constprop.0+0x20>
 800a604:	2c2d      	cmp	r4, #45	; 0x2d
 800a606:	d132      	bne.n	800a66e <_strtol_l.constprop.0+0x9a>
 800a608:	782c      	ldrb	r4, [r5, #0]
 800a60a:	2701      	movs	r7, #1
 800a60c:	1cb5      	adds	r5, r6, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05b      	beq.n	800a6ca <_strtol_l.constprop.0+0xf6>
 800a612:	2b10      	cmp	r3, #16
 800a614:	d109      	bne.n	800a62a <_strtol_l.constprop.0+0x56>
 800a616:	2c30      	cmp	r4, #48	; 0x30
 800a618:	d107      	bne.n	800a62a <_strtol_l.constprop.0+0x56>
 800a61a:	782c      	ldrb	r4, [r5, #0]
 800a61c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a620:	2c58      	cmp	r4, #88	; 0x58
 800a622:	d14d      	bne.n	800a6c0 <_strtol_l.constprop.0+0xec>
 800a624:	786c      	ldrb	r4, [r5, #1]
 800a626:	2310      	movs	r3, #16
 800a628:	3502      	adds	r5, #2
 800a62a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a62e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a632:	f04f 0c00 	mov.w	ip, #0
 800a636:	fbb8 f9f3 	udiv	r9, r8, r3
 800a63a:	4666      	mov	r6, ip
 800a63c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a640:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a644:	f1be 0f09 	cmp.w	lr, #9
 800a648:	d816      	bhi.n	800a678 <_strtol_l.constprop.0+0xa4>
 800a64a:	4674      	mov	r4, lr
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	dd24      	ble.n	800a69a <_strtol_l.constprop.0+0xc6>
 800a650:	f1bc 0f00 	cmp.w	ip, #0
 800a654:	db1e      	blt.n	800a694 <_strtol_l.constprop.0+0xc0>
 800a656:	45b1      	cmp	r9, r6
 800a658:	d31c      	bcc.n	800a694 <_strtol_l.constprop.0+0xc0>
 800a65a:	d101      	bne.n	800a660 <_strtol_l.constprop.0+0x8c>
 800a65c:	45a2      	cmp	sl, r4
 800a65e:	db19      	blt.n	800a694 <_strtol_l.constprop.0+0xc0>
 800a660:	fb06 4603 	mla	r6, r6, r3, r4
 800a664:	f04f 0c01 	mov.w	ip, #1
 800a668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a66c:	e7e8      	b.n	800a640 <_strtol_l.constprop.0+0x6c>
 800a66e:	2c2b      	cmp	r4, #43	; 0x2b
 800a670:	bf04      	itt	eq
 800a672:	782c      	ldrbeq	r4, [r5, #0]
 800a674:	1cb5      	addeq	r5, r6, #2
 800a676:	e7ca      	b.n	800a60e <_strtol_l.constprop.0+0x3a>
 800a678:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a67c:	f1be 0f19 	cmp.w	lr, #25
 800a680:	d801      	bhi.n	800a686 <_strtol_l.constprop.0+0xb2>
 800a682:	3c37      	subs	r4, #55	; 0x37
 800a684:	e7e2      	b.n	800a64c <_strtol_l.constprop.0+0x78>
 800a686:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a68a:	f1be 0f19 	cmp.w	lr, #25
 800a68e:	d804      	bhi.n	800a69a <_strtol_l.constprop.0+0xc6>
 800a690:	3c57      	subs	r4, #87	; 0x57
 800a692:	e7db      	b.n	800a64c <_strtol_l.constprop.0+0x78>
 800a694:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a698:	e7e6      	b.n	800a668 <_strtol_l.constprop.0+0x94>
 800a69a:	f1bc 0f00 	cmp.w	ip, #0
 800a69e:	da05      	bge.n	800a6ac <_strtol_l.constprop.0+0xd8>
 800a6a0:	2322      	movs	r3, #34	; 0x22
 800a6a2:	6003      	str	r3, [r0, #0]
 800a6a4:	4646      	mov	r6, r8
 800a6a6:	b942      	cbnz	r2, 800a6ba <_strtol_l.constprop.0+0xe6>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	e79e      	b.n	800a5ea <_strtol_l.constprop.0+0x16>
 800a6ac:	b107      	cbz	r7, 800a6b0 <_strtol_l.constprop.0+0xdc>
 800a6ae:	4276      	negs	r6, r6
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	d0f9      	beq.n	800a6a8 <_strtol_l.constprop.0+0xd4>
 800a6b4:	f1bc 0f00 	cmp.w	ip, #0
 800a6b8:	d000      	beq.n	800a6bc <_strtol_l.constprop.0+0xe8>
 800a6ba:	1e69      	subs	r1, r5, #1
 800a6bc:	6011      	str	r1, [r2, #0]
 800a6be:	e7f3      	b.n	800a6a8 <_strtol_l.constprop.0+0xd4>
 800a6c0:	2430      	movs	r4, #48	; 0x30
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1b1      	bne.n	800a62a <_strtol_l.constprop.0+0x56>
 800a6c6:	2308      	movs	r3, #8
 800a6c8:	e7af      	b.n	800a62a <_strtol_l.constprop.0+0x56>
 800a6ca:	2c30      	cmp	r4, #48	; 0x30
 800a6cc:	d0a5      	beq.n	800a61a <_strtol_l.constprop.0+0x46>
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	e7ab      	b.n	800a62a <_strtol_l.constprop.0+0x56>
 800a6d2:	bf00      	nop
 800a6d4:	0800d0d9 	.word	0x0800d0d9

0800a6d8 <strtol>:
 800a6d8:	4613      	mov	r3, r2
 800a6da:	460a      	mov	r2, r1
 800a6dc:	4601      	mov	r1, r0
 800a6de:	4802      	ldr	r0, [pc, #8]	; (800a6e8 <strtol+0x10>)
 800a6e0:	6800      	ldr	r0, [r0, #0]
 800a6e2:	f7ff bf77 	b.w	800a5d4 <_strtol_l.constprop.0>
 800a6e6:	bf00      	nop
 800a6e8:	2000004c 	.word	0x2000004c

0800a6ec <_vsniprintf_r>:
 800a6ec:	b530      	push	{r4, r5, lr}
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	2c00      	cmp	r4, #0
 800a6f2:	b09b      	sub	sp, #108	; 0x6c
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	da05      	bge.n	800a706 <_vsniprintf_r+0x1a>
 800a6fa:	238b      	movs	r3, #139	; 0x8b
 800a6fc:	6003      	str	r3, [r0, #0]
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a702:	b01b      	add	sp, #108	; 0x6c
 800a704:	bd30      	pop	{r4, r5, pc}
 800a706:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a70a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a70e:	bf14      	ite	ne
 800a710:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a714:	4623      	moveq	r3, r4
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a71e:	9100      	str	r1, [sp, #0]
 800a720:	9104      	str	r1, [sp, #16]
 800a722:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a726:	4669      	mov	r1, sp
 800a728:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a72a:	f000 f881 	bl	800a830 <_svfiprintf_r>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	bfbc      	itt	lt
 800a732:	238b      	movlt	r3, #139	; 0x8b
 800a734:	602b      	strlt	r3, [r5, #0]
 800a736:	2c00      	cmp	r4, #0
 800a738:	d0e3      	beq.n	800a702 <_vsniprintf_r+0x16>
 800a73a:	9b00      	ldr	r3, [sp, #0]
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	e7df      	b.n	800a702 <_vsniprintf_r+0x16>
	...

0800a744 <vsniprintf>:
 800a744:	b507      	push	{r0, r1, r2, lr}
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	4613      	mov	r3, r2
 800a74a:	460a      	mov	r2, r1
 800a74c:	4601      	mov	r1, r0
 800a74e:	4803      	ldr	r0, [pc, #12]	; (800a75c <vsniprintf+0x18>)
 800a750:	6800      	ldr	r0, [r0, #0]
 800a752:	f7ff ffcb 	bl	800a6ec <_vsniprintf_r>
 800a756:	b003      	add	sp, #12
 800a758:	f85d fb04 	ldr.w	pc, [sp], #4
 800a75c:	2000004c 	.word	0x2000004c

0800a760 <__malloc_lock>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__malloc_lock+0x8>)
 800a762:	f7ff bd69 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	2000595c 	.word	0x2000595c

0800a76c <__malloc_unlock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__malloc_unlock+0x8>)
 800a76e:	f7ff bd64 	b.w	800a23a <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	2000595c 	.word	0x2000595c

0800a778 <__ssputs_r>:
 800a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	688e      	ldr	r6, [r1, #8]
 800a77e:	429e      	cmp	r6, r3
 800a780:	4682      	mov	sl, r0
 800a782:	460c      	mov	r4, r1
 800a784:	4690      	mov	r8, r2
 800a786:	461f      	mov	r7, r3
 800a788:	d838      	bhi.n	800a7fc <__ssputs_r+0x84>
 800a78a:	898a      	ldrh	r2, [r1, #12]
 800a78c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a790:	d032      	beq.n	800a7f8 <__ssputs_r+0x80>
 800a792:	6825      	ldr	r5, [r4, #0]
 800a794:	6909      	ldr	r1, [r1, #16]
 800a796:	eba5 0901 	sub.w	r9, r5, r1
 800a79a:	6965      	ldr	r5, [r4, #20]
 800a79c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	444b      	add	r3, r9
 800a7a8:	106d      	asrs	r5, r5, #1
 800a7aa:	429d      	cmp	r5, r3
 800a7ac:	bf38      	it	cc
 800a7ae:	461d      	movcc	r5, r3
 800a7b0:	0553      	lsls	r3, r2, #21
 800a7b2:	d531      	bpl.n	800a818 <__ssputs_r+0xa0>
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7ff fde1 	bl	800a37c <_malloc_r>
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	b950      	cbnz	r0, 800a7d4 <__ssputs_r+0x5c>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	f8ca 3000 	str.w	r3, [sl]
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d4:	6921      	ldr	r1, [r4, #16]
 800a7d6:	464a      	mov	r2, r9
 800a7d8:	f7ff fd38 	bl	800a24c <memcpy>
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e6:	81a3      	strh	r3, [r4, #12]
 800a7e8:	6126      	str	r6, [r4, #16]
 800a7ea:	6165      	str	r5, [r4, #20]
 800a7ec:	444e      	add	r6, r9
 800a7ee:	eba5 0509 	sub.w	r5, r5, r9
 800a7f2:	6026      	str	r6, [r4, #0]
 800a7f4:	60a5      	str	r5, [r4, #8]
 800a7f6:	463e      	mov	r6, r7
 800a7f8:	42be      	cmp	r6, r7
 800a7fa:	d900      	bls.n	800a7fe <__ssputs_r+0x86>
 800a7fc:	463e      	mov	r6, r7
 800a7fe:	6820      	ldr	r0, [r4, #0]
 800a800:	4632      	mov	r2, r6
 800a802:	4641      	mov	r1, r8
 800a804:	f000 faa8 	bl	800ad58 <memmove>
 800a808:	68a3      	ldr	r3, [r4, #8]
 800a80a:	1b9b      	subs	r3, r3, r6
 800a80c:	60a3      	str	r3, [r4, #8]
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	4433      	add	r3, r6
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	2000      	movs	r0, #0
 800a816:	e7db      	b.n	800a7d0 <__ssputs_r+0x58>
 800a818:	462a      	mov	r2, r5
 800a81a:	f000 fab7 	bl	800ad8c <_realloc_r>
 800a81e:	4606      	mov	r6, r0
 800a820:	2800      	cmp	r0, #0
 800a822:	d1e1      	bne.n	800a7e8 <__ssputs_r+0x70>
 800a824:	6921      	ldr	r1, [r4, #16]
 800a826:	4650      	mov	r0, sl
 800a828:	f7ff fd3c 	bl	800a2a4 <_free_r>
 800a82c:	e7c7      	b.n	800a7be <__ssputs_r+0x46>
	...

0800a830 <_svfiprintf_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4698      	mov	r8, r3
 800a836:	898b      	ldrh	r3, [r1, #12]
 800a838:	061b      	lsls	r3, r3, #24
 800a83a:	b09d      	sub	sp, #116	; 0x74
 800a83c:	4607      	mov	r7, r0
 800a83e:	460d      	mov	r5, r1
 800a840:	4614      	mov	r4, r2
 800a842:	d50e      	bpl.n	800a862 <_svfiprintf_r+0x32>
 800a844:	690b      	ldr	r3, [r1, #16]
 800a846:	b963      	cbnz	r3, 800a862 <_svfiprintf_r+0x32>
 800a848:	2140      	movs	r1, #64	; 0x40
 800a84a:	f7ff fd97 	bl	800a37c <_malloc_r>
 800a84e:	6028      	str	r0, [r5, #0]
 800a850:	6128      	str	r0, [r5, #16]
 800a852:	b920      	cbnz	r0, 800a85e <_svfiprintf_r+0x2e>
 800a854:	230c      	movs	r3, #12
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a85c:	e0d1      	b.n	800aa02 <_svfiprintf_r+0x1d2>
 800a85e:	2340      	movs	r3, #64	; 0x40
 800a860:	616b      	str	r3, [r5, #20]
 800a862:	2300      	movs	r3, #0
 800a864:	9309      	str	r3, [sp, #36]	; 0x24
 800a866:	2320      	movs	r3, #32
 800a868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a86c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a870:	2330      	movs	r3, #48	; 0x30
 800a872:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa1c <_svfiprintf_r+0x1ec>
 800a876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a87a:	f04f 0901 	mov.w	r9, #1
 800a87e:	4623      	mov	r3, r4
 800a880:	469a      	mov	sl, r3
 800a882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a886:	b10a      	cbz	r2, 800a88c <_svfiprintf_r+0x5c>
 800a888:	2a25      	cmp	r2, #37	; 0x25
 800a88a:	d1f9      	bne.n	800a880 <_svfiprintf_r+0x50>
 800a88c:	ebba 0b04 	subs.w	fp, sl, r4
 800a890:	d00b      	beq.n	800a8aa <_svfiprintf_r+0x7a>
 800a892:	465b      	mov	r3, fp
 800a894:	4622      	mov	r2, r4
 800a896:	4629      	mov	r1, r5
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff ff6d 	bl	800a778 <__ssputs_r>
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f000 80aa 	beq.w	800a9f8 <_svfiprintf_r+0x1c8>
 800a8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a6:	445a      	add	r2, fp
 800a8a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 80a2 	beq.w	800a9f8 <_svfiprintf_r+0x1c8>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8be:	f10a 0a01 	add.w	sl, sl, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	9307      	str	r3, [sp, #28]
 800a8c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a8cc:	4654      	mov	r4, sl
 800a8ce:	2205      	movs	r2, #5
 800a8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d4:	4851      	ldr	r0, [pc, #324]	; (800aa1c <_svfiprintf_r+0x1ec>)
 800a8d6:	f7f5 fc83 	bl	80001e0 <memchr>
 800a8da:	9a04      	ldr	r2, [sp, #16]
 800a8dc:	b9d8      	cbnz	r0, 800a916 <_svfiprintf_r+0xe6>
 800a8de:	06d0      	lsls	r0, r2, #27
 800a8e0:	bf44      	itt	mi
 800a8e2:	2320      	movmi	r3, #32
 800a8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e8:	0711      	lsls	r1, r2, #28
 800a8ea:	bf44      	itt	mi
 800a8ec:	232b      	movmi	r3, #43	; 0x2b
 800a8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f8:	d015      	beq.n	800a926 <_svfiprintf_r+0xf6>
 800a8fa:	9a07      	ldr	r2, [sp, #28]
 800a8fc:	4654      	mov	r4, sl
 800a8fe:	2000      	movs	r0, #0
 800a900:	f04f 0c0a 	mov.w	ip, #10
 800a904:	4621      	mov	r1, r4
 800a906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a90a:	3b30      	subs	r3, #48	; 0x30
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d94e      	bls.n	800a9ae <_svfiprintf_r+0x17e>
 800a910:	b1b0      	cbz	r0, 800a940 <_svfiprintf_r+0x110>
 800a912:	9207      	str	r2, [sp, #28]
 800a914:	e014      	b.n	800a940 <_svfiprintf_r+0x110>
 800a916:	eba0 0308 	sub.w	r3, r0, r8
 800a91a:	fa09 f303 	lsl.w	r3, r9, r3
 800a91e:	4313      	orrs	r3, r2
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	46a2      	mov	sl, r4
 800a924:	e7d2      	b.n	800a8cc <_svfiprintf_r+0x9c>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	1d19      	adds	r1, r3, #4
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	9103      	str	r1, [sp, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bfbb      	ittet	lt
 800a932:	425b      	neglt	r3, r3
 800a934:	f042 0202 	orrlt.w	r2, r2, #2
 800a938:	9307      	strge	r3, [sp, #28]
 800a93a:	9307      	strlt	r3, [sp, #28]
 800a93c:	bfb8      	it	lt
 800a93e:	9204      	strlt	r2, [sp, #16]
 800a940:	7823      	ldrb	r3, [r4, #0]
 800a942:	2b2e      	cmp	r3, #46	; 0x2e
 800a944:	d10c      	bne.n	800a960 <_svfiprintf_r+0x130>
 800a946:	7863      	ldrb	r3, [r4, #1]
 800a948:	2b2a      	cmp	r3, #42	; 0x2a
 800a94a:	d135      	bne.n	800a9b8 <_svfiprintf_r+0x188>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	9203      	str	r2, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfb8      	it	lt
 800a958:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a95c:	3402      	adds	r4, #2
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa2c <_svfiprintf_r+0x1fc>
 800a964:	7821      	ldrb	r1, [r4, #0]
 800a966:	2203      	movs	r2, #3
 800a968:	4650      	mov	r0, sl
 800a96a:	f7f5 fc39 	bl	80001e0 <memchr>
 800a96e:	b140      	cbz	r0, 800a982 <_svfiprintf_r+0x152>
 800a970:	2340      	movs	r3, #64	; 0x40
 800a972:	eba0 000a 	sub.w	r0, r0, sl
 800a976:	fa03 f000 	lsl.w	r0, r3, r0
 800a97a:	9b04      	ldr	r3, [sp, #16]
 800a97c:	4303      	orrs	r3, r0
 800a97e:	3401      	adds	r4, #1
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a986:	4826      	ldr	r0, [pc, #152]	; (800aa20 <_svfiprintf_r+0x1f0>)
 800a988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a98c:	2206      	movs	r2, #6
 800a98e:	f7f5 fc27 	bl	80001e0 <memchr>
 800a992:	2800      	cmp	r0, #0
 800a994:	d038      	beq.n	800aa08 <_svfiprintf_r+0x1d8>
 800a996:	4b23      	ldr	r3, [pc, #140]	; (800aa24 <_svfiprintf_r+0x1f4>)
 800a998:	bb1b      	cbnz	r3, 800a9e2 <_svfiprintf_r+0x1b2>
 800a99a:	9b03      	ldr	r3, [sp, #12]
 800a99c:	3307      	adds	r3, #7
 800a99e:	f023 0307 	bic.w	r3, r3, #7
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a8:	4433      	add	r3, r6
 800a9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ac:	e767      	b.n	800a87e <_svfiprintf_r+0x4e>
 800a9ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	e7a5      	b.n	800a904 <_svfiprintf_r+0xd4>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	9305      	str	r3, [sp, #20]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	f04f 0c0a 	mov.w	ip, #10
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ca:	3a30      	subs	r2, #48	; 0x30
 800a9cc:	2a09      	cmp	r2, #9
 800a9ce:	d903      	bls.n	800a9d8 <_svfiprintf_r+0x1a8>
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0c5      	beq.n	800a960 <_svfiprintf_r+0x130>
 800a9d4:	9105      	str	r1, [sp, #20]
 800a9d6:	e7c3      	b.n	800a960 <_svfiprintf_r+0x130>
 800a9d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9dc:	4604      	mov	r4, r0
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e7f0      	b.n	800a9c4 <_svfiprintf_r+0x194>
 800a9e2:	ab03      	add	r3, sp, #12
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	462a      	mov	r2, r5
 800a9e8:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <_svfiprintf_r+0x1f8>)
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	f3af 8000 	nop.w
 800a9f2:	1c42      	adds	r2, r0, #1
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	d1d6      	bne.n	800a9a6 <_svfiprintf_r+0x176>
 800a9f8:	89ab      	ldrh	r3, [r5, #12]
 800a9fa:	065b      	lsls	r3, r3, #25
 800a9fc:	f53f af2c 	bmi.w	800a858 <_svfiprintf_r+0x28>
 800aa00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa02:	b01d      	add	sp, #116	; 0x74
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa08:	ab03      	add	r3, sp, #12
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	4b06      	ldr	r3, [pc, #24]	; (800aa28 <_svfiprintf_r+0x1f8>)
 800aa10:	a904      	add	r1, sp, #16
 800aa12:	4638      	mov	r0, r7
 800aa14:	f000 f87a 	bl	800ab0c <_printf_i>
 800aa18:	e7eb      	b.n	800a9f2 <_svfiprintf_r+0x1c2>
 800aa1a:	bf00      	nop
 800aa1c:	0800d1d9 	.word	0x0800d1d9
 800aa20:	0800d1e3 	.word	0x0800d1e3
 800aa24:	00000000 	.word	0x00000000
 800aa28:	0800a779 	.word	0x0800a779
 800aa2c:	0800d1df 	.word	0x0800d1df

0800aa30 <_printf_common>:
 800aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa34:	4616      	mov	r6, r2
 800aa36:	4699      	mov	r9, r3
 800aa38:	688a      	ldr	r2, [r1, #8]
 800aa3a:	690b      	ldr	r3, [r1, #16]
 800aa3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa40:	4293      	cmp	r3, r2
 800aa42:	bfb8      	it	lt
 800aa44:	4613      	movlt	r3, r2
 800aa46:	6033      	str	r3, [r6, #0]
 800aa48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	b10a      	cbz	r2, 800aa56 <_printf_common+0x26>
 800aa52:	3301      	adds	r3, #1
 800aa54:	6033      	str	r3, [r6, #0]
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	0699      	lsls	r1, r3, #26
 800aa5a:	bf42      	ittt	mi
 800aa5c:	6833      	ldrmi	r3, [r6, #0]
 800aa5e:	3302      	addmi	r3, #2
 800aa60:	6033      	strmi	r3, [r6, #0]
 800aa62:	6825      	ldr	r5, [r4, #0]
 800aa64:	f015 0506 	ands.w	r5, r5, #6
 800aa68:	d106      	bne.n	800aa78 <_printf_common+0x48>
 800aa6a:	f104 0a19 	add.w	sl, r4, #25
 800aa6e:	68e3      	ldr	r3, [r4, #12]
 800aa70:	6832      	ldr	r2, [r6, #0]
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	42ab      	cmp	r3, r5
 800aa76:	dc26      	bgt.n	800aac6 <_printf_common+0x96>
 800aa78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa7c:	1e13      	subs	r3, r2, #0
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	bf18      	it	ne
 800aa82:	2301      	movne	r3, #1
 800aa84:	0692      	lsls	r2, r2, #26
 800aa86:	d42b      	bmi.n	800aae0 <_printf_common+0xb0>
 800aa88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	4638      	mov	r0, r7
 800aa90:	47c0      	blx	r8
 800aa92:	3001      	adds	r0, #1
 800aa94:	d01e      	beq.n	800aad4 <_printf_common+0xa4>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	68e5      	ldr	r5, [r4, #12]
 800aa9a:	6832      	ldr	r2, [r6, #0]
 800aa9c:	f003 0306 	and.w	r3, r3, #6
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	bf08      	it	eq
 800aaa4:	1aad      	subeq	r5, r5, r2
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	6922      	ldr	r2, [r4, #16]
 800aaaa:	bf0c      	ite	eq
 800aaac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab0:	2500      	movne	r5, #0
 800aab2:	4293      	cmp	r3, r2
 800aab4:	bfc4      	itt	gt
 800aab6:	1a9b      	subgt	r3, r3, r2
 800aab8:	18ed      	addgt	r5, r5, r3
 800aaba:	2600      	movs	r6, #0
 800aabc:	341a      	adds	r4, #26
 800aabe:	42b5      	cmp	r5, r6
 800aac0:	d11a      	bne.n	800aaf8 <_printf_common+0xc8>
 800aac2:	2000      	movs	r0, #0
 800aac4:	e008      	b.n	800aad8 <_printf_common+0xa8>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4652      	mov	r2, sl
 800aaca:	4649      	mov	r1, r9
 800aacc:	4638      	mov	r0, r7
 800aace:	47c0      	blx	r8
 800aad0:	3001      	adds	r0, #1
 800aad2:	d103      	bne.n	800aadc <_printf_common+0xac>
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aadc:	3501      	adds	r5, #1
 800aade:	e7c6      	b.n	800aa6e <_printf_common+0x3e>
 800aae0:	18e1      	adds	r1, r4, r3
 800aae2:	1c5a      	adds	r2, r3, #1
 800aae4:	2030      	movs	r0, #48	; 0x30
 800aae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaea:	4422      	add	r2, r4
 800aaec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf4:	3302      	adds	r3, #2
 800aaf6:	e7c7      	b.n	800aa88 <_printf_common+0x58>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4622      	mov	r2, r4
 800aafc:	4649      	mov	r1, r9
 800aafe:	4638      	mov	r0, r7
 800ab00:	47c0      	blx	r8
 800ab02:	3001      	adds	r0, #1
 800ab04:	d0e6      	beq.n	800aad4 <_printf_common+0xa4>
 800ab06:	3601      	adds	r6, #1
 800ab08:	e7d9      	b.n	800aabe <_printf_common+0x8e>
	...

0800ab0c <_printf_i>:
 800ab0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab10:	7e0f      	ldrb	r7, [r1, #24]
 800ab12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab14:	2f78      	cmp	r7, #120	; 0x78
 800ab16:	4691      	mov	r9, r2
 800ab18:	4680      	mov	r8, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	469a      	mov	sl, r3
 800ab1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab22:	d807      	bhi.n	800ab34 <_printf_i+0x28>
 800ab24:	2f62      	cmp	r7, #98	; 0x62
 800ab26:	d80a      	bhi.n	800ab3e <_printf_i+0x32>
 800ab28:	2f00      	cmp	r7, #0
 800ab2a:	f000 80d8 	beq.w	800acde <_printf_i+0x1d2>
 800ab2e:	2f58      	cmp	r7, #88	; 0x58
 800ab30:	f000 80a3 	beq.w	800ac7a <_printf_i+0x16e>
 800ab34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab3c:	e03a      	b.n	800abb4 <_printf_i+0xa8>
 800ab3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab42:	2b15      	cmp	r3, #21
 800ab44:	d8f6      	bhi.n	800ab34 <_printf_i+0x28>
 800ab46:	a101      	add	r1, pc, #4	; (adr r1, 800ab4c <_printf_i+0x40>)
 800ab48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab4c:	0800aba5 	.word	0x0800aba5
 800ab50:	0800abb9 	.word	0x0800abb9
 800ab54:	0800ab35 	.word	0x0800ab35
 800ab58:	0800ab35 	.word	0x0800ab35
 800ab5c:	0800ab35 	.word	0x0800ab35
 800ab60:	0800ab35 	.word	0x0800ab35
 800ab64:	0800abb9 	.word	0x0800abb9
 800ab68:	0800ab35 	.word	0x0800ab35
 800ab6c:	0800ab35 	.word	0x0800ab35
 800ab70:	0800ab35 	.word	0x0800ab35
 800ab74:	0800ab35 	.word	0x0800ab35
 800ab78:	0800acc5 	.word	0x0800acc5
 800ab7c:	0800abe9 	.word	0x0800abe9
 800ab80:	0800aca7 	.word	0x0800aca7
 800ab84:	0800ab35 	.word	0x0800ab35
 800ab88:	0800ab35 	.word	0x0800ab35
 800ab8c:	0800ace7 	.word	0x0800ace7
 800ab90:	0800ab35 	.word	0x0800ab35
 800ab94:	0800abe9 	.word	0x0800abe9
 800ab98:	0800ab35 	.word	0x0800ab35
 800ab9c:	0800ab35 	.word	0x0800ab35
 800aba0:	0800acaf 	.word	0x0800acaf
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	1d1a      	adds	r2, r3, #4
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	602a      	str	r2, [r5, #0]
 800abac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb4:	2301      	movs	r3, #1
 800abb6:	e0a3      	b.n	800ad00 <_printf_i+0x1f4>
 800abb8:	6820      	ldr	r0, [r4, #0]
 800abba:	6829      	ldr	r1, [r5, #0]
 800abbc:	0606      	lsls	r6, r0, #24
 800abbe:	f101 0304 	add.w	r3, r1, #4
 800abc2:	d50a      	bpl.n	800abda <_printf_i+0xce>
 800abc4:	680e      	ldr	r6, [r1, #0]
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	2e00      	cmp	r6, #0
 800abca:	da03      	bge.n	800abd4 <_printf_i+0xc8>
 800abcc:	232d      	movs	r3, #45	; 0x2d
 800abce:	4276      	negs	r6, r6
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd4:	485e      	ldr	r0, [pc, #376]	; (800ad50 <_printf_i+0x244>)
 800abd6:	230a      	movs	r3, #10
 800abd8:	e019      	b.n	800ac0e <_printf_i+0x102>
 800abda:	680e      	ldr	r6, [r1, #0]
 800abdc:	602b      	str	r3, [r5, #0]
 800abde:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abe2:	bf18      	it	ne
 800abe4:	b236      	sxthne	r6, r6
 800abe6:	e7ef      	b.n	800abc8 <_printf_i+0xbc>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	6820      	ldr	r0, [r4, #0]
 800abec:	1d19      	adds	r1, r3, #4
 800abee:	6029      	str	r1, [r5, #0]
 800abf0:	0601      	lsls	r1, r0, #24
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0xec>
 800abf4:	681e      	ldr	r6, [r3, #0]
 800abf6:	e002      	b.n	800abfe <_printf_i+0xf2>
 800abf8:	0646      	lsls	r6, r0, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0xe8>
 800abfc:	881e      	ldrh	r6, [r3, #0]
 800abfe:	4854      	ldr	r0, [pc, #336]	; (800ad50 <_printf_i+0x244>)
 800ac00:	2f6f      	cmp	r7, #111	; 0x6f
 800ac02:	bf0c      	ite	eq
 800ac04:	2308      	moveq	r3, #8
 800ac06:	230a      	movne	r3, #10
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0e:	6865      	ldr	r5, [r4, #4]
 800ac10:	60a5      	str	r5, [r4, #8]
 800ac12:	2d00      	cmp	r5, #0
 800ac14:	bfa2      	ittt	ge
 800ac16:	6821      	ldrge	r1, [r4, #0]
 800ac18:	f021 0104 	bicge.w	r1, r1, #4
 800ac1c:	6021      	strge	r1, [r4, #0]
 800ac1e:	b90e      	cbnz	r6, 800ac24 <_printf_i+0x118>
 800ac20:	2d00      	cmp	r5, #0
 800ac22:	d04d      	beq.n	800acc0 <_printf_i+0x1b4>
 800ac24:	4615      	mov	r5, r2
 800ac26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ac2e:	5dc7      	ldrb	r7, [r0, r7]
 800ac30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac34:	4637      	mov	r7, r6
 800ac36:	42bb      	cmp	r3, r7
 800ac38:	460e      	mov	r6, r1
 800ac3a:	d9f4      	bls.n	800ac26 <_printf_i+0x11a>
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d10b      	bne.n	800ac58 <_printf_i+0x14c>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	07de      	lsls	r6, r3, #31
 800ac44:	d508      	bpl.n	800ac58 <_printf_i+0x14c>
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	4299      	cmp	r1, r3
 800ac4c:	bfde      	ittt	le
 800ac4e:	2330      	movle	r3, #48	; 0x30
 800ac50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac58:	1b52      	subs	r2, r2, r5
 800ac5a:	6122      	str	r2, [r4, #16]
 800ac5c:	f8cd a000 	str.w	sl, [sp]
 800ac60:	464b      	mov	r3, r9
 800ac62:	aa03      	add	r2, sp, #12
 800ac64:	4621      	mov	r1, r4
 800ac66:	4640      	mov	r0, r8
 800ac68:	f7ff fee2 	bl	800aa30 <_printf_common>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d14c      	bne.n	800ad0a <_printf_i+0x1fe>
 800ac70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac74:	b004      	add	sp, #16
 800ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7a:	4835      	ldr	r0, [pc, #212]	; (800ad50 <_printf_i+0x244>)
 800ac7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac80:	6829      	ldr	r1, [r5, #0]
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac88:	6029      	str	r1, [r5, #0]
 800ac8a:	061d      	lsls	r5, r3, #24
 800ac8c:	d514      	bpl.n	800acb8 <_printf_i+0x1ac>
 800ac8e:	07df      	lsls	r7, r3, #31
 800ac90:	bf44      	itt	mi
 800ac92:	f043 0320 	orrmi.w	r3, r3, #32
 800ac96:	6023      	strmi	r3, [r4, #0]
 800ac98:	b91e      	cbnz	r6, 800aca2 <_printf_i+0x196>
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	f023 0320 	bic.w	r3, r3, #32
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	2310      	movs	r3, #16
 800aca4:	e7b0      	b.n	800ac08 <_printf_i+0xfc>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	f043 0320 	orr.w	r3, r3, #32
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	2378      	movs	r3, #120	; 0x78
 800acb0:	4828      	ldr	r0, [pc, #160]	; (800ad54 <_printf_i+0x248>)
 800acb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb6:	e7e3      	b.n	800ac80 <_printf_i+0x174>
 800acb8:	0659      	lsls	r1, r3, #25
 800acba:	bf48      	it	mi
 800acbc:	b2b6      	uxthmi	r6, r6
 800acbe:	e7e6      	b.n	800ac8e <_printf_i+0x182>
 800acc0:	4615      	mov	r5, r2
 800acc2:	e7bb      	b.n	800ac3c <_printf_i+0x130>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	6826      	ldr	r6, [r4, #0]
 800acc8:	6961      	ldr	r1, [r4, #20]
 800acca:	1d18      	adds	r0, r3, #4
 800accc:	6028      	str	r0, [r5, #0]
 800acce:	0635      	lsls	r5, r6, #24
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	d501      	bpl.n	800acd8 <_printf_i+0x1cc>
 800acd4:	6019      	str	r1, [r3, #0]
 800acd6:	e002      	b.n	800acde <_printf_i+0x1d2>
 800acd8:	0670      	lsls	r0, r6, #25
 800acda:	d5fb      	bpl.n	800acd4 <_printf_i+0x1c8>
 800acdc:	8019      	strh	r1, [r3, #0]
 800acde:	2300      	movs	r3, #0
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	4615      	mov	r5, r2
 800ace4:	e7ba      	b.n	800ac5c <_printf_i+0x150>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	1d1a      	adds	r2, r3, #4
 800acea:	602a      	str	r2, [r5, #0]
 800acec:	681d      	ldr	r5, [r3, #0]
 800acee:	6862      	ldr	r2, [r4, #4]
 800acf0:	2100      	movs	r1, #0
 800acf2:	4628      	mov	r0, r5
 800acf4:	f7f5 fa74 	bl	80001e0 <memchr>
 800acf8:	b108      	cbz	r0, 800acfe <_printf_i+0x1f2>
 800acfa:	1b40      	subs	r0, r0, r5
 800acfc:	6060      	str	r0, [r4, #4]
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	2300      	movs	r3, #0
 800ad04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad08:	e7a8      	b.n	800ac5c <_printf_i+0x150>
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4640      	mov	r0, r8
 800ad12:	47d0      	blx	sl
 800ad14:	3001      	adds	r0, #1
 800ad16:	d0ab      	beq.n	800ac70 <_printf_i+0x164>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	079b      	lsls	r3, r3, #30
 800ad1c:	d413      	bmi.n	800ad46 <_printf_i+0x23a>
 800ad1e:	68e0      	ldr	r0, [r4, #12]
 800ad20:	9b03      	ldr	r3, [sp, #12]
 800ad22:	4298      	cmp	r0, r3
 800ad24:	bfb8      	it	lt
 800ad26:	4618      	movlt	r0, r3
 800ad28:	e7a4      	b.n	800ac74 <_printf_i+0x168>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	4649      	mov	r1, r9
 800ad30:	4640      	mov	r0, r8
 800ad32:	47d0      	blx	sl
 800ad34:	3001      	adds	r0, #1
 800ad36:	d09b      	beq.n	800ac70 <_printf_i+0x164>
 800ad38:	3501      	adds	r5, #1
 800ad3a:	68e3      	ldr	r3, [r4, #12]
 800ad3c:	9903      	ldr	r1, [sp, #12]
 800ad3e:	1a5b      	subs	r3, r3, r1
 800ad40:	42ab      	cmp	r3, r5
 800ad42:	dcf2      	bgt.n	800ad2a <_printf_i+0x21e>
 800ad44:	e7eb      	b.n	800ad1e <_printf_i+0x212>
 800ad46:	2500      	movs	r5, #0
 800ad48:	f104 0619 	add.w	r6, r4, #25
 800ad4c:	e7f5      	b.n	800ad3a <_printf_i+0x22e>
 800ad4e:	bf00      	nop
 800ad50:	0800d1ea 	.word	0x0800d1ea
 800ad54:	0800d1fb 	.word	0x0800d1fb

0800ad58 <memmove>:
 800ad58:	4288      	cmp	r0, r1
 800ad5a:	b510      	push	{r4, lr}
 800ad5c:	eb01 0402 	add.w	r4, r1, r2
 800ad60:	d902      	bls.n	800ad68 <memmove+0x10>
 800ad62:	4284      	cmp	r4, r0
 800ad64:	4623      	mov	r3, r4
 800ad66:	d807      	bhi.n	800ad78 <memmove+0x20>
 800ad68:	1e43      	subs	r3, r0, #1
 800ad6a:	42a1      	cmp	r1, r4
 800ad6c:	d008      	beq.n	800ad80 <memmove+0x28>
 800ad6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad76:	e7f8      	b.n	800ad6a <memmove+0x12>
 800ad78:	4402      	add	r2, r0
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	428a      	cmp	r2, r1
 800ad7e:	d100      	bne.n	800ad82 <memmove+0x2a>
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad8a:	e7f7      	b.n	800ad7c <memmove+0x24>

0800ad8c <_realloc_r>:
 800ad8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad90:	4680      	mov	r8, r0
 800ad92:	4614      	mov	r4, r2
 800ad94:	460e      	mov	r6, r1
 800ad96:	b921      	cbnz	r1, 800ada2 <_realloc_r+0x16>
 800ad98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	f7ff baed 	b.w	800a37c <_malloc_r>
 800ada2:	b92a      	cbnz	r2, 800adb0 <_realloc_r+0x24>
 800ada4:	f7ff fa7e 	bl	800a2a4 <_free_r>
 800ada8:	4625      	mov	r5, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb0:	f000 f81b 	bl	800adea <_malloc_usable_size_r>
 800adb4:	4284      	cmp	r4, r0
 800adb6:	4607      	mov	r7, r0
 800adb8:	d802      	bhi.n	800adc0 <_realloc_r+0x34>
 800adba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adbe:	d812      	bhi.n	800ade6 <_realloc_r+0x5a>
 800adc0:	4621      	mov	r1, r4
 800adc2:	4640      	mov	r0, r8
 800adc4:	f7ff fada 	bl	800a37c <_malloc_r>
 800adc8:	4605      	mov	r5, r0
 800adca:	2800      	cmp	r0, #0
 800adcc:	d0ed      	beq.n	800adaa <_realloc_r+0x1e>
 800adce:	42bc      	cmp	r4, r7
 800add0:	4622      	mov	r2, r4
 800add2:	4631      	mov	r1, r6
 800add4:	bf28      	it	cs
 800add6:	463a      	movcs	r2, r7
 800add8:	f7ff fa38 	bl	800a24c <memcpy>
 800addc:	4631      	mov	r1, r6
 800adde:	4640      	mov	r0, r8
 800ade0:	f7ff fa60 	bl	800a2a4 <_free_r>
 800ade4:	e7e1      	b.n	800adaa <_realloc_r+0x1e>
 800ade6:	4635      	mov	r5, r6
 800ade8:	e7df      	b.n	800adaa <_realloc_r+0x1e>

0800adea <_malloc_usable_size_r>:
 800adea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adee:	1f18      	subs	r0, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bfbc      	itt	lt
 800adf4:	580b      	ldrlt	r3, [r1, r0]
 800adf6:	18c0      	addlt	r0, r0, r3
 800adf8:	4770      	bx	lr
	...

0800adfc <_init>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	bf00      	nop
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr

0800ae08 <_fini>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	bf00      	nop
 800ae0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0e:	bc08      	pop	{r3}
 800ae10:	469e      	mov	lr, r3
 800ae12:	4770      	bx	lr
