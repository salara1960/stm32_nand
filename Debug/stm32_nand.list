
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080058c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000009ec  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20000a74  20000a74  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001538b  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028cb  00000000  00000000  0003543f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00037d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  00038ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234d2  00000000  00000000  00039bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134c8  00000000  00000000  0005d08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5dce  00000000  00000000  00070552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146320  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046f0  00000000  00000000  00146374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057e4 	.word	0x080057e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080057e4 	.word	0x080057e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <__NVIC_SystemReset+0x24>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <__NVIC_SystemReset+0x24>)
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__NVIC_SystemReset+0x28>)
 800058e:	4313      	orrs	r3, r2
 8000590:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000592:	f3bf 8f4f 	dsb	sy
}
 8000596:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <__NVIC_SystemReset+0x20>
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	05fa0004 	.word	0x05fa0004

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fef1 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f869 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f9c1 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f000 f99f 	bl	80008f8 <MX_DMA_Init>
  MX_TIM2_Init();
 80005ba:	f000 f927 	bl	800080c <MX_TIM2_Init>
  MX_RTC_Init();
 80005be:	f000 f8cb 	bl	8000758 <MX_RTC_Init>
  MX_FSMC_Init();
 80005c2:	f000 fa4b 	bl	8000a5c <MX_FSMC_Init>
  MX_USART3_UART_Init();
 80005c6:	f000 f96d 	bl	80008a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(1000);

  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	4823      	ldr	r0, [pc, #140]	; (800065c <main+0xb8>)
 80005d0:	f001 fdc4 	bl	800215c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <main+0xbc>)
 80005dc:	f001 fdbe 	bl	800215c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80005e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e4:	f000 ff16 	bl	8001414 <HAL_Delay>
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0xb8>)
 80005ee:	f001 fdb5 	bl	800215c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4819      	ldr	r0, [pc, #100]	; (8000660 <main+0xbc>)
 80005fa:	f001 fdaf 	bl	800215c <HAL_GPIO_WritePin>

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <main+0xc0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f002 ff48 	bl	8003498 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <main+0xc4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2201      	movs	r2, #1
 800060e:	4917      	ldr	r1, [pc, #92]	; (800066c <main+0xc8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fbc0 	bl	8003d96 <HAL_UART_Receive_IT>

  HAL_Delay(1500);
 8000616:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800061a:	f000 fefb 	bl	8001414 <HAL_Delay>

  Report(1, "[%s] Start all interrupts (%s)%s", __func__, version, eol);
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <main+0xcc>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <main+0xd0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <main+0xd4>)
 800062c:	4913      	ldr	r1, [pc, #76]	; (800067c <main+0xd8>)
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fb1e 	bl	8000c70 <Report>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //LOOP_FOREVER();

  bool led = false;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]
  while (1) {

	  if (devError) led = true; else led = false;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <main+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <main+0xa2>
 8000640:	2301      	movs	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	e001      	b.n	800064a <main+0xa6>
 8000646:	2300      	movs	r3, #0
 8000648:	71fb      	strb	r3, [r7, #7]
	  errLedOn(led);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fa67 	bl	8000b20 <errLedOn>
	  HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000656:	f000 fedd 	bl	8001414 <HAL_Delay>
	  if (devError) led = true; else led = false;
 800065a:	e7ed      	b.n	8000638 <main+0x94>
 800065c:	40020800 	.word	0x40020800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	2000000c 	.word	0x2000000c
 8000668:	20000010 	.word	0x20000010
 800066c:	200008b0 	.word	0x200008b0
 8000670:	20000000 	.word	0x20000000
 8000674:	20000004 	.word	0x20000004
 8000678:	0800585c 	.word	0x0800585c
 800067c:	08005814 	.word	0x08005814
 8000680:	2000090c 	.word	0x2000090c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fc1e 	bl	8004ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fe86 	bl	800241c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000716:	f000 fb99 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f002 f8e7 	bl	800290c <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000744:	f000 fb82 	bl	8000e4c <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_RTC_Init+0xac>)
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <MX_RTC_Init+0xb0>)
 8000774:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_RTC_Init+0xac>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_RTC_Init+0xac>)
 800077e:	227f      	movs	r2, #127	; 0x7f
 8000780:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_RTC_Init+0xac>)
 8000784:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000788:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_RTC_Init+0xac>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_RTC_Init+0xac>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_RTC_Init+0xac>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079c:	4819      	ldr	r0, [pc, #100]	; (8000804 <MX_RTC_Init+0xac>)
 800079e:	f002 fbc5 	bl	8002f2c <HAL_RTC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80007a8:	f000 fb50 	bl	8000e4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <MX_RTC_Init+0xac>)
 80007c8:	f002 fc41 	bl	800304e <HAL_RTC_SetTime>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80007d2:	f000 fb3b 	bl	8000e4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007d6:	2301      	movs	r3, #1
 80007d8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007da:	2301      	movs	r3, #1
 80007dc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_RTC_Init+0xac>)
 80007ee:	f002 fceb 	bl	80031c8 <HAL_RTC_SetDate>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80007f8:	f000 fb28 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200009b0 	.word	0x200009b0
 8000808:	40002800 	.word	0x40002800

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_TIM2_Init+0x94>)
 800082a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_TIM2_Init+0x94>)
 8000832:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM2_Init+0x94>)
 8000840:	22f9      	movs	r2, #249	; 0xf9
 8000842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_TIM2_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_TIM2_Init+0x94>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_TIM2_Init+0x94>)
 8000852:	f002 fdd2 	bl	80033fa <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800085c:	f000 faf6 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_TIM2_Init+0x94>)
 800086e:	f002 ff8b 	bl	8003788 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000878:	f000 fae8 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800087c:	2320      	movs	r3, #32
 800087e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_TIM2_Init+0x94>)
 800088a:	f003 f9a7 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000894:	f000 fada 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200009d0 	.word	0x200009d0

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART3_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008dc:	f003 fa0e 	bl	8003cfc <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 fab1 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200008c8 	.word	0x200008c8
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_DMA_Init+0x3c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <MX_DMA_Init+0x3c>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_DMA_Init+0x3c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200e      	movs	r0, #14
 8000920:	f000 fe54 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000924:	200e      	movs	r0, #14
 8000926:	f000 fe6d 	bl	8001604 <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_GPIO_Init+0x118>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_GPIO_Init+0x118>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4815      	ldr	r0, [pc, #84]	; (8000a54 <MX_GPIO_Init+0x11c>)
 80009fe:	f001 fbad 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x120>)
 8000a08:	f001 fba8 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0x11c>)
 8000a26:	f001 f9fd 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_GPIO_Init+0x120>)
 8000a42:	f001 f9ef 	bl	8001e24 <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	; 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40020800 	.word	0x40020800

08000a5c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000a7e:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <MX_FSMC_Init+0xc0>)
 8000a80:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000a84:	2210      	movs	r2, #16
 8000a86:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000ad8:	23fc      	movs	r3, #252	; 0xfc
 8000ada:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8000adc:	23fc      	movs	r3, #252	; 0xfc
 8000ade:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8000ae0:	23fc      	movs	r3, #252	; 0xfc
 8000ae2:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8000ae4:	23fc      	movs	r3, #252	; 0xfc
 8000ae6:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000ae8:	23fc      	movs	r3, #252	; 0xfc
 8000aea:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8000aec:	23fc      	movs	r3, #252	; 0xfc
 8000aee:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8000af0:	23fc      	movs	r3, #252	; 0xfc
 8000af2:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8000af4:	23fc      	movs	r3, #252	; 0xfc
 8000af6:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000af8:	463a      	mov	r2, r7
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_FSMC_Init+0xbc>)
 8000b02:	f001 fb5e 	bl	80021c2 <HAL_NAND_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000b0c:	f000 f99e 	bl	8000e4c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000970 	.word	0x20000970
 8000b1c:	a0000060 	.word	0xa0000060

08000b20 <errLedOn>:

/* USER CODE BEGIN 4 */
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (on)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <errLedOn+0x34>)
 8000b38:	f001 fb10 	bl	800215c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8000b3c:	e005      	b.n	8000b4a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <errLedOn+0x34>)
 8000b46:	f001 fb09 	bl	800215c <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	return secCounter;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <get_secCounter+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000a4 	.word	0x200000a4

08000b70 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	secCounter++;
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <inc_secCounter+0x18>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <inc_secCounter+0x18>)
 8000b7c:	6013      	str	r3, [r2, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	200000a4 	.word	0x200000a4

08000b8c <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	return msCounter;
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <get_msCounter+0x18>)
 8000b92:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000b96:	4610      	mov	r0, r2
 8000b98:	4619      	mov	r1, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000a8 	.word	0x200000a8

08000ba8 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	msCounter++;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <inc_msCounter+0x20>)
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	1c50      	adds	r0, r2, #1
 8000bb4:	f143 0100 	adc.w	r1, r3, #0
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <inc_msCounter+0x20>)
 8000bba:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200000a8 	.word	0x200000a8

08000bcc <sec2str>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	6078      	str	r0, [r7, #4]
	uint32_t sec = get_secCounter();
 8000bd4:	f7ff ffc0 	bl	8000b58 <get_secCounter>
 8000bd8:	6178      	str	r0, [r7, #20]

	uint32_t day = sec / (60 * 60 * 24);
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <sec2str+0x90>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	0c1b      	lsrs	r3, r3, #16
 8000be4:	613b      	str	r3, [r7, #16]
	sec %= (60 * 60 * 24);
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <sec2str+0x90>)
 8000bea:	fba2 1203 	umull	r1, r2, r2, r3
 8000bee:	0c12      	lsrs	r2, r2, #16
 8000bf0:	491b      	ldr	r1, [pc, #108]	; (8000c60 <sec2str+0x94>)
 8000bf2:	fb01 f202 	mul.w	r2, r1, r2
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	617b      	str	r3, [r7, #20]
	uint32_t hour = sec / (60 * 60);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <sec2str+0x98>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	0adb      	lsrs	r3, r3, #11
 8000c04:	60fb      	str	r3, [r7, #12]
	sec %= (60 * 60);
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <sec2str+0x98>)
 8000c0a:	fba2 1203 	umull	r1, r2, r2, r3
 8000c0e:	0ad2      	lsrs	r2, r2, #11
 8000c10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000c14:	fb01 f202 	mul.w	r2, r1, r2
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	617b      	str	r3, [r7, #20]
	uint32_t min = sec / (60);
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <sec2str+0x9c>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	095b      	lsrs	r3, r3, #5
 8000c26:	60bb      	str	r3, [r7, #8]
	sec %= 60;
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <sec2str+0x9c>)
 8000c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c30:	0959      	lsrs	r1, r3, #5
 8000c32:	460b      	mov	r3, r1
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	1a5b      	subs	r3, r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]

	return (sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <sec2str+0xa0>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f004 f949 	bl	8004ee4 <siprintf>
 8000c52:	4603      	mov	r3, r0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	c22e4507 	.word	0xc22e4507
 8000c60:	00015180 	.word	0x00015180
 8000c64:	91a2b3c5 	.word	0x91a2b3c5
 8000c68:	88888889 	.word	0x88888889
 8000c6c:	08005838 	.word	0x08005838

08000c70 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 8000c70:	b40e      	push	{r1, r2, r3}
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	613b      	str	r3, [r7, #16]
int dl = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <Report+0xbc>)
 8000c88:	60fb      	str	r3, [r7, #12]

	    *buf = '\0';
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
		if (addTime) {
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d012      	beq.n	8000cbc <Report+0x4c>
			dl = sec2str(buf);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff ff98 	bl	8000bcc <sec2str>
 8000c9c:	6178      	str	r0, [r7, #20]
			strcat(buf, "| ");
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fa96 	bl	80001d0 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <Report+0xc0>)
 8000cae:	8811      	ldrh	r1, [r2, #0]
 8000cb0:	7892      	ldrb	r2, [r2, #2]
 8000cb2:	8019      	strh	r1, [r3, #0]
 8000cb4:	709a      	strb	r2, [r3, #2]
			dl += 2;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	617b      	str	r3, [r7, #20]
		}

		va_start(args, fmt);
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	18d0      	adds	r0, r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	1ad1      	subs	r1, r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd2:	f004 f96b 	bl	8004fac <vsniprintf>

		uartRdy = false;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <Report+0xc4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <Report+0xc8>)
 8000cde:	681c      	ldr	r4, [r3, #0]
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f7ff fa75 	bl	80001d0 <strlen>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f003 f882 	bl	8003df8 <HAL_UART_Transmit_DMA>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d009      	beq.n	8000d0e <Report+0x9e>
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <Report+0xcc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <Report+0xcc>)
 8000d04:	6013      	str	r3, [r2, #0]
		while (!uartRdy) HAL_Delay(1);
 8000d06:	e002      	b.n	8000d0e <Report+0x9e>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fb83 	bl	8001414 <HAL_Delay>
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <Report+0xc4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f5      	bne.n	8000d08 <Report+0x98>
			if (HAL_UART_GetState(logPort) == HAL_UART_STATE_BUSY_RX) break;
			HAL_Delay(1);
		}*/
		va_end(args);

	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d28:	b003      	add	sp, #12
 8000d2a:	4770      	bx	lr
 8000d2c:	200000b0 	.word	0x200000b0
 8000d30:	08005850 	.word	0x08005850
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	2000090c 	.word	0x2000090c

08000d40 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <HAL_UART_RxCpltCallback+0x68>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d125      	bne.n	8000d9e <HAL_UART_RxCpltCallback+0x5e>
		rxBuf[ruk++] = (char)rxByte;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_UART_RxCpltCallback+0x6c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	b291      	uxth	r1, r2
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <HAL_UART_RxCpltCallback+0x6c>)
 8000d5c:	8011      	strh	r1, [r2, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UART_RxCpltCallback+0x70>)
 8000d62:	7819      	ldrb	r1, [r3, #0]
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_UART_RxCpltCallback+0x74>)
 8000d66:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_RxCpltCallback+0x70>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b0a      	cmp	r3, #10
 8000d6e:	d111      	bne.n	8000d94 <HAL_UART_RxCpltCallback+0x54>
			if (strstr(rxBuf, "restart")) {
 8000d70:	4911      	ldr	r1, [pc, #68]	; (8000db8 <HAL_UART_RxCpltCallback+0x78>)
 8000d72:	4810      	ldr	r0, [pc, #64]	; (8000db4 <HAL_UART_RxCpltCallback+0x74>)
 8000d74:	f004 f8d6 	bl	8004f24 <strstr>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_UART_RxCpltCallback+0x42>
				NVIC_SystemReset();
 8000d7e:	f7ff fbfb 	bl	8000578 <__NVIC_SystemReset>
			}
			ruk = 0;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_UART_RxCpltCallback+0x6c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8000d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4809      	ldr	r0, [pc, #36]	; (8000db4 <HAL_UART_RxCpltCallback+0x74>)
 8000d90:	f004 f8a0 	bl	8004ed4 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	4906      	ldr	r1, [pc, #24]	; (8000db0 <HAL_UART_RxCpltCallback+0x70>)
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f002 fffc 	bl	8003d96 <HAL_UART_Receive_IT>
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004800 	.word	0x40004800
 8000dac:	200008b2 	.word	0x200008b2
 8000db0:	200008b0 	.word	0x200008b0
 8000db4:	200004b0 	.word	0x200004b0
 8000db8:	08005854 	.word	0x08005854

08000dbc <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_UART_TxCpltCallback+0x24>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d102      	bne.n	8000dd4 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_UART_TxCpltCallback+0x28>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40004800 	.word	0x40004800
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d102      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000dfa:	f000 faeb 	bl	80013d4 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8000dfe:	e01c      	b.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM2) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d117      	bne.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x52>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8000e0a:	f7ff febf 	bl	8000b8c <get_msCounter>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	f04f 0003 	mov.w	r0, #3
 8000e16:	f04f 0100 	mov.w	r1, #0
 8000e1a:	ea02 0400 	and.w	r4, r2, r0
 8000e1e:	ea03 0501 	and.w	r5, r3, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	bf08      	it	eq
 8000e26:	2c03      	cmpeq	r4, #3
 8000e28:	d105      	bne.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x4e>
		  inc_secCounter();
 8000e2a:	f7ff fea1 	bl	8000b70 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e32:	f001 f9ac 	bl	800218e <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8000e36:	f7ff feb7 	bl	8000ba8 <inc_msCounter>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bdb0      	pop	{r4, r5, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010000 	.word	0x40010000
 8000e48:	40020800 	.word	0x40020800

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_MspInit+0x58>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_MspInit+0x58>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_MspInit+0x58>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x58>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_MspInit+0x58>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_MspInit+0x58>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f000 fb94 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f000 fbad 	bl	8001604 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_RTC_MspInit+0x4c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d110      	bne.n	8000efa <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_RTC_MspInit+0x50>)
 8000ede:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 ff3f 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000ef0:	f7ff ffac 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_RTC_MspInit+0x54>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40002800 	.word	0x40002800
 8000f08:	00190300 	.word	0x00190300
 8000f0c:	42470e3c 	.word	0x42470e3c

08000f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f20:	d115      	bne.n	8000f4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_TIM_Base_MspInit+0x48>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_TIM_Base_MspInit+0x48>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_Base_MspInit+0x48>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2101      	movs	r1, #1
 8000f42:	201c      	movs	r0, #28
 8000f44:	f000 fb42 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f48:	201c      	movs	r0, #28
 8000f4a:	f000 fb5b 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a35      	ldr	r2, [pc, #212]	; (8001050 <HAL_UART_MspInit+0xf4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d163      	bne.n	8001046 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <HAL_UART_MspInit+0xf8>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a33      	ldr	r2, [pc, #204]	; (8001054 <HAL_UART_MspInit+0xf8>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_UART_MspInit+0xf8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_UART_MspInit+0xf8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <HAL_UART_MspInit+0xf8>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <HAL_UART_MspInit+0xf8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8000fb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4821      	ldr	r0, [pc, #132]	; (8001058 <HAL_UART_MspInit+0xfc>)
 8000fd4:	f000 ff26 	bl	8001e24 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000fd8:	4b20      	ldr	r3, [pc, #128]	; (800105c <HAL_UART_MspInit+0x100>)
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_UART_MspInit+0x104>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_UART_MspInit+0x100>)
 8000fe0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_UART_MspInit+0x100>)
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_UART_MspInit+0x100>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_UART_MspInit+0x100>)
 8000ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_UART_MspInit+0x100>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_UART_MspInit+0x100>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_UART_MspInit+0x100>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_UART_MspInit+0x100>)
 800100e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001012:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_UART_MspInit+0x100>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <HAL_UART_MspInit+0x100>)
 800101c:	f000 fb00 	bl	8001620 <HAL_DMA_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001026:	f7ff ff11 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_UART_MspInit+0x100>)
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_UART_MspInit+0x100>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2027      	movs	r0, #39	; 0x27
 800103c:	f000 fac6 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001040:	2027      	movs	r0, #39	; 0x27
 8001042:	f000 fadf 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004800 	.word	0x40004800
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400
 800105c:	20000910 	.word	0x20000910
 8001060:	40026058 	.word	0x40026058

08001064 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_FSMC_MspInit+0x98>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d139      	bne.n	80010f4 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_FSMC_MspInit+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_FSMC_MspInit+0x9c>)
 800108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_FSMC_MspInit+0x9c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6393      	str	r3, [r2, #56]	; 0x38
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_FSMC_MspInit+0x9c>)
 8001098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010a2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80010a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010b4:	230c      	movs	r3, #12
 80010b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <HAL_FSMC_MspInit+0xa0>)
 80010be:	f000 feb1 	bl	8001e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80010c2:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80010c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010d4:	230c      	movs	r3, #12
 80010d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <HAL_FSMC_MspInit+0xa4>)
 80010de:	f000 fea1 	bl	8001e24 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 2, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2102      	movs	r1, #2
 80010e6:	2030      	movs	r0, #48	; 0x30
 80010e8:	f000 fa70 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80010ec:	2030      	movs	r0, #48	; 0x30
 80010ee:	f000 fa89 	bl	8001604 <HAL_NVIC_EnableIRQ>
 80010f2:	e000      	b.n	80010f6 <HAL_FSMC_MspInit+0x92>
    return;
 80010f4:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200008b4 	.word	0x200008b4
 8001100:	40023800 	.word	0x40023800
 8001104:	40021000 	.word	0x40021000
 8001108:	40020c00 	.word	0x40020c00

0800110c <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8001114:	f7ff ffa6 	bl	8001064 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	2019      	movs	r0, #25
 8001136:	f000 fa49 	bl	80015cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800113a:	2019      	movs	r0, #25
 800113c:	f000 fa62 	bl	8001604 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_InitTick+0xa4>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_InitTick+0xa4>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6453      	str	r3, [r2, #68]	; 0x44
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_InitTick+0xa4>)
 8001152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800115c:	f107 0210 	add.w	r2, r7, #16
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fdcc 	bl	8002d04 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800116c:	f001 fdb6 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8001170:	4603      	mov	r3, r0
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_InitTick+0xa8>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	3b01      	subs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_InitTick+0xac>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_InitTick+0xb0>)
 8001188:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_InitTick+0xac>)
 800118c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001190:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_InitTick+0xac>)
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_InitTick+0xac>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_InitTick+0xac>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_InitTick+0xac>)
 80011a6:	f002 f928 	bl	80033fa <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d104      	bne.n	80011ba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_InitTick+0xac>)
 80011b2:	f002 f971 	bl	8003498 <HAL_TIM_Base_Start_IT>
 80011b6:	4603      	mov	r3, r0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	431bde83 	.word	0x431bde83
 80011cc:	20000a18 	.word	0x20000a18
 80011d0:	40010000 	.word	0x40010000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DMA1_Stream3_IRQHandler+0x10>)
 8001246:	f000 fb83 	bl	8001950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000910 	.word	0x20000910

08001254 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800125a:	f002 f98d 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000a18 	.word	0x20000a18

08001268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM2_IRQHandler+0x10>)
 800126e:	f002 f983 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200009d0 	.word	0x200009d0

0800127c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <USART3_IRQHandler+0x10>)
 8001282:	f002 fe37 	bl	8003ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200008c8 	.word	0x200008c8

08001290 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <FSMC_IRQHandler+0x10>)
 8001296:	f000 ffe2 	bl	800225e <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000970 	.word	0x20000970

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f003 fdd4 	bl	8004e80 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20020000 	.word	0x20020000
 8001304:	00000800 	.word	0x00000800
 8001308:	200008b8 	.word	0x200008b8
 800130c:	20000a78 	.word	0x20000a78

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SystemInit+0x28>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <SystemInit+0x28>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SystemInit+0x28>)
 8001326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132a:	609a      	str	r2, [r3, #8]
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001340:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001342:	e003      	b.n	800134c <LoopCopyDataInit>

08001344 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001346:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001348:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800134a:	3104      	adds	r1, #4

0800134c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001350:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001352:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001354:	d3f6      	bcc.n	8001344 <CopyDataInit>
  ldr  r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001358:	e002      	b.n	8001360 <LoopFillZerobss>

0800135a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800135a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800135c:	f842 3b04 	str.w	r3, [r2], #4

08001360 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001362:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001364:	d3f9      	bcc.n	800135a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffd3 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f003 fd8f 	bl	8004e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff f919 	bl	80005a4 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001374:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001378:	080058c8 	.word	0x080058c8
  ldr  r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001380:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001384:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001388:	20000a74 	.word	0x20000a74

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f8fc 	bl	80015b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	200f      	movs	r0, #15
 80013c0:	f7ff feae 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fd4a 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000001c 	.word	0x2000001c
 80013f8:	20000a60 	.word	0x20000a60

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000a60 	.word	0x20000a60

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000001c 	.word	0x2000001c

0800145c <__NVIC_SetPriorityGrouping>:
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff4c 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015de:	f7ff ff61 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ffb1 	bl	8001550 <NVIC_EncodePriority>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff80 	bl	80014fc <__NVIC_SetPriority>
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff54 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fee6 	bl	80013fc <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e099      	b.n	8001770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165c:	e00f      	b.n	800167e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165e:	f7ff fecd 	bl	80013fc <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b05      	cmp	r3, #5
 800166a:	d908      	bls.n	800167e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2203      	movs	r2, #3
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e078      	b.n	8001770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e8      	bne.n	800165e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_DMA_Init+0x158>)
 8001698:	4013      	ands	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d107      	bne.n	80016e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4313      	orrs	r3, r2
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f023 0307 	bic.w	r3, r3, #7
 80016fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	2b04      	cmp	r3, #4
 8001710:	d117      	bne.n	8001742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fb01 	bl	8001d2c <DMA_CheckFifoParam>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800173e:	2301      	movs	r3, #1
 8001740:	e016      	b.n	8001770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fab8 	bl	8001cc0 <DMA_CalcBaseAndBitshift>
 8001750:	4603      	mov	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	223f      	movs	r2, #63	; 0x3f
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	f010803f 	.word	0xf010803f

0800177c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_DMA_Start_IT+0x26>
 800179e:	2302      	movs	r3, #2
 80017a0:	e040      	b.n	8001824 <HAL_DMA_Start_IT+0xa8>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d12f      	bne.n	8001816 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2202      	movs	r2, #2
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fa4a 	bl	8001c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	223f      	movs	r2, #63	; 0x3f
 80017d6:	409a      	lsls	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0216 	orr.w	r2, r2, #22
 80017ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0208 	orr.w	r2, r2, #8
 8001802:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e005      	b.n	8001822 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800181e:	2302      	movs	r3, #2
 8001820:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001822:	7dfb      	ldrb	r3, [r7, #23]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800183a:	f7ff fddf 	bl	80013fc <HAL_GetTick>
 800183e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d008      	beq.n	800185e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e052      	b.n	8001904 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0216 	bic.w	r2, r2, #22
 800186c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <HAL_DMA_Abort+0x62>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0208 	bic.w	r2, r2, #8
 800189c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ae:	e013      	b.n	80018d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b0:	f7ff fda4 	bl	80013fc <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d90c      	bls.n	80018d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e015      	b.n	8001904 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1e4      	bne.n	80018b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	223f      	movs	r2, #63	; 0x3f
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d004      	beq.n	800192a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00c      	b.n	8001944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2205      	movs	r2, #5
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_DMA_IRQHandler+0x258>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_DMA_IRQHandler+0x25c>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2208      	movs	r2, #8
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01a      	beq.n	80019bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2208      	movs	r2, #8
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2201      	movs	r2, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0202 	orr.w	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2204      	movs	r2, #4
 80019f8:	409a      	lsls	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d012      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2204      	movs	r2, #4
 8001a16:	409a      	lsls	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d043      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d03c      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d018      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d024      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
 8001a7e:	e01f      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01b      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	e016      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0208 	bic.w	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 808e 	beq.w	8001bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8086 	beq.w	8001bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d136      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0216 	bic.w	r2, r2, #22
 8001b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x1da>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0208 	bic.w	r2, r2, #8
 8001b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	223f      	movs	r2, #63	; 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d07d      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
        }
        return;
 8001b66:	e078      	b.n	8001c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01c      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d030      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
 8001b94:	e02b      	b.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d027      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
 8001ba6:	e022      	b.n	8001bee <HAL_DMA_IRQHandler+0x29e>
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0210 	bic.w	r2, r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d032      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d022      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d307      	bcc.n	8001c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f2      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x2ca>
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c36:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c5a:	bf00      	nop
    }
  }
}
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop

08001c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d108      	bne.n	8001ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ca2:	e007      	b.n	8001cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3b10      	subs	r3, #16
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <DMA_CalcBaseAndBitshift+0x64>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <DMA_CalcBaseAndBitshift+0x68>)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d909      	bls.n	8001d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	1d1a      	adds	r2, r3, #4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001d00:	e007      	b.n	8001d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	aaaaaaab 	.word	0xaaaaaaab
 8001d28:	0800587c 	.word	0x0800587c

08001d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11f      	bne.n	8001d86 <DMA_CheckFifoParam+0x5a>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d856      	bhi.n	8001dfa <DMA_CheckFifoParam+0xce>
 8001d4c:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <DMA_CheckFifoParam+0x28>)
 8001d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d52:	bf00      	nop
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d77 	.word	0x08001d77
 8001d5c:	08001d65 	.word	0x08001d65
 8001d60:	08001dfb 	.word	0x08001dfb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d046      	beq.n	8001dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d74:	e043      	b.n	8001dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d7e:	d140      	bne.n	8001e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d84:	e03d      	b.n	8001e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8e:	d121      	bne.n	8001dd4 <DMA_CheckFifoParam+0xa8>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d837      	bhi.n	8001e06 <DMA_CheckFifoParam+0xda>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <DMA_CheckFifoParam+0x70>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001db3 	.word	0x08001db3
 8001da4:	08001dad 	.word	0x08001dad
 8001da8:	08001dc5 	.word	0x08001dc5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      break;
 8001db0:	e030      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d025      	beq.n	8001e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc2:	e022      	b.n	8001e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dcc:	d11f      	bne.n	8001e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dd2:	e01c      	b.n	8001e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d903      	bls.n	8001de2 <DMA_CheckFifoParam+0xb6>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d003      	beq.n	8001de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001de0:	e018      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      break;
 8001de6:	e015      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	e00b      	b.n	8001e12 <DMA_CheckFifoParam+0xe6>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e00a      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e008      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e02:	bf00      	nop
 8001e04:	e006      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
 8001e08:	e004      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e002      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e0e:	bf00      	nop
 8001e10:	e000      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
    }
  } 
  
  return status; 
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e16b      	b.n	8002118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f040 815a 	bne.w	8002112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d005      	beq.n	8001e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d130      	bne.n	8001ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 0201 	and.w	r2, r3, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d017      	beq.n	8001f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d123      	bne.n	8001f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80b4 	beq.w	8002112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_GPIO_Init+0x30c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a5f      	ldr	r2, [pc, #380]	; (8002130 <HAL_GPIO_Init+0x30c>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_GPIO_Init+0x30c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc6:	4a5b      	ldr	r2, [pc, #364]	; (8002134 <HAL_GPIO_Init+0x310>)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_GPIO_Init+0x314>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <HAL_GPIO_Init+0x226>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_GPIO_Init+0x318>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x222>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a50      	ldr	r2, [pc, #320]	; (8002140 <HAL_GPIO_Init+0x31c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x21e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <HAL_GPIO_Init+0x320>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x21a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_GPIO_Init+0x324>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x216>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4d      	ldr	r2, [pc, #308]	; (800214c <HAL_GPIO_Init+0x328>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x212>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4c      	ldr	r2, [pc, #304]	; (8002150 <HAL_GPIO_Init+0x32c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x20e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_GPIO_Init+0x330>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x20a>
 800202a:	2307      	movs	r3, #7
 800202c:	e00e      	b.n	800204c <HAL_GPIO_Init+0x228>
 800202e:	2308      	movs	r3, #8
 8002030:	e00c      	b.n	800204c <HAL_GPIO_Init+0x228>
 8002032:	2306      	movs	r3, #6
 8002034:	e00a      	b.n	800204c <HAL_GPIO_Init+0x228>
 8002036:	2305      	movs	r3, #5
 8002038:	e008      	b.n	800204c <HAL_GPIO_Init+0x228>
 800203a:	2304      	movs	r3, #4
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x228>
 800203e:	2303      	movs	r3, #3
 8002040:	e004      	b.n	800204c <HAL_GPIO_Init+0x228>
 8002042:	2302      	movs	r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x228>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x228>
 800204a:	2300      	movs	r3, #0
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	f002 0203 	and.w	r2, r2, #3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4093      	lsls	r3, r2
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205c:	4935      	ldr	r1, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x310>)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_GPIO_Init+0x334>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208e:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_GPIO_Init+0x334>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_GPIO_Init+0x334>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <HAL_GPIO_Init+0x334>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_GPIO_Init+0x334>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_GPIO_Init+0x334>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_GPIO_Init+0x334>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_GPIO_Init+0x334>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0f      	cmp	r3, #15
 800211c:	f67f ae90 	bls.w	8001e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40013800 	.word	0x40013800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40021000 	.word	0x40021000
 800214c:	40021400 	.word	0x40021400
 8002150:	40021800 	.word	0x40021800
 8002154:	40021c00 	.word	0x40021c00
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4013      	ands	r3, r2
 80021a6:	041a      	lsls	r2, r3, #16
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	400b      	ands	r3, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e03e      	b.n	8002256 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7fe ff8d 	bl	800110c <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f002 fd91 	bl	8004d24 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	f002 fdcb 	bl	8004da8 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	f002 fdf9 	bl	8004e14 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d108      	bne.n	800223c <HAL_NAND_Init+0x7a>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0204 	orr.w	r2, r2, #4
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_NAND_Init+0x8a>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0204 	orr.w	r2, r2, #4
 800224a:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b10      	cmp	r3, #16
 800226c:	d10a      	bne.n	8002284 <HAL_NAND_IRQHandler+0x26>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e009      	b.n	8002298 <HAL_NAND_IRQHandler+0x3a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8b2 	bl	8002406 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d108      	bne.n	80022bc <HAL_NAND_IRQHandler+0x5e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <HAL_NAND_IRQHandler+0x6e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d10a      	bne.n	80022ea <HAL_NAND_IRQHandler+0x8c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	e009      	b.n	80022fe <HAL_NAND_IRQHandler+0xa0>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d017      	beq.n	8002332 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f87f 	bl	8002406 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b10      	cmp	r3, #16
 800230e:	d108      	bne.n	8002322 <HAL_NAND_IRQHandler+0xc4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0202 	bic.w	r2, r2, #2
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	e007      	b.n	8002332 <HAL_NAND_IRQHandler+0xd4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0202 	bic.w	r2, r2, #2
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d10a      	bne.n	8002350 <HAL_NAND_IRQHandler+0xf2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e009      	b.n	8002364 <HAL_NAND_IRQHandler+0x106>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d017      	beq.n	8002398 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f84c 	bl	8002406 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d108      	bne.n	8002388 <HAL_NAND_IRQHandler+0x12a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0204 	bic.w	r2, r2, #4
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	e007      	b.n	8002398 <HAL_NAND_IRQHandler+0x13a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0204 	bic.w	r2, r2, #4
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b10      	cmp	r3, #16
 800239e:	d10a      	bne.n	80023b6 <HAL_NAND_IRQHandler+0x158>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b40      	cmp	r3, #64	; 0x40
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e009      	b.n	80023ca <HAL_NAND_IRQHandler+0x16c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d017      	beq.n	80023fe <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f819 	bl	8002406 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d108      	bne.n	80023ee <HAL_NAND_IRQHandler+0x190>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ea:	605a      	str	r2, [r3, #4]
  }
}
 80023ec:	e007      	b.n	80023fe <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e264      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	4ba3      	ldr	r3, [pc, #652]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4ba0      	ldr	r3, [pc, #640]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b9d      	ldr	r3, [pc, #628]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b99      	ldr	r3, [pc, #612]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e23f      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x74>
 8002482:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a90      	ldr	r2, [pc, #576]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a8a      	ldr	r2, [pc, #552]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a87      	ldr	r2, [pc, #540]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 80024b4:	4b84      	ldr	r3, [pc, #528]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a83      	ldr	r2, [pc, #524]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a80      	ldr	r2, [pc, #512]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe ff92 	bl	80013fc <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe ff8e 	bl	80013fc <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e204      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b76      	ldr	r3, [pc, #472]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xc0>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe ff7e 	bl	80013fc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe ff7a 	bl	80013fc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1f0      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b6c      	ldr	r3, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0xe8>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1c4      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4952      	ldr	r1, [pc, #328]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b4f      	ldr	r3, [pc, #316]	; (80026cc <HAL_RCC_OscConfig+0x2b0>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe ff33 	bl	80013fc <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe ff2f 	bl	80013fc <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a5      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4940      	ldr	r1, [pc, #256]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_OscConfig+0x2b0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe ff12 	bl	80013fc <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fe ff0e 	bl	80013fc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e184      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d030      	beq.n	8002668 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <HAL_RCC_OscConfig+0x2b4>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe fef2 	bl	80013fc <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe feee 	bl	80013fc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e164      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x200>
 800263a:	e015      	b.n	8002668 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x2b4>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe fedb 	bl	80013fc <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264a:	f7fe fed7 	bl	80013fc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e14d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a0 	beq.w	80027b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x2b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_RCC_OscConfig+0x2b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <HAL_RCC_OscConfig+0x2b8>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe fe9d 	bl	80013fc <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e011      	b.n	80026ea <HAL_RCC_OscConfig+0x2ce>
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	42470000 	.word	0x42470000
 80026d0:	42470e80 	.word	0x42470e80
 80026d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe fe90 	bl	80013fc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e106      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b85      	ldr	r3, [pc, #532]	; (8002900 <HAL_RCC_OscConfig+0x4e4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0x2f0>
 80026fe:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a80      	ldr	r2, [pc, #512]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	e01c      	b.n	8002746 <HAL_RCC_OscConfig+0x32a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d10c      	bne.n	800272e <HAL_RCC_OscConfig+0x312>
 8002714:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a7a      	ldr	r2, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	4b78      	ldr	r3, [pc, #480]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
 800272c:	e00b      	b.n	8002746 <HAL_RCC_OscConfig+0x32a>
 800272e:	4b75      	ldr	r3, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a74      	ldr	r2, [pc, #464]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a71      	ldr	r2, [pc, #452]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d015      	beq.n	800277a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fe55 	bl	80013fc <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fe51 	bl	80013fc <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0c5      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ee      	beq.n	8002756 <HAL_RCC_OscConfig+0x33a>
 8002778:	e014      	b.n	80027a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fe3f 	bl	80013fc <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe fe3b 	bl	80013fc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0af      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ee      	bne.n	8002782 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a55      	ldr	r2, [pc, #340]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 809b 	beq.w	80028f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d05c      	beq.n	8002886 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d141      	bne.n	8002858 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <HAL_RCC_OscConfig+0x4ec>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe fe0f 	bl	80013fc <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fe0b 	bl	80013fc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e081      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f4:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	019b      	lsls	r3, r3, #6
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	3b01      	subs	r3, #1
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	061b      	lsls	r3, r3, #24
 8002824:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCC_OscConfig+0x4ec>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fde4 	bl	80013fc <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fde0 	bl	80013fc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e056      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x41c>
 8002856:	e04e      	b.n	80028f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_OscConfig+0x4ec>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fdcd 	bl	80013fc <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fdc9 	bl	80013fc <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e03f      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x44a>
 8002884:	e037      	b.n	80028f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e032      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_RCC_OscConfig+0x4e8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d028      	beq.n	80028f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d121      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d11a      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d111      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40007000 	.word	0x40007000
 8002904:	40023800 	.word	0x40023800
 8002908:	42470060 	.word	0x42470060

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fcfe 	bl	80013fc <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fcfa 	bl	80013fc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fb34 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08005864 	.word	0x08005864
 8002ad0:	20000014 	.word	0x20000014
 8002ad4:	20000018 	.word	0x20000018

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af0:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d00d      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x40>
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	f200 80bd 	bhi.w	8002c7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x34>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0a:	e0b7      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b0e:	60bb      	str	r3, [r7, #8]
       break;
 8002b10:	e0b7      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b14:	60bb      	str	r3, [r7, #8]
      break;
 8002b16:	e0b4      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04d      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	461a      	mov	r2, r3
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	ea02 0800 	and.w	r8, r2, r0
 8002b46:	ea03 0901 	and.w	r9, r3, r1
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	014b      	lsls	r3, r1, #5
 8002b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b5c:	0142      	lsls	r2, r0, #5
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	ebb0 0008 	subs.w	r0, r0, r8
 8002b66:	eb61 0109 	sbc.w	r1, r1, r9
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b78:	0182      	lsls	r2, r0, #6
 8002b7a:	1a12      	subs	r2, r2, r0
 8002b7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b80:	f04f 0000 	mov.w	r0, #0
 8002b84:	f04f 0100 	mov.w	r1, #0
 8002b88:	00d9      	lsls	r1, r3, #3
 8002b8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b8e:	00d0      	lsls	r0, r2, #3
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	eb12 0208 	adds.w	r2, r2, r8
 8002b98:	eb43 0309 	adc.w	r3, r3, r9
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	0259      	lsls	r1, r3, #9
 8002ba6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002baa:	0250      	lsls	r0, r2, #9
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	f7fd fb60 	bl	8000280 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e04a      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	ea02 0400 	and.w	r4, r2, r0
 8002be2:	ea03 0501 	and.w	r5, r3, r1
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	014b      	lsls	r3, r1, #5
 8002bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf8:	0142      	lsls	r2, r0, #5
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	1b00      	subs	r0, r0, r4
 8002c00:	eb61 0105 	sbc.w	r1, r1, r5
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	018b      	lsls	r3, r1, #6
 8002c0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c12:	0182      	lsls	r2, r0, #6
 8002c14:	1a12      	subs	r2, r2, r0
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	00d9      	lsls	r1, r3, #3
 8002c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c28:	00d0      	lsls	r0, r2, #3
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	1912      	adds	r2, r2, r4
 8002c30:	eb45 0303 	adc.w	r3, r5, r3
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	0299      	lsls	r1, r3, #10
 8002c3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c42:	0290      	lsls	r0, r2, #10
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	f7fd fb14 	bl	8000280 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	60bb      	str	r3, [r7, #8]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c7e:	60bb      	str	r3, [r7, #8]
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	68bb      	ldr	r3, [r7, #8]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000014 	.word	0x20000014

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08005874 	.word	0x08005874

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffdc 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0b5b      	lsrs	r3, r3, #13
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08005874 	.word	0x08005874

08002d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	220f      	movs	r2, #15
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCC_GetClockConfig+0x60>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0207 	and.w	r2, r3, #7
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40023c00 	.word	0x40023c00

08002d68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d035      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d90:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d96:	f7fe fb31 	bl	80013fc <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d9e:	f7fe fb2d 	bl	80013fc <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0b0      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002db0:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	019a      	lsls	r2, r3, #6
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	071b      	lsls	r3, r3, #28
 8002dc8:	4955      	ldr	r1, [pc, #340]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dd0:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dd6:	f7fe fb11 	bl	80013fc <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dde:	f7fe fb0d 	bl	80013fc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e090      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8083 	beq.w	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3e      	ldr	r2, [pc, #248]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e32:	f7fe fae3 	bl	80013fc <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fe fadf 	bl	80013fc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e062      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02f      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d028      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e8c:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d114      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe faad 	bl	80013fc <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe faa9 	bl	80013fc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e02a      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	490d      	ldr	r1, [pc, #52]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
 8002ef0:	e005      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002efc:	6093      	str	r3, [r2, #8]
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0a:	4905      	ldr	r1, [pc, #20]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	42470068 	.word	0x42470068
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42470e40 	.word	0x42470e40

08002f2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e083      	b.n	8003046 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f5b      	ldrb	r3, [r3, #29]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd ffb2 	bl	8000eb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	22ca      	movs	r2, #202	; 0xca
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2253      	movs	r2, #83	; 0x53
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9fb 	bl	8003366 <RTC_EnterInitMode>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2204      	movs	r2, #4
 8002f82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e05e      	b.n	8003046 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6899      	ldr	r1, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	041a      	lsls	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10e      	bne.n	8003014 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f98d 	bl	8003316 <HAL_RTC_WaitForSynchro>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e018      	b.n	8003046 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	22ff      	movs	r2, #255	; 0xff
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800304e:	b590      	push	{r4, r7, lr}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	7f1b      	ldrb	r3, [r3, #28]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_RTC_SetTime+0x1c>
 8003066:	2302      	movs	r3, #2
 8003068:	e0aa      	b.n	80031c0 <HAL_RTC_SetTime+0x172>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2202      	movs	r2, #2
 8003074:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d126      	bne.n	80030ca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2200      	movs	r2, #0
 800308e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f992 	bl	80033be <RTC_ByteToBcd2>
 800309a:	4603      	mov	r3, r0
 800309c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f98b 	bl	80033be <RTC_ByteToBcd2>
 80030a8:	4603      	mov	r3, r0
 80030aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030ac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	789b      	ldrb	r3, [r3, #2]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f983 	bl	80033be <RTC_ByteToBcd2>
 80030b8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	78db      	ldrb	r3, [r3, #3]
 80030c2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e018      	b.n	80030fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030ea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	22ca      	movs	r2, #202	; 0xca
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2253      	movs	r2, #83	; 0x53
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f92a 	bl	8003366 <RTC_EnterInitMode>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	22ff      	movs	r2, #255	; 0xff
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2204      	movs	r2, #4
 8003124:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e047      	b.n	80031c0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800313a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800313e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800314e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003176:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d111      	bne.n	80031aa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8c5 	bl	8003316 <HAL_RTC_WaitForSynchro>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2204      	movs	r2, #4
 800319e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00a      	b.n	80031c0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80031be:	2300      	movs	r3, #0
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd90      	pop	{r4, r7, pc}

080031c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	7f1b      	ldrb	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_RTC_SetDate+0x1c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e094      	b.n	800330e <HAL_RTC_SetDate+0x146>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10e      	bne.n	8003214 <HAL_RTC_SetDate+0x4c>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	f023 0310 	bic.w	r3, r3, #16
 800320a:	b2db      	uxtb	r3, r3
 800320c:	330a      	adds	r3, #10
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11c      	bne.n	8003254 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	78db      	ldrb	r3, [r3, #3]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f8cd 	bl	80033be <RTC_ByteToBcd2>
 8003224:	4603      	mov	r3, r0
 8003226:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f8c6 	bl	80033be <RTC_ByteToBcd2>
 8003232:	4603      	mov	r3, r0
 8003234:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003236:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	789b      	ldrb	r3, [r3, #2]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f8be 	bl	80033be <RTC_ByteToBcd2>
 8003242:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003244:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e00e      	b.n	8003272 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	78db      	ldrb	r3, [r3, #3]
 8003258:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003260:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003266:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	22ca      	movs	r2, #202	; 0xca
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2253      	movs	r2, #83	; 0x53
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f86f 	bl	8003366 <RTC_EnterInitMode>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2204      	movs	r2, #4
 800329a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e033      	b.n	800330e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d111      	bne.n	80032f8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f81e 	bl	8003316 <HAL_RTC_WaitForSynchro>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2204      	movs	r2, #4
 80032ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00a      	b.n	800330e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd90      	pop	{r4, r7, pc}

08003316 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003330:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003332:	f7fe f863 	bl	80013fc <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003338:	e009      	b.n	800334e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800333a:	f7fe f85f 	bl	80013fc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003348:	d901      	bls.n	800334e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d119      	bne.n	80033b4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003388:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800338a:	f7fe f837 	bl	80013fc <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003390:	e009      	b.n	80033a6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003392:	f7fe f833 	bl	80013fc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a0:	d901      	bls.n	80033a6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e007      	b.n	80033b6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80033cc:	e005      	b.n	80033da <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	3b0a      	subs	r3, #10
 80033d8:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d8f6      	bhi.n	80033ce <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b2db      	uxtb	r3, r3
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e041      	b.n	8003490 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fd fd75 	bl	8000f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 fa95 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e04e      	b.n	800354e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_TIM_Base_Start_IT+0xc4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d022      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034da:	d01d      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_TIM_Base_Start_IT+0xc8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d018      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_TIM_Base_Start_IT+0xcc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_TIM_Base_Start_IT+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_TIM_Base_Start_IT+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_TIM_Base_Start_IT+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_TIM_Base_Start_IT+0xdc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b06      	cmp	r3, #6
 8003528:	d010      	beq.n	800354c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	e007      	b.n	800354c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0202 	mvn.w	r2, #2
 80035a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9b5 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9a7 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9b8 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0204 	mvn.w	r2, #4
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f98b 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f97d 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f98e 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b08      	cmp	r3, #8
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f961 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f953 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f964 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0210 	mvn.w	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2208      	movs	r2, #8
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f937 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f929 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f93a 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd fb76 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fae0 	bl	8003ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8ff 	bl	8003952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0220 	mvn.w	r2, #32
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 faaa 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b4      	b.n	800390e <HAL_TIM_ConfigClockSource+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d03e      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xd4>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	f200 8087 	bhi.w	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	f000 8086 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x172>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d87f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d01a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xa6>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d87b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d050      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d877      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d03c      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xfa>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d873      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d058      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d86f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d064      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d86b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d060      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d867      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05c      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	e062      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f000 f9ad 	bl	8003b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	609a      	str	r2, [r3, #8]
      break;
 800385a:	e04f      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 f996 	bl	8003b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e03c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 f90a 	bl	8003aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2150      	movs	r1, #80	; 0x50
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f963 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e02c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 f929 	bl	8003b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f953 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e01c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 f8ea 	bl	8003aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f943 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 f93a 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038f2:	e003      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e000      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d027      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d023      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <TIM_Base_SetConfig+0x128>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0xf8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000

08003aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 030a 	bic.w	r3, r3, #10
 8003ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0210 	bic.w	r2, r3, #16
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f043 0307 	orr.w	r3, r3, #7
 8003b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e05a      	b.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d01d      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40010400 	.word	0x40010400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40001800 	.word	0x40001800

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e03f      	b.n	8003d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd f91a 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fe27 	bl	8004994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	4613      	mov	r3, r2
 8003da2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d11d      	bne.n	8003dec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Receive_IT+0x26>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e016      	b.n	8003dee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Receive_IT+0x38>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e00f      	b.n	8003dee <HAL_UART_Receive_IT+0x58>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fbd9 	bl	800459a <UART_Start_Receive_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	e000      	b.n	8003dee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d165      	bne.n	8003ede <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_Transmit_DMA+0x26>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e05e      	b.n	8003ee0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit_DMA+0x38>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e057      	b.n	8003ee0 <HAL_UART_Transmit_DMA+0xe8>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2221      	movs	r2, #33	; 0x21
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_UART_Transmit_DMA+0xf0>)
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <HAL_UART_Transmit_DMA+0xf4>)
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <HAL_UART_Transmit_DMA+0xf8>)
 8003e6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	2200      	movs	r2, #0
 8003e76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003e78:	f107 0308 	add.w	r3, r7, #8
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	f7fd fc74 	bl	800177c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ec8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6a39      	ldr	r1, [r7, #32]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e5      	bne.n	8003ea6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3730      	adds	r7, #48	; 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08004451 	.word	0x08004451
 8003eec:	080044eb 	.word	0x080044eb
 8003ef0:	08004507 	.word	0x08004507

08003ef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0ba      	sub	sp, #232	; 0xe8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_UART_IRQHandler+0x66>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fc62 	bl	800481c <UART_Receive_IT>
      return;
 8003f58:	e256      	b.n	8004408 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80de 	beq.w	8004120 <HAL_UART_IRQHandler+0x22c>
 8003f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80d1 	beq.w	8004120 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xae>
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xd2>
 8003fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0202 	orr.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_UART_IRQHandler+0xf6>
 8003fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d011      	beq.n	800401a <HAL_UART_IRQHandler+0x126>
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d105      	bne.n	800400e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0208 	orr.w	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 81ed 	beq.w	80043fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_UART_IRQHandler+0x14e>
 8004030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fbed 	bl	800481c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_UART_IRQHandler+0x17a>
 8004066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04f      	beq.n	800410e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 faf5 	bl	800465e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d141      	bne.n	8004106 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800409c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1d9      	bne.n	8004082 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d013      	beq.n	80040fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	4a7d      	ldr	r2, [pc, #500]	; (80042d0 <HAL_UART_IRQHandler+0x3dc>)
 80040dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fc12 	bl	800190c <HAL_DMA_Abort_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e00e      	b.n	800411c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f990 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00a      	b.n	800411c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f98c 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e006      	b.n	800411c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f988 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800411a:	e170      	b.n	80043fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	bf00      	nop
    return;
 800411e:	e16e      	b.n	80043fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 814a 	bne.w	80043be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8143 	beq.w	80043be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 813c 	beq.w	80043be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	f040 80b4 	bne.w	80042d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8140 	beq.w	8004402 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800418a:	429a      	cmp	r2, r3
 800418c:	f080 8139 	bcs.w	8004402 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004196:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a2:	f000 8088 	beq.w	80042b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1d9      	bne.n	80041a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3314      	adds	r3, #20
 80041f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800421a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800421e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e1      	bne.n	80041f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3314      	adds	r3, #20
 8004234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800423e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e3      	bne.n	800422e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004286:	f023 0310 	bic.w	r3, r3, #16
 800428a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004298:	65ba      	str	r2, [r7, #88]	; 0x58
 800429a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800429e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e3      	bne.n	8004274 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd fabb 	bl	800182c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f8b6 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042cc:	e099      	b.n	8004402 <HAL_UART_IRQHandler+0x50e>
 80042ce:	bf00      	nop
 80042d0:	08004725 	.word	0x08004725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 808b 	beq.w	8004406 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8086 	beq.w	8004406 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800431e:	647a      	str	r2, [r7, #68]	; 0x44
 8004320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800432c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e3      	bne.n	80042fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3314      	adds	r3, #20
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	623b      	str	r3, [r7, #32]
   return(result);
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004356:	633a      	str	r2, [r7, #48]	; 0x30
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e3      	bne.n	8004332 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	60fb      	str	r3, [r7, #12]
   return(result);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0310 	bic.w	r3, r3, #16
 800438e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800439c:	61fa      	str	r2, [r7, #28]
 800439e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	69b9      	ldr	r1, [r7, #24]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	617b      	str	r3, [r7, #20]
   return(result);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e3      	bne.n	8004378 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f83e 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043bc:	e023      	b.n	8004406 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_UART_IRQHandler+0x4ea>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9b8 	bl	800474c <UART_Transmit_IT>
    return;
 80043dc:	e014      	b.n	8004408 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00e      	beq.n	8004408 <HAL_UART_IRQHandler+0x514>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9f8 	bl	80047ec <UART_EndTransmit_IT>
    return;
 80043fc:	e004      	b.n	8004408 <HAL_UART_IRQHandler+0x514>
    return;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <HAL_UART_IRQHandler+0x514>
      return;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_UART_IRQHandler+0x514>
      return;
 8004406:	bf00      	nop
  }
}
 8004408:	37e8      	adds	r7, #232	; 0xe8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b090      	sub	sp, #64	; 0x40
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d137      	bne.n	80044dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800446c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446e:	2200      	movs	r2, #0
 8004470:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	623b      	str	r3, [r7, #32]
   return(result);
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004492:	633a      	str	r2, [r7, #48]	; 0x30
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
 80044be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69b9      	ldr	r1, [r7, #24]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	617b      	str	r3, [r7, #20]
   return(result);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044da:	e002      	b.n	80044e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80044dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044de:	f7fc fc6d 	bl	8000dbc <HAL_UART_TxCpltCallback>
}
 80044e2:	bf00      	nop
 80044e4:	3740      	adds	r7, #64	; 0x40
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff ff89 	bl	8004410 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b21      	cmp	r3, #33	; 0x21
 8004538:	d108      	bne.n	800454c <UART_DMAError+0x46>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004546:	68b8      	ldr	r0, [r7, #8]
 8004548:	f000 f861 	bl	800460e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b22      	cmp	r3, #34	; 0x22
 800456c:	d108      	bne.n	8004580 <UART_DMAError+0x7a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f000 f86f 	bl	800465e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f043 0210 	orr.w	r2, r3, #16
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458c:	68b8      	ldr	r0, [r7, #8]
 800458e:	f7ff ff49 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	4613      	mov	r3, r2
 80045a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2222      	movs	r2, #34	; 0x22
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045de:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800460e:	b480      	push	{r7}
 8004610:	b089      	sub	sp, #36	; 0x24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	60bb      	str	r3, [r7, #8]
   return(result);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	61ba      	str	r2, [r7, #24]
 8004638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	613b      	str	r3, [r7, #16]
   return(result);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004652:	bf00      	nop
 8004654:	3724      	adds	r7, #36	; 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b095      	sub	sp, #84	; 0x54
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800467c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004686:	643a      	str	r2, [r7, #64]	; 0x40
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800468c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d119      	bne.n	800470a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	647b      	str	r3, [r7, #68]	; 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f6:	61ba      	str	r2, [r7, #24]
 80046f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	613b      	str	r3, [r7, #16]
   return(result);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004718:	bf00      	nop
 800471a:	3754      	adds	r7, #84	; 0x54
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff fe70 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b21      	cmp	r3, #33	; 0x21
 800475e:	d13e      	bne.n	80047de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d114      	bne.n	8004794 <UART_Transmit_IT+0x48>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d110      	bne.n	8004794 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]
 8004792:	e008      	b.n	80047a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6211      	str	r1, [r2, #32]
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4619      	mov	r1, r3
 80047b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fc fad5 	bl	8000dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b22      	cmp	r3, #34	; 0x22
 800482e:	f040 80ab 	bne.w	8004988 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483a:	d117      	bne.n	800486c <UART_Receive_IT+0x50>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d113      	bne.n	800486c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	b29a      	uxth	r2, r3
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	1c9a      	adds	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
 800486a:	e026      	b.n	80048ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d007      	beq.n	8004890 <UART_Receive_IT+0x74>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <UART_Receive_IT+0x82>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e008      	b.n	80048b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4619      	mov	r1, r3
 80048c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d15a      	bne.n	8004984 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0220 	bic.w	r2, r2, #32
 80048dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	2b01      	cmp	r3, #1
 800490c:	d135      	bne.n	800497a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004934:	623a      	str	r2, [r7, #32]
 8004936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69f9      	ldr	r1, [r7, #28]
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	61bb      	str	r3, [r7, #24]
   return(result);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d10a      	bne.n	800496c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fd60 	bl	8004438 <HAL_UARTEx_RxEventCallback>
 8004978:	e002      	b.n	8004980 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc f9e0 	bl	8000d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e002      	b.n	800498a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3730      	adds	r7, #48	; 0x30
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004998:	b09f      	sub	sp, #124	; 0x7c
 800499a:	af00      	add	r7, sp, #0
 800499c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	68d9      	ldr	r1, [r3, #12]
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	ea40 0301 	orr.w	r3, r0, r1
 80049b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049d8:	f021 010c 	bic.w	r1, r1, #12
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e2:	430b      	orrs	r3, r1
 80049e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	6999      	ldr	r1, [r3, #24]
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	ea40 0301 	orr.w	r3, r0, r1
 80049fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4bc5      	ldr	r3, [pc, #788]	; (8004d18 <UART_SetConfig+0x384>)
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d004      	beq.n	8004a12 <UART_SetConfig+0x7e>
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4bc3      	ldr	r3, [pc, #780]	; (8004d1c <UART_SetConfig+0x388>)
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d103      	bne.n	8004a1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a12:	f7fe f963 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004a16:	6778      	str	r0, [r7, #116]	; 0x74
 8004a18:	e002      	b.n	8004a20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fe f94b 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a28:	f040 80b6 	bne.w	8004b98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2e:	461c      	mov	r4, r3
 8004a30:	f04f 0500 	mov.w	r5, #0
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a44:	1912      	adds	r2, r2, r4
 8004a46:	eb45 0303 	adc.w	r3, r5, r3
 8004a4a:	f04f 0000 	mov.w	r0, #0
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	00d9      	lsls	r1, r3, #3
 8004a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a58:	00d0      	lsls	r0, r2, #3
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	1911      	adds	r1, r2, r4
 8004a60:	6639      	str	r1, [r7, #96]	; 0x60
 8004a62:	416b      	adcs	r3, r5
 8004a64:	667b      	str	r3, [r7, #100]	; 0x64
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a74:	415b      	adcs	r3, r3
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a80:	f7fb fbfe 	bl	8000280 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4ba5      	ldr	r3, [pc, #660]	; (8004d20 <UART_SetConfig+0x38c>)
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011e      	lsls	r6, r3, #4
 8004a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a94:	461c      	mov	r4, r3
 8004a96:	f04f 0500 	mov.w	r5, #0
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aaa:	1912      	adds	r2, r2, r4
 8004aac:	eb45 0303 	adc.w	r3, r5, r3
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	00d9      	lsls	r1, r3, #3
 8004aba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004abe:	00d0      	lsls	r0, r2, #3
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	1911      	adds	r1, r2, r4
 8004ac6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ac8:	416b      	adcs	r3, r5
 8004aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ada:	415b      	adcs	r3, r3
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ae6:	f7fb fbcb 	bl	8000280 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4b8c      	ldr	r3, [pc, #560]	; (8004d20 <UART_SetConfig+0x38c>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	2164      	movs	r1, #100	; 0x64
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	3332      	adds	r3, #50	; 0x32
 8004b02:	4a87      	ldr	r2, [pc, #540]	; (8004d20 <UART_SetConfig+0x38c>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b10:	441e      	add	r6, r3
 8004b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b14:	4618      	mov	r0, r3
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	1894      	adds	r4, r2, r2
 8004b20:	623c      	str	r4, [r7, #32]
 8004b22:	415b      	adcs	r3, r3
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b2a:	1812      	adds	r2, r2, r0
 8004b2c:	eb41 0303 	adc.w	r3, r1, r3
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	f04f 0500 	mov.w	r5, #0
 8004b38:	00dd      	lsls	r5, r3, #3
 8004b3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b3e:	00d4      	lsls	r4, r2, #3
 8004b40:	4622      	mov	r2, r4
 8004b42:	462b      	mov	r3, r5
 8004b44:	1814      	adds	r4, r2, r0
 8004b46:	653c      	str	r4, [r7, #80]	; 0x50
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	461a      	mov	r2, r3
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	61b9      	str	r1, [r7, #24]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b66:	f7fb fb8b 	bl	8000280 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <UART_SetConfig+0x38c>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a67      	ldr	r2, [pc, #412]	; (8004d20 <UART_SetConfig+0x38c>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0207 	and.w	r2, r3, #7
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4432      	add	r2, r6
 8004b94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b96:	e0b9      	b.n	8004d0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	f04f 0500 	mov.w	r5, #0
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	6139      	str	r1, [r7, #16]
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bb0:	1912      	adds	r2, r2, r4
 8004bb2:	eb45 0303 	adc.w	r3, r5, r3
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	00d9      	lsls	r1, r3, #3
 8004bc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc4:	00d0      	lsls	r0, r2, #3
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	eb12 0804 	adds.w	r8, r2, r4
 8004bce:	eb43 0905 	adc.w	r9, r3, r5
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	008b      	lsls	r3, r1, #2
 8004be6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bea:	0082      	lsls	r2, r0, #2
 8004bec:	4640      	mov	r0, r8
 8004bee:	4649      	mov	r1, r9
 8004bf0:	f7fb fb46 	bl	8000280 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <UART_SetConfig+0x38c>)
 8004bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	011e      	lsls	r6, r3, #4
 8004c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c04:	4618      	mov	r0, r3
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	1894      	adds	r4, r2, r2
 8004c10:	60bc      	str	r4, [r7, #8]
 8004c12:	415b      	adcs	r3, r3
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1a:	1812      	adds	r2, r2, r0
 8004c1c:	eb41 0303 	adc.w	r3, r1, r3
 8004c20:	f04f 0400 	mov.w	r4, #0
 8004c24:	f04f 0500 	mov.w	r5, #0
 8004c28:	00dd      	lsls	r5, r3, #3
 8004c2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c2e:	00d4      	lsls	r4, r2, #3
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	1814      	adds	r4, r2, r0
 8004c36:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c38:	414b      	adcs	r3, r1
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c54:	0082      	lsls	r2, r0, #2
 8004c56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c5a:	f7fb fb11 	bl	8000280 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <UART_SetConfig+0x38c>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <UART_SetConfig+0x38c>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c82:	441e      	add	r6, r3
 8004c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c86:	4618      	mov	r0, r3
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	1894      	adds	r4, r2, r2
 8004c92:	603c      	str	r4, [r7, #0]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9c:	1812      	adds	r2, r2, r0
 8004c9e:	eb41 0303 	adc.w	r3, r1, r3
 8004ca2:	f04f 0400 	mov.w	r4, #0
 8004ca6:	f04f 0500 	mov.w	r5, #0
 8004caa:	00dd      	lsls	r5, r3, #3
 8004cac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cb0:	00d4      	lsls	r4, r2, #3
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	eb12 0a00 	adds.w	sl, r2, r0
 8004cba:	eb43 0b01 	adc.w	fp, r3, r1
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	008b      	lsls	r3, r1, #2
 8004cd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cd6:	0082      	lsls	r2, r0, #2
 8004cd8:	4650      	mov	r0, sl
 8004cda:	4659      	mov	r1, fp
 8004cdc:	f7fb fad0 	bl	8000280 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <UART_SetConfig+0x38c>)
 8004ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2164      	movs	r1, #100	; 0x64
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	3332      	adds	r3, #50	; 0x32
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <UART_SetConfig+0x38c>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4432      	add	r2, r6
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	377c      	adds	r7, #124	; 0x7c
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	51eb851f 	.word	0x51eb851f

08004d24 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d103      	bne.n	8004d42 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e002      	b.n	8004d48 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <FSMC_NAND_Init+0x80>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8004d58:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8004d5e:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8004d64:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8004d6c:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f043 0308 	orr.w	r3, r3, #8
 8004d7e:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d103      	bne.n	8004d90 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	fff00181 	.word	0xfff00181

08004da8 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d103      	bne.n	8004dc6 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e002      	b.n	8004dcc <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004dda:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004de2:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004dea:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d103      	bne.n	8004e00 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	e002      	b.n	8004e06 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d103      	bne.n	8004e32 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e002      	b.n	8004e38 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e46:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004e4e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004e56:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d103      	bne.n	8004e6c <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	e002      	b.n	8004e72 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <__errno>:
 8004e80:	4b01      	ldr	r3, [pc, #4]	; (8004e88 <__errno+0x8>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000020 	.word	0x20000020

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4d0d      	ldr	r5, [pc, #52]	; (8004ec4 <__libc_init_array+0x38>)
 8004e90:	4c0d      	ldr	r4, [pc, #52]	; (8004ec8 <__libc_init_array+0x3c>)
 8004e92:	1b64      	subs	r4, r4, r5
 8004e94:	10a4      	asrs	r4, r4, #2
 8004e96:	2600      	movs	r6, #0
 8004e98:	42a6      	cmp	r6, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ecc <__libc_init_array+0x40>)
 8004e9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ed0 <__libc_init_array+0x44>)
 8004ea0:	f000 fca0 	bl	80057e4 <_init>
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb4:	4798      	blx	r3
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebe:	4798      	blx	r3
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	080058c0 	.word	0x080058c0
 8004ec8:	080058c0 	.word	0x080058c0
 8004ecc:	080058c0 	.word	0x080058c0
 8004ed0:	080058c4 	.word	0x080058c4

08004ed4 <memset>:
 8004ed4:	4402      	add	r2, r0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d100      	bne.n	8004ede <memset+0xa>
 8004edc:	4770      	bx	lr
 8004ede:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee2:	e7f9      	b.n	8004ed8 <memset+0x4>

08004ee4 <siprintf>:
 8004ee4:	b40e      	push	{r1, r2, r3}
 8004ee6:	b500      	push	{lr}
 8004ee8:	b09c      	sub	sp, #112	; 0x70
 8004eea:	ab1d      	add	r3, sp, #116	; 0x74
 8004eec:	9002      	str	r0, [sp, #8]
 8004eee:	9006      	str	r0, [sp, #24]
 8004ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ef4:	4809      	ldr	r0, [pc, #36]	; (8004f1c <siprintf+0x38>)
 8004ef6:	9107      	str	r1, [sp, #28]
 8004ef8:	9104      	str	r1, [sp, #16]
 8004efa:	4909      	ldr	r1, [pc, #36]	; (8004f20 <siprintf+0x3c>)
 8004efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f00:	9105      	str	r1, [sp, #20]
 8004f02:	6800      	ldr	r0, [r0, #0]
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	a902      	add	r1, sp, #8
 8004f08:	f000 f8ba 	bl	8005080 <_svfiprintf_r>
 8004f0c:	9b02      	ldr	r3, [sp, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	b01c      	add	sp, #112	; 0x70
 8004f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f18:	b003      	add	sp, #12
 8004f1a:	4770      	bx	lr
 8004f1c:	20000020 	.word	0x20000020
 8004f20:	ffff0208 	.word	0xffff0208

08004f24 <strstr>:
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	780c      	ldrb	r4, [r1, #0]
 8004f28:	b164      	cbz	r4, 8004f44 <strstr+0x20>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	1c5e      	adds	r6, r3, #1
 8004f32:	b90a      	cbnz	r2, 8004f38 <strstr+0x14>
 8004f34:	4610      	mov	r0, r2
 8004f36:	e005      	b.n	8004f44 <strstr+0x20>
 8004f38:	4294      	cmp	r4, r2
 8004f3a:	d108      	bne.n	8004f4e <strstr+0x2a>
 8004f3c:	460d      	mov	r5, r1
 8004f3e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004f42:	b902      	cbnz	r2, 8004f46 <strstr+0x22>
 8004f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f46:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004f4a:	4297      	cmp	r7, r2
 8004f4c:	d0f7      	beq.n	8004f3e <strstr+0x1a>
 8004f4e:	4633      	mov	r3, r6
 8004f50:	e7ec      	b.n	8004f2c <strstr+0x8>

08004f52 <_vsniprintf_r>:
 8004f52:	b530      	push	{r4, r5, lr}
 8004f54:	1e14      	subs	r4, r2, #0
 8004f56:	4605      	mov	r5, r0
 8004f58:	b09b      	sub	sp, #108	; 0x6c
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	da05      	bge.n	8004f6a <_vsniprintf_r+0x18>
 8004f5e:	238b      	movs	r3, #139	; 0x8b
 8004f60:	602b      	str	r3, [r5, #0]
 8004f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f66:	b01b      	add	sp, #108	; 0x6c
 8004f68:	bd30      	pop	{r4, r5, pc}
 8004f6a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004f72:	bf14      	ite	ne
 8004f74:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004f78:	4623      	moveq	r3, r4
 8004f7a:	9302      	str	r3, [sp, #8]
 8004f7c:	9305      	str	r3, [sp, #20]
 8004f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f82:	9100      	str	r1, [sp, #0]
 8004f84:	9104      	str	r1, [sp, #16]
 8004f86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f8e:	4669      	mov	r1, sp
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f875 	bl	8005080 <_svfiprintf_r>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	bfbc      	itt	lt
 8004f9a:	238b      	movlt	r3, #139	; 0x8b
 8004f9c:	602b      	strlt	r3, [r5, #0]
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d0e1      	beq.n	8004f66 <_vsniprintf_r+0x14>
 8004fa2:	9b00      	ldr	r3, [sp, #0]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e7dd      	b.n	8004f66 <_vsniprintf_r+0x14>
	...

08004fac <vsniprintf>:
 8004fac:	b507      	push	{r0, r1, r2, lr}
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	4803      	ldr	r0, [pc, #12]	; (8004fc4 <vsniprintf+0x18>)
 8004fb8:	6800      	ldr	r0, [r0, #0]
 8004fba:	f7ff ffca 	bl	8004f52 <_vsniprintf_r>
 8004fbe:	b003      	add	sp, #12
 8004fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fc4:	20000020 	.word	0x20000020

08004fc8 <__ssputs_r>:
 8004fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	688e      	ldr	r6, [r1, #8]
 8004fce:	429e      	cmp	r6, r3
 8004fd0:	4682      	mov	sl, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4690      	mov	r8, r2
 8004fd6:	461f      	mov	r7, r3
 8004fd8:	d838      	bhi.n	800504c <__ssputs_r+0x84>
 8004fda:	898a      	ldrh	r2, [r1, #12]
 8004fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fe0:	d032      	beq.n	8005048 <__ssputs_r+0x80>
 8004fe2:	6825      	ldr	r5, [r4, #0]
 8004fe4:	6909      	ldr	r1, [r1, #16]
 8004fe6:	eba5 0901 	sub.w	r9, r5, r1
 8004fea:	6965      	ldr	r5, [r4, #20]
 8004fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	444b      	add	r3, r9
 8004ff8:	106d      	asrs	r5, r5, #1
 8004ffa:	429d      	cmp	r5, r3
 8004ffc:	bf38      	it	cc
 8004ffe:	461d      	movcc	r5, r3
 8005000:	0553      	lsls	r3, r2, #21
 8005002:	d531      	bpl.n	8005068 <__ssputs_r+0xa0>
 8005004:	4629      	mov	r1, r5
 8005006:	f000 fb47 	bl	8005698 <_malloc_r>
 800500a:	4606      	mov	r6, r0
 800500c:	b950      	cbnz	r0, 8005024 <__ssputs_r+0x5c>
 800500e:	230c      	movs	r3, #12
 8005010:	f8ca 3000 	str.w	r3, [sl]
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501a:	81a3      	strh	r3, [r4, #12]
 800501c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005024:	6921      	ldr	r1, [r4, #16]
 8005026:	464a      	mov	r2, r9
 8005028:	f000 fabe 	bl	80055a8 <memcpy>
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	6126      	str	r6, [r4, #16]
 800503a:	6165      	str	r5, [r4, #20]
 800503c:	444e      	add	r6, r9
 800503e:	eba5 0509 	sub.w	r5, r5, r9
 8005042:	6026      	str	r6, [r4, #0]
 8005044:	60a5      	str	r5, [r4, #8]
 8005046:	463e      	mov	r6, r7
 8005048:	42be      	cmp	r6, r7
 800504a:	d900      	bls.n	800504e <__ssputs_r+0x86>
 800504c:	463e      	mov	r6, r7
 800504e:	4632      	mov	r2, r6
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	4641      	mov	r1, r8
 8005054:	f000 fab6 	bl	80055c4 <memmove>
 8005058:	68a3      	ldr	r3, [r4, #8]
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	1b9b      	subs	r3, r3, r6
 800505e:	4432      	add	r2, r6
 8005060:	60a3      	str	r3, [r4, #8]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	2000      	movs	r0, #0
 8005066:	e7db      	b.n	8005020 <__ssputs_r+0x58>
 8005068:	462a      	mov	r2, r5
 800506a:	f000 fb6f 	bl	800574c <_realloc_r>
 800506e:	4606      	mov	r6, r0
 8005070:	2800      	cmp	r0, #0
 8005072:	d1e1      	bne.n	8005038 <__ssputs_r+0x70>
 8005074:	6921      	ldr	r1, [r4, #16]
 8005076:	4650      	mov	r0, sl
 8005078:	f000 fabe 	bl	80055f8 <_free_r>
 800507c:	e7c7      	b.n	800500e <__ssputs_r+0x46>
	...

08005080 <_svfiprintf_r>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	4698      	mov	r8, r3
 8005086:	898b      	ldrh	r3, [r1, #12]
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	b09d      	sub	sp, #116	; 0x74
 800508c:	4607      	mov	r7, r0
 800508e:	460d      	mov	r5, r1
 8005090:	4614      	mov	r4, r2
 8005092:	d50e      	bpl.n	80050b2 <_svfiprintf_r+0x32>
 8005094:	690b      	ldr	r3, [r1, #16]
 8005096:	b963      	cbnz	r3, 80050b2 <_svfiprintf_r+0x32>
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	f000 fafd 	bl	8005698 <_malloc_r>
 800509e:	6028      	str	r0, [r5, #0]
 80050a0:	6128      	str	r0, [r5, #16]
 80050a2:	b920      	cbnz	r0, 80050ae <_svfiprintf_r+0x2e>
 80050a4:	230c      	movs	r3, #12
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ac:	e0d1      	b.n	8005252 <_svfiprintf_r+0x1d2>
 80050ae:	2340      	movs	r3, #64	; 0x40
 80050b0:	616b      	str	r3, [r5, #20]
 80050b2:	2300      	movs	r3, #0
 80050b4:	9309      	str	r3, [sp, #36]	; 0x24
 80050b6:	2320      	movs	r3, #32
 80050b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80050c0:	2330      	movs	r3, #48	; 0x30
 80050c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800526c <_svfiprintf_r+0x1ec>
 80050c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050ca:	f04f 0901 	mov.w	r9, #1
 80050ce:	4623      	mov	r3, r4
 80050d0:	469a      	mov	sl, r3
 80050d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d6:	b10a      	cbz	r2, 80050dc <_svfiprintf_r+0x5c>
 80050d8:	2a25      	cmp	r2, #37	; 0x25
 80050da:	d1f9      	bne.n	80050d0 <_svfiprintf_r+0x50>
 80050dc:	ebba 0b04 	subs.w	fp, sl, r4
 80050e0:	d00b      	beq.n	80050fa <_svfiprintf_r+0x7a>
 80050e2:	465b      	mov	r3, fp
 80050e4:	4622      	mov	r2, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	4638      	mov	r0, r7
 80050ea:	f7ff ff6d 	bl	8004fc8 <__ssputs_r>
 80050ee:	3001      	adds	r0, #1
 80050f0:	f000 80aa 	beq.w	8005248 <_svfiprintf_r+0x1c8>
 80050f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f6:	445a      	add	r2, fp
 80050f8:	9209      	str	r2, [sp, #36]	; 0x24
 80050fa:	f89a 3000 	ldrb.w	r3, [sl]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80a2 	beq.w	8005248 <_svfiprintf_r+0x1c8>
 8005104:	2300      	movs	r3, #0
 8005106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800510a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800510e:	f10a 0a01 	add.w	sl, sl, #1
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	9307      	str	r3, [sp, #28]
 8005116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800511a:	931a      	str	r3, [sp, #104]	; 0x68
 800511c:	4654      	mov	r4, sl
 800511e:	2205      	movs	r2, #5
 8005120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005124:	4851      	ldr	r0, [pc, #324]	; (800526c <_svfiprintf_r+0x1ec>)
 8005126:	f7fb f85b 	bl	80001e0 <memchr>
 800512a:	9a04      	ldr	r2, [sp, #16]
 800512c:	b9d8      	cbnz	r0, 8005166 <_svfiprintf_r+0xe6>
 800512e:	06d0      	lsls	r0, r2, #27
 8005130:	bf44      	itt	mi
 8005132:	2320      	movmi	r3, #32
 8005134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005138:	0711      	lsls	r1, r2, #28
 800513a:	bf44      	itt	mi
 800513c:	232b      	movmi	r3, #43	; 0x2b
 800513e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005142:	f89a 3000 	ldrb.w	r3, [sl]
 8005146:	2b2a      	cmp	r3, #42	; 0x2a
 8005148:	d015      	beq.n	8005176 <_svfiprintf_r+0xf6>
 800514a:	9a07      	ldr	r2, [sp, #28]
 800514c:	4654      	mov	r4, sl
 800514e:	2000      	movs	r0, #0
 8005150:	f04f 0c0a 	mov.w	ip, #10
 8005154:	4621      	mov	r1, r4
 8005156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800515a:	3b30      	subs	r3, #48	; 0x30
 800515c:	2b09      	cmp	r3, #9
 800515e:	d94e      	bls.n	80051fe <_svfiprintf_r+0x17e>
 8005160:	b1b0      	cbz	r0, 8005190 <_svfiprintf_r+0x110>
 8005162:	9207      	str	r2, [sp, #28]
 8005164:	e014      	b.n	8005190 <_svfiprintf_r+0x110>
 8005166:	eba0 0308 	sub.w	r3, r0, r8
 800516a:	fa09 f303 	lsl.w	r3, r9, r3
 800516e:	4313      	orrs	r3, r2
 8005170:	9304      	str	r3, [sp, #16]
 8005172:	46a2      	mov	sl, r4
 8005174:	e7d2      	b.n	800511c <_svfiprintf_r+0x9c>
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	1d19      	adds	r1, r3, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	9103      	str	r1, [sp, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfbb      	ittet	lt
 8005182:	425b      	neglt	r3, r3
 8005184:	f042 0202 	orrlt.w	r2, r2, #2
 8005188:	9307      	strge	r3, [sp, #28]
 800518a:	9307      	strlt	r3, [sp, #28]
 800518c:	bfb8      	it	lt
 800518e:	9204      	strlt	r2, [sp, #16]
 8005190:	7823      	ldrb	r3, [r4, #0]
 8005192:	2b2e      	cmp	r3, #46	; 0x2e
 8005194:	d10c      	bne.n	80051b0 <_svfiprintf_r+0x130>
 8005196:	7863      	ldrb	r3, [r4, #1]
 8005198:	2b2a      	cmp	r3, #42	; 0x2a
 800519a:	d135      	bne.n	8005208 <_svfiprintf_r+0x188>
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	9203      	str	r2, [sp, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bfb8      	it	lt
 80051a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051ac:	3402      	adds	r4, #2
 80051ae:	9305      	str	r3, [sp, #20]
 80051b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800527c <_svfiprintf_r+0x1fc>
 80051b4:	7821      	ldrb	r1, [r4, #0]
 80051b6:	2203      	movs	r2, #3
 80051b8:	4650      	mov	r0, sl
 80051ba:	f7fb f811 	bl	80001e0 <memchr>
 80051be:	b140      	cbz	r0, 80051d2 <_svfiprintf_r+0x152>
 80051c0:	2340      	movs	r3, #64	; 0x40
 80051c2:	eba0 000a 	sub.w	r0, r0, sl
 80051c6:	fa03 f000 	lsl.w	r0, r3, r0
 80051ca:	9b04      	ldr	r3, [sp, #16]
 80051cc:	4303      	orrs	r3, r0
 80051ce:	3401      	adds	r4, #1
 80051d0:	9304      	str	r3, [sp, #16]
 80051d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d6:	4826      	ldr	r0, [pc, #152]	; (8005270 <_svfiprintf_r+0x1f0>)
 80051d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051dc:	2206      	movs	r2, #6
 80051de:	f7fa ffff 	bl	80001e0 <memchr>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d038      	beq.n	8005258 <_svfiprintf_r+0x1d8>
 80051e6:	4b23      	ldr	r3, [pc, #140]	; (8005274 <_svfiprintf_r+0x1f4>)
 80051e8:	bb1b      	cbnz	r3, 8005232 <_svfiprintf_r+0x1b2>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	3307      	adds	r3, #7
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	3308      	adds	r3, #8
 80051f4:	9303      	str	r3, [sp, #12]
 80051f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f8:	4433      	add	r3, r6
 80051fa:	9309      	str	r3, [sp, #36]	; 0x24
 80051fc:	e767      	b.n	80050ce <_svfiprintf_r+0x4e>
 80051fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005202:	460c      	mov	r4, r1
 8005204:	2001      	movs	r0, #1
 8005206:	e7a5      	b.n	8005154 <_svfiprintf_r+0xd4>
 8005208:	2300      	movs	r3, #0
 800520a:	3401      	adds	r4, #1
 800520c:	9305      	str	r3, [sp, #20]
 800520e:	4619      	mov	r1, r3
 8005210:	f04f 0c0a 	mov.w	ip, #10
 8005214:	4620      	mov	r0, r4
 8005216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800521a:	3a30      	subs	r2, #48	; 0x30
 800521c:	2a09      	cmp	r2, #9
 800521e:	d903      	bls.n	8005228 <_svfiprintf_r+0x1a8>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0c5      	beq.n	80051b0 <_svfiprintf_r+0x130>
 8005224:	9105      	str	r1, [sp, #20]
 8005226:	e7c3      	b.n	80051b0 <_svfiprintf_r+0x130>
 8005228:	fb0c 2101 	mla	r1, ip, r1, r2
 800522c:	4604      	mov	r4, r0
 800522e:	2301      	movs	r3, #1
 8005230:	e7f0      	b.n	8005214 <_svfiprintf_r+0x194>
 8005232:	ab03      	add	r3, sp, #12
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	462a      	mov	r2, r5
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <_svfiprintf_r+0x1f8>)
 800523a:	a904      	add	r1, sp, #16
 800523c:	4638      	mov	r0, r7
 800523e:	f3af 8000 	nop.w
 8005242:	1c42      	adds	r2, r0, #1
 8005244:	4606      	mov	r6, r0
 8005246:	d1d6      	bne.n	80051f6 <_svfiprintf_r+0x176>
 8005248:	89ab      	ldrh	r3, [r5, #12]
 800524a:	065b      	lsls	r3, r3, #25
 800524c:	f53f af2c 	bmi.w	80050a8 <_svfiprintf_r+0x28>
 8005250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005252:	b01d      	add	sp, #116	; 0x74
 8005254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005258:	ab03      	add	r3, sp, #12
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	462a      	mov	r2, r5
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <_svfiprintf_r+0x1f8>)
 8005260:	a904      	add	r1, sp, #16
 8005262:	4638      	mov	r0, r7
 8005264:	f000 f87a 	bl	800535c <_printf_i>
 8005268:	e7eb      	b.n	8005242 <_svfiprintf_r+0x1c2>
 800526a:	bf00      	nop
 800526c:	08005884 	.word	0x08005884
 8005270:	0800588e 	.word	0x0800588e
 8005274:	00000000 	.word	0x00000000
 8005278:	08004fc9 	.word	0x08004fc9
 800527c:	0800588a 	.word	0x0800588a

08005280 <_printf_common>:
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	4616      	mov	r6, r2
 8005286:	4699      	mov	r9, r3
 8005288:	688a      	ldr	r2, [r1, #8]
 800528a:	690b      	ldr	r3, [r1, #16]
 800528c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005290:	4293      	cmp	r3, r2
 8005292:	bfb8      	it	lt
 8005294:	4613      	movlt	r3, r2
 8005296:	6033      	str	r3, [r6, #0]
 8005298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800529c:	4607      	mov	r7, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	b10a      	cbz	r2, 80052a6 <_printf_common+0x26>
 80052a2:	3301      	adds	r3, #1
 80052a4:	6033      	str	r3, [r6, #0]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	0699      	lsls	r1, r3, #26
 80052aa:	bf42      	ittt	mi
 80052ac:	6833      	ldrmi	r3, [r6, #0]
 80052ae:	3302      	addmi	r3, #2
 80052b0:	6033      	strmi	r3, [r6, #0]
 80052b2:	6825      	ldr	r5, [r4, #0]
 80052b4:	f015 0506 	ands.w	r5, r5, #6
 80052b8:	d106      	bne.n	80052c8 <_printf_common+0x48>
 80052ba:	f104 0a19 	add.w	sl, r4, #25
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	6832      	ldr	r2, [r6, #0]
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	dc26      	bgt.n	8005316 <_printf_common+0x96>
 80052c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052cc:	1e13      	subs	r3, r2, #0
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	bf18      	it	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	0692      	lsls	r2, r2, #26
 80052d6:	d42b      	bmi.n	8005330 <_printf_common+0xb0>
 80052d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052dc:	4649      	mov	r1, r9
 80052de:	4638      	mov	r0, r7
 80052e0:	47c0      	blx	r8
 80052e2:	3001      	adds	r0, #1
 80052e4:	d01e      	beq.n	8005324 <_printf_common+0xa4>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	68e5      	ldr	r5, [r4, #12]
 80052ea:	6832      	ldr	r2, [r6, #0]
 80052ec:	f003 0306 	and.w	r3, r3, #6
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	bf08      	it	eq
 80052f4:	1aad      	subeq	r5, r5, r2
 80052f6:	68a3      	ldr	r3, [r4, #8]
 80052f8:	6922      	ldr	r2, [r4, #16]
 80052fa:	bf0c      	ite	eq
 80052fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005300:	2500      	movne	r5, #0
 8005302:	4293      	cmp	r3, r2
 8005304:	bfc4      	itt	gt
 8005306:	1a9b      	subgt	r3, r3, r2
 8005308:	18ed      	addgt	r5, r5, r3
 800530a:	2600      	movs	r6, #0
 800530c:	341a      	adds	r4, #26
 800530e:	42b5      	cmp	r5, r6
 8005310:	d11a      	bne.n	8005348 <_printf_common+0xc8>
 8005312:	2000      	movs	r0, #0
 8005314:	e008      	b.n	8005328 <_printf_common+0xa8>
 8005316:	2301      	movs	r3, #1
 8005318:	4652      	mov	r2, sl
 800531a:	4649      	mov	r1, r9
 800531c:	4638      	mov	r0, r7
 800531e:	47c0      	blx	r8
 8005320:	3001      	adds	r0, #1
 8005322:	d103      	bne.n	800532c <_printf_common+0xac>
 8005324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532c:	3501      	adds	r5, #1
 800532e:	e7c6      	b.n	80052be <_printf_common+0x3e>
 8005330:	18e1      	adds	r1, r4, r3
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	2030      	movs	r0, #48	; 0x30
 8005336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800533a:	4422      	add	r2, r4
 800533c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005344:	3302      	adds	r3, #2
 8005346:	e7c7      	b.n	80052d8 <_printf_common+0x58>
 8005348:	2301      	movs	r3, #1
 800534a:	4622      	mov	r2, r4
 800534c:	4649      	mov	r1, r9
 800534e:	4638      	mov	r0, r7
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d0e6      	beq.n	8005324 <_printf_common+0xa4>
 8005356:	3601      	adds	r6, #1
 8005358:	e7d9      	b.n	800530e <_printf_common+0x8e>
	...

0800535c <_printf_i>:
 800535c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	460c      	mov	r4, r1
 8005362:	4691      	mov	r9, r2
 8005364:	7e27      	ldrb	r7, [r4, #24]
 8005366:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005368:	2f78      	cmp	r7, #120	; 0x78
 800536a:	4680      	mov	r8, r0
 800536c:	469a      	mov	sl, r3
 800536e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005372:	d807      	bhi.n	8005384 <_printf_i+0x28>
 8005374:	2f62      	cmp	r7, #98	; 0x62
 8005376:	d80a      	bhi.n	800538e <_printf_i+0x32>
 8005378:	2f00      	cmp	r7, #0
 800537a:	f000 80d8 	beq.w	800552e <_printf_i+0x1d2>
 800537e:	2f58      	cmp	r7, #88	; 0x58
 8005380:	f000 80a3 	beq.w	80054ca <_printf_i+0x16e>
 8005384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800538c:	e03a      	b.n	8005404 <_printf_i+0xa8>
 800538e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005392:	2b15      	cmp	r3, #21
 8005394:	d8f6      	bhi.n	8005384 <_printf_i+0x28>
 8005396:	a001      	add	r0, pc, #4	; (adr r0, 800539c <_printf_i+0x40>)
 8005398:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	08005409 	.word	0x08005409
 80053a4:	08005385 	.word	0x08005385
 80053a8:	08005385 	.word	0x08005385
 80053ac:	08005385 	.word	0x08005385
 80053b0:	08005385 	.word	0x08005385
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005385 	.word	0x08005385
 80053bc:	08005385 	.word	0x08005385
 80053c0:	08005385 	.word	0x08005385
 80053c4:	08005385 	.word	0x08005385
 80053c8:	08005515 	.word	0x08005515
 80053cc:	08005439 	.word	0x08005439
 80053d0:	080054f7 	.word	0x080054f7
 80053d4:	08005385 	.word	0x08005385
 80053d8:	08005385 	.word	0x08005385
 80053dc:	08005537 	.word	0x08005537
 80053e0:	08005385 	.word	0x08005385
 80053e4:	08005439 	.word	0x08005439
 80053e8:	08005385 	.word	0x08005385
 80053ec:	08005385 	.word	0x08005385
 80053f0:	080054ff 	.word	0x080054ff
 80053f4:	680b      	ldr	r3, [r1, #0]
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	600a      	str	r2, [r1, #0]
 80053fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005404:	2301      	movs	r3, #1
 8005406:	e0a3      	b.n	8005550 <_printf_i+0x1f4>
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	6808      	ldr	r0, [r1, #0]
 800540c:	062e      	lsls	r6, r5, #24
 800540e:	f100 0304 	add.w	r3, r0, #4
 8005412:	d50a      	bpl.n	800542a <_printf_i+0xce>
 8005414:	6805      	ldr	r5, [r0, #0]
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	2d00      	cmp	r5, #0
 800541a:	da03      	bge.n	8005424 <_printf_i+0xc8>
 800541c:	232d      	movs	r3, #45	; 0x2d
 800541e:	426d      	negs	r5, r5
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005424:	485e      	ldr	r0, [pc, #376]	; (80055a0 <_printf_i+0x244>)
 8005426:	230a      	movs	r3, #10
 8005428:	e019      	b.n	800545e <_printf_i+0x102>
 800542a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800542e:	6805      	ldr	r5, [r0, #0]
 8005430:	600b      	str	r3, [r1, #0]
 8005432:	bf18      	it	ne
 8005434:	b22d      	sxthne	r5, r5
 8005436:	e7ef      	b.n	8005418 <_printf_i+0xbc>
 8005438:	680b      	ldr	r3, [r1, #0]
 800543a:	6825      	ldr	r5, [r4, #0]
 800543c:	1d18      	adds	r0, r3, #4
 800543e:	6008      	str	r0, [r1, #0]
 8005440:	0628      	lsls	r0, r5, #24
 8005442:	d501      	bpl.n	8005448 <_printf_i+0xec>
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	e002      	b.n	800544e <_printf_i+0xf2>
 8005448:	0669      	lsls	r1, r5, #25
 800544a:	d5fb      	bpl.n	8005444 <_printf_i+0xe8>
 800544c:	881d      	ldrh	r5, [r3, #0]
 800544e:	4854      	ldr	r0, [pc, #336]	; (80055a0 <_printf_i+0x244>)
 8005450:	2f6f      	cmp	r7, #111	; 0x6f
 8005452:	bf0c      	ite	eq
 8005454:	2308      	moveq	r3, #8
 8005456:	230a      	movne	r3, #10
 8005458:	2100      	movs	r1, #0
 800545a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800545e:	6866      	ldr	r6, [r4, #4]
 8005460:	60a6      	str	r6, [r4, #8]
 8005462:	2e00      	cmp	r6, #0
 8005464:	bfa2      	ittt	ge
 8005466:	6821      	ldrge	r1, [r4, #0]
 8005468:	f021 0104 	bicge.w	r1, r1, #4
 800546c:	6021      	strge	r1, [r4, #0]
 800546e:	b90d      	cbnz	r5, 8005474 <_printf_i+0x118>
 8005470:	2e00      	cmp	r6, #0
 8005472:	d04d      	beq.n	8005510 <_printf_i+0x1b4>
 8005474:	4616      	mov	r6, r2
 8005476:	fbb5 f1f3 	udiv	r1, r5, r3
 800547a:	fb03 5711 	mls	r7, r3, r1, r5
 800547e:	5dc7      	ldrb	r7, [r0, r7]
 8005480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005484:	462f      	mov	r7, r5
 8005486:	42bb      	cmp	r3, r7
 8005488:	460d      	mov	r5, r1
 800548a:	d9f4      	bls.n	8005476 <_printf_i+0x11a>
 800548c:	2b08      	cmp	r3, #8
 800548e:	d10b      	bne.n	80054a8 <_printf_i+0x14c>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	07df      	lsls	r7, r3, #31
 8005494:	d508      	bpl.n	80054a8 <_printf_i+0x14c>
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	6861      	ldr	r1, [r4, #4]
 800549a:	4299      	cmp	r1, r3
 800549c:	bfde      	ittt	le
 800549e:	2330      	movle	r3, #48	; 0x30
 80054a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80054a8:	1b92      	subs	r2, r2, r6
 80054aa:	6122      	str	r2, [r4, #16]
 80054ac:	f8cd a000 	str.w	sl, [sp]
 80054b0:	464b      	mov	r3, r9
 80054b2:	aa03      	add	r2, sp, #12
 80054b4:	4621      	mov	r1, r4
 80054b6:	4640      	mov	r0, r8
 80054b8:	f7ff fee2 	bl	8005280 <_printf_common>
 80054bc:	3001      	adds	r0, #1
 80054be:	d14c      	bne.n	800555a <_printf_i+0x1fe>
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c4:	b004      	add	sp, #16
 80054c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ca:	4835      	ldr	r0, [pc, #212]	; (80055a0 <_printf_i+0x244>)
 80054cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	680e      	ldr	r6, [r1, #0]
 80054d4:	061f      	lsls	r7, r3, #24
 80054d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054da:	600e      	str	r6, [r1, #0]
 80054dc:	d514      	bpl.n	8005508 <_printf_i+0x1ac>
 80054de:	07d9      	lsls	r1, r3, #31
 80054e0:	bf44      	itt	mi
 80054e2:	f043 0320 	orrmi.w	r3, r3, #32
 80054e6:	6023      	strmi	r3, [r4, #0]
 80054e8:	b91d      	cbnz	r5, 80054f2 <_printf_i+0x196>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	f023 0320 	bic.w	r3, r3, #32
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	2310      	movs	r3, #16
 80054f4:	e7b0      	b.n	8005458 <_printf_i+0xfc>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	f043 0320 	orr.w	r3, r3, #32
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	2378      	movs	r3, #120	; 0x78
 8005500:	4828      	ldr	r0, [pc, #160]	; (80055a4 <_printf_i+0x248>)
 8005502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005506:	e7e3      	b.n	80054d0 <_printf_i+0x174>
 8005508:	065e      	lsls	r6, r3, #25
 800550a:	bf48      	it	mi
 800550c:	b2ad      	uxthmi	r5, r5
 800550e:	e7e6      	b.n	80054de <_printf_i+0x182>
 8005510:	4616      	mov	r6, r2
 8005512:	e7bb      	b.n	800548c <_printf_i+0x130>
 8005514:	680b      	ldr	r3, [r1, #0]
 8005516:	6826      	ldr	r6, [r4, #0]
 8005518:	6960      	ldr	r0, [r4, #20]
 800551a:	1d1d      	adds	r5, r3, #4
 800551c:	600d      	str	r5, [r1, #0]
 800551e:	0635      	lsls	r5, r6, #24
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	d501      	bpl.n	8005528 <_printf_i+0x1cc>
 8005524:	6018      	str	r0, [r3, #0]
 8005526:	e002      	b.n	800552e <_printf_i+0x1d2>
 8005528:	0671      	lsls	r1, r6, #25
 800552a:	d5fb      	bpl.n	8005524 <_printf_i+0x1c8>
 800552c:	8018      	strh	r0, [r3, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	6123      	str	r3, [r4, #16]
 8005532:	4616      	mov	r6, r2
 8005534:	e7ba      	b.n	80054ac <_printf_i+0x150>
 8005536:	680b      	ldr	r3, [r1, #0]
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	600a      	str	r2, [r1, #0]
 800553c:	681e      	ldr	r6, [r3, #0]
 800553e:	6862      	ldr	r2, [r4, #4]
 8005540:	2100      	movs	r1, #0
 8005542:	4630      	mov	r0, r6
 8005544:	f7fa fe4c 	bl	80001e0 <memchr>
 8005548:	b108      	cbz	r0, 800554e <_printf_i+0x1f2>
 800554a:	1b80      	subs	r0, r0, r6
 800554c:	6060      	str	r0, [r4, #4]
 800554e:	6863      	ldr	r3, [r4, #4]
 8005550:	6123      	str	r3, [r4, #16]
 8005552:	2300      	movs	r3, #0
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005558:	e7a8      	b.n	80054ac <_printf_i+0x150>
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	4632      	mov	r2, r6
 800555e:	4649      	mov	r1, r9
 8005560:	4640      	mov	r0, r8
 8005562:	47d0      	blx	sl
 8005564:	3001      	adds	r0, #1
 8005566:	d0ab      	beq.n	80054c0 <_printf_i+0x164>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	079b      	lsls	r3, r3, #30
 800556c:	d413      	bmi.n	8005596 <_printf_i+0x23a>
 800556e:	68e0      	ldr	r0, [r4, #12]
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	4298      	cmp	r0, r3
 8005574:	bfb8      	it	lt
 8005576:	4618      	movlt	r0, r3
 8005578:	e7a4      	b.n	80054c4 <_printf_i+0x168>
 800557a:	2301      	movs	r3, #1
 800557c:	4632      	mov	r2, r6
 800557e:	4649      	mov	r1, r9
 8005580:	4640      	mov	r0, r8
 8005582:	47d0      	blx	sl
 8005584:	3001      	adds	r0, #1
 8005586:	d09b      	beq.n	80054c0 <_printf_i+0x164>
 8005588:	3501      	adds	r5, #1
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	9903      	ldr	r1, [sp, #12]
 800558e:	1a5b      	subs	r3, r3, r1
 8005590:	42ab      	cmp	r3, r5
 8005592:	dcf2      	bgt.n	800557a <_printf_i+0x21e>
 8005594:	e7eb      	b.n	800556e <_printf_i+0x212>
 8005596:	2500      	movs	r5, #0
 8005598:	f104 0619 	add.w	r6, r4, #25
 800559c:	e7f5      	b.n	800558a <_printf_i+0x22e>
 800559e:	bf00      	nop
 80055a0:	08005895 	.word	0x08005895
 80055a4:	080058a6 	.word	0x080058a6

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055be:	4291      	cmp	r1, r2
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <memmove>:
 80055c4:	4288      	cmp	r0, r1
 80055c6:	b510      	push	{r4, lr}
 80055c8:	eb01 0402 	add.w	r4, r1, r2
 80055cc:	d902      	bls.n	80055d4 <memmove+0x10>
 80055ce:	4284      	cmp	r4, r0
 80055d0:	4623      	mov	r3, r4
 80055d2:	d807      	bhi.n	80055e4 <memmove+0x20>
 80055d4:	1e43      	subs	r3, r0, #1
 80055d6:	42a1      	cmp	r1, r4
 80055d8:	d008      	beq.n	80055ec <memmove+0x28>
 80055da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055e2:	e7f8      	b.n	80055d6 <memmove+0x12>
 80055e4:	4402      	add	r2, r0
 80055e6:	4601      	mov	r1, r0
 80055e8:	428a      	cmp	r2, r1
 80055ea:	d100      	bne.n	80055ee <memmove+0x2a>
 80055ec:	bd10      	pop	{r4, pc}
 80055ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055f6:	e7f7      	b.n	80055e8 <memmove+0x24>

080055f8 <_free_r>:
 80055f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055fa:	2900      	cmp	r1, #0
 80055fc:	d048      	beq.n	8005690 <_free_r+0x98>
 80055fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005602:	9001      	str	r0, [sp, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f1a1 0404 	sub.w	r4, r1, #4
 800560a:	bfb8      	it	lt
 800560c:	18e4      	addlt	r4, r4, r3
 800560e:	f000 f8d3 	bl	80057b8 <__malloc_lock>
 8005612:	4a20      	ldr	r2, [pc, #128]	; (8005694 <_free_r+0x9c>)
 8005614:	9801      	ldr	r0, [sp, #4]
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	4615      	mov	r5, r2
 800561a:	b933      	cbnz	r3, 800562a <_free_r+0x32>
 800561c:	6063      	str	r3, [r4, #4]
 800561e:	6014      	str	r4, [r2, #0]
 8005620:	b003      	add	sp, #12
 8005622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005626:	f000 b8cd 	b.w	80057c4 <__malloc_unlock>
 800562a:	42a3      	cmp	r3, r4
 800562c:	d90b      	bls.n	8005646 <_free_r+0x4e>
 800562e:	6821      	ldr	r1, [r4, #0]
 8005630:	1862      	adds	r2, r4, r1
 8005632:	4293      	cmp	r3, r2
 8005634:	bf04      	itt	eq
 8005636:	681a      	ldreq	r2, [r3, #0]
 8005638:	685b      	ldreq	r3, [r3, #4]
 800563a:	6063      	str	r3, [r4, #4]
 800563c:	bf04      	itt	eq
 800563e:	1852      	addeq	r2, r2, r1
 8005640:	6022      	streq	r2, [r4, #0]
 8005642:	602c      	str	r4, [r5, #0]
 8005644:	e7ec      	b.n	8005620 <_free_r+0x28>
 8005646:	461a      	mov	r2, r3
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	b10b      	cbz	r3, 8005650 <_free_r+0x58>
 800564c:	42a3      	cmp	r3, r4
 800564e:	d9fa      	bls.n	8005646 <_free_r+0x4e>
 8005650:	6811      	ldr	r1, [r2, #0]
 8005652:	1855      	adds	r5, r2, r1
 8005654:	42a5      	cmp	r5, r4
 8005656:	d10b      	bne.n	8005670 <_free_r+0x78>
 8005658:	6824      	ldr	r4, [r4, #0]
 800565a:	4421      	add	r1, r4
 800565c:	1854      	adds	r4, r2, r1
 800565e:	42a3      	cmp	r3, r4
 8005660:	6011      	str	r1, [r2, #0]
 8005662:	d1dd      	bne.n	8005620 <_free_r+0x28>
 8005664:	681c      	ldr	r4, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	6053      	str	r3, [r2, #4]
 800566a:	4421      	add	r1, r4
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	e7d7      	b.n	8005620 <_free_r+0x28>
 8005670:	d902      	bls.n	8005678 <_free_r+0x80>
 8005672:	230c      	movs	r3, #12
 8005674:	6003      	str	r3, [r0, #0]
 8005676:	e7d3      	b.n	8005620 <_free_r+0x28>
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1961      	adds	r1, r4, r5
 800567c:	428b      	cmp	r3, r1
 800567e:	bf04      	itt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	6063      	str	r3, [r4, #4]
 8005686:	bf04      	itt	eq
 8005688:	1949      	addeq	r1, r1, r5
 800568a:	6021      	streq	r1, [r4, #0]
 800568c:	6054      	str	r4, [r2, #4]
 800568e:	e7c7      	b.n	8005620 <_free_r+0x28>
 8005690:	b003      	add	sp, #12
 8005692:	bd30      	pop	{r4, r5, pc}
 8005694:	200008bc 	.word	0x200008bc

08005698 <_malloc_r>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	1ccd      	adds	r5, r1, #3
 800569c:	f025 0503 	bic.w	r5, r5, #3
 80056a0:	3508      	adds	r5, #8
 80056a2:	2d0c      	cmp	r5, #12
 80056a4:	bf38      	it	cc
 80056a6:	250c      	movcc	r5, #12
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	4606      	mov	r6, r0
 80056ac:	db01      	blt.n	80056b2 <_malloc_r+0x1a>
 80056ae:	42a9      	cmp	r1, r5
 80056b0:	d903      	bls.n	80056ba <_malloc_r+0x22>
 80056b2:	230c      	movs	r3, #12
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	2000      	movs	r0, #0
 80056b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ba:	f000 f87d 	bl	80057b8 <__malloc_lock>
 80056be:	4921      	ldr	r1, [pc, #132]	; (8005744 <_malloc_r+0xac>)
 80056c0:	680a      	ldr	r2, [r1, #0]
 80056c2:	4614      	mov	r4, r2
 80056c4:	b99c      	cbnz	r4, 80056ee <_malloc_r+0x56>
 80056c6:	4f20      	ldr	r7, [pc, #128]	; (8005748 <_malloc_r+0xb0>)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	b923      	cbnz	r3, 80056d6 <_malloc_r+0x3e>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 f862 	bl	8005798 <_sbrk_r>
 80056d4:	6038      	str	r0, [r7, #0]
 80056d6:	4629      	mov	r1, r5
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f85d 	bl	8005798 <_sbrk_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d123      	bne.n	800572a <_malloc_r+0x92>
 80056e2:	230c      	movs	r3, #12
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 f86c 	bl	80057c4 <__malloc_unlock>
 80056ec:	e7e3      	b.n	80056b6 <_malloc_r+0x1e>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	1b5b      	subs	r3, r3, r5
 80056f2:	d417      	bmi.n	8005724 <_malloc_r+0x8c>
 80056f4:	2b0b      	cmp	r3, #11
 80056f6:	d903      	bls.n	8005700 <_malloc_r+0x68>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	441c      	add	r4, r3
 80056fc:	6025      	str	r5, [r4, #0]
 80056fe:	e004      	b.n	800570a <_malloc_r+0x72>
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	42a2      	cmp	r2, r4
 8005704:	bf0c      	ite	eq
 8005706:	600b      	streq	r3, [r1, #0]
 8005708:	6053      	strne	r3, [r2, #4]
 800570a:	4630      	mov	r0, r6
 800570c:	f000 f85a 	bl	80057c4 <__malloc_unlock>
 8005710:	f104 000b 	add.w	r0, r4, #11
 8005714:	1d23      	adds	r3, r4, #4
 8005716:	f020 0007 	bic.w	r0, r0, #7
 800571a:	1ac2      	subs	r2, r0, r3
 800571c:	d0cc      	beq.n	80056b8 <_malloc_r+0x20>
 800571e:	1a1b      	subs	r3, r3, r0
 8005720:	50a3      	str	r3, [r4, r2]
 8005722:	e7c9      	b.n	80056b8 <_malloc_r+0x20>
 8005724:	4622      	mov	r2, r4
 8005726:	6864      	ldr	r4, [r4, #4]
 8005728:	e7cc      	b.n	80056c4 <_malloc_r+0x2c>
 800572a:	1cc4      	adds	r4, r0, #3
 800572c:	f024 0403 	bic.w	r4, r4, #3
 8005730:	42a0      	cmp	r0, r4
 8005732:	d0e3      	beq.n	80056fc <_malloc_r+0x64>
 8005734:	1a21      	subs	r1, r4, r0
 8005736:	4630      	mov	r0, r6
 8005738:	f000 f82e 	bl	8005798 <_sbrk_r>
 800573c:	3001      	adds	r0, #1
 800573e:	d1dd      	bne.n	80056fc <_malloc_r+0x64>
 8005740:	e7cf      	b.n	80056e2 <_malloc_r+0x4a>
 8005742:	bf00      	nop
 8005744:	200008bc 	.word	0x200008bc
 8005748:	200008c0 	.word	0x200008c0

0800574c <_realloc_r>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	4607      	mov	r7, r0
 8005750:	4614      	mov	r4, r2
 8005752:	460e      	mov	r6, r1
 8005754:	b921      	cbnz	r1, 8005760 <_realloc_r+0x14>
 8005756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800575a:	4611      	mov	r1, r2
 800575c:	f7ff bf9c 	b.w	8005698 <_malloc_r>
 8005760:	b922      	cbnz	r2, 800576c <_realloc_r+0x20>
 8005762:	f7ff ff49 	bl	80055f8 <_free_r>
 8005766:	4625      	mov	r5, r4
 8005768:	4628      	mov	r0, r5
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800576c:	f000 f830 	bl	80057d0 <_malloc_usable_size_r>
 8005770:	42a0      	cmp	r0, r4
 8005772:	d20f      	bcs.n	8005794 <_realloc_r+0x48>
 8005774:	4621      	mov	r1, r4
 8005776:	4638      	mov	r0, r7
 8005778:	f7ff ff8e 	bl	8005698 <_malloc_r>
 800577c:	4605      	mov	r5, r0
 800577e:	2800      	cmp	r0, #0
 8005780:	d0f2      	beq.n	8005768 <_realloc_r+0x1c>
 8005782:	4631      	mov	r1, r6
 8005784:	4622      	mov	r2, r4
 8005786:	f7ff ff0f 	bl	80055a8 <memcpy>
 800578a:	4631      	mov	r1, r6
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ff33 	bl	80055f8 <_free_r>
 8005792:	e7e9      	b.n	8005768 <_realloc_r+0x1c>
 8005794:	4635      	mov	r5, r6
 8005796:	e7e7      	b.n	8005768 <_realloc_r+0x1c>

08005798 <_sbrk_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_sbrk_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fb fd7e 	bl	80012a4 <_sbrk>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_sbrk_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_sbrk_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000a64 	.word	0x20000a64

080057b8 <__malloc_lock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_lock+0x8>)
 80057ba:	f000 b811 	b.w	80057e0 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	20000a6c 	.word	0x20000a6c

080057c4 <__malloc_unlock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__malloc_unlock+0x8>)
 80057c6:	f000 b80c 	b.w	80057e2 <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000a6c 	.word	0x20000a6c

080057d0 <_malloc_usable_size_r>:
 80057d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d4:	1f18      	subs	r0, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bfbc      	itt	lt
 80057da:	580b      	ldrlt	r3, [r1, r0]
 80057dc:	18c0      	addlt	r0, r0, r3
 80057de:	4770      	bx	lr

080057e0 <__retarget_lock_acquire_recursive>:
 80057e0:	4770      	bx	lr

080057e2 <__retarget_lock_release_recursive>:
 80057e2:	4770      	bx	lr

080057e4 <_init>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr

080057f0 <_fini>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr
