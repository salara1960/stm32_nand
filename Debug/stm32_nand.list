
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008980  08008980  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00005400  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20005498  20005498  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002262d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f64  00000000  00000000  000426f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  00046660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001660  00000000  00000000  00047e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004532  00000000  00000000  00049488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b58d  00000000  00000000  0004d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e04a5  00000000  00000000  00068f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001493ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a20  00000000  00000000  00149440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087dc 	.word	0x080087dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080087dc 	.word	0x080087dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <__NVIC_SystemReset+0x24>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <__NVIC_SystemReset+0x24>)
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__NVIC_SystemReset+0x28>)
 800058e:	4313      	orrs	r3, r2
 8000590:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000592:	f3bf 8f4f 	dsb	sy
}
 8000596:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <__NVIC_SystemReset+0x20>
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	05fa0004 	.word	0x05fa0004

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 ff00 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f85e 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f9b6 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 f994 	bl	80008e0 <MX_DMA_Init>
  MX_TIM2_Init();
 80005b8:	f000 f91c 	bl	80007f4 <MX_TIM2_Init>
  MX_RTC_Init();
 80005bc:	f000 f8c0 	bl	8000740 <MX_RTC_Init>
  MX_FSMC_Init();
 80005c0:	f000 fa40 	bl	8000a44 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f962 	bl	800088c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(1000);

  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	481d      	ldr	r0, [pc, #116]	; (8000644 <main+0xa0>)
 80005ce:	f001 fdd3 	bl	8002178 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xa4>)
 80005da:	f001 fdcd 	bl	8002178 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f000 ff25 	bl	8001430 <HAL_Delay>
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <main+0xa0>)
 80005ec:	f001 fdc4 	bl	8002178 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	4814      	ldr	r0, [pc, #80]	; (8000648 <main+0xa4>)
 80005f8:	f001 fdbe 	bl	8002178 <HAL_GPIO_WritePin>

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0xa8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f002 ff57 	bl	80034b4 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <main+0xac>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2201      	movs	r2, #1
 800060c:	4911      	ldr	r1, [pc, #68]	; (8000654 <main+0xb0>)
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fbcf 	bl	8003db2 <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000614:	f004 fc86 	bl	8004f24 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <main+0xb4>)
 800061a:	2101      	movs	r1, #1
 800061c:	2001      	movs	r0, #1
 800061e:	f004 fd7a 	bl	8005116 <osSemaphoreNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <main+0xb8>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <main+0xbc>)
 800062a:	2100      	movs	r1, #0
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <main+0xc0>)
 800062e:	f004 fcc5 	bl	8004fbc <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <main+0xc4>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000638:	f004 fc9a 	bl	8004f70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LOOP_FOREVER();
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fef7 	bl	8001430 <HAL_Delay>
 8000642:	e7fb      	b.n	800063c <main+0x98>
 8000644:	40020800 	.word	0x40020800
 8000648:	40020c00 	.word	0x40020c00
 800064c:	2000000c 	.word	0x2000000c
 8000650:	20000010 	.word	0x20000010
 8000654:	200008c0 	.word	0x200008c0
 8000658:	080088a8 	.word	0x080088a8
 800065c:	2000534c 	.word	0x2000534c
 8000660:	08008884 	.word	0x08008884
 8000664:	08000dd1 	.word	0x08000dd1
 8000668:	200053f8 	.word	0x200053f8

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f007 fbcc 	bl	8007e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fea0 	bl	8002438 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 fbd1 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800070e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f901 	bl	8002928 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800072c:	f000 fbba 	bl	8000ea4 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_RTC_Init+0xac>)
 800075a:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <MX_RTC_Init+0xb0>)
 800075c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_RTC_Init+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_RTC_Init+0xac>)
 8000766:	227f      	movs	r2, #127	; 0x7f
 8000768:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_RTC_Init+0xac>)
 800076c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000770:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_RTC_Init+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_RTC_Init+0xac>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_RTC_Init+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000784:	4819      	ldr	r0, [pc, #100]	; (80007ec <MX_RTC_Init+0xac>)
 8000786:	f002 fbdf 	bl	8002f48 <HAL_RTC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000790:	f000 fb88 	bl	8000ea4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	; (80007ec <MX_RTC_Init+0xac>)
 80007b0:	f002 fc5b 	bl	800306a <HAL_RTC_SetTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80007ba:	f000 fb73 	bl	8000ea4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007be:	2301      	movs	r3, #1
 80007c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007c2:	2301      	movs	r3, #1
 80007c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_RTC_Init+0xac>)
 80007d6:	f002 fd05 	bl	80031e4 <HAL_RTC_SetDate>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80007e0:	f000 fb60 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20005390 	.word	0x20005390
 80007f0:	40002800 	.word	0x40002800

080007f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM2_Init+0x94>)
 8000812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_TIM2_Init+0x94>)
 800081a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800081e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM2_Init+0x94>)
 8000828:	22f9      	movs	r2, #249	; 0xf9
 800082a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_TIM2_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_TIM2_Init+0x94>)
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_TIM2_Init+0x94>)
 800083a:	f002 fdec 	bl	8003416 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000844:	f000 fb2e 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_TIM2_Init+0x94>)
 8000856:	f002 ffa5 	bl	80037a4 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000860:	f000 fb20 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000864:	2320      	movs	r3, #32
 8000866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM2_Init+0x94>)
 8000872:	f003 f9c1 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 fb12 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200053b0 	.word	0x200053b0

0800088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART3_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008c4:	f003 fa28 	bl	8003d18 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 fae9 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200052a4 	.word	0x200052a4
 80008dc:	40004800 	.word	0x40004800

080008e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x3c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x3c>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x3c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	200e      	movs	r0, #14
 8000908:	f000 fe6e 	bl	80015e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800090c:	200e      	movs	r0, #14
 800090e:	f000 fe87 	bl	8001620 <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_GPIO_Init+0x118>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3e      	ldr	r2, [pc, #248]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a37      	ldr	r2, [pc, #220]	; (8000a38 <MX_GPIO_Init+0x118>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a30      	ldr	r2, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x118>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_GPIO_Init+0x118>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_GPIO_Init+0x118>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_GPIO_Init+0x118>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_GPIO_Init+0x118>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_GPIO_Init+0x118>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <MX_GPIO_Init+0x118>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x118>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_GPIO_Init+0x11c>)
 80009e6:	f001 fbc7 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_GPIO_Init+0x120>)
 80009f0:	f001 fbc2 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <MX_GPIO_Init+0x11c>)
 8000a0e:	f001 fa17 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_GPIO_Init+0x120>)
 8000a2a:	f001 fa09 	bl	8001e40 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	; 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020800 	.word	0x40020800

08000a44 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a66:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <MX_FSMC_Init+0xc0>)
 8000a68:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000ac0:	23fc      	movs	r3, #252	; 0xfc
 8000ac2:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8000ac4:	23fc      	movs	r3, #252	; 0xfc
 8000ac6:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8000ac8:	23fc      	movs	r3, #252	; 0xfc
 8000aca:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8000acc:	23fc      	movs	r3, #252	; 0xfc
 8000ace:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000ad0:	23fc      	movs	r3, #252	; 0xfc
 8000ad2:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8000ad4:	23fc      	movs	r3, #252	; 0xfc
 8000ad6:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8000ad8:	23fc      	movs	r3, #252	; 0xfc
 8000ada:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8000adc:	23fc      	movs	r3, #252	; 0xfc
 8000ade:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000ae0:	463a      	mov	r2, r7
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_FSMC_Init+0xbc>)
 8000aea:	f001 fb78 	bl	80021de <HAL_NAND_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000af4:	f000 f9d6 	bl	8000ea4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20005350 	.word	0x20005350
 8000b04:	a0000060 	.word	0xa0000060

08000b08 <errLedOn>:

/* USER CODE BEGIN 4 */
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if (on)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <errLedOn+0x34>)
 8000b20:	f001 fb2a 	bl	8002178 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8000b24:	e005      	b.n	8000b32 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <errLedOn+0x34>)
 8000b2e:	f001 fb23 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	return secCounter;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <get_secCounter+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000b4 	.word	0x200000b4

08000b58 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	secCounter++;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <inc_secCounter+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <inc_secCounter+0x18>)
 8000b64:	6013      	str	r3, [r2, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	200000b4 	.word	0x200000b4

08000b74 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	return msCounter;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <get_msCounter+0x18>)
 8000b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000b7e:	4610      	mov	r0, r2
 8000b80:	4619      	mov	r1, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000b8 	.word	0x200000b8

08000b90 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	msCounter++;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <inc_msCounter+0x20>)
 8000b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9a:	1c50      	adds	r0, r2, #1
 8000b9c:	f143 0100 	adc.w	r1, r3, #0
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <inc_msCounter+0x20>)
 8000ba2:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	200000b8 	.word	0x200000b8

08000bb4 <sec2str>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	6078      	str	r0, [r7, #4]
	uint32_t sec = get_secCounter();
 8000bbc:	f7ff ffc0 	bl	8000b40 <get_secCounter>
 8000bc0:	6178      	str	r0, [r7, #20]

	uint32_t day = sec / (60 * 60 * 24);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <sec2str+0x90>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c1b      	lsrs	r3, r3, #16
 8000bcc:	613b      	str	r3, [r7, #16]
	sec %= (60 * 60 * 24);
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <sec2str+0x90>)
 8000bd2:	fba2 1203 	umull	r1, r2, r2, r3
 8000bd6:	0c12      	lsrs	r2, r2, #16
 8000bd8:	491b      	ldr	r1, [pc, #108]	; (8000c48 <sec2str+0x94>)
 8000bda:	fb01 f202 	mul.w	r2, r1, r2
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	617b      	str	r3, [r7, #20]
	uint32_t hour = sec / (60 * 60);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <sec2str+0x98>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0adb      	lsrs	r3, r3, #11
 8000bec:	60fb      	str	r3, [r7, #12]
	sec %= (60 * 60);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <sec2str+0x98>)
 8000bf2:	fba2 1203 	umull	r1, r2, r2, r3
 8000bf6:	0ad2      	lsrs	r2, r2, #11
 8000bf8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000bfc:	fb01 f202 	mul.w	r2, r1, r2
 8000c00:	1a9b      	subs	r3, r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
	uint32_t min = sec / (60);
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <sec2str+0x9c>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	095b      	lsrs	r3, r3, #5
 8000c0e:	60bb      	str	r3, [r7, #8]
	sec %= 60;
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <sec2str+0x9c>)
 8000c14:	fba3 1302 	umull	r1, r3, r3, r2
 8000c18:	0959      	lsrs	r1, r3, #5
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	1a5b      	subs	r3, r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]

	return (sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <sec2str+0xa0>)
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f007 f9cb 	bl	8007fd0 <siprintf>
 8000c3a:	4603      	mov	r3, r0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	c22e4507 	.word	0xc22e4507
 8000c48:	00015180 	.word	0x00015180
 8000c4c:	91a2b3c5 	.word	0x91a2b3c5
 8000c50:	88888889 	.word	0x88888889
 8000c54:	0800881c 	.word	0x0800881c

08000c58 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 8000c58:	b40e      	push	{r1, r2, r3}
 8000c5a:	b590      	push	{r4, r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8000c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c68:	613b      	str	r3, [r7, #16]
int dl = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <Report+0xbc>)
 8000c70:	60fb      	str	r3, [r7, #12]

	    *buf = '\0';
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
		if (addTime) {
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d012      	beq.n	8000ca4 <Report+0x4c>
			dl = sec2str(buf);
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ff98 	bl	8000bb4 <sec2str>
 8000c84:	6178      	str	r0, [r7, #20]
			strcat(buf, "| ");
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff faa2 	bl	80001d0 <strlen>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <Report+0xc0>)
 8000c96:	8811      	ldrh	r1, [r2, #0]
 8000c98:	7892      	ldrb	r2, [r2, #2]
 8000c9a:	8019      	strh	r1, [r3, #0]
 8000c9c:	709a      	strb	r2, [r3, #2]
			dl += 2;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
		}

		va_start(args, fmt);
 8000ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca8:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	18d0      	adds	r0, r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	1ad1      	subs	r1, r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cba:	f007 f9ed 	bl	8008098 <vsniprintf>

		uartRdy = false;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <Report+0xc4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <Report+0xc8>)
 8000cc6:	681c      	ldr	r4, [r3, #0]
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fa81 	bl	80001d0 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f003 f89c 	bl	8003e14 <HAL_UART_Transmit_DMA>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d009      	beq.n	8000cf6 <Report+0x9e>
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <Report+0xcc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <Report+0xcc>)
 8000cec:	6013      	str	r3, [r2, #0]
		while (!uartRdy) HAL_Delay(1);
 8000cee:	e002      	b.n	8000cf6 <Report+0x9e>
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f000 fb9d 	bl	8001430 <HAL_Delay>
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <Report+0xc4>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f5      	bne.n	8000cf0 <Report+0x98>
			if (HAL_UART_GetState(logPort) == HAL_UART_STATE_BUSY_RX) break;
			HAL_Delay(1);
		}*/
		va_end(args);

	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d10:	b003      	add	sp, #12
 8000d12:	4770      	bx	lr
 8000d14:	200000c0 	.word	0x200000c0
 8000d18:	08008834 	.word	0x08008834
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000010 	.word	0x20000010
 8000d24:	200052e8 	.word	0x200052e8

08000d28 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <HAL_UART_RxCpltCallback+0x68>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d125      	bne.n	8000d86 <HAL_UART_RxCpltCallback+0x5e>
		rxBuf[ruk++] = (char)rxByte;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_UART_RxCpltCallback+0x6c>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	b291      	uxth	r1, r2
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <HAL_UART_RxCpltCallback+0x6c>)
 8000d44:	8011      	strh	r1, [r2, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_UART_RxCpltCallback+0x70>)
 8000d4a:	7819      	ldrb	r1, [r3, #0]
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_UART_RxCpltCallback+0x74>)
 8000d4e:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_RxCpltCallback+0x70>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	d111      	bne.n	8000d7c <HAL_UART_RxCpltCallback+0x54>
			if (strstr(rxBuf, "restart")) {
 8000d58:	4911      	ldr	r1, [pc, #68]	; (8000da0 <HAL_UART_RxCpltCallback+0x78>)
 8000d5a:	4810      	ldr	r0, [pc, #64]	; (8000d9c <HAL_UART_RxCpltCallback+0x74>)
 8000d5c:	f007 f958 	bl	8008010 <strstr>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_RxCpltCallback+0x42>
				NVIC_SystemReset();
 8000d66:	f7ff fc07 	bl	8000578 <__NVIC_SystemReset>
			}
			ruk = 0;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_UART_RxCpltCallback+0x6c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8000d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d74:	2100      	movs	r1, #0
 8000d76:	4809      	ldr	r0, [pc, #36]	; (8000d9c <HAL_UART_RxCpltCallback+0x74>)
 8000d78:	f007 f84e 	bl	8007e18 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4906      	ldr	r1, [pc, #24]	; (8000d98 <HAL_UART_RxCpltCallback+0x70>)
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f003 f816 	bl	8003db2 <HAL_UART_Receive_IT>
	}
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004800 	.word	0x40004800
 8000d94:	200008c2 	.word	0x200008c2
 8000d98:	200008c0 	.word	0x200008c0
 8000d9c:	200004c0 	.word	0x200004c0
 8000da0:	08008838 	.word	0x08008838

08000da4 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <HAL_UART_TxCpltCallback+0x24>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d102      	bne.n	8000dbc <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_UART_TxCpltCallback+0x28>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af04      	add	r7, sp, #16
 8000dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	bool led = false;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1500);
 8000ddc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000de0:	f000 fb26 	bl	8001430 <HAL_Delay>

	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <defThread+0x5c>)
 8000de6:	681c      	ldr	r4, [r3, #0]
 8000de8:	f006 feac 	bl	8007b44 <xPortGetFreeHeapSize>
 8000dec:	4602      	mov	r2, r0
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <defThread+0x60>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <defThread+0x64>)
 8000dfe:	4622      	mov	r2, r4
 8000e00:	490d      	ldr	r1, [pc, #52]	; (8000e38 <defThread+0x68>)
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff ff28 	bl	8000c58 <Report>


  /* Infinite loop */

  while (1) {
	  if (devError) led = true; else led = false;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <defThread+0x6c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <defThread+0x46>
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e001      	b.n	8000e1a <defThread+0x4a>
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
	  errLedOn(led);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe73 	bl	8000b08 <errLedOn>

	  osDelay(500);
 8000e22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e26:	f004 f95b 	bl	80050e0 <osDelay>
	  if (devError) led = true; else led = false;
 8000e2a:	e7ed      	b.n	8000e08 <defThread+0x38>
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000004 	.word	0x20000004
 8000e34:	080088b8 	.word	0x080088b8
 8000e38:	08008840 	.word	0x08008840
 8000e3c:	200052e8 	.word	0x200052e8

08000e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d102      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000e52:	f000 facd 	bl	80013f0 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8000e56:	e01c      	b.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM2) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e60:	d117      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x52>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8000e62:	f7ff fe87 	bl	8000b74 <get_msCounter>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	f04f 0003 	mov.w	r0, #3
 8000e6e:	f04f 0100 	mov.w	r1, #0
 8000e72:	ea02 0400 	and.w	r4, r2, r0
 8000e76:	ea03 0501 	and.w	r5, r3, r1
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	bf08      	it	eq
 8000e7e:	2c03      	cmpeq	r4, #3
 8000e80:	d105      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x4e>
		  inc_secCounter();
 8000e82:	f7ff fe69 	bl	8000b58 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e8a:	f001 f98e 	bl	80021aa <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8000e8e:	f7ff fe7f 	bl	8000b90 <inc_msCounter>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x54>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_MspInit+0x54>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x54>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_MspInit+0x54>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_MspInit+0x54>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x54>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	f06f 0001 	mvn.w	r0, #1
 8000efa:	f000 fb75 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_RTC_MspInit+0x4c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d110      	bne.n	8000f4e <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_RTC_MspInit+0x50>)
 8000f32:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 ff23 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000f44:	f7ff ffae 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_RTC_MspInit+0x54>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40002800 	.word	0x40002800
 8000f5c:	00190300 	.word	0x00190300
 8000f60:	42470e3c 	.word	0x42470e3c

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f74:	d115      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 fb26 	bl	80015e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f000 fb3f 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a35      	ldr	r2, [pc, #212]	; (80010a4 <HAL_UART_MspInit+0xf4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d163      	bne.n	800109a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_UART_MspInit+0xf8>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <HAL_UART_MspInit+0xf8>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_UART_MspInit+0xf8>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_UART_MspInit+0xf8>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_UART_MspInit+0xf8>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_UART_MspInit+0xf8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800100a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101c:	2307      	movs	r3, #7
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4821      	ldr	r0, [pc, #132]	; (80010ac <HAL_UART_MspInit+0xfc>)
 8001028:	f000 ff0a 	bl	8001e40 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_UART_MspInit+0x100>)
 800102e:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <HAL_UART_MspInit+0x104>)
 8001030:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001038:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x100>)
 800103c:	2240      	movs	r2, #64	; 0x40
 800103e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x100>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001066:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_UART_MspInit+0x100>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001070:	f000 fae4 	bl	800163c <HAL_DMA_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800107a:	f7ff ff13 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_UART_MspInit+0x100>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2027      	movs	r0, #39	; 0x27
 8001090:	f000 faaa 	bl	80015e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001094:	2027      	movs	r0, #39	; 0x27
 8001096:	f000 fac3 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004800 	.word	0x40004800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	200052ec 	.word	0x200052ec
 80010b4:	40026058 	.word	0x40026058

080010b8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_FSMC_MspInit+0x98>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d139      	bne.n	8001148 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_FSMC_MspInit+0x98>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_FSMC_MspInit+0x9c>)
 80010e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_FSMC_MspInit+0x9c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6393      	str	r3, [r2, #56]	; 0x38
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_FSMC_MspInit+0x9c>)
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010f6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80010fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001108:	230c      	movs	r3, #12
 800110a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <HAL_FSMC_MspInit+0xa0>)
 8001112:	f000 fe95 	bl	8001e40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001116:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800111a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001128:	230c      	movs	r3, #12
 800112a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <HAL_FSMC_MspInit+0xa4>)
 8001132:	f000 fe85 	bl	8001e40 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2030      	movs	r0, #48	; 0x30
 800113c:	f000 fa54 	bl	80015e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8001140:	2030      	movs	r0, #48	; 0x30
 8001142:	f000 fa6d 	bl	8001620 <HAL_NVIC_EnableIRQ>
 8001146:	e000      	b.n	800114a <HAL_FSMC_MspInit+0x92>
    return;
 8001148:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200008c4 	.word	0x200008c4
 8001154:	40023800 	.word	0x40023800
 8001158:	40021000 	.word	0x40021000
 800115c:	40020c00 	.word	0x40020c00

08001160 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8001168:	f7ff ffa6 	bl	80010b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2019      	movs	r0, #25
 800118a:	f000 fa2d 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800118e:	2019      	movs	r0, #25
 8001190:	f000 fa46 	bl	8001620 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_InitTick+0xa4>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_InitTick+0xa4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6453      	str	r3, [r2, #68]	; 0x44
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_InitTick+0xa4>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011b0:	f107 0210 	add.w	r2, r7, #16
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fdb0 	bl	8002d20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011c0:	f001 fd9a 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80011c4:	4603      	mov	r3, r0
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <HAL_InitTick+0xa8>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	3b01      	subs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_InitTick+0xac>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_InitTick+0xb0>)
 80011dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_InitTick+0xac>)
 80011e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_InitTick+0xac>)
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_InitTick+0xac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_InitTick+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <HAL_InitTick+0xac>)
 80011fa:	f002 f90c 	bl	8003416 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d104      	bne.n	800120e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <HAL_InitTick+0xac>)
 8001206:	f002 f955 	bl	80034b4 <HAL_TIM_Base_Start_IT>
 800120a:	4603      	mov	r3, r0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	431bde83 	.word	0x431bde83
 8001220:	200053fc 	.word	0x200053fc
 8001224:	40010000 	.word	0x40010000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <DMA1_Stream3_IRQHandler+0x10>)
 8001262:	f000 fb83 	bl	800196c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200052ec 	.word	0x200052ec

08001270 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001276:	f002 f98d 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200053fc 	.word	0x200053fc

08001284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM2_IRQHandler+0x10>)
 800128a:	f002 f983 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200053b0 	.word	0x200053b0

08001298 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART3_IRQHandler+0x10>)
 800129e:	f002 fe37 	bl	8003f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200052a4 	.word	0x200052a4

080012ac <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <FSMC_IRQHandler+0x10>)
 80012b2:	f000 ffe2 	bl	800227a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20005350 	.word	0x20005350

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f006 fd58 	bl	8007da4 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20020000 	.word	0x20020000
 8001320:	00000800 	.word	0x00000800
 8001324:	200008c8 	.word	0x200008c8
 8001328:	20005498 	.word	0x20005498

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <SystemInit+0x28>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <SystemInit+0x28>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SystemInit+0x28>)
 8001342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001346:	609a      	str	r2, [r3, #8]
#endif
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800135c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800135e:	e003      	b.n	8001368 <LoopCopyDataInit>

08001360 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001362:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001364:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001366:	3104      	adds	r1, #4

08001368 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800136c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800136e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001370:	d3f6      	bcc.n	8001360 <CopyDataInit>
  ldr  r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001374:	e002      	b.n	800137c <LoopFillZerobss>

08001376 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001376:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001378:	f842 3b04 	str.w	r3, [r2], #4

0800137c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001380:	d3f9      	bcc.n	8001376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001382:	f7ff ffd3 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f006 fd13 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff f90b 	bl	80005a4 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001390:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001394:	08008988 	.word	0x08008988
  ldr  r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800139c:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80013a0:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80013a4:	20005498 	.word	0x20005498

080013a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f8fc 	bl	80015d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f7ff feca 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fd68 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000001c 	.word	0x2000001c
 8001414:	20005444 	.word	0x20005444

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20005444 	.word	0x20005444

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000001c 	.word	0x2000001c

08001478 <__NVIC_SetPriorityGrouping>:
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff4c 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fa:	f7ff ff61 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 80015fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f7ff ffb1 	bl	800156c <NVIC_EncodePriority>
 800160a:	4602      	mov	r2, r0
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff80 	bl	8001518 <__NVIC_SetPriority>
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff54 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff fee6 	bl	8001418 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e099      	b.n	800178c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001678:	e00f      	b.n	800169a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800167a:	f7ff fecd 	bl	8001418 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b05      	cmp	r3, #5
 8001686:	d908      	bls.n	800169a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e078      	b.n	800178c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e8      	bne.n	800167a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_DMA_Init+0x158>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d107      	bne.n	8001704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4313      	orrs	r3, r2
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4313      	orrs	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f023 0307 	bic.w	r3, r3, #7
 800171a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2b04      	cmp	r3, #4
 800172c:	d117      	bne.n	800175e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00e      	beq.n	800175e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fb01 	bl	8001d48 <DMA_CheckFifoParam>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800175a:	2301      	movs	r3, #1
 800175c:	e016      	b.n	800178c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fab8 	bl	8001cdc <DMA_CalcBaseAndBitshift>
 800176c:	4603      	mov	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	223f      	movs	r2, #63	; 0x3f
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f010803f 	.word	0xf010803f

08001798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_DMA_Start_IT+0x26>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e040      	b.n	8001840 <HAL_DMA_Start_IT+0xa8>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d12f      	bne.n	8001832 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 fa4a 	bl	8001c80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	223f      	movs	r2, #63	; 0x3f
 80017f2:	409a      	lsls	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0216 	orr.w	r2, r2, #22
 8001806:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e005      	b.n	800183e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800183a:	2302      	movs	r3, #2
 800183c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800183e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001856:	f7ff fddf 	bl	8001418 <HAL_GetTick>
 800185a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d008      	beq.n	800187a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e052      	b.n	8001920 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0216 	bic.w	r2, r2, #22
 8001888:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001898:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <HAL_DMA_Abort+0x62>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0208 	bic.w	r2, r2, #8
 80018b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ca:	e013      	b.n	80018f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018cc:	f7ff fda4 	bl	8001418 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d90c      	bls.n	80018f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e015      	b.n	8001920 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1e4      	bne.n	80018cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	223f      	movs	r2, #63	; 0x3f
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00c      	b.n	8001960 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2205      	movs	r2, #5
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_DMA_IRQHandler+0x258>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a92      	ldr	r2, [pc, #584]	; (8001bc8 <HAL_DMA_IRQHandler+0x25c>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2208      	movs	r2, #8
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d01a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2208      	movs	r2, #8
 80019c6:	409a      	lsls	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	2201      	movs	r2, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2201      	movs	r2, #1
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f043 0202 	orr.w	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2204      	movs	r2, #4
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	2204      	movs	r2, #4
 8001a32:	409a      	lsls	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f043 0204 	orr.w	r2, r3, #4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2210      	movs	r2, #16
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d043      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03c      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2210      	movs	r2, #16
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d108      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d024      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
 8001a9a:	e01f      	b.n	8001adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
 8001aac:	e016      	b.n	8001adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0208 	bic.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 808e 	beq.w	8001c0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8086 	beq.w	8001c0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2220      	movs	r2, #32
 8001b04:	409a      	lsls	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d136      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0216 	bic.w	r2, r2, #22
 8001b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <HAL_DMA_IRQHandler+0x1da>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	223f      	movs	r2, #63	; 0x3f
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d07d      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
        }
        return;
 8001b82:	e078      	b.n	8001c76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01c      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d108      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d030      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e02b      	b.n	8001c0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d027      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
 8001bc2:	e022      	b.n	8001c0a <HAL_DMA_IRQHandler+0x29e>
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0210 	bic.w	r2, r2, #16
 8001be8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d032      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d022      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2205      	movs	r2, #5
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d307      	bcc.n	8001c52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f2      	bne.n	8001c36 <HAL_DMA_IRQHandler+0x2ca>
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c52:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
 8001c74:	e000      	b.n	8001c78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c76:	bf00      	nop
    }
  }
}
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop

08001c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b40      	cmp	r3, #64	; 0x40
 8001cac:	d108      	bne.n	8001cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cbe:	e007      	b.n	8001cd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3b10      	subs	r3, #16
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <DMA_CalcBaseAndBitshift+0x64>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <DMA_CalcBaseAndBitshift+0x68>)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d909      	bls.n	8001d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d1c:	e007      	b.n	8001d2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d26:	f023 0303 	bic.w	r3, r3, #3
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	aaaaaaab 	.word	0xaaaaaaab
 8001d44:	080088dc 	.word	0x080088dc

08001d48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11f      	bne.n	8001da2 <DMA_CheckFifoParam+0x5a>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d856      	bhi.n	8001e16 <DMA_CheckFifoParam+0xce>
 8001d68:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <DMA_CheckFifoParam+0x28>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001d81 	.word	0x08001d81
 8001d74:	08001d93 	.word	0x08001d93
 8001d78:	08001d81 	.word	0x08001d81
 8001d7c:	08001e17 	.word	0x08001e17
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d046      	beq.n	8001e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d90:	e043      	b.n	8001e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d9a:	d140      	bne.n	8001e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da0:	e03d      	b.n	8001e1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001daa:	d121      	bne.n	8001df0 <DMA_CheckFifoParam+0xa8>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d837      	bhi.n	8001e22 <DMA_CheckFifoParam+0xda>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <DMA_CheckFifoParam+0x70>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001dc9 	.word	0x08001dc9
 8001dbc:	08001dcf 	.word	0x08001dcf
 8001dc0:	08001dc9 	.word	0x08001dc9
 8001dc4:	08001de1 	.word	0x08001de1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
      break;
 8001dcc:	e030      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d025      	beq.n	8001e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dde:	e022      	b.n	8001e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de8:	d11f      	bne.n	8001e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dee:	e01c      	b.n	8001e2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d903      	bls.n	8001dfe <DMA_CheckFifoParam+0xb6>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d003      	beq.n	8001e04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dfc:	e018      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
      break;
 8001e02:	e015      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00e      	beq.n	8001e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
      break;
 8001e14:	e00b      	b.n	8001e2e <DMA_CheckFifoParam+0xe6>
      break;
 8001e16:	bf00      	nop
 8001e18:	e00a      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e008      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e006      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e004      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e002      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e2a:	bf00      	nop
 8001e2c:	e000      	b.n	8001e30 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e16b      	b.n	8002134 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 815a 	bne.w	800212e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80b4 	beq.w	800212e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b60      	ldr	r3, [pc, #384]	; (800214c <HAL_GPIO_Init+0x30c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a5f      	ldr	r2, [pc, #380]	; (800214c <HAL_GPIO_Init+0x30c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_GPIO_Init+0x30c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <HAL_GPIO_Init+0x310>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_GPIO_Init+0x314>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <HAL_GPIO_Init+0x226>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_GPIO_Init+0x318>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d025      	beq.n	8002062 <HAL_GPIO_Init+0x222>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_GPIO_Init+0x31c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <HAL_GPIO_Init+0x21e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	; (8002160 <HAL_GPIO_Init+0x320>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x21a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_GPIO_Init+0x324>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x216>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_GPIO_Init+0x328>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x212>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_GPIO_Init+0x32c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_GPIO_Init+0x330>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x20a>
 8002046:	2307      	movs	r3, #7
 8002048:	e00e      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800204a:	2308      	movs	r3, #8
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800204e:	2306      	movs	r3, #6
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002066:	2300      	movs	r3, #0
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002078:	4935      	ldr	r1, [pc, #212]	; (8002150 <HAL_GPIO_Init+0x310>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_GPIO_Init+0x334>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x334>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x334>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_GPIO_Init+0x334>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	f67f ae90 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40013800 	.word	0x40013800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40021400 	.word	0x40021400
 800216c:	40021800 	.word	0x40021800
 8002170:	40021c00 	.word	0x40021c00
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021bc:	887a      	ldrh	r2, [r7, #2]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e03e      	b.n	8002272 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d106      	bne.n	800220e <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f7fe ffa9 	bl	8001160 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3304      	adds	r3, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f002 fd91 	bl	8004d40 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	f002 fdcb 	bl	8004dc4 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	461a      	mov	r2, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	f002 fdf9 	bl	8004e30 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d108      	bne.n	8002258 <HAL_NAND_Init+0x7a>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e007      	b.n	8002268 <HAL_NAND_Init+0x8a>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0204 	orr.w	r2, r2, #4
 8002266:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d10a      	bne.n	80022a0 <HAL_NAND_IRQHandler+0x26>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e009      	b.n	80022b4 <HAL_NAND_IRQHandler+0x3a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d017      	beq.n	80022e8 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f8b2 	bl	8002422 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d108      	bne.n	80022d8 <HAL_NAND_IRQHandler+0x5e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	e007      	b.n	80022e8 <HAL_NAND_IRQHandler+0x6e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d10a      	bne.n	8002306 <HAL_NAND_IRQHandler+0x8c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e009      	b.n	800231a <HAL_NAND_IRQHandler+0xa0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d017      	beq.n	800234e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f87f 	bl	8002422 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d108      	bne.n	800233e <HAL_NAND_IRQHandler+0xc4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0202 	bic.w	r2, r2, #2
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	e007      	b.n	800234e <HAL_NAND_IRQHandler+0xd4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0202 	bic.w	r2, r2, #2
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b10      	cmp	r3, #16
 8002354:	d10a      	bne.n	800236c <HAL_NAND_IRQHandler+0xf2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e009      	b.n	8002380 <HAL_NAND_IRQHandler+0x106>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f84c 	bl	8002422 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b10      	cmp	r3, #16
 8002390:	d108      	bne.n	80023a4 <HAL_NAND_IRQHandler+0x12a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0204 	bic.w	r2, r2, #4
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e007      	b.n	80023b4 <HAL_NAND_IRQHandler+0x13a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d10a      	bne.n	80023d2 <HAL_NAND_IRQHandler+0x158>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e009      	b.n	80023e6 <HAL_NAND_IRQHandler+0x16c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d017      	beq.n	800241a <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f819 	bl	8002422 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d108      	bne.n	800240a <HAL_NAND_IRQHandler+0x190>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002406:	605a      	str	r2, [r3, #4]
  }
}
 8002408:	e007      	b.n	800241a <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e264      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	4ba3      	ldr	r3, [pc, #652]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00c      	beq.n	800247c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d112      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b9d      	ldr	r3, [pc, #628]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b99      	ldr	r3, [pc, #612]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05b      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d157      	bne.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e23f      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x74>
 800249e:	4b91      	ldr	r3, [pc, #580]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a90      	ldr	r2, [pc, #576]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x98>
 80024b6:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a8a      	ldr	r2, [pc, #552]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a87      	ldr	r2, [pc, #540]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a83      	ldr	r2, [pc, #524]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a80      	ldr	r2, [pc, #512]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff92 	bl	8001418 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ff8e 	bl	8001418 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e204      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ff7e 	bl	8001418 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe ff7a 	bl	8001418 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1f0      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1c4      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b56      	ldr	r3, [pc, #344]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4952      	ldr	r1, [pc, #328]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_OscConfig+0x2b0>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff33 	bl	8001418 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe ff2f 	bl	8001418 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1a5      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4940      	ldr	r1, [pc, #256]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x2b0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff12 	bl	8001418 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff0e 	bl	8001418 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e184      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d030      	beq.n	8002684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x2b4>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe fef2 	bl	8001418 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7fe feee 	bl	8001418 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e164      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x200>
 8002656:	e015      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x2b4>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7fe fedb 	bl	8001418 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fed7 	bl	8001418 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e14d      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a0 	beq.w	80027d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe fe9d 	bl	8001418 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e011      	b.n	8002706 <HAL_RCC_OscConfig+0x2ce>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
 80026f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7fe fe90 	bl	8001418 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e106      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x4e4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x2f0>
 800271a:	4b81      	ldr	r3, [pc, #516]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a80      	ldr	r2, [pc, #512]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x32a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x312>
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a77      	ldr	r2, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x32a>
 800274a:	4b75      	ldr	r3, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a74      	ldr	r2, [pc, #464]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a71      	ldr	r2, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe fe55 	bl	8001418 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fe51 	bl	8001418 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0c5      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x33a>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fe3f 	bl	8001418 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fe3b 	bl	8001418 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0af      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a55      	ldr	r2, [pc, #340]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 809b 	beq.w	8002912 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d05c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d141      	bne.n	8002874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fe0f 	bl	8001418 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fe0b 	bl	8001418 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e081      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	019b      	lsls	r3, r3, #6
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	061b      	lsls	r3, r3, #24
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fde4 	bl	8001418 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fde0 	bl	8001418 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e056      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x41c>
 8002872:	e04e      	b.n	8002912 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fdcd 	bl	8001418 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fdc9 	bl	8001418 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e03f      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
 80028a0:	e037      	b.n	8002912 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e032      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d028      	beq.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d121      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d11a      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d111      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d107      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40007000 	.word	0x40007000
 8002920:	40023800 	.word	0x40023800
 8002924:	42470060 	.word	0x42470060

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0cc      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d90c      	bls.n	8002964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d044      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e067      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fcfe 	bl	8001418 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe fcfa 	bl	8001418 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d20c      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fb50 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	080088c4 	.word	0x080088c4
 8002aec:	20000014 	.word	0x20000014
 8002af0:	20000018 	.word	0x20000018

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	2300      	movs	r3, #0
 8002b06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0c:	4b67      	ldr	r3, [pc, #412]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d00d      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x40>
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	f200 80bd 	bhi.w	8002c98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b26:	e0b7      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b2a:	60bb      	str	r3, [r7, #8]
       break;
 8002b2c:	e0b7      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2e:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	e0b4      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b34:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04d      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4a:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	461a      	mov	r2, r3
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	ea02 0800 	and.w	r8, r2, r0
 8002b62:	ea03 0901 	and.w	r9, r3, r1
 8002b66:	4640      	mov	r0, r8
 8002b68:	4649      	mov	r1, r9
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	014b      	lsls	r3, r1, #5
 8002b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b78:	0142      	lsls	r2, r0, #5
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	ebb0 0008 	subs.w	r0, r0, r8
 8002b82:	eb61 0109 	sbc.w	r1, r1, r9
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	018b      	lsls	r3, r1, #6
 8002b90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b94:	0182      	lsls	r2, r0, #6
 8002b96:	1a12      	subs	r2, r2, r0
 8002b98:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	00d9      	lsls	r1, r3, #3
 8002ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002baa:	00d0      	lsls	r0, r2, #3
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	eb12 0208 	adds.w	r2, r2, r8
 8002bb4:	eb43 0309 	adc.w	r3, r3, r9
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	0259      	lsls	r1, r3, #9
 8002bc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bc6:	0250      	lsls	r0, r2, #9
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	f7fd fb52 	bl	8000280 <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e04a      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be6:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	461a      	mov	r2, r3
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	ea02 0400 	and.w	r4, r2, r0
 8002bfe:	ea03 0501 	and.w	r5, r3, r1
 8002c02:	4620      	mov	r0, r4
 8002c04:	4629      	mov	r1, r5
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	014b      	lsls	r3, r1, #5
 8002c10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c14:	0142      	lsls	r2, r0, #5
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	1b00      	subs	r0, r0, r4
 8002c1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	018b      	lsls	r3, r1, #6
 8002c2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c2e:	0182      	lsls	r2, r0, #6
 8002c30:	1a12      	subs	r2, r2, r0
 8002c32:	eb63 0301 	sbc.w	r3, r3, r1
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	00d9      	lsls	r1, r3, #3
 8002c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c44:	00d0      	lsls	r0, r2, #3
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	1912      	adds	r2, r2, r4
 8002c4c:	eb45 0303 	adc.w	r3, r5, r3
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0299      	lsls	r1, r3, #10
 8002c5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c5e:	0290      	lsls	r0, r2, #10
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f7fd fb06 	bl	8000280 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	60bb      	str	r3, [r7, #8]
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c9a:	60bb      	str	r3, [r7, #8]
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	007a1200 	.word	0x007a1200

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000014 	.word	0x20000014

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	080088d4 	.word	0x080088d4

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cfc:	f7ff ffdc 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	080088d4 	.word	0x080088d4

08002d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_GetClockConfig+0x5c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_RCC_GetClockConfig+0x60>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d035      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dac:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002db2:	f7fe fb31 	bl	8001418 <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dba:	f7fe fb2d 	bl	8001418 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0b0      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	019a      	lsls	r2, r3, #6
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	071b      	lsls	r3, r3, #28
 8002de4:	4955      	ldr	r1, [pc, #340]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dec:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df2:	f7fe fb11 	bl	8001418 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dfa:	f7fe fb0d 	bl	8001418 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e090      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8083 	beq.w	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a43      	ldr	r2, [pc, #268]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a3e      	ldr	r2, [pc, #248]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fae3 	bl	8001418 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fe fadf 	bl	8001418 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e062      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02f      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ea8:	4a24      	ldr	r2, [pc, #144]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d114      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe faad 	bl	8001418 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe faa9 	bl	8001418 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e02a      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ee      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef0:	d10d      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
 8002f0c:	e005      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f18:	6093      	str	r3, [r2, #8]
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f26:	4905      	ldr	r1, [pc, #20]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	42470068 	.word	0x42470068
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40007000 	.word	0x40007000
 8002f44:	42470e40 	.word	0x42470e40

08002f48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e083      	b.n	8003062 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7f5b      	ldrb	r3, [r3, #29]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd ffce 	bl	8000f0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22ca      	movs	r2, #202	; 0xca
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2253      	movs	r2, #83	; 0x53
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9fb 	bl	8003382 <RTC_EnterInitMode>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	22ff      	movs	r2, #255	; 0xff
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e05e      	b.n	8003062 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	041a      	lsls	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003002:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f98d 	bl	8003332 <HAL_RTC_WaitForSynchro>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2204      	movs	r2, #4
 800302a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e018      	b.n	8003062 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	7f1b      	ldrb	r3, [r3, #28]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_RTC_SetTime+0x1c>
 8003082:	2302      	movs	r3, #2
 8003084:	e0aa      	b.n	80031dc <HAL_RTC_SetTime+0x172>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2202      	movs	r2, #2
 8003090:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d126      	bne.n	80030e6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2200      	movs	r2, #0
 80030aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f992 	bl	80033da <RTC_ByteToBcd2>
 80030b6:	4603      	mov	r3, r0
 80030b8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f98b 	bl	80033da <RTC_ByteToBcd2>
 80030c4:	4603      	mov	r3, r0
 80030c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030c8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	789b      	ldrb	r3, [r3, #2]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f983 	bl	80033da <RTC_ByteToBcd2>
 80030d4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	78db      	ldrb	r3, [r3, #3]
 80030de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e018      	b.n	8003118 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003106:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800310c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	78db      	ldrb	r3, [r3, #3]
 8003112:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	22ca      	movs	r2, #202	; 0xca
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2253      	movs	r2, #83	; 0x53
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f92a 	bl	8003382 <RTC_EnterInitMode>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	22ff      	movs	r2, #255	; 0xff
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2204      	movs	r2, #4
 8003140:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e047      	b.n	80031dc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003156:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800315a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800316a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003192:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d111      	bne.n	80031c6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8c5 	bl	8003332 <HAL_RTC_WaitForSynchro>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	22ff      	movs	r2, #255	; 0xff
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2204      	movs	r2, #4
 80031ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00a      	b.n	80031dc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80031da:	2300      	movs	r3, #0
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	7f1b      	ldrb	r3, [r3, #28]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_RTC_SetDate+0x1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e094      	b.n	800332a <HAL_RTC_SetDate+0x146>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2202      	movs	r2, #2
 800320a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <HAL_RTC_SetDate+0x4c>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	f023 0310 	bic.w	r3, r3, #16
 8003226:	b2db      	uxtb	r3, r3
 8003228:	330a      	adds	r3, #10
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11c      	bne.n	8003270 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	78db      	ldrb	r3, [r3, #3]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f8cd 	bl	80033da <RTC_ByteToBcd2>
 8003240:	4603      	mov	r3, r0
 8003242:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f8c6 	bl	80033da <RTC_ByteToBcd2>
 800324e:	4603      	mov	r3, r0
 8003250:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003252:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	789b      	ldrb	r3, [r3, #2]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8be 	bl	80033da <RTC_ByteToBcd2>
 800325e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003260:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e00e      	b.n	800328e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	78db      	ldrb	r3, [r3, #3]
 8003274:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800327c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003282:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	22ca      	movs	r2, #202	; 0xca
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2253      	movs	r2, #83	; 0x53
 800329c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f86f 	bl	8003382 <RTC_EnterInitMode>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2204      	movs	r2, #4
 80032b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e033      	b.n	800332a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f81e 	bl	8003332 <HAL_RTC_WaitForSynchro>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	22ff      	movs	r2, #255	; 0xff
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2204      	movs	r2, #4
 8003308:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e00a      	b.n	800332a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800334c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334e:	f7fe f863 	bl	8001418 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003354:	e009      	b.n	800336a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003356:	f7fe f85f 	bl	8001418 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003364:	d901      	bls.n	800336a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e007      	b.n	800337a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d119      	bne.n	80033d0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033a6:	f7fe f837 	bl	8001418 <HAL_GetTick>
 80033aa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033ac:	e009      	b.n	80033c2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033ae:	f7fe f833 	bl	8001418 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033bc:	d901      	bls.n	80033c2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e007      	b.n	80033d2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ee      	beq.n	80033ae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80033e8:	e005      	b.n	80033f6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	3b0a      	subs	r3, #10
 80033f4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d8f6      	bhi.n	80033ea <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	b2da      	uxtb	r2, r3
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4313      	orrs	r3, r2
 8003408:	b2db      	uxtb	r3, r3
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e041      	b.n	80034ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd fd91 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fa95 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04e      	b.n	800356a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <HAL_TIM_Base_Start_IT+0xc4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d01d      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_TIM_Base_Start_IT+0xc8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_TIM_Base_Start_IT+0xcc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_TIM_Base_Start_IT+0xd0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_TIM_Base_Start_IT+0xd4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_TIM_Base_Start_IT+0xd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIM_Base_Start_IT+0xdc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40010400 	.word	0x40010400
 800358c:	40014000 	.word	0x40014000
 8003590:	40001800 	.word	0x40001800

08003594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0202 	mvn.w	r2, #2
 80035c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9b5 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9a7 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f9b8 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0204 	mvn.w	r2, #4
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f98b 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f97d 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f98e 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0208 	mvn.w	r2, #8
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f961 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f953 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f964 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0210 	mvn.w	r2, #16
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2208      	movs	r2, #8
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f937 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f929 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f93a 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0201 	mvn.w	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fb94 	bl	8000e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d10e      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d107      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fae0 	bl	8003d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d10e      	bne.n	8003770 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d107      	bne.n	8003770 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8ff 	bl	800396e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0220 	mvn.w	r2, #32
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 faaa 	bl	8003cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0b4      	b.n	800392a <HAL_TIM_ConfigClockSource+0x186>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d03e      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xd4>
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	f200 8087 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f000 8086 	beq.w	8003916 <HAL_TIM_ConfigClockSource+0x172>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d87f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d01a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xa6>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d87b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d050      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x11a>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d877      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d03c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xfa>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d873      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d058      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x13a>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d86f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d064      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d86b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d060      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d867      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d05a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003848:	e062      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 f9ad 	bl	8003bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e04f      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f000 f996 	bl	8003bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e03c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 f90a 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f963 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e02c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f929 	bl	8003b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2160      	movs	r1, #96	; 0x60
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f953 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e01c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f8ea 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f943 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 f93a 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800390e:	e003      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e000      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <TIM_Base_SetConfig+0x114>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a2:	d00f      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a3d      	ldr	r2, [pc, #244]	; (8003a9c <TIM_Base_SetConfig+0x118>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <TIM_Base_SetConfig+0x11c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3b      	ldr	r2, [pc, #236]	; (8003aa4 <TIM_Base_SetConfig+0x120>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3a      	ldr	r2, [pc, #232]	; (8003aa8 <TIM_Base_SetConfig+0x124>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <TIM_Base_SetConfig+0x114>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02b      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d027      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <TIM_Base_SetConfig+0x118>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d023      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <TIM_Base_SetConfig+0x11c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01f      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <TIM_Base_SetConfig+0x120>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01b      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <TIM_Base_SetConfig+0x124>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d017      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a28      	ldr	r2, [pc, #160]	; (8003aac <TIM_Base_SetConfig+0x128>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <TIM_Base_SetConfig+0x12c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00f      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <TIM_Base_SetConfig+0x130>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a25      	ldr	r2, [pc, #148]	; (8003ab8 <TIM_Base_SetConfig+0x134>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a24      	ldr	r2, [pc, #144]	; (8003abc <TIM_Base_SetConfig+0x138>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <TIM_Base_SetConfig+0x13c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d108      	bne.n	8003a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <TIM_Base_SetConfig+0x114>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0xf8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <TIM_Base_SetConfig+0x124>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d103      	bne.n	8003a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	615a      	str	r2, [r3, #20]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800
 8003ab8:	40001800 	.word	0x40001800
 8003abc:	40001c00 	.word	0x40001c00
 8003ac0:	40002000 	.word	0x40002000

08003ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 030a 	bic.w	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e05a      	b.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d01d      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00
 8003ce4:	40010400 	.word	0x40010400
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40001800 	.word	0x40001800

08003cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e03f      	b.n	8003daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd f936 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	; 0x24
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fe27 	bl	80049b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d11d      	bne.n	8003e08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Receive_IT+0x26>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e016      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Receive_IT+0x38>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00f      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fbd9 	bl	80045b6 <UART_Start_Receive_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d165      	bne.n	8003efa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_Transmit_DMA+0x26>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e05e      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Transmit_DMA+0x38>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e057      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_UART_Transmit_DMA+0xf0>)
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <HAL_UART_Transmit_DMA+0xf4>)
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_UART_Transmit_DMA+0xf8>)
 8003e8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	f7fd fc74 	bl	8001798 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ee4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3730      	adds	r7, #48	; 0x30
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	0800446d 	.word	0x0800446d
 8003f08:	08004507 	.word	0x08004507
 8003f0c:	08004523 	.word	0x08004523

08003f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0ba      	sub	sp, #232	; 0xe8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_UART_IRQHandler+0x66>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fc62 	bl	8004838 <UART_Receive_IT>
      return;
 8003f74:	e256      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80de 	beq.w	800413c <HAL_UART_IRQHandler+0x22c>
 8003f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80d1 	beq.w	800413c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0xae>
 8003fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xd2>
 8003fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xf6>
 8003fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_UART_IRQHandler+0x126>
 8004012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800401e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f043 0208 	orr.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 81ed 	beq.w	800441a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_UART_IRQHandler+0x14e>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fbed 	bl	8004838 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_UART_IRQHandler+0x17a>
 8004082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04f      	beq.n	800412a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 faf5 	bl	800467a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d141      	bne.n	8004122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1d9      	bne.n	800409e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4a7d      	ldr	r2, [pc, #500]	; (80042ec <HAL_UART_IRQHandler+0x3dc>)
 80040f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fc12 	bl	8001928 <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00e      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f990 	bl	8004440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e00a      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f98c 	bl	8004440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	e006      	b.n	8004138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f988 	bl	8004440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004136:	e170      	b.n	800441a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	bf00      	nop
    return;
 800413a:	e16e      	b.n	800441a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 814a 	bne.w	80043da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8143 	beq.w	80043da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 813c 	beq.w	80043da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	f040 80b4 	bne.w	80042f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8140 	beq.w	800441e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041a6:	429a      	cmp	r2, r3
 80041a8:	f080 8139 	bcs.w	800441e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	f000 8088 	beq.w	80042d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1d9      	bne.n	80041c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800421e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800423a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e1      	bne.n	800420e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800426e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800427c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80042b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e3      	bne.n	8004290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd fabb 	bl	8001848 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	b29b      	uxth	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8b6 	bl	8004454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e8:	e099      	b.n	800441e <HAL_UART_IRQHandler+0x50e>
 80042ea:	bf00      	nop
 80042ec:	08004741 	.word	0x08004741
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 808b 	beq.w	8004422 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800430c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8086 	beq.w	8004422 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800432c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800433a:	647a      	str	r2, [r7, #68]	; 0x44
 800433c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3314      	adds	r3, #20
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	623b      	str	r3, [r7, #32]
   return(result);
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3314      	adds	r3, #20
 800436e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004372:	633a      	str	r2, [r7, #48]	; 0x30
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e3      	bne.n	800434e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0310 	bic.w	r3, r3, #16
 80043aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043b8:	61fa      	str	r2, [r7, #28]
 80043ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	617b      	str	r3, [r7, #20]
   return(result);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e3      	bne.n	8004394 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f83e 	bl	8004454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043d8:	e023      	b.n	8004422 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_UART_IRQHandler+0x4ea>
 80043e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9b8 	bl	8004768 <UART_Transmit_IT>
    return;
 80043f8:	e014      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00e      	beq.n	8004424 <HAL_UART_IRQHandler+0x514>
 8004406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9f8 	bl	8004808 <UART_EndTransmit_IT>
    return;
 8004418:	e004      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
    return;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
      return;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <HAL_UART_IRQHandler+0x514>
      return;
 8004422:	bf00      	nop
  }
}
 8004424:	37e8      	adds	r7, #232	; 0xe8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop

0800442c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b090      	sub	sp, #64	; 0x40
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d137      	bne.n	80044f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448a:	2200      	movs	r2, #0
 800448c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3314      	adds	r3, #20
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	623b      	str	r3, [r7, #32]
   return(result);
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ae:	633a      	str	r2, [r7, #48]	; 0x30
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
 80044da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e2:	61fa      	str	r2, [r7, #28]
 80044e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	69b9      	ldr	r1, [r7, #24]
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	617b      	str	r3, [r7, #20]
   return(result);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e5      	bne.n	80044c2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044f6:	e002      	b.n	80044fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80044f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044fa:	f7fc fc53 	bl	8000da4 <HAL_UART_TxCpltCallback>
}
 80044fe:	bf00      	nop
 8004500:	3740      	adds	r7, #64	; 0x40
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff ff89 	bl	800442c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b21      	cmp	r3, #33	; 0x21
 8004554:	d108      	bne.n	8004568 <UART_DMAError+0x46>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f000 f861 	bl	800462a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b22      	cmp	r3, #34	; 0x22
 8004588:	d108      	bne.n	800459c <UART_DMAError+0x7a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	f000 f86f 	bl	800467a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0210 	orr.w	r2, r3, #16
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f7ff ff49 	bl	8004440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2222      	movs	r2, #34	; 0x22
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0220 	orr.w	r2, r2, #32
 800461a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800462a:	b480      	push	{r7}
 800462c:	b089      	sub	sp, #36	; 0x24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	60bb      	str	r3, [r7, #8]
   return(result);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	61ba      	str	r2, [r7, #24]
 8004654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	613b      	str	r3, [r7, #16]
   return(result);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800466e:	bf00      	nop
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800467a:	b480      	push	{r7}
 800467c:	b095      	sub	sp, #84	; 0x54
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a2:	643a      	str	r2, [r7, #64]	; 0x40
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d119      	bne.n	8004726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	60bb      	str	r3, [r7, #8]
   return(result);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0310 	bic.w	r3, r3, #16
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004712:	61ba      	str	r2, [r7, #24]
 8004714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	613b      	str	r3, [r7, #16]
   return(result);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004734:	bf00      	nop
 8004736:	3754      	adds	r7, #84	; 0x54
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fe70 	bl	8004440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b21      	cmp	r3, #33	; 0x21
 800477a:	d13e      	bne.n	80047fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d114      	bne.n	80047b0 <UART_Transmit_IT+0x48>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d110      	bne.n	80047b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	621a      	str	r2, [r3, #32]
 80047ae:	e008      	b.n	80047c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	1c59      	adds	r1, r3, #1
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6211      	str	r1, [r2, #32]
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4619      	mov	r1, r3
 80047d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047fa:	2302      	movs	r3, #2
  }
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fc fabb 	bl	8000da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08c      	sub	sp, #48	; 0x30
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b22      	cmp	r3, #34	; 0x22
 800484a:	f040 80ab 	bne.w	80049a4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004856:	d117      	bne.n	8004888 <UART_Receive_IT+0x50>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d113      	bne.n	8004888 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	b29a      	uxth	r2, r3
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
 8004886:	e026      	b.n	80048d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	d007      	beq.n	80048ac <UART_Receive_IT+0x74>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <UART_Receive_IT+0x82>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e008      	b.n	80048cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4619      	mov	r1, r3
 80048e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d15a      	bne.n	80049a0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0220 	bic.w	r2, r2, #32
 80048f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	2b01      	cmp	r3, #1
 8004928:	d135      	bne.n	8004996 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	613b      	str	r3, [r7, #16]
   return(result);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	623a      	str	r2, [r7, #32]
 8004952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	69f9      	ldr	r1, [r7, #28]
 8004956:	6a3a      	ldr	r2, [r7, #32]
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	61bb      	str	r3, [r7, #24]
   return(result);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d10a      	bne.n	8004988 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fd60 	bl	8004454 <HAL_UARTEx_RxEventCallback>
 8004994:	e002      	b.n	800499c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc f9c6 	bl	8000d28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e002      	b.n	80049a6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3730      	adds	r7, #48	; 0x30
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	b09f      	sub	sp, #124	; 0x7c
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	68d9      	ldr	r1, [r3, #12]
 80049c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	ea40 0301 	orr.w	r3, r0, r1
 80049d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	431a      	orrs	r2, r3
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049f4:	f021 010c 	bic.w	r1, r1, #12
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049fe:	430b      	orrs	r3, r1
 8004a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	6999      	ldr	r1, [r3, #24]
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	ea40 0301 	orr.w	r3, r0, r1
 8004a18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4bc5      	ldr	r3, [pc, #788]	; (8004d34 <UART_SetConfig+0x384>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d004      	beq.n	8004a2e <UART_SetConfig+0x7e>
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4bc3      	ldr	r3, [pc, #780]	; (8004d38 <UART_SetConfig+0x388>)
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d103      	bne.n	8004a36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a2e:	f7fe f963 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004a32:	6778      	str	r0, [r7, #116]	; 0x74
 8004a34:	e002      	b.n	8004a3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a36:	f7fe f94b 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8004a3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	f040 80b6 	bne.w	8004bb4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	f04f 0500 	mov.w	r5, #0
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	6439      	str	r1, [r7, #64]	; 0x40
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a60:	1912      	adds	r2, r2, r4
 8004a62:	eb45 0303 	adc.w	r3, r5, r3
 8004a66:	f04f 0000 	mov.w	r0, #0
 8004a6a:	f04f 0100 	mov.w	r1, #0
 8004a6e:	00d9      	lsls	r1, r3, #3
 8004a70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a74:	00d0      	lsls	r0, r2, #3
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	1911      	adds	r1, r2, r4
 8004a7c:	6639      	str	r1, [r7, #96]	; 0x60
 8004a7e:	416b      	adcs	r3, r5
 8004a80:	667b      	str	r3, [r7, #100]	; 0x64
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a90:	415b      	adcs	r3, r3
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a9c:	f7fb fbf0 	bl	8000280 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4ba5      	ldr	r3, [pc, #660]	; (8004d3c <UART_SetConfig+0x38c>)
 8004aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	011e      	lsls	r6, r3, #4
 8004aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab0:	461c      	mov	r4, r3
 8004ab2:	f04f 0500 	mov.w	r5, #0
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	1891      	adds	r1, r2, r2
 8004abc:	6339      	str	r1, [r7, #48]	; 0x30
 8004abe:	415b      	adcs	r3, r3
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ac6:	1912      	adds	r2, r2, r4
 8004ac8:	eb45 0303 	adc.w	r3, r5, r3
 8004acc:	f04f 0000 	mov.w	r0, #0
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	00d9      	lsls	r1, r3, #3
 8004ad6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ada:	00d0      	lsls	r0, r2, #3
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	1911      	adds	r1, r2, r4
 8004ae2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ae4:	416b      	adcs	r3, r5
 8004ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	1891      	adds	r1, r2, r2
 8004af4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004af6:	415b      	adcs	r3, r3
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004afe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b02:	f7fb fbbd 	bl	8000280 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4b8c      	ldr	r3, [pc, #560]	; (8004d3c <UART_SetConfig+0x38c>)
 8004b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	2164      	movs	r1, #100	; 0x64
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	3332      	adds	r3, #50	; 0x32
 8004b1e:	4a87      	ldr	r2, [pc, #540]	; (8004d3c <UART_SetConfig+0x38c>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b2c:	441e      	add	r6, r3
 8004b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b30:	4618      	mov	r0, r3
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	1894      	adds	r4, r2, r2
 8004b3c:	623c      	str	r4, [r7, #32]
 8004b3e:	415b      	adcs	r3, r3
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b46:	1812      	adds	r2, r2, r0
 8004b48:	eb41 0303 	adc.w	r3, r1, r3
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	f04f 0500 	mov.w	r5, #0
 8004b54:	00dd      	lsls	r5, r3, #3
 8004b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b5a:	00d4      	lsls	r4, r2, #3
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	462b      	mov	r3, r5
 8004b60:	1814      	adds	r4, r2, r0
 8004b62:	653c      	str	r4, [r7, #80]	; 0x50
 8004b64:	414b      	adcs	r3, r1
 8004b66:	657b      	str	r3, [r7, #84]	; 0x54
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	1891      	adds	r1, r2, r2
 8004b74:	61b9      	str	r1, [r7, #24]
 8004b76:	415b      	adcs	r3, r3
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b82:	f7fb fb7d 	bl	8000280 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4b6c      	ldr	r3, [pc, #432]	; (8004d3c <UART_SetConfig+0x38c>)
 8004b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	2164      	movs	r1, #100	; 0x64
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	3332      	adds	r3, #50	; 0x32
 8004b9e:	4a67      	ldr	r2, [pc, #412]	; (8004d3c <UART_SetConfig+0x38c>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	f003 0207 	and.w	r2, r3, #7
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4432      	add	r2, r6
 8004bb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bb2:	e0b9      	b.n	8004d28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	f04f 0500 	mov.w	r5, #0
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	6139      	str	r1, [r7, #16]
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bcc:	1912      	adds	r2, r2, r4
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	00d9      	lsls	r1, r3, #3
 8004bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be0:	00d0      	lsls	r0, r2, #3
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	eb12 0804 	adds.w	r8, r2, r4
 8004bea:	eb43 0905 	adc.w	r9, r3, r5
 8004bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c06:	0082      	lsls	r2, r0, #2
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb fb38 	bl	8000280 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <UART_SetConfig+0x38c>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011e      	lsls	r6, r3, #4
 8004c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c20:	4618      	mov	r0, r3
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	1894      	adds	r4, r2, r2
 8004c2c:	60bc      	str	r4, [r7, #8]
 8004c2e:	415b      	adcs	r3, r3
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c36:	1812      	adds	r2, r2, r0
 8004c38:	eb41 0303 	adc.w	r3, r1, r3
 8004c3c:	f04f 0400 	mov.w	r4, #0
 8004c40:	f04f 0500 	mov.w	r5, #0
 8004c44:	00dd      	lsls	r5, r3, #3
 8004c46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c4a:	00d4      	lsls	r4, r2, #3
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	462b      	mov	r3, r5
 8004c50:	1814      	adds	r4, r2, r0
 8004c52:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c54:	414b      	adcs	r3, r1
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c70:	0082      	lsls	r2, r0, #2
 8004c72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c76:	f7fb fb03 	bl	8000280 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <UART_SetConfig+0x38c>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	3332      	adds	r3, #50	; 0x32
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <UART_SetConfig+0x38c>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9e:	441e      	add	r6, r3
 8004ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	1894      	adds	r4, r2, r2
 8004cae:	603c      	str	r4, [r7, #0]
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb8:	1812      	adds	r2, r2, r0
 8004cba:	eb41 0303 	adc.w	r3, r1, r3
 8004cbe:	f04f 0400 	mov.w	r4, #0
 8004cc2:	f04f 0500 	mov.w	r5, #0
 8004cc6:	00dd      	lsls	r5, r3, #3
 8004cc8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ccc:	00d4      	lsls	r4, r2, #3
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	eb12 0a00 	adds.w	sl, r2, r0
 8004cd6:	eb43 0b01 	adc.w	fp, r3, r1
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	008b      	lsls	r3, r1, #2
 8004cee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cf2:	0082      	lsls	r2, r0, #2
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	4659      	mov	r1, fp
 8004cf8:	f7fb fac2 	bl	8000280 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <UART_SetConfig+0x38c>)
 8004d02:	fba3 1302 	umull	r1, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2164      	movs	r1, #100	; 0x64
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	3332      	adds	r3, #50	; 0x32
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <UART_SetConfig+0x38c>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	f003 020f 	and.w	r2, r3, #15
 8004d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4432      	add	r2, r6
 8004d26:	609a      	str	r2, [r3, #8]
}
 8004d28:	bf00      	nop
 8004d2a:	377c      	adds	r7, #124	; 0x7c
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	bf00      	nop
 8004d34:	40011000 	.word	0x40011000
 8004d38:	40011400 	.word	0x40011400
 8004d3c:	51eb851f 	.word	0x51eb851f

08004d40 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d103      	bne.n	8004d5e <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e002      	b.n	8004d64 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <FSMC_NAND_Init+0x80>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8004d74:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8004d7a:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8004d80:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8004d88:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f043 0308 	orr.w	r3, r3, #8
 8004d9a:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d103      	bne.n	8004dac <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	fff00181 	.word	0xfff00181

08004dc4 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d103      	bne.n	8004de2 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e002      	b.n	8004de8 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004df6:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004dfe:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004e06:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d103      	bne.n	8004e1c <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	e002      	b.n	8004e22 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d103      	bne.n	8004e4e <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e002      	b.n	8004e54 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e62:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8004e6a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8004e72:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d103      	bne.n	8004e88 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e002      	b.n	8004e8e <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <__NVIC_SetPriority>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db0a      	blt.n	8004ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	490c      	ldr	r1, [pc, #48]	; (8004ee8 <__NVIC_SetPriority+0x4c>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	0112      	lsls	r2, r2, #4
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ec4:	e00a      	b.n	8004edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <__NVIC_SetPriority+0x50>)
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	440b      	add	r3, r1
 8004eda:	761a      	strb	r2, [r3, #24]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000e100 	.word	0xe000e100
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <SysTick_Handler+0x1c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ef8:	f001 fea4 	bl	8006c44 <xTaskGetSchedulerState>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f02:	f002 fc89 	bl	8007818 <xPortSysTickHandler>
  }
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	e000e010 	.word	0xe000e010

08004f10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f14:	2100      	movs	r1, #0
 8004f16:	f06f 0004 	mvn.w	r0, #4
 8004f1a:	f7ff ffbf 	bl	8004e9c <__NVIC_SetPriority>
#endif
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2a:	f3ef 8305 	mrs	r3, IPSR
 8004f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f36:	f06f 0305 	mvn.w	r3, #5
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e00f      	b.n	8004f5e <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <osKernelInitialize+0x44>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8004f46:	4809      	ldr	r0, [pc, #36]	; (8004f6c <osKernelInitialize+0x48>)
 8004f48:	f002 fe62 	bl	8007c10 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <osKernelInitialize+0x44>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e002      	b.n	8004f5e <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5c:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f5e:	687b      	ldr	r3, [r7, #4]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200008cc 	.word	0x200008cc
 8004f6c:	20000020 	.word	0x20000020

08004f70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f76:	f3ef 8305 	mrs	r3, IPSR
 8004f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f82:	f06f 0305 	mvn.w	r3, #5
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	e010      	b.n	8004fac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <osKernelStart+0x48>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d109      	bne.n	8004fa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f92:	f7ff ffbd 	bl	8004f10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <osKernelStart+0x48>)
 8004f98:	2202      	movs	r2, #2
 8004f9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f9c:	f001 f9f6 	bl	800638c <vTaskStartScheduler>
      stat = osOK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e002      	b.n	8004fac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200008cc 	.word	0x200008cc

08004fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fcc:	f3ef 8305 	mrs	r3, IPSR
 8004fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d17e      	bne.n	80050d6 <osThreadNew+0x11a>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d07b      	beq.n	80050d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004fe2:	2318      	movs	r3, #24
 8004fe4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d045      	beq.n	8005082 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <osThreadNew+0x48>
        name = attr->name;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <osThreadNew+0x6e>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b38      	cmp	r3, #56	; 0x38
 800501c:	d805      	bhi.n	800502a <osThreadNew+0x6e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <osThreadNew+0x72>
        return (NULL);
 800502a:	2300      	movs	r3, #0
 800502c:	e054      	b.n	80050d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <osThreadNew+0xa8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2bbb      	cmp	r3, #187	; 0xbb
 800504c:	d90a      	bls.n	8005064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <osThreadNew+0xa8>
        mem = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e010      	b.n	8005086 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <osThreadNew+0xca>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <osThreadNew+0xca>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <osThreadNew+0xca>
          mem = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e001      	b.n	8005086 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d110      	bne.n	80050ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005094:	9202      	str	r2, [sp, #8]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 ff86 	bl	8005fb4 <xTaskCreateStatic>
 80050a8:	4603      	mov	r3, r0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e013      	b.n	80050d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d110      	bne.n	80050d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 ffd1 	bl	800606e <xTaskCreate>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <osThreadNew+0x11a>
            hTask = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050d6:	693b      	ldr	r3, [r7, #16]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	; 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e8:	f3ef 8305 	mrs	r3, IPSR
 80050ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <osDelay+0x1c>
    stat = osErrorISR;
 80050f4:	f06f 0305 	mvn.w	r3, #5
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e007      	b.n	800510c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 f90c 	bl	8006324 <vTaskDelay>
    }
  }

  return (stat);
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005116:	b580      	push	{r7, lr}
 8005118:	b08a      	sub	sp, #40	; 0x28
 800511a:	af02      	add	r7, sp, #8
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005126:	f3ef 8305 	mrs	r3, IPSR
 800512a:	613b      	str	r3, [r7, #16]
  return(result);
 800512c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800512e:	2b00      	cmp	r3, #0
 8005130:	d175      	bne.n	800521e <osSemaphoreNew+0x108>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d072      	beq.n	800521e <osSemaphoreNew+0x108>
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	429a      	cmp	r2, r3
 800513e:	d86e      	bhi.n	800521e <osSemaphoreNew+0x108>
    mem = -1;
 8005140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005144:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <osSemaphoreNew+0x4c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b4f      	cmp	r3, #79	; 0x4f
 800515a:	d902      	bls.n	8005162 <osSemaphoreNew+0x4c>
        mem = 1;
 800515c:	2301      	movs	r3, #1
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	e00c      	b.n	800517c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <osSemaphoreNew+0x66>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <osSemaphoreNew+0x66>
          mem = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e001      	b.n	800517c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005182:	d04c      	beq.n	800521e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d128      	bne.n	80051dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10a      	bne.n	80051a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2203      	movs	r2, #3
 8005196:	9200      	str	r2, [sp, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	2100      	movs	r1, #0
 800519c:	2001      	movs	r0, #1
 800519e:	f000 f993 	bl	80054c8 <xQueueGenericCreateStatic>
 80051a2:	61f8      	str	r0, [r7, #28]
 80051a4:	e005      	b.n	80051b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80051a6:	2203      	movs	r2, #3
 80051a8:	2100      	movs	r1, #0
 80051aa:	2001      	movs	r0, #1
 80051ac:	f000 fa04 	bl	80055b8 <xQueueGenericCreate>
 80051b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d022      	beq.n	80051fe <osSemaphoreNew+0xe8>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01f      	beq.n	80051fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051be:	2300      	movs	r3, #0
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	69f8      	ldr	r0, [r7, #28]
 80051c6:	f000 fabf 	bl	8005748 <xQueueGenericSend>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d016      	beq.n	80051fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80051d0:	69f8      	ldr	r0, [r7, #28]
 80051d2:	f000 fd33 	bl	8005c3c <vQueueDelete>
            hSemaphore = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	e010      	b.n	80051fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d108      	bne.n	80051f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa41 	bl	8005672 <xQueueCreateCountingSemaphoreStatic>
 80051f0:	61f8      	str	r0, [r7, #28]
 80051f2:	e004      	b.n	80051fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fa72 	bl	80056e0 <xQueueCreateCountingSemaphore>
 80051fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <osSemaphoreNew+0xfc>
          name = attr->name;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e001      	b.n	8005216 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	69f8      	ldr	r0, [r7, #28]
 800521a:	f000 fe43 	bl	8005ea4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800521e:	69fb      	ldr	r3, [r7, #28]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a07      	ldr	r2, [pc, #28]	; (8005254 <vApplicationGetIdleTaskMemory+0x2c>)
 8005238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4a06      	ldr	r2, [pc, #24]	; (8005258 <vApplicationGetIdleTaskMemory+0x30>)
 800523e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2280      	movs	r2, #128	; 0x80
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	200044d0 	.word	0x200044d0
 8005258:	2000458c 	.word	0x2000458c

0800525c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4a07      	ldr	r2, [pc, #28]	; (8005288 <vApplicationGetTimerTaskMemory+0x2c>)
 800526c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4a06      	ldr	r2, [pc, #24]	; (800528c <vApplicationGetTimerTaskMemory+0x30>)
 8005272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	2000478c 	.word	0x2000478c
 800528c:	20004848 	.word	0x20004848

08005290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f103 0208 	add.w	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f103 0208 	add.w	r2, r3, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f103 0208 	add.w	r2, r3, #8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005348:	d103      	bne.n	8005352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e00c      	b.n	800536c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3308      	adds	r3, #8
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e002      	b.n	8005360 <vListInsert+0x2e>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d2f6      	bcs.n	800535a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6892      	ldr	r2, [r2, #8]
 80053ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6852      	ldr	r2, [r2, #4]
 80053c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d103      	bne.n	80053d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1e5a      	subs	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005422:	f002 f967 	bl	80076f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	441a      	add	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	3b01      	subs	r3, #1
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	; 0xff
 800546e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d114      	bne.n	80054a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01a      	beq.n	80054b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3310      	adds	r3, #16
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fa1b 	bl	80068c0 <xTaskRemoveFromEventList>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d012      	beq.n	80054b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <xQueueGenericReset+0xcc>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	e009      	b.n	80054b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3310      	adds	r3, #16
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fef2 	bl	8005290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff feed 	bl	8005290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054b6:	f002 f94d 	bl	8007754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054ba:	2301      	movs	r3, #1
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08e      	sub	sp, #56	; 0x38
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <xQueueGenericCreateStatic+0x52>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <xQueueGenericCreateStatic+0x56>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <xQueueGenericCreateStatic+0x58>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	623b      	str	r3, [r7, #32]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <xQueueGenericCreateStatic+0x7e>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericCreateStatic+0x82>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericCreateStatic+0x84>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fb      	str	r3, [r7, #28]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005566:	2350      	movs	r3, #80	; 0x50
 8005568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b50      	cmp	r3, #80	; 0x50
 800556e:	d00a      	beq.n	8005586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	61bb      	str	r3, [r7, #24]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800559a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f83f 	bl	800562c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	; 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	613b      	str	r3, [r7, #16]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3350      	adds	r3, #80	; 0x50
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 f9a1 	bl	8007938 <pvPortMalloc>
 80055f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	3350      	adds	r3, #80	; 0x50
 8005606:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005610:	79fa      	ldrb	r2, [r7, #7]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4613      	mov	r3, r2
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f805 	bl	800562c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005622:	69bb      	ldr	r3, [r7, #24]
	}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e002      	b.n	800564e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800565a:	2101      	movs	r1, #1
 800565c:	69b8      	ldr	r0, [r7, #24]
 800565e:	f7ff fecb 	bl	80053f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005672:	b580      	push	{r7, lr}
 8005674:	b08a      	sub	sp, #40	; 0x28
 8005676:	af02      	add	r7, sp, #8
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d90a      	bls.n	80056b8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	617b      	str	r3, [r7, #20]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056b8:	2302      	movs	r3, #2
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff ff00 	bl	80054c8 <xQueueGenericCreateStatic>
 80056c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056d6:	69fb      	ldr	r3, [r7, #28]
	}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	613b      	str	r3, [r7, #16]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d90a      	bls.n	8005724 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005724:	2202      	movs	r2, #2
 8005726:	2100      	movs	r1, #0
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff45 	bl	80055b8 <xQueueGenericCreate>
 800572e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800573c:	697b      	ldr	r3, [r7, #20]
	}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08e      	sub	sp, #56	; 0x38
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <xQueueGenericSend+0x32>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <xQueueGenericSend+0x40>
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xQueueGenericSend+0x44>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <xQueueGenericSend+0x46>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <xQueueGenericSend+0x60>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSend+0x6e>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <xQueueGenericSend+0x72>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericSend+0x74>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	623b      	str	r3, [r7, #32]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057d6:	f001 fa35 	bl	8006c44 <xTaskGetSchedulerState>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <xQueueGenericSend+0x9e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <xQueueGenericSend+0xa2>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xQueueGenericSend+0xa4>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericSend+0xbe>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	61fb      	str	r3, [r7, #28]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005806:	f001 ff75 	bl	80076f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <xQueueGenericSend+0xd4>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d129      	bne.n	8005870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005822:	f000 fa2e 	bl	8005c82 <prvCopyDataToQueue>
 8005826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	3324      	adds	r3, #36	; 0x24
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f843 	bl	80068c0 <xTaskRemoveFromEventList>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005840:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <xQueueGenericSend+0x1f8>)
 8005842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	e00a      	b.n	8005868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005858:	4b39      	ldr	r3, [pc, #228]	; (8005940 <xQueueGenericSend+0x1f8>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005868:	f001 ff74 	bl	8007754 <vPortExitCritical>
				return pdPASS;
 800586c:	2301      	movs	r3, #1
 800586e:	e063      	b.n	8005938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005876:	f001 ff6d 	bl	8007754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800587a:	2300      	movs	r3, #0
 800587c:	e05c      	b.n	8005938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800587e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4618      	mov	r0, r3
 800588a:	f001 f87d 	bl	8006988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800588e:	2301      	movs	r3, #1
 8005890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005892:	f001 ff5f 	bl	8007754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005896:	f000 fde9 	bl	800646c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800589a:	f001 ff2b 	bl	80076f4 <vPortEnterCritical>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058aa:	d103      	bne.n	80058b4 <xQueueGenericSend+0x16c>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c0:	d103      	bne.n	80058ca <xQueueGenericSend+0x182>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ca:	f001 ff43 	bl	8007754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ce:	1d3a      	adds	r2, r7, #4
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 f86c 	bl	80069b4 <xTaskCheckForTimeOut>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d124      	bne.n	800592c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e4:	f000 fac5 	bl	8005e72 <prvIsQueueFull>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	3310      	adds	r3, #16
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 ff92 	bl	8006820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058fe:	f000 fa50 	bl	8005da2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005902:	f000 fdc1 	bl	8006488 <xTaskResumeAll>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f af7c 	bne.w	8005806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <xQueueGenericSend+0x1f8>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	e772      	b.n	8005806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005922:	f000 fa3e 	bl	8005da2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005926:	f000 fdaf 	bl	8006488 <xTaskResumeAll>
 800592a:	e76c      	b.n	8005806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800592c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800592e:	f000 fa38 	bl	8005da2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005932:	f000 fda9 	bl	8006488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005938:	4618      	mov	r0, r3
 800593a:	3738      	adds	r7, #56	; 0x38
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b090      	sub	sp, #64	; 0x40
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <xQueueGenericSendFromISR+0x3c>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <xQueueGenericSendFromISR+0x40>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <xQueueGenericSendFromISR+0x42>
 8005984:	2300      	movs	r3, #0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d103      	bne.n	80059ae <xQueueGenericSendFromISR+0x6a>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericSendFromISR+0x6e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericSendFromISR+0x70>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	623b      	str	r3, [r7, #32]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ce:	f001 ff73 	bl	80078b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059d2:	f3ef 8211 	mrs	r2, BASEPRI
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	61fa      	str	r2, [r7, #28]
 80059e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <xQueueGenericSendFromISR+0xbc>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d12f      	bne.n	8005a60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a16:	f000 f934 	bl	8005c82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a22:	d112      	bne.n	8005a4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d016      	beq.n	8005a5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	3324      	adds	r3, #36	; 0x24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 ff45 	bl	80068c0 <xTaskRemoveFromEventList>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00e      	beq.n	8005a5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e007      	b.n	8005a5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a4e:	3301      	adds	r3, #1
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	b25a      	sxtb	r2, r3
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a5e:	e001      	b.n	8005a64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3740      	adds	r7, #64	; 0x40
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	; 0x30
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <xQueueReceive+0x30>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	623b      	str	r3, [r7, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <xQueueReceive+0x3e>
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <xQueueReceive+0x42>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <xQueueReceive+0x44>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueReceive+0x5e>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	61fb      	str	r3, [r7, #28]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ada:	f001 f8b3 	bl	8006c44 <xTaskGetSchedulerState>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <xQueueReceive+0x6e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <xQueueReceive+0x72>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <xQueueReceive+0x74>
 8005aee:	2300      	movs	r3, #0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xQueueReceive+0x8e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	61bb      	str	r3, [r7, #24]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b0a:	f001 fdf3 	bl	80076f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01f      	beq.n	8005b5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1e:	f000 f91a 	bl	8005d56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	1e5a      	subs	r2, r3, #1
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00f      	beq.n	8005b52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	3310      	adds	r3, #16
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fec2 	bl	80068c0 <xTaskRemoveFromEventList>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b42:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <xQueueReceive+0x1bc>)
 8005b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b52:	f001 fdff 	bl	8007754 <vPortExitCritical>
				return pdPASS;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e069      	b.n	8005c2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d103      	bne.n	8005b68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b60:	f001 fdf8 	bl	8007754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e062      	b.n	8005c2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b6e:	f107 0310 	add.w	r3, r7, #16
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 ff08 	bl	8006988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b7c:	f001 fdea 	bl	8007754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b80:	f000 fc74 	bl	800646c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b84:	f001 fdb6 	bl	80076f4 <vPortEnterCritical>
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b94:	d103      	bne.n	8005b9e <xQueueReceive+0x122>
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005baa:	d103      	bne.n	8005bb4 <xQueueReceive+0x138>
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bb4:	f001 fdce 	bl	8007754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bb8:	1d3a      	adds	r2, r7, #4
 8005bba:	f107 0310 	add.w	r3, r7, #16
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fef7 	bl	80069b4 <xTaskCheckForTimeOut>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d123      	bne.n	8005c14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bce:	f000 f93a 	bl	8005e46 <prvIsQueueEmpty>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d017      	beq.n	8005c08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	3324      	adds	r3, #36	; 0x24
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fe1d 	bl	8006820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be8:	f000 f8db 	bl	8005da2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bec:	f000 fc4c 	bl	8006488 <xTaskResumeAll>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d189      	bne.n	8005b0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <xQueueReceive+0x1bc>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	e780      	b.n	8005b0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0a:	f000 f8ca 	bl	8005da2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c0e:	f000 fc3b 	bl	8006488 <xTaskResumeAll>
 8005c12:	e77a      	b.n	8005b0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c16:	f000 f8c4 	bl	8005da2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c1a:	f000 fc35 	bl	8006488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c20:	f000 f911 	bl	8005e46 <prvIsQueueEmpty>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f43f af6f 	beq.w	8005b0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3730      	adds	r7, #48	; 0x30
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <vQueueDelete+0x28>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60bb      	str	r3, [r7, #8]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f947 	bl	8005ef8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 ff03 	bl	8007a80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10d      	bne.n	8005cbc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d14d      	bne.n	8005d44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 ffe7 	bl	8006c80 <xTaskPriorityDisinherit>
 8005cb2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	609a      	str	r2, [r3, #8]
 8005cba:	e043      	b.n	8005d44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d119      	bne.n	8005cf6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6858      	ldr	r0, [r3, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	f002 f895 	bl	8007dfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	441a      	add	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d32b      	bcc.n	8005d44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	e026      	b.n	8005d44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68d8      	ldr	r0, [r3, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	f002 f87b 	bl	8007dfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	425b      	negs	r3, r3
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d207      	bcs.n	8005d32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	425b      	negs	r3, r3
 8005d2c:	441a      	add	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d105      	bne.n	8005d44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d4c:	697b      	ldr	r3, [r7, #20]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d018      	beq.n	8005d9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	441a      	add	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d303      	bcc.n	8005d8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68d9      	ldr	r1, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	461a      	mov	r2, r3
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f002 f831 	bl	8007dfc <memcpy>
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005daa:	f001 fca3 	bl	80076f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db6:	e011      	b.n	8005ddc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d012      	beq.n	8005de6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3324      	adds	r3, #36	; 0x24
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fd7b 	bl	80068c0 <xTaskRemoveFromEventList>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dd0:	f000 fe52 	bl	8006a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dce9      	bgt.n	8005db8 <prvUnlockQueue+0x16>
 8005de4:	e000      	b.n	8005de8 <prvUnlockQueue+0x46>
					break;
 8005de6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	22ff      	movs	r2, #255	; 0xff
 8005dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005df0:	f001 fcb0 	bl	8007754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005df4:	f001 fc7e 	bl	80076f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e00:	e011      	b.n	8005e26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d012      	beq.n	8005e30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fd56 	bl	80068c0 <xTaskRemoveFromEventList>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e1a:	f000 fe2d 	bl	8006a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dce9      	bgt.n	8005e02 <prvUnlockQueue+0x60>
 8005e2e:	e000      	b.n	8005e32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e3a:	f001 fc8b 	bl	8007754 <vPortExitCritical>
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e4e:	f001 fc51 	bl	80076f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e001      	b.n	8005e64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e64:	f001 fc76 	bl	8007754 <vPortExitCritical>

	return xReturn;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e7a:	f001 fc3b 	bl	80076f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d102      	bne.n	8005e90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e001      	b.n	8005e94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e94:	f001 fc5e 	bl	8007754 <vPortExitCritical>

	return xReturn;
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e014      	b.n	8005ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eb4:	4a0f      	ldr	r2, [pc, #60]	; (8005ef4 <vQueueAddToRegistry+0x50>)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ec0:	490c      	ldr	r1, [pc, #48]	; (8005ef4 <vQueueAddToRegistry+0x50>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005eca:	4a0a      	ldr	r2, [pc, #40]	; (8005ef4 <vQueueAddToRegistry+0x50>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ed6:	e006      	b.n	8005ee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b07      	cmp	r3, #7
 8005ee2:	d9e7      	bls.n	8005eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20005448 	.word	0x20005448

08005ef8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e016      	b.n	8005f34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005f06:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <vQueueUnregisterQueue+0x50>)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d10b      	bne.n	8005f2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005f16:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <vQueueUnregisterQueue+0x50>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f20:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <vQueueUnregisterQueue+0x50>)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	2200      	movs	r2, #0
 8005f2a:	605a      	str	r2, [r3, #4]
				break;
 8005f2c:	e006      	b.n	8005f3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3301      	adds	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b07      	cmp	r3, #7
 8005f38:	d9e5      	bls.n	8005f06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20005448 	.word	0x20005448

08005f4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f5c:	f001 fbca 	bl	80076f4 <vPortEnterCritical>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6c:	d103      	bne.n	8005f76 <vQueueWaitForMessageRestricted+0x2a>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f82:	d103      	bne.n	8005f8c <vQueueWaitForMessageRestricted+0x40>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f8c:	f001 fbe2 	bl	8007754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	3324      	adds	r3, #36	; 0x24
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fc61 	bl	8006868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f7ff fefb 	bl	8005da2 <prvUnlockQueue>
	}
 8005fac:	bf00      	nop
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08e      	sub	sp, #56	; 0x38
 8005fb8:	af04      	add	r7, sp, #16
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xTaskCreateStatic+0x2a>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	623b      	str	r3, [r7, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xTaskCreateStatic+0x46>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	61fb      	str	r3, [r7, #28]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ffa:	23bc      	movs	r3, #188	; 0xbc
 8005ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2bbc      	cmp	r3, #188	; 0xbc
 8006002:	d00a      	beq.n	800601a <xTaskCreateStatic+0x66>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	61bb      	str	r3, [r7, #24]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800601a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01e      	beq.n	8006060 <xTaskCreateStatic+0xac>
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006030:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	2202      	movs	r2, #2
 8006036:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800603a:	2300      	movs	r3, #0
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f850 	bl	80060f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800605a:	f000 f8f3 	bl	8006244 <prvAddNewTaskToReadyList>
 800605e:	e001      	b.n	8006064 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006064:	697b      	ldr	r3, [r7, #20]
	}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800606e:	b580      	push	{r7, lr}
 8006070:	b08c      	sub	sp, #48	; 0x30
 8006072:	af04      	add	r7, sp, #16
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fc58 	bl	8007938 <pvPortMalloc>
 8006088:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00e      	beq.n	80060ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006090:	20bc      	movs	r0, #188	; 0xbc
 8006092:	f001 fc51 	bl	8007938 <pvPortMalloc>
 8006096:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
 80060a4:	e005      	b.n	80060b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f001 fcea 	bl	8007a80 <vPortFree>
 80060ac:	e001      	b.n	80060b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d017      	beq.n	80060e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	2300      	movs	r3, #0
 80060c4:	9303      	str	r3, [sp, #12]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	9302      	str	r3, [sp, #8]
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f80e 	bl	80060f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060dc:	69f8      	ldr	r0, [r7, #28]
 80060de:	f000 f8b1 	bl	8006244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e002      	b.n	80060ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060ee:	69bb      	ldr	r3, [r7, #24]
	}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	461a      	mov	r2, r3
 8006110:	21a5      	movs	r1, #165	; 0xa5
 8006112:	f001 fe81 	bl	8007e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006120:	3b01      	subs	r3, #1
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <prvInitialiseNewTask+0x58>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	617b      	str	r3, [r7, #20]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01f      	beq.n	8006196 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	e012      	b.n	8006182 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	7819      	ldrb	r1, [r3, #0]
 8006164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	3334      	adds	r3, #52	; 0x34
 800616c:	460a      	mov	r2, r1
 800616e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d006      	beq.n	800618a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	3301      	adds	r3, #1
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2b0f      	cmp	r3, #15
 8006186:	d9e9      	bls.n	800615c <prvInitialiseNewTask+0x64>
 8006188:	e000      	b.n	800618c <prvInitialiseNewTask+0x94>
			{
				break;
 800618a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006194:	e003      	b.n	800619e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	2b37      	cmp	r3, #55	; 0x37
 80061a2:	d901      	bls.n	80061a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061a4:	2337      	movs	r3, #55	; 0x37
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2200      	movs	r2, #0
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	3304      	adds	r3, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff f886 	bl	80052d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	3318      	adds	r3, #24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff f881 	bl	80052d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	3354      	adds	r3, #84	; 0x54
 80061f8:	2260      	movs	r2, #96	; 0x60
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fe0b 	bl	8007e18 <memset>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <prvInitialiseNewTask+0x140>)
 8006206:	659a      	str	r2, [r3, #88]	; 0x58
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	4a0c      	ldr	r2, [pc, #48]	; (800623c <prvInitialiseNewTask+0x144>)
 800620c:	65da      	str	r2, [r3, #92]	; 0x5c
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <prvInitialiseNewTask+0x148>)
 8006212:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	69b8      	ldr	r0, [r7, #24]
 800621a:	f001 f941 	bl	80074a0 <pxPortInitialiseStack>
 800621e:	4602      	mov	r2, r0
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006230:	bf00      	nop
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	08008904 	.word	0x08008904
 800623c:	08008924 	.word	0x08008924
 8006240:	080088e4 	.word	0x080088e4

08006244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800624c:	f001 fa52 	bl	80076f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006250:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <prvAddNewTaskToReadyList+0xc4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	4a2c      	ldr	r2, [pc, #176]	; (8006308 <prvAddNewTaskToReadyList+0xc4>)
 8006258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800625a:	4b2c      	ldr	r3, [pc, #176]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <prvAddNewTaskToReadyList+0xc4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d110      	bne.n	8006292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006270:	f000 fc26 	bl	8006ac0 <prvInitialiseTaskLists>
 8006274:	e00d      	b.n	8006292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <prvAddNewTaskToReadyList+0xcc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800627e:	4b23      	ldr	r3, [pc, #140]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	429a      	cmp	r2, r3
 800628a:	d802      	bhi.n	8006292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <prvAddNewTaskToReadyList+0xd0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3301      	adds	r3, #1
 8006298:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <prvAddNewTaskToReadyList+0xd0>)
 800629a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800629c:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <prvAddNewTaskToReadyList+0xd0>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <prvAddNewTaskToReadyList+0xd4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d903      	bls.n	80062b8 <prvAddNewTaskToReadyList+0x74>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <prvAddNewTaskToReadyList+0xd4>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <prvAddNewTaskToReadyList+0xd8>)
 80062c6:	441a      	add	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7ff f80b 	bl	80052ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062d4:	f001 fa3e 	bl	8007754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <prvAddNewTaskToReadyList+0xcc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d207      	bcs.n	80062fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <prvAddNewTaskToReadyList+0xdc>)
 80062f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2000511c 	.word	0x2000511c
 800630c:	20004c48 	.word	0x20004c48
 8006310:	20005128 	.word	0x20005128
 8006314:	20005138 	.word	0x20005138
 8006318:	20005124 	.word	0x20005124
 800631c:	20004c4c 	.word	0x20004c4c
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d017      	beq.n	8006366 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <vTaskDelay+0x60>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <vTaskDelay+0x30>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60bb      	str	r3, [r7, #8]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006354:	f000 f88a 	bl	800646c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006358:	2100      	movs	r1, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fcfe 	bl	8006d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006360:	f000 f892 	bl	8006488 <xTaskResumeAll>
 8006364:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <vTaskDelay+0x64>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20005144 	.word	0x20005144
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800639a:	463a      	mov	r2, r7
 800639c:	1d39      	adds	r1, r7, #4
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe ff40 	bl	8005228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	9202      	str	r2, [sp, #8]
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	460a      	mov	r2, r1
 80063ba:	4924      	ldr	r1, [pc, #144]	; (800644c <vTaskStartScheduler+0xc0>)
 80063bc:	4824      	ldr	r0, [pc, #144]	; (8006450 <vTaskStartScheduler+0xc4>)
 80063be:	f7ff fdf9 	bl	8005fb4 <xTaskCreateStatic>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <vTaskStartScheduler+0xc8>)
 80063c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063c8:	4b22      	ldr	r3, [pc, #136]	; (8006454 <vTaskStartScheduler+0xc8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063d0:	2301      	movs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e001      	b.n	80063da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d102      	bne.n	80063e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063e0:	f000 fd10 	bl	8006e04 <xTimerCreateTimerTask>
 80063e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d11b      	bne.n	8006424 <vTaskStartScheduler+0x98>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	613b      	str	r3, [r7, #16]
}
 80063fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006400:	4b15      	ldr	r3, [pc, #84]	; (8006458 <vTaskStartScheduler+0xcc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3354      	adds	r3, #84	; 0x54
 8006406:	4a15      	ldr	r2, [pc, #84]	; (800645c <vTaskStartScheduler+0xd0>)
 8006408:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <vTaskStartScheduler+0xd4>)
 800640c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006410:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006412:	4b14      	ldr	r3, [pc, #80]	; (8006464 <vTaskStartScheduler+0xd8>)
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006418:	4b13      	ldr	r3, [pc, #76]	; (8006468 <vTaskStartScheduler+0xdc>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800641e:	f001 f8c7 	bl	80075b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006422:	e00e      	b.n	8006442 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642a:	d10a      	bne.n	8006442 <vTaskStartScheduler+0xb6>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	60fb      	str	r3, [r7, #12]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <vTaskStartScheduler+0xb4>
}
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	0800886c 	.word	0x0800886c
 8006450:	08006a91 	.word	0x08006a91
 8006454:	20005140 	.word	0x20005140
 8006458:	20004c48 	.word	0x20004c48
 800645c:	20000034 	.word	0x20000034
 8006460:	2000513c 	.word	0x2000513c
 8006464:	20005128 	.word	0x20005128
 8006468:	20005120 	.word	0x20005120

0800646c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <vTaskSuspendAll+0x18>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	4a03      	ldr	r2, [pc, #12]	; (8006484 <vTaskSuspendAll+0x18>)
 8006478:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800647a:	bf00      	nop
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20005144 	.word	0x20005144

08006488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006496:	4b42      	ldr	r3, [pc, #264]	; (80065a0 <xTaskResumeAll+0x118>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	603b      	str	r3, [r7, #0]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064b4:	f001 f91e 	bl	80076f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064b8:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <xTaskResumeAll+0x118>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3b01      	subs	r3, #1
 80064be:	4a38      	ldr	r2, [pc, #224]	; (80065a0 <xTaskResumeAll+0x118>)
 80064c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c2:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <xTaskResumeAll+0x118>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d162      	bne.n	8006590 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064ca:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <xTaskResumeAll+0x11c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d05e      	beq.n	8006590 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064d2:	e02f      	b.n	8006534 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d4:	4b34      	ldr	r3, [pc, #208]	; (80065a8 <xTaskResumeAll+0x120>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3318      	adds	r3, #24
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe ff5f 	bl	80053a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe ff5a 	bl	80053a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4b2d      	ldr	r3, [pc, #180]	; (80065ac <xTaskResumeAll+0x124>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d903      	bls.n	8006504 <xTaskResumeAll+0x7c>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a2a      	ldr	r2, [pc, #168]	; (80065ac <xTaskResumeAll+0x124>)
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <xTaskResumeAll+0x128>)
 8006512:	441a      	add	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe fee5 	bl	80052ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <xTaskResumeAll+0x12c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800652e:	4b22      	ldr	r3, [pc, #136]	; (80065b8 <xTaskResumeAll+0x130>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006534:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <xTaskResumeAll+0x120>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1cb      	bne.n	80064d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006542:	f000 fb5f 	bl	8006c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <xTaskResumeAll+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d010      	beq.n	8006574 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006552:	f000 f847 	bl	80065e4 <xTaskIncrementTick>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <xTaskResumeAll+0x130>)
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f1      	bne.n	8006552 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <xTaskResumeAll+0x134>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <xTaskResumeAll+0x130>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800657c:	2301      	movs	r3, #1
 800657e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <xTaskResumeAll+0x138>)
 8006582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006590:	f001 f8e0 	bl	8007754 <vPortExitCritical>

	return xAlreadyYielded;
 8006594:	68bb      	ldr	r3, [r7, #8]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20005144 	.word	0x20005144
 80065a4:	2000511c 	.word	0x2000511c
 80065a8:	200050dc 	.word	0x200050dc
 80065ac:	20005124 	.word	0x20005124
 80065b0:	20004c4c 	.word	0x20004c4c
 80065b4:	20004c48 	.word	0x20004c48
 80065b8:	20005130 	.word	0x20005130
 80065bc:	2000512c 	.word	0x2000512c
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <xTaskGetTickCount+0x1c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065d0:	687b      	ldr	r3, [r7, #4]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20005120 	.word	0x20005120

080065e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ee:	4b4f      	ldr	r3, [pc, #316]	; (800672c <xTaskIncrementTick+0x148>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 808f 	bne.w	8006716 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065f8:	4b4d      	ldr	r3, [pc, #308]	; (8006730 <xTaskIncrementTick+0x14c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006600:	4a4b      	ldr	r2, [pc, #300]	; (8006730 <xTaskIncrementTick+0x14c>)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d120      	bne.n	800664e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800660c:	4b49      	ldr	r3, [pc, #292]	; (8006734 <xTaskIncrementTick+0x150>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <xTaskIncrementTick+0x48>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	603b      	str	r3, [r7, #0]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <xTaskIncrementTick+0x46>
 800662c:	4b41      	ldr	r3, [pc, #260]	; (8006734 <xTaskIncrementTick+0x150>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <xTaskIncrementTick+0x154>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3f      	ldr	r2, [pc, #252]	; (8006734 <xTaskIncrementTick+0x150>)
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <xTaskIncrementTick+0x154>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	4b3e      	ldr	r3, [pc, #248]	; (800673c <xTaskIncrementTick+0x158>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	4a3d      	ldr	r2, [pc, #244]	; (800673c <xTaskIncrementTick+0x158>)
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	f000 fadb 	bl	8006c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800664e:	4b3c      	ldr	r3, [pc, #240]	; (8006740 <xTaskIncrementTick+0x15c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d349      	bcc.n	80066ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006658:	4b36      	ldr	r3, [pc, #216]	; (8006734 <xTaskIncrementTick+0x150>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006662:	4b37      	ldr	r3, [pc, #220]	; (8006740 <xTaskIncrementTick+0x15c>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006668:	601a      	str	r2, [r3, #0]
					break;
 800666a:	e03f      	b.n	80066ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666c:	4b31      	ldr	r3, [pc, #196]	; (8006734 <xTaskIncrementTick+0x150>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d203      	bcs.n	800668c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006684:	4a2e      	ldr	r2, [pc, #184]	; (8006740 <xTaskIncrementTick+0x15c>)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800668a:	e02f      	b.n	80066ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3304      	adds	r3, #4
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fe87 	bl	80053a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	3318      	adds	r3, #24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fe7e 	bl	80053a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <xTaskIncrementTick+0x160>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d903      	bls.n	80066bc <xTaskIncrementTick+0xd8>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a22      	ldr	r2, [pc, #136]	; (8006744 <xTaskIncrementTick+0x160>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <xTaskIncrementTick+0x164>)
 80066ca:	441a      	add	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7fe fe09 	bl	80052ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	4b1b      	ldr	r3, [pc, #108]	; (800674c <xTaskIncrementTick+0x168>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3b8      	bcc.n	8006658 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ea:	e7b5      	b.n	8006658 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066ec:	4b17      	ldr	r3, [pc, #92]	; (800674c <xTaskIncrementTick+0x168>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	4915      	ldr	r1, [pc, #84]	; (8006748 <xTaskIncrementTick+0x164>)
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d901      	bls.n	8006708 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006708:	4b11      	ldr	r3, [pc, #68]	; (8006750 <xTaskIncrementTick+0x16c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006710:	2301      	movs	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e004      	b.n	8006720 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <xTaskIncrementTick+0x170>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	4a0d      	ldr	r2, [pc, #52]	; (8006754 <xTaskIncrementTick+0x170>)
 800671e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006720:	697b      	ldr	r3, [r7, #20]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20005144 	.word	0x20005144
 8006730:	20005120 	.word	0x20005120
 8006734:	200050d4 	.word	0x200050d4
 8006738:	200050d8 	.word	0x200050d8
 800673c:	20005134 	.word	0x20005134
 8006740:	2000513c 	.word	0x2000513c
 8006744:	20005124 	.word	0x20005124
 8006748:	20004c4c 	.word	0x20004c4c
 800674c:	20004c48 	.word	0x20004c48
 8006750:	20005130 	.word	0x20005130
 8006754:	2000512c 	.word	0x2000512c

08006758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800675e:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <vTaskSwitchContext+0xb0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <vTaskSwitchContext+0xb4>)
 8006768:	2201      	movs	r2, #1
 800676a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800676c:	e046      	b.n	80067fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800676e:	4b27      	ldr	r3, [pc, #156]	; (800680c <vTaskSwitchContext+0xb4>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006774:	4b26      	ldr	r3, [pc, #152]	; (8006810 <vTaskSwitchContext+0xb8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e010      	b.n	800679e <vTaskSwitchContext+0x46>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <vTaskSwitchContext+0x40>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vTaskSwitchContext+0x3e>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3b01      	subs	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	491d      	ldr	r1, [pc, #116]	; (8006814 <vTaskSwitchContext+0xbc>)
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0e4      	beq.n	800677c <vTaskSwitchContext+0x24>
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <vTaskSwitchContext+0xbc>)
 80067be:	4413      	add	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	605a      	str	r2, [r3, #4]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3308      	adds	r3, #8
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d104      	bne.n	80067e2 <vTaskSwitchContext+0x8a>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4a0b      	ldr	r2, [pc, #44]	; (8006818 <vTaskSwitchContext+0xc0>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4a08      	ldr	r2, [pc, #32]	; (8006810 <vTaskSwitchContext+0xb8>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <vTaskSwitchContext+0xc0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3354      	adds	r3, #84	; 0x54
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <vTaskSwitchContext+0xc4>)
 80067fa:	6013      	str	r3, [r2, #0]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	20005144 	.word	0x20005144
 800680c:	20005130 	.word	0x20005130
 8006810:	20005124 	.word	0x20005124
 8006814:	20004c4c 	.word	0x20004c4c
 8006818:	20004c48 	.word	0x20004c48
 800681c:	20000034 	.word	0x20000034

08006820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006846:	4b07      	ldr	r3, [pc, #28]	; (8006864 <vTaskPlaceOnEventList+0x44>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3318      	adds	r3, #24
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fe fd6f 	bl	8005332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006854:	2101      	movs	r1, #1
 8006856:	6838      	ldr	r0, [r7, #0]
 8006858:	f000 fa80 	bl	8006d5c <prvAddCurrentTaskToDelayedList>
}
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20004c48 	.word	0x20004c48

08006868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	617b      	str	r3, [r7, #20]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3318      	adds	r3, #24
 8006896:	4619      	mov	r1, r3
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7fe fd26 	bl	80052ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	68b8      	ldr	r0, [r7, #8]
 80068ae:	f000 fa55 	bl	8006d5c <prvAddCurrentTaskToDelayedList>
	}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20004c48 	.word	0x20004c48

080068c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60fb      	str	r3, [r7, #12]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	3318      	adds	r3, #24
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe fd57 	bl	80053a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f6:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <xTaskRemoveFromEventList+0xb0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11d      	bne.n	800693a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	3304      	adds	r3, #4
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fd4e 	bl	80053a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	4b19      	ldr	r3, [pc, #100]	; (8006974 <xTaskRemoveFromEventList+0xb4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d903      	bls.n	800691c <xTaskRemoveFromEventList+0x5c>
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <xTaskRemoveFromEventList+0xb4>)
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <xTaskRemoveFromEventList+0xb8>)
 800692a:	441a      	add	r2, r3
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f7fe fcd9 	bl	80052ea <vListInsertEnd>
 8006938:	e005      	b.n	8006946 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	3318      	adds	r3, #24
 800693e:	4619      	mov	r1, r3
 8006940:	480e      	ldr	r0, [pc, #56]	; (800697c <xTaskRemoveFromEventList+0xbc>)
 8006942:	f7fe fcd2 	bl	80052ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <xTaskRemoveFromEventList+0xc0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	429a      	cmp	r2, r3
 8006952:	d905      	bls.n	8006960 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <xTaskRemoveFromEventList+0xc4>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e001      	b.n	8006964 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006964:	697b      	ldr	r3, [r7, #20]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20005144 	.word	0x20005144
 8006974:	20005124 	.word	0x20005124
 8006978:	20004c4c 	.word	0x20004c4c
 800697c:	200050dc 	.word	0x200050dc
 8006980:	20004c48 	.word	0x20004c48
 8006984:	20005130 	.word	0x20005130

08006988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <vTaskInternalSetTimeOutState+0x24>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <vTaskInternalSetTimeOutState+0x28>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20005134 	.word	0x20005134
 80069b0:	20005120 	.word	0x20005120

080069b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	613b      	str	r3, [r7, #16]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	60fb      	str	r3, [r7, #12]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069f6:	f000 fe7d 	bl	80076f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069fa:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <xTaskCheckForTimeOut+0xbc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a12:	d102      	bne.n	8006a1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e023      	b.n	8006a62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <xTaskCheckForTimeOut+0xc0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d007      	beq.n	8006a36 <xTaskCheckForTimeOut+0x82>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d302      	bcc.n	8006a36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e015      	b.n	8006a62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d20b      	bcs.n	8006a58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ff9b 	bl	8006988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	e004      	b.n	8006a62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a62:	f000 fe77 	bl	8007754 <vPortExitCritical>

	return xReturn;
 8006a66:	69fb      	ldr	r3, [r7, #28]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20005120 	.word	0x20005120
 8006a74:	20005134 	.word	0x20005134

08006a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <vTaskMissedYield+0x14>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20005130 	.word	0x20005130

08006a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a98:	f000 f852 	bl	8006b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <prvIdleTask+0x28>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d9f9      	bls.n	8006a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <prvIdleTask+0x2c>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ab4:	e7f0      	b.n	8006a98 <prvIdleTask+0x8>
 8006ab6:	bf00      	nop
 8006ab8:	20004c4c 	.word	0x20004c4c
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	e00c      	b.n	8006ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4a12      	ldr	r2, [pc, #72]	; (8006b20 <prvInitialiseTaskLists+0x60>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fbd8 	bl	8005290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b37      	cmp	r3, #55	; 0x37
 8006aea:	d9ef      	bls.n	8006acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aec:	480d      	ldr	r0, [pc, #52]	; (8006b24 <prvInitialiseTaskLists+0x64>)
 8006aee:	f7fe fbcf 	bl	8005290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006af2:	480d      	ldr	r0, [pc, #52]	; (8006b28 <prvInitialiseTaskLists+0x68>)
 8006af4:	f7fe fbcc 	bl	8005290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006af8:	480c      	ldr	r0, [pc, #48]	; (8006b2c <prvInitialiseTaskLists+0x6c>)
 8006afa:	f7fe fbc9 	bl	8005290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006afe:	480c      	ldr	r0, [pc, #48]	; (8006b30 <prvInitialiseTaskLists+0x70>)
 8006b00:	f7fe fbc6 	bl	8005290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b04:	480b      	ldr	r0, [pc, #44]	; (8006b34 <prvInitialiseTaskLists+0x74>)
 8006b06:	f7fe fbc3 	bl	8005290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <prvInitialiseTaskLists+0x78>)
 8006b0c:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <prvInitialiseTaskLists+0x64>)
 8006b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <prvInitialiseTaskLists+0x7c>)
 8006b12:	4a05      	ldr	r2, [pc, #20]	; (8006b28 <prvInitialiseTaskLists+0x68>)
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20004c4c 	.word	0x20004c4c
 8006b24:	200050ac 	.word	0x200050ac
 8006b28:	200050c0 	.word	0x200050c0
 8006b2c:	200050dc 	.word	0x200050dc
 8006b30:	200050f0 	.word	0x200050f0
 8006b34:	20005108 	.word	0x20005108
 8006b38:	200050d4 	.word	0x200050d4
 8006b3c:	200050d8 	.word	0x200050d8

08006b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b46:	e019      	b.n	8006b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b48:	f000 fdd4 	bl	80076f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4c:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <prvCheckTasksWaitingTermination+0x50>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fc23 	bl	80053a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <prvCheckTasksWaitingTermination+0x54>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	4a0b      	ldr	r2, [pc, #44]	; (8006b94 <prvCheckTasksWaitingTermination+0x54>)
 8006b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <prvCheckTasksWaitingTermination+0x58>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	4a0a      	ldr	r2, [pc, #40]	; (8006b98 <prvCheckTasksWaitingTermination+0x58>)
 8006b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b72:	f000 fdef 	bl	8007754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f810 	bl	8006b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <prvCheckTasksWaitingTermination+0x58>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e1      	bne.n	8006b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200050f0 	.word	0x200050f0
 8006b94:	2000511c 	.word	0x2000511c
 8006b98:	20005104 	.word	0x20005104

08006b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3354      	adds	r3, #84	; 0x54
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f9a5 	bl	8007ef8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 ff5f 	bl	8007a80 <vPortFree>
				vPortFree( pxTCB );
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 ff5c 	bl	8007a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bc8:	e018      	b.n	8006bfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d103      	bne.n	8006bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 ff53 	bl	8007a80 <vPortFree>
	}
 8006bda:	e00f      	b.n	8006bfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d00a      	beq.n	8006bfc <prvDeleteTCB+0x60>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60fb      	str	r3, [r7, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <prvDeleteTCB+0x5e>
	}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <prvResetNextTaskUnblockTime+0x38>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <prvResetNextTaskUnblockTime+0x3c>)
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c1c:	e008      	b.n	8006c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <prvResetNextTaskUnblockTime+0x38>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <prvResetNextTaskUnblockTime+0x3c>)
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	200050d4 	.word	0x200050d4
 8006c40:	2000513c 	.word	0x2000513c

08006c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <xTaskGetSchedulerState+0x34>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c52:	2301      	movs	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	e008      	b.n	8006c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <xTaskGetSchedulerState+0x38>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c60:	2302      	movs	r3, #2
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	e001      	b.n	8006c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c6a:	687b      	ldr	r3, [r7, #4]
	}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	20005128 	.word	0x20005128
 8006c7c:	20005144 	.word	0x20005144

08006c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d056      	beq.n	8006d44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c96:	4b2e      	ldr	r3, [pc, #184]	; (8006d50 <xTaskPriorityDisinherit+0xd0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d00a      	beq.n	8006cb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60bb      	str	r3, [r7, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d02c      	beq.n	8006d44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d128      	bne.n	8006d44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe fb54 	bl	80053a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <xTaskPriorityDisinherit+0xd4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <xTaskPriorityDisinherit+0xa4>
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <xTaskPriorityDisinherit+0xd4>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <xTaskPriorityDisinherit+0xd8>)
 8006d32:	441a      	add	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fad5 	bl	80052ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d44:	697b      	ldr	r3, [r7, #20]
	}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20004c48 	.word	0x20004c48
 8006d54:	20005124 	.word	0x20005124
 8006d58:	20004c4c 	.word	0x20004c4c

08006d5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <prvAddCurrentTaskToDelayedList+0x90>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d6c:	4b20      	ldr	r3, [pc, #128]	; (8006df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fb16 	bl	80053a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7e:	d10a      	bne.n	8006d96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4819      	ldr	r0, [pc, #100]	; (8006df4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d90:	f7fe faab 	bl	80052ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d94:	e026      	b.n	8006de4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d209      	bcs.n	8006dc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7fe fab9 	bl	8005332 <vListInsert>
}
 8006dc0:	e010      	b.n	8006de4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f7fe faaf 	bl	8005332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d202      	bcs.n	8006de4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dde:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20005120 	.word	0x20005120
 8006df0:	20004c48 	.word	0x20004c48
 8006df4:	20005108 	.word	0x20005108
 8006df8:	200050d8 	.word	0x200050d8
 8006dfc:	200050d4 	.word	0x200050d4
 8006e00:	2000513c 	.word	0x2000513c

08006e04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	; 0x28
 8006e08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e0e:	f000 fb07 	bl	8007420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <xTimerCreateTimerTask+0x80>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d021      	beq.n	8006e5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e22:	1d3a      	adds	r2, r7, #4
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fa15 	bl	800525c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	460a      	mov	r2, r1
 8006e44:	4910      	ldr	r1, [pc, #64]	; (8006e88 <xTimerCreateTimerTask+0x84>)
 8006e46:	4811      	ldr	r0, [pc, #68]	; (8006e8c <xTimerCreateTimerTask+0x88>)
 8006e48:	f7ff f8b4 	bl	8005fb4 <xTaskCreateStatic>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <xTimerCreateTimerTask+0x8c>)
 8006e50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e52:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <xTimerCreateTimerTask+0x8c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	613b      	str	r3, [r7, #16]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e7a:	697b      	ldr	r3, [r7, #20]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20005178 	.word	0x20005178
 8006e88:	08008874 	.word	0x08008874
 8006e8c:	08006fc9 	.word	0x08006fc9
 8006e90:	2000517c 	.word	0x2000517c

08006e94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	623b      	str	r3, [r7, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02a      	beq.n	8006f20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	dc18      	bgt.n	8006f0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006edc:	f7ff feb2 	bl	8006c44 <xTaskGetSchedulerState>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d109      	bne.n	8006efa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f107 0110 	add.w	r1, r7, #16
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef2:	f7fe fc29 	bl	8005748 <xQueueGenericSend>
 8006ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ef8:	e012      	b.n	8006f20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	f107 0110 	add.w	r1, r7, #16
 8006f02:	2300      	movs	r3, #0
 8006f04:	2200      	movs	r2, #0
 8006f06:	f7fe fc1f 	bl	8005748 <xQueueGenericSend>
 8006f0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006f0c:	e008      	b.n	8006f20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <xTimerGenericCommand+0x98>)
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f107 0110 	add.w	r1, r7, #16
 8006f16:	2300      	movs	r3, #0
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	f7fe fd13 	bl	8005944 <xQueueGenericSendFromISR>
 8006f1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3728      	adds	r7, #40	; 0x28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20005178 	.word	0x20005178

08006f30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3a:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <prvProcessExpiredTimer+0x94>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe fa2b 	bl	80053a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d022      	beq.n	8006fa2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	18d1      	adds	r1, r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	6978      	ldr	r0, [r7, #20]
 8006f6a:	f000 f8d1 	bl	8007110 <prvInsertTimerInActiveList>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01f      	beq.n	8006fb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	f7ff ff88 	bl	8006e94 <xTimerGenericCommand>
 8006f84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d113      	bne.n	8006fb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	6978      	ldr	r0, [r7, #20]
 8006fba:	4798      	blx	r3
}
 8006fbc:	bf00      	nop
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20005170 	.word	0x20005170

08006fc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fd0:	f107 0308 	add.w	r3, r7, #8
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f857 	bl	8007088 <prvGetNextExpireTime>
 8006fda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f803 	bl	8006fec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006fe6:	f000 f8d5 	bl	8007194 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fea:	e7f1      	b.n	8006fd0 <prvTimerTask+0x8>

08006fec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ff6:	f7ff fa39 	bl	800646c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f866 	bl	80070d0 <prvSampleTimeNow>
 8007004:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d130      	bne.n	800706e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <prvProcessTimerOrBlockTask+0x3c>
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	429a      	cmp	r2, r3
 8007018:	d806      	bhi.n	8007028 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800701a:	f7ff fa35 	bl	8006488 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff ff85 	bl	8006f30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007026:	e024      	b.n	8007072 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <prvProcessTimerOrBlockTask+0x90>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <prvProcessTimerOrBlockTask+0x50>
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <prvProcessTimerOrBlockTask+0x52>
 800703c:	2300      	movs	r3, #0
 800703e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <prvProcessTimerOrBlockTask+0x94>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	f7fe ff7d 	bl	8005f4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007052:	f7ff fa19 	bl	8006488 <xTaskResumeAll>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <prvProcessTimerOrBlockTask+0x98>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
}
 800706c:	e001      	b.n	8007072 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800706e:	f7ff fa0b 	bl	8006488 <xTaskResumeAll>
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20005174 	.word	0x20005174
 8007080:	20005178 	.word	0x20005178
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <prvGetNextExpireTime+0x44>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <prvGetNextExpireTime+0x16>
 800709a:	2201      	movs	r2, #1
 800709c:	e000      	b.n	80070a0 <prvGetNextExpireTime+0x18>
 800709e:	2200      	movs	r2, #0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <prvGetNextExpireTime+0x44>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e001      	b.n	80070bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20005170 	.word	0x20005170

080070d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070d8:	f7ff fa74 	bl	80065c4 <xTaskGetTickCount>
 80070dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <prvSampleTimeNow+0x3c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d205      	bcs.n	80070f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070e8:	f000 f936 	bl	8007358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	e002      	b.n	80070fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070fa:	4a04      	ldr	r2, [pc, #16]	; (800710c <prvSampleTimeNow+0x3c>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007100:	68fb      	ldr	r3, [r7, #12]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20005180 	.word	0x20005180

08007110 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d812      	bhi.n	800715c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	1ad2      	subs	r2, r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	d302      	bcc.n	800714a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	e01b      	b.n	8007182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <prvInsertTimerInActiveList+0x7c>)
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f7fe f8ec 	bl	8005332 <vListInsert>
 800715a:	e012      	b.n	8007182 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d206      	bcs.n	8007172 <prvInsertTimerInActiveList+0x62>
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800716c:	2301      	movs	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e007      	b.n	8007182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <prvInsertTimerInActiveList+0x80>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3304      	adds	r3, #4
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7fe f8d8 	bl	8005332 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007182:	697b      	ldr	r3, [r7, #20]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20005174 	.word	0x20005174
 8007190:	20005170 	.word	0x20005170

08007194 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	; 0x38
 8007198:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800719a:	e0ca      	b.n	8007332 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da18      	bge.n	80071d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071a2:	1d3b      	adds	r3, r7, #4
 80071a4:	3304      	adds	r3, #4
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61fb      	str	r3, [r7, #28]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ca:	6850      	ldr	r0, [r2, #4]
 80071cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ce:	6892      	ldr	r2, [r2, #8]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f2c0 80aa 	blt.w	8007330 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	3304      	adds	r3, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe f8d9 	bl	80053a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071f2:	463b      	mov	r3, r7
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff ff6b 	bl	80070d0 <prvSampleTimeNow>
 80071fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b09      	cmp	r3, #9
 8007200:	f200 8097 	bhi.w	8007332 <prvProcessReceivedCommands+0x19e>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <prvProcessReceivedCommands+0x78>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007235 	.word	0x08007235
 8007210:	08007235 	.word	0x08007235
 8007214:	08007235 	.word	0x08007235
 8007218:	080072a9 	.word	0x080072a9
 800721c:	080072bd 	.word	0x080072bd
 8007220:	08007307 	.word	0x08007307
 8007224:	08007235 	.word	0x08007235
 8007228:	08007235 	.word	0x08007235
 800722c:	080072a9 	.word	0x080072a9
 8007230:	080072bd 	.word	0x080072bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	18d1      	adds	r1, r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007254:	f7ff ff5c 	bl	8007110 <prvInsertTimerInActiveList>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d069      	beq.n	8007332 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d05e      	beq.n	8007332 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	441a      	add	r2, r3
 800727c:	2300      	movs	r3, #0
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2300      	movs	r3, #0
 8007282:	2100      	movs	r1, #0
 8007284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007286:	f7ff fe05 	bl	8006e94 <xTimerGenericCommand>
 800728a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d14f      	bne.n	8007332 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	61bb      	str	r3, [r7, #24]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80072ba:	e03a      	b.n	8007332 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	617b      	str	r3, [r7, #20]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	18d1      	adds	r1, r2, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007300:	f7ff ff06 	bl	8007110 <prvInsertTimerInActiveList>
					break;
 8007304:	e015      	b.n	8007332 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007316:	f000 fbb3 	bl	8007a80 <vPortFree>
 800731a:	e00a      	b.n	8007332 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800732e:	e000      	b.n	8007332 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007332:	4b08      	ldr	r3, [pc, #32]	; (8007354 <prvProcessReceivedCommands+0x1c0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	1d39      	adds	r1, r7, #4
 8007338:	2200      	movs	r2, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fb9e 	bl	8005a7c <xQueueReceive>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af2a 	bne.w	800719c <prvProcessReceivedCommands+0x8>
	}
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3730      	adds	r7, #48	; 0x30
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20005178 	.word	0x20005178

08007358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800735e:	e048      	b.n	80073f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007360:	4b2d      	ldr	r3, [pc, #180]	; (8007418 <prvSwitchTimerLists+0xc0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736a:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <prvSwitchTimerLists+0xc0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe f813 	bl	80053a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02e      	beq.n	80073f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d90e      	bls.n	80073c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073b2:	4b19      	ldr	r3, [pc, #100]	; (8007418 <prvSwitchTimerLists+0xc0>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fd ffb8 	bl	8005332 <vListInsert>
 80073c2:	e016      	b.n	80073f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073c4:	2300      	movs	r3, #0
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	2100      	movs	r1, #0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fd60 	bl	8006e94 <xTimerGenericCommand>
 80073d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	603b      	str	r3, [r7, #0]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <prvSwitchTimerLists+0xc0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1b1      	bne.n	8007360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <prvSwitchTimerLists+0xc0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <prvSwitchTimerLists+0xc4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a04      	ldr	r2, [pc, #16]	; (8007418 <prvSwitchTimerLists+0xc0>)
 8007408:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800740a:	4a04      	ldr	r2, [pc, #16]	; (800741c <prvSwitchTimerLists+0xc4>)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6013      	str	r3, [r2, #0]
}
 8007410:	bf00      	nop
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20005170 	.word	0x20005170
 800741c:	20005174 	.word	0x20005174

08007420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007426:	f000 f965 	bl	80076f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d120      	bne.n	8007474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007432:	4814      	ldr	r0, [pc, #80]	; (8007484 <prvCheckForValidListAndQueue+0x64>)
 8007434:	f7fd ff2c 	bl	8005290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007438:	4813      	ldr	r0, [pc, #76]	; (8007488 <prvCheckForValidListAndQueue+0x68>)
 800743a:	f7fd ff29 	bl	8005290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <prvCheckForValidListAndQueue+0x6c>)
 8007440:	4a10      	ldr	r2, [pc, #64]	; (8007484 <prvCheckForValidListAndQueue+0x64>)
 8007442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007444:	4b12      	ldr	r3, [pc, #72]	; (8007490 <prvCheckForValidListAndQueue+0x70>)
 8007446:	4a10      	ldr	r2, [pc, #64]	; (8007488 <prvCheckForValidListAndQueue+0x68>)
 8007448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800744a:	2300      	movs	r3, #0
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	4b11      	ldr	r3, [pc, #68]	; (8007494 <prvCheckForValidListAndQueue+0x74>)
 8007450:	4a11      	ldr	r2, [pc, #68]	; (8007498 <prvCheckForValidListAndQueue+0x78>)
 8007452:	2110      	movs	r1, #16
 8007454:	200a      	movs	r0, #10
 8007456:	f7fe f837 	bl	80054c8 <xQueueGenericCreateStatic>
 800745a:	4603      	mov	r3, r0
 800745c:	4a08      	ldr	r2, [pc, #32]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 800745e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <prvCheckForValidListAndQueue+0x60>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	490b      	ldr	r1, [pc, #44]	; (800749c <prvCheckForValidListAndQueue+0x7c>)
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fd18 	bl	8005ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007474:	f000 f96e 	bl	8007754 <vPortExitCritical>
}
 8007478:	bf00      	nop
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20005178 	.word	0x20005178
 8007484:	20005148 	.word	0x20005148
 8007488:	2000515c 	.word	0x2000515c
 800748c:	20005170 	.word	0x20005170
 8007490:	20005174 	.word	0x20005174
 8007494:	20005224 	.word	0x20005224
 8007498:	20005184 	.word	0x20005184
 800749c:	0800887c 	.word	0x0800887c

080074a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3b04      	subs	r3, #4
 80074b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3b04      	subs	r3, #4
 80074be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b04      	subs	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074d0:	4a0c      	ldr	r2, [pc, #48]	; (8007504 <pxPortInitialiseStack+0x64>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3b14      	subs	r3, #20
 80074da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b04      	subs	r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f06f 0202 	mvn.w	r2, #2
 80074ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3b20      	subs	r3, #32
 80074f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	08007509 	.word	0x08007509

08007508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <prvTaskExitError+0x54>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800751a:	d00a      	beq.n	8007532 <prvTaskExitError+0x2a>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	60fb      	str	r3, [r7, #12]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <prvTaskExitError+0x28>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60bb      	str	r3, [r7, #8]
}
 8007544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007546:	bf00      	nop
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0fc      	beq.n	8007548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	20000030 	.word	0x20000030

08007560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <pxCurrentTCBConst2>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	f380 8809 	msr	PSP, r0
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	4770      	bx	lr
 800757c:	f3af 8000 	nop.w

08007580 <pxCurrentTCBConst2>:
 8007580:	20004c48 	.word	0x20004c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <prvPortStartFirstTask+0x24>)
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	6800      	ldr	r0, [r0, #0]
 800758e:	f380 8808 	msr	MSP, r0
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8814 	msr	CONTROL, r0
 800759a:	b662      	cpsie	i
 800759c:	b661      	cpsie	f
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	df00      	svc	0
 80075a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075aa:	bf00      	nop
 80075ac:	e000ed08 	.word	0xe000ed08

080075b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075b6:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <xPortStartScheduler+0x120>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a46      	ldr	r2, [pc, #280]	; (80076d4 <xPortStartScheduler+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10a      	bne.n	80075d6 <xPortStartScheduler+0x26>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	613b      	str	r3, [r7, #16]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075d6:	4b3e      	ldr	r3, [pc, #248]	; (80076d0 <xPortStartScheduler+0x120>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a3f      	ldr	r2, [pc, #252]	; (80076d8 <xPortStartScheduler+0x128>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10a      	bne.n	80075f6 <xPortStartScheduler+0x46>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075f6:	4b39      	ldr	r3, [pc, #228]	; (80076dc <xPortStartScheduler+0x12c>)
 80075f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <xPortStartScheduler+0x130>)
 800761c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <xPortStartScheduler+0x134>)
 8007620:	2207      	movs	r2, #7
 8007622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007624:	e009      	b.n	800763a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007626:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <xPortStartScheduler+0x134>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3b01      	subs	r3, #1
 800762c:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <xPortStartScheduler+0x134>)
 800762e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d0ef      	beq.n	8007626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <xPortStartScheduler+0x134>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1c3 0307 	rsb	r3, r3, #7
 800764e:	2b04      	cmp	r3, #4
 8007650:	d00a      	beq.n	8007668 <xPortStartScheduler+0xb8>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007668:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <xPortStartScheduler+0x134>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	4a1d      	ldr	r2, [pc, #116]	; (80076e4 <xPortStartScheduler+0x134>)
 8007670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007672:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <xPortStartScheduler+0x134>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <xPortStartScheduler+0x134>)
 800767c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007686:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <xPortStartScheduler+0x138>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <xPortStartScheduler+0x138>)
 800768c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <xPortStartScheduler+0x138>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <xPortStartScheduler+0x138>)
 8007698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800769c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800769e:	f000 f8dd 	bl	800785c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <xPortStartScheduler+0x13c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076a8:	f000 f8fc 	bl	80078a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076ac:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <xPortStartScheduler+0x140>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <xPortStartScheduler+0x140>)
 80076b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076b8:	f7ff ff66 	bl	8007588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076bc:	f7ff f84c 	bl	8006758 <vTaskSwitchContext>
	prvTaskExitError();
 80076c0:	f7ff ff22 	bl	8007508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	e000ed00 	.word	0xe000ed00
 80076d4:	410fc271 	.word	0x410fc271
 80076d8:	410fc270 	.word	0x410fc270
 80076dc:	e000e400 	.word	0xe000e400
 80076e0:	20005274 	.word	0x20005274
 80076e4:	20005278 	.word	0x20005278
 80076e8:	e000ed20 	.word	0xe000ed20
 80076ec:	20000030 	.word	0x20000030
 80076f0:	e000ef34 	.word	0xe000ef34

080076f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	607b      	str	r3, [r7, #4]
}
 800770c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <vPortEnterCritical+0x58>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a0d      	ldr	r2, [pc, #52]	; (800774c <vPortEnterCritical+0x58>)
 8007716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <vPortEnterCritical+0x58>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10f      	bne.n	8007740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <vPortEnterCritical+0x5c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <vPortEnterCritical+0x4c>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	603b      	str	r3, [r7, #0]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vPortEnterCritical+0x4a>
	}
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	20000030 	.word	0x20000030
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <vPortExitCritical+0x50>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <vPortExitCritical+0x24>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	607b      	str	r3, [r7, #4]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <vPortExitCritical+0x50>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3b01      	subs	r3, #1
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <vPortExitCritical+0x50>)
 8007780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007782:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <vPortExitCritical+0x50>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d105      	bne.n	8007796 <vPortExitCritical+0x42>
 800778a:	2300      	movs	r3, #0
 800778c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f383 8811 	msr	BASEPRI, r3
}
 8007794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000030 	.word	0x20000030
	...

080077b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077b0:	f3ef 8009 	mrs	r0, PSP
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4b15      	ldr	r3, [pc, #84]	; (8007810 <pxCurrentTCBConst>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f01e 0f10 	tst.w	lr, #16
 80077c0:	bf08      	it	eq
 80077c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077d4:	f380 8811 	msr	BASEPRI, r0
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f7fe ffba 	bl	8006758 <vTaskSwitchContext>
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f380 8811 	msr	BASEPRI, r0
 80077ec:	bc09      	pop	{r0, r3}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f01e 0f10 	tst.w	lr, #16
 80077fa:	bf08      	it	eq
 80077fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007800:	f380 8809 	msr	PSP, r0
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst>:
 8007810:	20004c48 	.word	0x20004c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7fe fed7 	bl	80065e4 <xTaskIncrementTick>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <xPortSysTickHandler+0x40>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <vPortSetupTimerInterrupt+0x38>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <vPortSetupTimerInterrupt+0x3c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <vPortSetupTimerInterrupt+0x40>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <vPortSetupTimerInterrupt+0x44>)
 800787a:	3b01      	subs	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000e010 	.word	0xe000e010
 8007894:	e000e018 	.word	0xe000e018
 8007898:	20000014 	.word	0x20000014
 800789c:	10624dd3 	.word	0x10624dd3
 80078a0:	e000e014 	.word	0xe000e014

080078a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078b4 <vPortEnableVFP+0x10>
 80078a8:	6801      	ldr	r1, [r0, #0]
 80078aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078ae:	6001      	str	r1, [r0, #0]
 80078b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078b2:	bf00      	nop
 80078b4:	e000ed88 	.word	0xe000ed88

080078b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078be:	f3ef 8305 	mrs	r3, IPSR
 80078c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b0f      	cmp	r3, #15
 80078c8:	d914      	bls.n	80078f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ca:	4a17      	ldr	r2, [pc, #92]	; (8007928 <vPortValidateInterruptPriority+0x70>)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078d4:	4b15      	ldr	r3, [pc, #84]	; (800792c <vPortValidateInterruptPriority+0x74>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	7afa      	ldrb	r2, [r7, #11]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d20a      	bcs.n	80078f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	607b      	str	r3, [r7, #4]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <vPortValidateInterruptPriority+0x78>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <vPortValidateInterruptPriority+0x7c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d90a      	bls.n	800791a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	603b      	str	r3, [r7, #0]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <vPortValidateInterruptPriority+0x60>
	}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	e000e3f0 	.word	0xe000e3f0
 800792c:	20005274 	.word	0x20005274
 8007930:	e000ed0c 	.word	0xe000ed0c
 8007934:	20005278 	.word	0x20005278

08007938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8007944:	4b48      	ldr	r3, [pc, #288]	; (8007a68 <pvPortMalloc+0x130>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <pvPortMalloc+0x2a>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60fb      	str	r3, [r7, #12]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8007962:	f7fe fd83 	bl	800646c <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007966:	4b41      	ldr	r3, [pc, #260]	; (8007a6c <pvPortMalloc+0x134>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4013      	ands	r3, r2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d172      	bne.n	8007a58 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00d      	beq.n	8007994 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8007978:	2208      	movs	r2, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f023 0307 	bic.w	r3, r3, #7
 8007990:	3308      	adds	r3, #8
 8007992:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d05e      	beq.n	8007a58 <pvPortMalloc+0x120>
 800799a:	4b35      	ldr	r3, [pc, #212]	; (8007a70 <pvPortMalloc+0x138>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d859      	bhi.n	8007a58 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079a4:	4b33      	ldr	r3, [pc, #204]	; (8007a74 <pvPortMalloc+0x13c>)
 80079a6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 80079a8:	4b32      	ldr	r3, [pc, #200]	; (8007a74 <pvPortMalloc+0x13c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ae:	e004      	b.n	80079ba <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d903      	bls.n	80079cc <pvPortMalloc+0x94>
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f1      	bne.n	80079b0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079cc:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <pvPortMalloc+0x130>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d040      	beq.n	8007a58 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2208      	movs	r2, #8
 80079dc:	4413      	add	r3, r2
 80079de:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	2308      	movs	r3, #8
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d90f      	bls.n	8007a18 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8007a12:	6938      	ldr	r0, [r7, #16]
 8007a14:	f000 f8a2 	bl	8007b5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a18:	4b15      	ldr	r3, [pc, #84]	; (8007a70 <pvPortMalloc+0x138>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	4a13      	ldr	r2, [pc, #76]	; (8007a70 <pvPortMalloc+0x138>)
 8007a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a26:	4b12      	ldr	r3, [pc, #72]	; (8007a70 <pvPortMalloc+0x138>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <pvPortMalloc+0x140>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <pvPortMalloc+0x138>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a10      	ldr	r2, [pc, #64]	; (8007a78 <pvPortMalloc+0x140>)
 8007a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <pvPortMalloc+0x134>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <pvPortMalloc+0x144>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <pvPortMalloc+0x144>)
 8007a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a58:	f7fe fd16 	bl	8006488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8007a5c:	697b      	ldr	r3, [r7, #20]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20005284 	.word	0x20005284
 8007a6c:	20005298 	.word	0x20005298
 8007a70:	20005288 	.word	0x20005288
 8007a74:	2000527c 	.word	0x2000527c
 8007a78:	2000528c 	.word	0x2000528c
 8007a7c:	20005290 	.word	0x20005290

08007a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04d      	beq.n	8007b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a92:	2308      	movs	r3, #8
 8007a94:	425b      	negs	r3, r3
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <vPortFree+0xb8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <vPortFree+0x44>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60fb      	str	r3, [r7, #12]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <vPortFree+0x62>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60bb      	str	r3, [r7, #8]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <vPortFree+0xb8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01e      	beq.n	8007b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11a      	bne.n	8007b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <vPortFree+0xb8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	401a      	ands	r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b08:	f7fe fcb0 	bl	800646c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <vPortFree+0xbc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4413      	add	r3, r2
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <vPortFree+0xbc>)
 8007b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b1a:	6938      	ldr	r0, [r7, #16]
 8007b1c:	f000 f81e 	bl	8007b5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <vPortFree+0xc0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <vPortFree+0xc0>)
 8007b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b2a:	f7fe fcad 	bl	8006488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b2e:	bf00      	nop
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20005298 	.word	0x20005298
 8007b3c:	20005288 	.word	0x20005288
 8007b40:	20005294 	.word	0x20005294

08007b44 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8007b48:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <xPortGetFreeHeapSize+0x14>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20005288 	.word	0x20005288

08007b5c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b64:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <prvInsertBlockIntoFreeList+0xac>)
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e002      	b.n	8007b70 <prvInsertBlockIntoFreeList+0x14>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d8f7      	bhi.n	8007b6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4413      	add	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d108      	bne.n	8007b9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	441a      	add	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d118      	bne.n	8007be4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <prvInsertBlockIntoFreeList+0xb0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d00d      	beq.n	8007bda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	441a      	add	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e008      	b.n	8007bec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <prvInsertBlockIntoFreeList+0xb0>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e003      	b.n	8007bec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d002      	beq.n	8007bfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	2000527c 	.word	0x2000527c
 8007c0c:	20005284 	.word	0x20005284

08007c10 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b08f      	sub	sp, #60	; 0x3c
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8007c24:	4b5a      	ldr	r3, [pc, #360]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <vPortDefineHeapRegions+0x32>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	617b      	str	r3, [r7, #20]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8007c4c:	e07d      	b.n	8007d4a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00e      	beq.n	8007c82 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	3307      	adds	r3, #7
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c7e:	4413      	add	r3, r2
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4a41      	ldr	r2, [pc, #260]	; (8007d94 <vPortDefineHeapRegions+0x184>)
 8007c90:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8007c92:	4b40      	ldr	r3, [pc, #256]	; (8007d94 <vPortDefineHeapRegions+0x184>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	605a      	str	r2, [r3, #4]
 8007c98:	e01f      	b.n	8007cda <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8007c9a:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	613b      	str	r3, [r7, #16]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8007cb8:	4b35      	ldr	r3, [pc, #212]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d80a      	bhi.n	8007cda <vPortDefineHeapRegions+0xca>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	60fb      	str	r3, [r7, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8007cda:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce4:	4413      	add	r3, r2
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8007ce8:	2208      	movs	r2, #8
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	f023 0307 	bic.w	r3, r3, #7
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	4a25      	ldr	r2, [pc, #148]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007cfc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8007d06:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8007d1c:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <vPortDefineHeapRegions+0x180>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	6a3a      	ldr	r2, [r7, #32]
 8007d2e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d36:	4413      	add	r3, r2
 8007d38:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	4413      	add	r3, r2
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f af7d 	bne.w	8007c4e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8007d54:	4a10      	ldr	r2, [pc, #64]	; (8007d98 <vPortDefineHeapRegions+0x188>)
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8007d5a:	4a10      	ldr	r2, [pc, #64]	; (8007d9c <vPortDefineHeapRegions+0x18c>)
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	60bb      	str	r3, [r7, #8]
}
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <vPortDefineHeapRegions+0x190>)
 8007d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	373c      	adds	r7, #60	; 0x3c
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20005284 	.word	0x20005284
 8007d94:	2000527c 	.word	0x2000527c
 8007d98:	2000528c 	.word	0x2000528c
 8007d9c:	20005288 	.word	0x20005288
 8007da0:	20005298 	.word	0x20005298

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	; (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000034 	.word	0x20000034

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4d0d      	ldr	r5, [pc, #52]	; (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	; (8007dec <__libc_init_array+0x3c>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4d0b      	ldr	r5, [pc, #44]	; (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	; (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f000 fd0a 	bl	80087dc <_init>
 8007dc8:	1b64      	subs	r4, r4, r5
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2600      	movs	r6, #0
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd8:	4798      	blx	r3
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de2:	4798      	blx	r3
 8007de4:	3601      	adds	r6, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	08008980 	.word	0x08008980
 8007dec:	08008980 	.word	0x08008980
 8007df0:	08008980 	.word	0x08008980
 8007df4:	08008984 	.word	0x08008984

08007df8 <__retarget_lock_acquire_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <__retarget_lock_release_recursive>:
 8007dfa:	4770      	bx	lr

08007dfc <memcpy>:
 8007dfc:	440a      	add	r2, r1
 8007dfe:	4291      	cmp	r1, r2
 8007e00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e04:	d100      	bne.n	8007e08 <memcpy+0xc>
 8007e06:	4770      	bx	lr
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e12:	4291      	cmp	r1, r2
 8007e14:	d1f9      	bne.n	8007e0a <memcpy+0xe>
 8007e16:	bd10      	pop	{r4, pc}

08007e18 <memset>:
 8007e18:	4402      	add	r2, r0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <_malloc_r>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	1ccd      	adds	r5, r1, #3
 8007e2c:	f025 0503 	bic.w	r5, r5, #3
 8007e30:	3508      	adds	r5, #8
 8007e32:	2d0c      	cmp	r5, #12
 8007e34:	bf38      	it	cc
 8007e36:	250c      	movcc	r5, #12
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	db01      	blt.n	8007e42 <_malloc_r+0x1a>
 8007e3e:	42a9      	cmp	r1, r5
 8007e40:	d903      	bls.n	8007e4a <_malloc_r+0x22>
 8007e42:	230c      	movs	r3, #12
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	2000      	movs	r0, #0
 8007e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e4a:	f000 f933 	bl	80080b4 <__malloc_lock>
 8007e4e:	4921      	ldr	r1, [pc, #132]	; (8007ed4 <_malloc_r+0xac>)
 8007e50:	680a      	ldr	r2, [r1, #0]
 8007e52:	4614      	mov	r4, r2
 8007e54:	b99c      	cbnz	r4, 8007e7e <_malloc_r+0x56>
 8007e56:	4f20      	ldr	r7, [pc, #128]	; (8007ed8 <_malloc_r+0xb0>)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	b923      	cbnz	r3, 8007e66 <_malloc_r+0x3e>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f8a6 	bl	8007fb0 <_sbrk_r>
 8007e64:	6038      	str	r0, [r7, #0]
 8007e66:	4629      	mov	r1, r5
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f8a1 	bl	8007fb0 <_sbrk_r>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d123      	bne.n	8007eba <_malloc_r+0x92>
 8007e72:	230c      	movs	r3, #12
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 f922 	bl	80080c0 <__malloc_unlock>
 8007e7c:	e7e3      	b.n	8007e46 <_malloc_r+0x1e>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	1b5b      	subs	r3, r3, r5
 8007e82:	d417      	bmi.n	8007eb4 <_malloc_r+0x8c>
 8007e84:	2b0b      	cmp	r3, #11
 8007e86:	d903      	bls.n	8007e90 <_malloc_r+0x68>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	441c      	add	r4, r3
 8007e8c:	6025      	str	r5, [r4, #0]
 8007e8e:	e004      	b.n	8007e9a <_malloc_r+0x72>
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	42a2      	cmp	r2, r4
 8007e94:	bf0c      	ite	eq
 8007e96:	600b      	streq	r3, [r1, #0]
 8007e98:	6053      	strne	r3, [r2, #4]
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f000 f910 	bl	80080c0 <__malloc_unlock>
 8007ea0:	f104 000b 	add.w	r0, r4, #11
 8007ea4:	1d23      	adds	r3, r4, #4
 8007ea6:	f020 0007 	bic.w	r0, r0, #7
 8007eaa:	1ac2      	subs	r2, r0, r3
 8007eac:	d0cc      	beq.n	8007e48 <_malloc_r+0x20>
 8007eae:	1a1b      	subs	r3, r3, r0
 8007eb0:	50a3      	str	r3, [r4, r2]
 8007eb2:	e7c9      	b.n	8007e48 <_malloc_r+0x20>
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	6864      	ldr	r4, [r4, #4]
 8007eb8:	e7cc      	b.n	8007e54 <_malloc_r+0x2c>
 8007eba:	1cc4      	adds	r4, r0, #3
 8007ebc:	f024 0403 	bic.w	r4, r4, #3
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d0e3      	beq.n	8007e8c <_malloc_r+0x64>
 8007ec4:	1a21      	subs	r1, r4, r0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 f872 	bl	8007fb0 <_sbrk_r>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1dd      	bne.n	8007e8c <_malloc_r+0x64>
 8007ed0:	e7cf      	b.n	8007e72 <_malloc_r+0x4a>
 8007ed2:	bf00      	nop
 8007ed4:	2000529c 	.word	0x2000529c
 8007ed8:	200052a0 	.word	0x200052a0

08007edc <cleanup_glue>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	6809      	ldr	r1, [r1, #0]
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	b109      	cbz	r1, 8007eea <cleanup_glue+0xe>
 8007ee6:	f7ff fff9 	bl	8007edc <cleanup_glue>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef2:	f000 b8eb 	b.w	80080cc <_free_r>
	...

08007ef8 <_reclaim_reent>:
 8007ef8:	4b2c      	ldr	r3, [pc, #176]	; (8007fac <_reclaim_reent+0xb4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4283      	cmp	r3, r0
 8007efe:	b570      	push	{r4, r5, r6, lr}
 8007f00:	4604      	mov	r4, r0
 8007f02:	d051      	beq.n	8007fa8 <_reclaim_reent+0xb0>
 8007f04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f06:	b143      	cbz	r3, 8007f1a <_reclaim_reent+0x22>
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d14a      	bne.n	8007fa4 <_reclaim_reent+0xac>
 8007f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f10:	6819      	ldr	r1, [r3, #0]
 8007f12:	b111      	cbz	r1, 8007f1a <_reclaim_reent+0x22>
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 f8d9 	bl	80080cc <_free_r>
 8007f1a:	6961      	ldr	r1, [r4, #20]
 8007f1c:	b111      	cbz	r1, 8007f24 <_reclaim_reent+0x2c>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 f8d4 	bl	80080cc <_free_r>
 8007f24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f26:	b111      	cbz	r1, 8007f2e <_reclaim_reent+0x36>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 f8cf 	bl	80080cc <_free_r>
 8007f2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f30:	b111      	cbz	r1, 8007f38 <_reclaim_reent+0x40>
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f8ca 	bl	80080cc <_free_r>
 8007f38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f3a:	b111      	cbz	r1, 8007f42 <_reclaim_reent+0x4a>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 f8c5 	bl	80080cc <_free_r>
 8007f42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f44:	b111      	cbz	r1, 8007f4c <_reclaim_reent+0x54>
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 f8c0 	bl	80080cc <_free_r>
 8007f4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f4e:	b111      	cbz	r1, 8007f56 <_reclaim_reent+0x5e>
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 f8bb 	bl	80080cc <_free_r>
 8007f56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f58:	b111      	cbz	r1, 8007f60 <_reclaim_reent+0x68>
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f8b6 	bl	80080cc <_free_r>
 8007f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f62:	b111      	cbz	r1, 8007f6a <_reclaim_reent+0x72>
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 f8b1 	bl	80080cc <_free_r>
 8007f6a:	69a3      	ldr	r3, [r4, #24]
 8007f6c:	b1e3      	cbz	r3, 8007fa8 <_reclaim_reent+0xb0>
 8007f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f70:	4620      	mov	r0, r4
 8007f72:	4798      	blx	r3
 8007f74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f76:	b1b9      	cbz	r1, 8007fa8 <_reclaim_reent+0xb0>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f7e:	f7ff bfad 	b.w	8007edc <cleanup_glue>
 8007f82:	5949      	ldr	r1, [r1, r5]
 8007f84:	b941      	cbnz	r1, 8007f98 <_reclaim_reent+0xa0>
 8007f86:	3504      	adds	r5, #4
 8007f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f8a:	2d80      	cmp	r5, #128	; 0x80
 8007f8c:	68d9      	ldr	r1, [r3, #12]
 8007f8e:	d1f8      	bne.n	8007f82 <_reclaim_reent+0x8a>
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 f89b 	bl	80080cc <_free_r>
 8007f96:	e7ba      	b.n	8007f0e <_reclaim_reent+0x16>
 8007f98:	680e      	ldr	r6, [r1, #0]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f896 	bl	80080cc <_free_r>
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	e7ef      	b.n	8007f84 <_reclaim_reent+0x8c>
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	e7ef      	b.n	8007f88 <_reclaim_reent+0x90>
 8007fa8:	bd70      	pop	{r4, r5, r6, pc}
 8007faa:	bf00      	nop
 8007fac:	20000034 	.word	0x20000034

08007fb0 <_sbrk_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	; (8007fcc <_sbrk_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7f9 f980 	bl	80012c0 <_sbrk>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_sbrk_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_sbrk_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	20005494 	.word	0x20005494

08007fd0 <siprintf>:
 8007fd0:	b40e      	push	{r1, r2, r3}
 8007fd2:	b500      	push	{lr}
 8007fd4:	b09c      	sub	sp, #112	; 0x70
 8007fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fd8:	9002      	str	r0, [sp, #8]
 8007fda:	9006      	str	r0, [sp, #24]
 8007fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fe0:	4809      	ldr	r0, [pc, #36]	; (8008008 <siprintf+0x38>)
 8007fe2:	9107      	str	r1, [sp, #28]
 8007fe4:	9104      	str	r1, [sp, #16]
 8007fe6:	4909      	ldr	r1, [pc, #36]	; (800800c <siprintf+0x3c>)
 8007fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fec:	9105      	str	r1, [sp, #20]
 8007fee:	6800      	ldr	r0, [r0, #0]
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	a902      	add	r1, sp, #8
 8007ff4:	f000 f916 	bl	8008224 <_svfiprintf_r>
 8007ff8:	9b02      	ldr	r3, [sp, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	b01c      	add	sp, #112	; 0x70
 8008000:	f85d eb04 	ldr.w	lr, [sp], #4
 8008004:	b003      	add	sp, #12
 8008006:	4770      	bx	lr
 8008008:	20000034 	.word	0x20000034
 800800c:	ffff0208 	.word	0xffff0208

08008010 <strstr>:
 8008010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008012:	780c      	ldrb	r4, [r1, #0]
 8008014:	b164      	cbz	r4, 8008030 <strstr+0x20>
 8008016:	4603      	mov	r3, r0
 8008018:	781a      	ldrb	r2, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	1c5e      	adds	r6, r3, #1
 800801e:	b90a      	cbnz	r2, 8008024 <strstr+0x14>
 8008020:	4610      	mov	r0, r2
 8008022:	e005      	b.n	8008030 <strstr+0x20>
 8008024:	4294      	cmp	r4, r2
 8008026:	d108      	bne.n	800803a <strstr+0x2a>
 8008028:	460d      	mov	r5, r1
 800802a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800802e:	b902      	cbnz	r2, 8008032 <strstr+0x22>
 8008030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008032:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008036:	4297      	cmp	r7, r2
 8008038:	d0f7      	beq.n	800802a <strstr+0x1a>
 800803a:	4633      	mov	r3, r6
 800803c:	e7ec      	b.n	8008018 <strstr+0x8>

0800803e <_vsniprintf_r>:
 800803e:	b530      	push	{r4, r5, lr}
 8008040:	1e14      	subs	r4, r2, #0
 8008042:	4605      	mov	r5, r0
 8008044:	b09b      	sub	sp, #108	; 0x6c
 8008046:	4618      	mov	r0, r3
 8008048:	da05      	bge.n	8008056 <_vsniprintf_r+0x18>
 800804a:	238b      	movs	r3, #139	; 0x8b
 800804c:	602b      	str	r3, [r5, #0]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008052:	b01b      	add	sp, #108	; 0x6c
 8008054:	bd30      	pop	{r4, r5, pc}
 8008056:	f44f 7302 	mov.w	r3, #520	; 0x208
 800805a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800805e:	bf14      	ite	ne
 8008060:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008064:	4623      	moveq	r3, r4
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800806e:	9100      	str	r1, [sp, #0]
 8008070:	9104      	str	r1, [sp, #16]
 8008072:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008076:	4602      	mov	r2, r0
 8008078:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800807a:	4669      	mov	r1, sp
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f8d1 	bl	8008224 <_svfiprintf_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	bfbc      	itt	lt
 8008086:	238b      	movlt	r3, #139	; 0x8b
 8008088:	602b      	strlt	r3, [r5, #0]
 800808a:	2c00      	cmp	r4, #0
 800808c:	d0e1      	beq.n	8008052 <_vsniprintf_r+0x14>
 800808e:	9b00      	ldr	r3, [sp, #0]
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e7dd      	b.n	8008052 <_vsniprintf_r+0x14>
	...

08008098 <vsniprintf>:
 8008098:	b507      	push	{r0, r1, r2, lr}
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	460a      	mov	r2, r1
 80080a0:	4601      	mov	r1, r0
 80080a2:	4803      	ldr	r0, [pc, #12]	; (80080b0 <vsniprintf+0x18>)
 80080a4:	6800      	ldr	r0, [r0, #0]
 80080a6:	f7ff ffca 	bl	800803e <_vsniprintf_r>
 80080aa:	b003      	add	sp, #12
 80080ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80080b0:	20000034 	.word	0x20000034

080080b4 <__malloc_lock>:
 80080b4:	4801      	ldr	r0, [pc, #4]	; (80080bc <__malloc_lock+0x8>)
 80080b6:	f7ff be9f 	b.w	8007df8 <__retarget_lock_acquire_recursive>
 80080ba:	bf00      	nop
 80080bc:	2000548c 	.word	0x2000548c

080080c0 <__malloc_unlock>:
 80080c0:	4801      	ldr	r0, [pc, #4]	; (80080c8 <__malloc_unlock+0x8>)
 80080c2:	f7ff be9a 	b.w	8007dfa <__retarget_lock_release_recursive>
 80080c6:	bf00      	nop
 80080c8:	2000548c 	.word	0x2000548c

080080cc <_free_r>:
 80080cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d048      	beq.n	8008164 <_free_r+0x98>
 80080d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d6:	9001      	str	r0, [sp, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f1a1 0404 	sub.w	r4, r1, #4
 80080de:	bfb8      	it	lt
 80080e0:	18e4      	addlt	r4, r4, r3
 80080e2:	f7ff ffe7 	bl	80080b4 <__malloc_lock>
 80080e6:	4a20      	ldr	r2, [pc, #128]	; (8008168 <_free_r+0x9c>)
 80080e8:	9801      	ldr	r0, [sp, #4]
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	4615      	mov	r5, r2
 80080ee:	b933      	cbnz	r3, 80080fe <_free_r+0x32>
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	6014      	str	r4, [r2, #0]
 80080f4:	b003      	add	sp, #12
 80080f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080fa:	f7ff bfe1 	b.w	80080c0 <__malloc_unlock>
 80080fe:	42a3      	cmp	r3, r4
 8008100:	d90b      	bls.n	800811a <_free_r+0x4e>
 8008102:	6821      	ldr	r1, [r4, #0]
 8008104:	1862      	adds	r2, r4, r1
 8008106:	4293      	cmp	r3, r2
 8008108:	bf04      	itt	eq
 800810a:	681a      	ldreq	r2, [r3, #0]
 800810c:	685b      	ldreq	r3, [r3, #4]
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	bf04      	itt	eq
 8008112:	1852      	addeq	r2, r2, r1
 8008114:	6022      	streq	r2, [r4, #0]
 8008116:	602c      	str	r4, [r5, #0]
 8008118:	e7ec      	b.n	80080f4 <_free_r+0x28>
 800811a:	461a      	mov	r2, r3
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b10b      	cbz	r3, 8008124 <_free_r+0x58>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d9fa      	bls.n	800811a <_free_r+0x4e>
 8008124:	6811      	ldr	r1, [r2, #0]
 8008126:	1855      	adds	r5, r2, r1
 8008128:	42a5      	cmp	r5, r4
 800812a:	d10b      	bne.n	8008144 <_free_r+0x78>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	4421      	add	r1, r4
 8008130:	1854      	adds	r4, r2, r1
 8008132:	42a3      	cmp	r3, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	d1dd      	bne.n	80080f4 <_free_r+0x28>
 8008138:	681c      	ldr	r4, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	4421      	add	r1, r4
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	e7d7      	b.n	80080f4 <_free_r+0x28>
 8008144:	d902      	bls.n	800814c <_free_r+0x80>
 8008146:	230c      	movs	r3, #12
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	e7d3      	b.n	80080f4 <_free_r+0x28>
 800814c:	6825      	ldr	r5, [r4, #0]
 800814e:	1961      	adds	r1, r4, r5
 8008150:	428b      	cmp	r3, r1
 8008152:	bf04      	itt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	bf04      	itt	eq
 800815c:	1949      	addeq	r1, r1, r5
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	6054      	str	r4, [r2, #4]
 8008162:	e7c7      	b.n	80080f4 <_free_r+0x28>
 8008164:	b003      	add	sp, #12
 8008166:	bd30      	pop	{r4, r5, pc}
 8008168:	2000529c 	.word	0x2000529c

0800816c <__ssputs_r>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	688e      	ldr	r6, [r1, #8]
 8008172:	429e      	cmp	r6, r3
 8008174:	4682      	mov	sl, r0
 8008176:	460c      	mov	r4, r1
 8008178:	4690      	mov	r8, r2
 800817a:	461f      	mov	r7, r3
 800817c:	d838      	bhi.n	80081f0 <__ssputs_r+0x84>
 800817e:	898a      	ldrh	r2, [r1, #12]
 8008180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008184:	d032      	beq.n	80081ec <__ssputs_r+0x80>
 8008186:	6825      	ldr	r5, [r4, #0]
 8008188:	6909      	ldr	r1, [r1, #16]
 800818a:	eba5 0901 	sub.w	r9, r5, r1
 800818e:	6965      	ldr	r5, [r4, #20]
 8008190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008198:	3301      	adds	r3, #1
 800819a:	444b      	add	r3, r9
 800819c:	106d      	asrs	r5, r5, #1
 800819e:	429d      	cmp	r5, r3
 80081a0:	bf38      	it	cc
 80081a2:	461d      	movcc	r5, r3
 80081a4:	0553      	lsls	r3, r2, #21
 80081a6:	d531      	bpl.n	800820c <__ssputs_r+0xa0>
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7ff fe3d 	bl	8007e28 <_malloc_r>
 80081ae:	4606      	mov	r6, r0
 80081b0:	b950      	cbnz	r0, 80081c8 <__ssputs_r+0x5c>
 80081b2:	230c      	movs	r3, #12
 80081b4:	f8ca 3000 	str.w	r3, [sl]
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c8:	6921      	ldr	r1, [r4, #16]
 80081ca:	464a      	mov	r2, r9
 80081cc:	f7ff fe16 	bl	8007dfc <memcpy>
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	6126      	str	r6, [r4, #16]
 80081de:	6165      	str	r5, [r4, #20]
 80081e0:	444e      	add	r6, r9
 80081e2:	eba5 0509 	sub.w	r5, r5, r9
 80081e6:	6026      	str	r6, [r4, #0]
 80081e8:	60a5      	str	r5, [r4, #8]
 80081ea:	463e      	mov	r6, r7
 80081ec:	42be      	cmp	r6, r7
 80081ee:	d900      	bls.n	80081f2 <__ssputs_r+0x86>
 80081f0:	463e      	mov	r6, r7
 80081f2:	4632      	mov	r2, r6
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	4641      	mov	r1, r8
 80081f8:	f000 faa8 	bl	800874c <memmove>
 80081fc:	68a3      	ldr	r3, [r4, #8]
 80081fe:	6822      	ldr	r2, [r4, #0]
 8008200:	1b9b      	subs	r3, r3, r6
 8008202:	4432      	add	r2, r6
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	2000      	movs	r0, #0
 800820a:	e7db      	b.n	80081c4 <__ssputs_r+0x58>
 800820c:	462a      	mov	r2, r5
 800820e:	f000 fab7 	bl	8008780 <_realloc_r>
 8008212:	4606      	mov	r6, r0
 8008214:	2800      	cmp	r0, #0
 8008216:	d1e1      	bne.n	80081dc <__ssputs_r+0x70>
 8008218:	6921      	ldr	r1, [r4, #16]
 800821a:	4650      	mov	r0, sl
 800821c:	f7ff ff56 	bl	80080cc <_free_r>
 8008220:	e7c7      	b.n	80081b2 <__ssputs_r+0x46>
	...

08008224 <_svfiprintf_r>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	4698      	mov	r8, r3
 800822a:	898b      	ldrh	r3, [r1, #12]
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	b09d      	sub	sp, #116	; 0x74
 8008230:	4607      	mov	r7, r0
 8008232:	460d      	mov	r5, r1
 8008234:	4614      	mov	r4, r2
 8008236:	d50e      	bpl.n	8008256 <_svfiprintf_r+0x32>
 8008238:	690b      	ldr	r3, [r1, #16]
 800823a:	b963      	cbnz	r3, 8008256 <_svfiprintf_r+0x32>
 800823c:	2140      	movs	r1, #64	; 0x40
 800823e:	f7ff fdf3 	bl	8007e28 <_malloc_r>
 8008242:	6028      	str	r0, [r5, #0]
 8008244:	6128      	str	r0, [r5, #16]
 8008246:	b920      	cbnz	r0, 8008252 <_svfiprintf_r+0x2e>
 8008248:	230c      	movs	r3, #12
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008250:	e0d1      	b.n	80083f6 <_svfiprintf_r+0x1d2>
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	616b      	str	r3, [r5, #20]
 8008256:	2300      	movs	r3, #0
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	2320      	movs	r3, #32
 800825c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008260:	f8cd 800c 	str.w	r8, [sp, #12]
 8008264:	2330      	movs	r3, #48	; 0x30
 8008266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008410 <_svfiprintf_r+0x1ec>
 800826a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826e:	f04f 0901 	mov.w	r9, #1
 8008272:	4623      	mov	r3, r4
 8008274:	469a      	mov	sl, r3
 8008276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800827a:	b10a      	cbz	r2, 8008280 <_svfiprintf_r+0x5c>
 800827c:	2a25      	cmp	r2, #37	; 0x25
 800827e:	d1f9      	bne.n	8008274 <_svfiprintf_r+0x50>
 8008280:	ebba 0b04 	subs.w	fp, sl, r4
 8008284:	d00b      	beq.n	800829e <_svfiprintf_r+0x7a>
 8008286:	465b      	mov	r3, fp
 8008288:	4622      	mov	r2, r4
 800828a:	4629      	mov	r1, r5
 800828c:	4638      	mov	r0, r7
 800828e:	f7ff ff6d 	bl	800816c <__ssputs_r>
 8008292:	3001      	adds	r0, #1
 8008294:	f000 80aa 	beq.w	80083ec <_svfiprintf_r+0x1c8>
 8008298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829a:	445a      	add	r2, fp
 800829c:	9209      	str	r2, [sp, #36]	; 0x24
 800829e:	f89a 3000 	ldrb.w	r3, [sl]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80a2 	beq.w	80083ec <_svfiprintf_r+0x1c8>
 80082a8:	2300      	movs	r3, #0
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b2:	f10a 0a01 	add.w	sl, sl, #1
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082be:	931a      	str	r3, [sp, #104]	; 0x68
 80082c0:	4654      	mov	r4, sl
 80082c2:	2205      	movs	r2, #5
 80082c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c8:	4851      	ldr	r0, [pc, #324]	; (8008410 <_svfiprintf_r+0x1ec>)
 80082ca:	f7f7 ff89 	bl	80001e0 <memchr>
 80082ce:	9a04      	ldr	r2, [sp, #16]
 80082d0:	b9d8      	cbnz	r0, 800830a <_svfiprintf_r+0xe6>
 80082d2:	06d0      	lsls	r0, r2, #27
 80082d4:	bf44      	itt	mi
 80082d6:	2320      	movmi	r3, #32
 80082d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082dc:	0711      	lsls	r1, r2, #28
 80082de:	bf44      	itt	mi
 80082e0:	232b      	movmi	r3, #43	; 0x2b
 80082e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ea:	2b2a      	cmp	r3, #42	; 0x2a
 80082ec:	d015      	beq.n	800831a <_svfiprintf_r+0xf6>
 80082ee:	9a07      	ldr	r2, [sp, #28]
 80082f0:	4654      	mov	r4, sl
 80082f2:	2000      	movs	r0, #0
 80082f4:	f04f 0c0a 	mov.w	ip, #10
 80082f8:	4621      	mov	r1, r4
 80082fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fe:	3b30      	subs	r3, #48	; 0x30
 8008300:	2b09      	cmp	r3, #9
 8008302:	d94e      	bls.n	80083a2 <_svfiprintf_r+0x17e>
 8008304:	b1b0      	cbz	r0, 8008334 <_svfiprintf_r+0x110>
 8008306:	9207      	str	r2, [sp, #28]
 8008308:	e014      	b.n	8008334 <_svfiprintf_r+0x110>
 800830a:	eba0 0308 	sub.w	r3, r0, r8
 800830e:	fa09 f303 	lsl.w	r3, r9, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	46a2      	mov	sl, r4
 8008318:	e7d2      	b.n	80082c0 <_svfiprintf_r+0x9c>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	1d19      	adds	r1, r3, #4
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	9103      	str	r1, [sp, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfbb      	ittet	lt
 8008326:	425b      	neglt	r3, r3
 8008328:	f042 0202 	orrlt.w	r2, r2, #2
 800832c:	9307      	strge	r3, [sp, #28]
 800832e:	9307      	strlt	r3, [sp, #28]
 8008330:	bfb8      	it	lt
 8008332:	9204      	strlt	r2, [sp, #16]
 8008334:	7823      	ldrb	r3, [r4, #0]
 8008336:	2b2e      	cmp	r3, #46	; 0x2e
 8008338:	d10c      	bne.n	8008354 <_svfiprintf_r+0x130>
 800833a:	7863      	ldrb	r3, [r4, #1]
 800833c:	2b2a      	cmp	r3, #42	; 0x2a
 800833e:	d135      	bne.n	80083ac <_svfiprintf_r+0x188>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	1d1a      	adds	r2, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9203      	str	r2, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfb8      	it	lt
 800834c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008350:	3402      	adds	r4, #2
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008420 <_svfiprintf_r+0x1fc>
 8008358:	7821      	ldrb	r1, [r4, #0]
 800835a:	2203      	movs	r2, #3
 800835c:	4650      	mov	r0, sl
 800835e:	f7f7 ff3f 	bl	80001e0 <memchr>
 8008362:	b140      	cbz	r0, 8008376 <_svfiprintf_r+0x152>
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	eba0 000a 	sub.w	r0, r0, sl
 800836a:	fa03 f000 	lsl.w	r0, r3, r0
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	4303      	orrs	r3, r0
 8008372:	3401      	adds	r4, #1
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837a:	4826      	ldr	r0, [pc, #152]	; (8008414 <_svfiprintf_r+0x1f0>)
 800837c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008380:	2206      	movs	r2, #6
 8008382:	f7f7 ff2d 	bl	80001e0 <memchr>
 8008386:	2800      	cmp	r0, #0
 8008388:	d038      	beq.n	80083fc <_svfiprintf_r+0x1d8>
 800838a:	4b23      	ldr	r3, [pc, #140]	; (8008418 <_svfiprintf_r+0x1f4>)
 800838c:	bb1b      	cbnz	r3, 80083d6 <_svfiprintf_r+0x1b2>
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	3307      	adds	r3, #7
 8008392:	f023 0307 	bic.w	r3, r3, #7
 8008396:	3308      	adds	r3, #8
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	4433      	add	r3, r6
 800839e:	9309      	str	r3, [sp, #36]	; 0x24
 80083a0:	e767      	b.n	8008272 <_svfiprintf_r+0x4e>
 80083a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a6:	460c      	mov	r4, r1
 80083a8:	2001      	movs	r0, #1
 80083aa:	e7a5      	b.n	80082f8 <_svfiprintf_r+0xd4>
 80083ac:	2300      	movs	r3, #0
 80083ae:	3401      	adds	r4, #1
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	4619      	mov	r1, r3
 80083b4:	f04f 0c0a 	mov.w	ip, #10
 80083b8:	4620      	mov	r0, r4
 80083ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083be:	3a30      	subs	r2, #48	; 0x30
 80083c0:	2a09      	cmp	r2, #9
 80083c2:	d903      	bls.n	80083cc <_svfiprintf_r+0x1a8>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0c5      	beq.n	8008354 <_svfiprintf_r+0x130>
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	e7c3      	b.n	8008354 <_svfiprintf_r+0x130>
 80083cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d0:	4604      	mov	r4, r0
 80083d2:	2301      	movs	r3, #1
 80083d4:	e7f0      	b.n	80083b8 <_svfiprintf_r+0x194>
 80083d6:	ab03      	add	r3, sp, #12
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	462a      	mov	r2, r5
 80083dc:	4b0f      	ldr	r3, [pc, #60]	; (800841c <_svfiprintf_r+0x1f8>)
 80083de:	a904      	add	r1, sp, #16
 80083e0:	4638      	mov	r0, r7
 80083e2:	f3af 8000 	nop.w
 80083e6:	1c42      	adds	r2, r0, #1
 80083e8:	4606      	mov	r6, r0
 80083ea:	d1d6      	bne.n	800839a <_svfiprintf_r+0x176>
 80083ec:	89ab      	ldrh	r3, [r5, #12]
 80083ee:	065b      	lsls	r3, r3, #25
 80083f0:	f53f af2c 	bmi.w	800824c <_svfiprintf_r+0x28>
 80083f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f6:	b01d      	add	sp, #116	; 0x74
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	ab03      	add	r3, sp, #12
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	462a      	mov	r2, r5
 8008402:	4b06      	ldr	r3, [pc, #24]	; (800841c <_svfiprintf_r+0x1f8>)
 8008404:	a904      	add	r1, sp, #16
 8008406:	4638      	mov	r0, r7
 8008408:	f000 f87a 	bl	8008500 <_printf_i>
 800840c:	e7eb      	b.n	80083e6 <_svfiprintf_r+0x1c2>
 800840e:	bf00      	nop
 8008410:	08008944 	.word	0x08008944
 8008414:	0800894e 	.word	0x0800894e
 8008418:	00000000 	.word	0x00000000
 800841c:	0800816d 	.word	0x0800816d
 8008420:	0800894a 	.word	0x0800894a

08008424 <_printf_common>:
 8008424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008428:	4616      	mov	r6, r2
 800842a:	4699      	mov	r9, r3
 800842c:	688a      	ldr	r2, [r1, #8]
 800842e:	690b      	ldr	r3, [r1, #16]
 8008430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008434:	4293      	cmp	r3, r2
 8008436:	bfb8      	it	lt
 8008438:	4613      	movlt	r3, r2
 800843a:	6033      	str	r3, [r6, #0]
 800843c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008440:	4607      	mov	r7, r0
 8008442:	460c      	mov	r4, r1
 8008444:	b10a      	cbz	r2, 800844a <_printf_common+0x26>
 8008446:	3301      	adds	r3, #1
 8008448:	6033      	str	r3, [r6, #0]
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	0699      	lsls	r1, r3, #26
 800844e:	bf42      	ittt	mi
 8008450:	6833      	ldrmi	r3, [r6, #0]
 8008452:	3302      	addmi	r3, #2
 8008454:	6033      	strmi	r3, [r6, #0]
 8008456:	6825      	ldr	r5, [r4, #0]
 8008458:	f015 0506 	ands.w	r5, r5, #6
 800845c:	d106      	bne.n	800846c <_printf_common+0x48>
 800845e:	f104 0a19 	add.w	sl, r4, #25
 8008462:	68e3      	ldr	r3, [r4, #12]
 8008464:	6832      	ldr	r2, [r6, #0]
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	42ab      	cmp	r3, r5
 800846a:	dc26      	bgt.n	80084ba <_printf_common+0x96>
 800846c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008470:	1e13      	subs	r3, r2, #0
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	bf18      	it	ne
 8008476:	2301      	movne	r3, #1
 8008478:	0692      	lsls	r2, r2, #26
 800847a:	d42b      	bmi.n	80084d4 <_printf_common+0xb0>
 800847c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008480:	4649      	mov	r1, r9
 8008482:	4638      	mov	r0, r7
 8008484:	47c0      	blx	r8
 8008486:	3001      	adds	r0, #1
 8008488:	d01e      	beq.n	80084c8 <_printf_common+0xa4>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	68e5      	ldr	r5, [r4, #12]
 800848e:	6832      	ldr	r2, [r6, #0]
 8008490:	f003 0306 	and.w	r3, r3, #6
 8008494:	2b04      	cmp	r3, #4
 8008496:	bf08      	it	eq
 8008498:	1aad      	subeq	r5, r5, r2
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	6922      	ldr	r2, [r4, #16]
 800849e:	bf0c      	ite	eq
 80084a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a4:	2500      	movne	r5, #0
 80084a6:	4293      	cmp	r3, r2
 80084a8:	bfc4      	itt	gt
 80084aa:	1a9b      	subgt	r3, r3, r2
 80084ac:	18ed      	addgt	r5, r5, r3
 80084ae:	2600      	movs	r6, #0
 80084b0:	341a      	adds	r4, #26
 80084b2:	42b5      	cmp	r5, r6
 80084b4:	d11a      	bne.n	80084ec <_printf_common+0xc8>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e008      	b.n	80084cc <_printf_common+0xa8>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4652      	mov	r2, sl
 80084be:	4649      	mov	r1, r9
 80084c0:	4638      	mov	r0, r7
 80084c2:	47c0      	blx	r8
 80084c4:	3001      	adds	r0, #1
 80084c6:	d103      	bne.n	80084d0 <_printf_common+0xac>
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d0:	3501      	adds	r5, #1
 80084d2:	e7c6      	b.n	8008462 <_printf_common+0x3e>
 80084d4:	18e1      	adds	r1, r4, r3
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	2030      	movs	r0, #48	; 0x30
 80084da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084de:	4422      	add	r2, r4
 80084e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084e8:	3302      	adds	r3, #2
 80084ea:	e7c7      	b.n	800847c <_printf_common+0x58>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4622      	mov	r2, r4
 80084f0:	4649      	mov	r1, r9
 80084f2:	4638      	mov	r0, r7
 80084f4:	47c0      	blx	r8
 80084f6:	3001      	adds	r0, #1
 80084f8:	d0e6      	beq.n	80084c8 <_printf_common+0xa4>
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7d9      	b.n	80084b2 <_printf_common+0x8e>
	...

08008500 <_printf_i>:
 8008500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	460c      	mov	r4, r1
 8008506:	4691      	mov	r9, r2
 8008508:	7e27      	ldrb	r7, [r4, #24]
 800850a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800850c:	2f78      	cmp	r7, #120	; 0x78
 800850e:	4680      	mov	r8, r0
 8008510:	469a      	mov	sl, r3
 8008512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008516:	d807      	bhi.n	8008528 <_printf_i+0x28>
 8008518:	2f62      	cmp	r7, #98	; 0x62
 800851a:	d80a      	bhi.n	8008532 <_printf_i+0x32>
 800851c:	2f00      	cmp	r7, #0
 800851e:	f000 80d8 	beq.w	80086d2 <_printf_i+0x1d2>
 8008522:	2f58      	cmp	r7, #88	; 0x58
 8008524:	f000 80a3 	beq.w	800866e <_printf_i+0x16e>
 8008528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800852c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008530:	e03a      	b.n	80085a8 <_printf_i+0xa8>
 8008532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008536:	2b15      	cmp	r3, #21
 8008538:	d8f6      	bhi.n	8008528 <_printf_i+0x28>
 800853a:	a001      	add	r0, pc, #4	; (adr r0, 8008540 <_printf_i+0x40>)
 800853c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008540:	08008599 	.word	0x08008599
 8008544:	080085ad 	.word	0x080085ad
 8008548:	08008529 	.word	0x08008529
 800854c:	08008529 	.word	0x08008529
 8008550:	08008529 	.word	0x08008529
 8008554:	08008529 	.word	0x08008529
 8008558:	080085ad 	.word	0x080085ad
 800855c:	08008529 	.word	0x08008529
 8008560:	08008529 	.word	0x08008529
 8008564:	08008529 	.word	0x08008529
 8008568:	08008529 	.word	0x08008529
 800856c:	080086b9 	.word	0x080086b9
 8008570:	080085dd 	.word	0x080085dd
 8008574:	0800869b 	.word	0x0800869b
 8008578:	08008529 	.word	0x08008529
 800857c:	08008529 	.word	0x08008529
 8008580:	080086db 	.word	0x080086db
 8008584:	08008529 	.word	0x08008529
 8008588:	080085dd 	.word	0x080085dd
 800858c:	08008529 	.word	0x08008529
 8008590:	08008529 	.word	0x08008529
 8008594:	080086a3 	.word	0x080086a3
 8008598:	680b      	ldr	r3, [r1, #0]
 800859a:	1d1a      	adds	r2, r3, #4
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	600a      	str	r2, [r1, #0]
 80085a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085a8:	2301      	movs	r3, #1
 80085aa:	e0a3      	b.n	80086f4 <_printf_i+0x1f4>
 80085ac:	6825      	ldr	r5, [r4, #0]
 80085ae:	6808      	ldr	r0, [r1, #0]
 80085b0:	062e      	lsls	r6, r5, #24
 80085b2:	f100 0304 	add.w	r3, r0, #4
 80085b6:	d50a      	bpl.n	80085ce <_printf_i+0xce>
 80085b8:	6805      	ldr	r5, [r0, #0]
 80085ba:	600b      	str	r3, [r1, #0]
 80085bc:	2d00      	cmp	r5, #0
 80085be:	da03      	bge.n	80085c8 <_printf_i+0xc8>
 80085c0:	232d      	movs	r3, #45	; 0x2d
 80085c2:	426d      	negs	r5, r5
 80085c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c8:	485e      	ldr	r0, [pc, #376]	; (8008744 <_printf_i+0x244>)
 80085ca:	230a      	movs	r3, #10
 80085cc:	e019      	b.n	8008602 <_printf_i+0x102>
 80085ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085d2:	6805      	ldr	r5, [r0, #0]
 80085d4:	600b      	str	r3, [r1, #0]
 80085d6:	bf18      	it	ne
 80085d8:	b22d      	sxthne	r5, r5
 80085da:	e7ef      	b.n	80085bc <_printf_i+0xbc>
 80085dc:	680b      	ldr	r3, [r1, #0]
 80085de:	6825      	ldr	r5, [r4, #0]
 80085e0:	1d18      	adds	r0, r3, #4
 80085e2:	6008      	str	r0, [r1, #0]
 80085e4:	0628      	lsls	r0, r5, #24
 80085e6:	d501      	bpl.n	80085ec <_printf_i+0xec>
 80085e8:	681d      	ldr	r5, [r3, #0]
 80085ea:	e002      	b.n	80085f2 <_printf_i+0xf2>
 80085ec:	0669      	lsls	r1, r5, #25
 80085ee:	d5fb      	bpl.n	80085e8 <_printf_i+0xe8>
 80085f0:	881d      	ldrh	r5, [r3, #0]
 80085f2:	4854      	ldr	r0, [pc, #336]	; (8008744 <_printf_i+0x244>)
 80085f4:	2f6f      	cmp	r7, #111	; 0x6f
 80085f6:	bf0c      	ite	eq
 80085f8:	2308      	moveq	r3, #8
 80085fa:	230a      	movne	r3, #10
 80085fc:	2100      	movs	r1, #0
 80085fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008602:	6866      	ldr	r6, [r4, #4]
 8008604:	60a6      	str	r6, [r4, #8]
 8008606:	2e00      	cmp	r6, #0
 8008608:	bfa2      	ittt	ge
 800860a:	6821      	ldrge	r1, [r4, #0]
 800860c:	f021 0104 	bicge.w	r1, r1, #4
 8008610:	6021      	strge	r1, [r4, #0]
 8008612:	b90d      	cbnz	r5, 8008618 <_printf_i+0x118>
 8008614:	2e00      	cmp	r6, #0
 8008616:	d04d      	beq.n	80086b4 <_printf_i+0x1b4>
 8008618:	4616      	mov	r6, r2
 800861a:	fbb5 f1f3 	udiv	r1, r5, r3
 800861e:	fb03 5711 	mls	r7, r3, r1, r5
 8008622:	5dc7      	ldrb	r7, [r0, r7]
 8008624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008628:	462f      	mov	r7, r5
 800862a:	42bb      	cmp	r3, r7
 800862c:	460d      	mov	r5, r1
 800862e:	d9f4      	bls.n	800861a <_printf_i+0x11a>
 8008630:	2b08      	cmp	r3, #8
 8008632:	d10b      	bne.n	800864c <_printf_i+0x14c>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07df      	lsls	r7, r3, #31
 8008638:	d508      	bpl.n	800864c <_printf_i+0x14c>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	6861      	ldr	r1, [r4, #4]
 800863e:	4299      	cmp	r1, r3
 8008640:	bfde      	ittt	le
 8008642:	2330      	movle	r3, #48	; 0x30
 8008644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008648:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800864c:	1b92      	subs	r2, r2, r6
 800864e:	6122      	str	r2, [r4, #16]
 8008650:	f8cd a000 	str.w	sl, [sp]
 8008654:	464b      	mov	r3, r9
 8008656:	aa03      	add	r2, sp, #12
 8008658:	4621      	mov	r1, r4
 800865a:	4640      	mov	r0, r8
 800865c:	f7ff fee2 	bl	8008424 <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	d14c      	bne.n	80086fe <_printf_i+0x1fe>
 8008664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008668:	b004      	add	sp, #16
 800866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866e:	4835      	ldr	r0, [pc, #212]	; (8008744 <_printf_i+0x244>)
 8008670:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	680e      	ldr	r6, [r1, #0]
 8008678:	061f      	lsls	r7, r3, #24
 800867a:	f856 5b04 	ldr.w	r5, [r6], #4
 800867e:	600e      	str	r6, [r1, #0]
 8008680:	d514      	bpl.n	80086ac <_printf_i+0x1ac>
 8008682:	07d9      	lsls	r1, r3, #31
 8008684:	bf44      	itt	mi
 8008686:	f043 0320 	orrmi.w	r3, r3, #32
 800868a:	6023      	strmi	r3, [r4, #0]
 800868c:	b91d      	cbnz	r5, 8008696 <_printf_i+0x196>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	f023 0320 	bic.w	r3, r3, #32
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	2310      	movs	r3, #16
 8008698:	e7b0      	b.n	80085fc <_printf_i+0xfc>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	f043 0320 	orr.w	r3, r3, #32
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	2378      	movs	r3, #120	; 0x78
 80086a4:	4828      	ldr	r0, [pc, #160]	; (8008748 <_printf_i+0x248>)
 80086a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086aa:	e7e3      	b.n	8008674 <_printf_i+0x174>
 80086ac:	065e      	lsls	r6, r3, #25
 80086ae:	bf48      	it	mi
 80086b0:	b2ad      	uxthmi	r5, r5
 80086b2:	e7e6      	b.n	8008682 <_printf_i+0x182>
 80086b4:	4616      	mov	r6, r2
 80086b6:	e7bb      	b.n	8008630 <_printf_i+0x130>
 80086b8:	680b      	ldr	r3, [r1, #0]
 80086ba:	6826      	ldr	r6, [r4, #0]
 80086bc:	6960      	ldr	r0, [r4, #20]
 80086be:	1d1d      	adds	r5, r3, #4
 80086c0:	600d      	str	r5, [r1, #0]
 80086c2:	0635      	lsls	r5, r6, #24
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	d501      	bpl.n	80086cc <_printf_i+0x1cc>
 80086c8:	6018      	str	r0, [r3, #0]
 80086ca:	e002      	b.n	80086d2 <_printf_i+0x1d2>
 80086cc:	0671      	lsls	r1, r6, #25
 80086ce:	d5fb      	bpl.n	80086c8 <_printf_i+0x1c8>
 80086d0:	8018      	strh	r0, [r3, #0]
 80086d2:	2300      	movs	r3, #0
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	4616      	mov	r6, r2
 80086d8:	e7ba      	b.n	8008650 <_printf_i+0x150>
 80086da:	680b      	ldr	r3, [r1, #0]
 80086dc:	1d1a      	adds	r2, r3, #4
 80086de:	600a      	str	r2, [r1, #0]
 80086e0:	681e      	ldr	r6, [r3, #0]
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	2100      	movs	r1, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7f7 fd7a 	bl	80001e0 <memchr>
 80086ec:	b108      	cbz	r0, 80086f2 <_printf_i+0x1f2>
 80086ee:	1b80      	subs	r0, r0, r6
 80086f0:	6060      	str	r0, [r4, #4]
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	6123      	str	r3, [r4, #16]
 80086f6:	2300      	movs	r3, #0
 80086f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086fc:	e7a8      	b.n	8008650 <_printf_i+0x150>
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	4632      	mov	r2, r6
 8008702:	4649      	mov	r1, r9
 8008704:	4640      	mov	r0, r8
 8008706:	47d0      	blx	sl
 8008708:	3001      	adds	r0, #1
 800870a:	d0ab      	beq.n	8008664 <_printf_i+0x164>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	079b      	lsls	r3, r3, #30
 8008710:	d413      	bmi.n	800873a <_printf_i+0x23a>
 8008712:	68e0      	ldr	r0, [r4, #12]
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	4298      	cmp	r0, r3
 8008718:	bfb8      	it	lt
 800871a:	4618      	movlt	r0, r3
 800871c:	e7a4      	b.n	8008668 <_printf_i+0x168>
 800871e:	2301      	movs	r3, #1
 8008720:	4632      	mov	r2, r6
 8008722:	4649      	mov	r1, r9
 8008724:	4640      	mov	r0, r8
 8008726:	47d0      	blx	sl
 8008728:	3001      	adds	r0, #1
 800872a:	d09b      	beq.n	8008664 <_printf_i+0x164>
 800872c:	3501      	adds	r5, #1
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	9903      	ldr	r1, [sp, #12]
 8008732:	1a5b      	subs	r3, r3, r1
 8008734:	42ab      	cmp	r3, r5
 8008736:	dcf2      	bgt.n	800871e <_printf_i+0x21e>
 8008738:	e7eb      	b.n	8008712 <_printf_i+0x212>
 800873a:	2500      	movs	r5, #0
 800873c:	f104 0619 	add.w	r6, r4, #25
 8008740:	e7f5      	b.n	800872e <_printf_i+0x22e>
 8008742:	bf00      	nop
 8008744:	08008955 	.word	0x08008955
 8008748:	08008966 	.word	0x08008966

0800874c <memmove>:
 800874c:	4288      	cmp	r0, r1
 800874e:	b510      	push	{r4, lr}
 8008750:	eb01 0402 	add.w	r4, r1, r2
 8008754:	d902      	bls.n	800875c <memmove+0x10>
 8008756:	4284      	cmp	r4, r0
 8008758:	4623      	mov	r3, r4
 800875a:	d807      	bhi.n	800876c <memmove+0x20>
 800875c:	1e43      	subs	r3, r0, #1
 800875e:	42a1      	cmp	r1, r4
 8008760:	d008      	beq.n	8008774 <memmove+0x28>
 8008762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800876a:	e7f8      	b.n	800875e <memmove+0x12>
 800876c:	4402      	add	r2, r0
 800876e:	4601      	mov	r1, r0
 8008770:	428a      	cmp	r2, r1
 8008772:	d100      	bne.n	8008776 <memmove+0x2a>
 8008774:	bd10      	pop	{r4, pc}
 8008776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800877a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800877e:	e7f7      	b.n	8008770 <memmove+0x24>

08008780 <_realloc_r>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	4607      	mov	r7, r0
 8008784:	4614      	mov	r4, r2
 8008786:	460e      	mov	r6, r1
 8008788:	b921      	cbnz	r1, 8008794 <_realloc_r+0x14>
 800878a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800878e:	4611      	mov	r1, r2
 8008790:	f7ff bb4a 	b.w	8007e28 <_malloc_r>
 8008794:	b922      	cbnz	r2, 80087a0 <_realloc_r+0x20>
 8008796:	f7ff fc99 	bl	80080cc <_free_r>
 800879a:	4625      	mov	r5, r4
 800879c:	4628      	mov	r0, r5
 800879e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a0:	f000 f814 	bl	80087cc <_malloc_usable_size_r>
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d20f      	bcs.n	80087c8 <_realloc_r+0x48>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4638      	mov	r0, r7
 80087ac:	f7ff fb3c 	bl	8007e28 <_malloc_r>
 80087b0:	4605      	mov	r5, r0
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d0f2      	beq.n	800879c <_realloc_r+0x1c>
 80087b6:	4631      	mov	r1, r6
 80087b8:	4622      	mov	r2, r4
 80087ba:	f7ff fb1f 	bl	8007dfc <memcpy>
 80087be:	4631      	mov	r1, r6
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff fc83 	bl	80080cc <_free_r>
 80087c6:	e7e9      	b.n	800879c <_realloc_r+0x1c>
 80087c8:	4635      	mov	r5, r6
 80087ca:	e7e7      	b.n	800879c <_realloc_r+0x1c>

080087cc <_malloc_usable_size_r>:
 80087cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d0:	1f18      	subs	r0, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bfbc      	itt	lt
 80087d6:	580b      	ldrlt	r3, [r1, r0]
 80087d8:	18c0      	addlt	r0, r0, r3
 80087da:	4770      	bx	lr

080087dc <_init>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr

080087e8 <_fini>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr
